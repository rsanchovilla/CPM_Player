

















                      DASOFT Design Systems, Inc.

                     Design Automation User Manual


                            Version 2.6
                             June,1985




























All rights reserved.  No part of this publication may be
reproduced without the prior written permission of DASOFT Design
Systems, Inc.  Please call (415) 486-0822.

(c) DASOFT Design Systems, Inc.











                   DASOFT Design Systems, Inc.

                      Limited Warranty


The only warranty made by DASOFT Design Systems, Inc., is that
the diskettes shipped contain the current release of the DASOFT
Design Automation software and are in a form which can be read on
a standard CP/M computer system with 8" or 5 1/4"floppy disk
drives.  If DASOFT determines in good faith that a diskette is
faulty, and has not been subjected to misuse, and if it is
returned to DASOFT or the DASOFT dealer from whom it was
purohased within ten days of purehase, it will be replaeed at n@ 
charge.  DASOFT will do its best to inform the customer of
significant corrections or errors which may be found by DASOFT to
occur in the programs for one year after customer purchase IF
CUSTOMER HAS RETURNED THE SIGNED LICENSE AGREEMENT.

DASOFT MAKES NO OTHER WARRANTIES, EITHER EXPRESSED OR IMPLIED. 
DASOFT MAKES NO WARRANTY OF FITNESS OF PURPOSE OR
MERCHANTABILITY, NOR SHALL DASOFT BE LIABLE FOR INDIRECT, SPECIAL
0~ CONSEQUENTIAL DAMAGES SUCH AS LOSS OF P~OFITS OR INABILITY TO
USE THE SOFTWARE.  IN ANY CASE, OUR LIABILITY SHALL BE LIMITED TO
REFUND OF THE DASOFT SOFTWARE LIST PRICE.






                  DASOFT Design Systems, Inc.
                 Design Automation User Manual


                    Table of Contents

             System Serial Number:                  
CHAPTER                                                   PAGE

1         Introduction                                    1-1
   1.1    System Overview - The Master Menu               1-2
   1.2    DASOFT System Installation                      1@4
   1.3    Step-by-step Installation                       1-8

2         Learning the System                             2-1
   2.1    General Information                             2-2
   2.2    General COMPONENT Information                   2-3
   2.3    Design Automation Hints                         2-6

3         Macro Library Editor                            3-1
   3.1    Create Pin Combinations                         3-3
   3.2    Create Pad Footprints                           3-8
   3.   Add New Macro Device                            3-14
   3.4    Edit Existing Pin Combo by Number               3-32
   3.5    Edit Existing Pad Combo by Number               3-33
   3.6    Edit Existing Macro by Number                   3-34
   3.7    1.ist Devices in Library                         3-35
   3.8    Transfer Devices Between Libraries              3-36
   3.9    Delete Existing Devices by Number               3-38
   3.10   Save Edited File and Exit                       3-39
   3.11   Exit Without Saving File                        3-39

4         Design Editor                                   4-1
   4.1    Edit Design Info Header                         4-3
   4.2    Edit Comment Blocks                             4-7
   4.3    Implicit Add New Device                         4-10
   4.4    Implicit Edit Entered Device                    4-20
   4.5    Load a New Macro File                           4-22
   4.6    List Devices in Macro Library                   4-23
   4.7    List Devices Used in Design                     4-25
   4.8    Save This DRL File as Edited                    4-27
   4.9    Exit Without Saving File                        4-28
   4.10   Prevent Future File Changes                     4-28

5         Outline Editor                                  5-1
   5.1    Enter/Edit Board Outline                        5-3
   5.2    Enter/Edit Power Grid Lines                     5-7
   5.3    Mounting Hole Entering/Editing                  5-9
   5.4    Define Pad Size                                 5-11
   5.5    Save File and Exit                              5-13
   5.6    Exit Without Save                               5-13






6         Route Editor                                    6=1
   6.1    Using The Route Editor                          6-1
   6.2    Add Trace Command                               6-5
   6.3    Erase Lines                                     6-6
   6.4    Add Fat Grid Lines                              6-7
   6.5    Print Number of Unrouted Nets                   6-8
   6.6    Show Coordinates of Next Unroute                6-9
   6.7    PAD <1>...Change Default Pad Size               6-10
              <E>.@@Erase Pad
   6.8    Save File and Exit                              6-11
   6.9    Quit Without Save                               6-11

7         Non-Interactive Programs                        7-1
   7.1    Automated Logic Drawing Generation              7-1
   7.2    Documentation Generation                        7-5
   7.3    Compiling the Printed Circuit Information       7-10
   7.4    Board Artwork Utility                           7-13

8         BORDROUT                                        8-1
   8.1    BORDROUT                                        8-1

9         Plotting Routines                               9-1
   9.1    ALDPLOT                                         9-2
   9.2    BORDPLOT                                        9-5

10        Technical System Information                   10-1
   10.0   Block Diagrams                                 10-1
   10.1   DASOFT Load Kernal and Full Screen Package     10-8
   10.2   Plotter Intarface Control Subroutines          10-15
   10.3   Graphics Interface Subroutines                 10-20
   10.4   How the DRL File is Stored in Memory           10-27
   10.5   Macro File Storage                             10-37
   10.6   Storage of the FILENAME.RBN File               10-45
   10.7   File Storage for the Routed Artwork File       10-47

APPENDICES

A         Pin Tip - Line Width Chart                      A-1

B         PIN and PAD Refereneas - TTL Macro Library      B-1

C         Patchas                                         C-1


GLOSSARY                                                  G-1

INDEX                                                     I-1




                                                        1-1









          CHAPTER 1    INTRODUCTION











The DASOFT Design Automation system is a tool that can
be used by anyone familiar with electronic designing. 
You won't need any previous knowledge of design
automation and specific experience with computer
hardware is not required, but a basic understanding of
CP/M is helpful.  All areas of the package are largely
self-prompting and a series of HELP screens can be
accessed from any menu in the system.

Chapter 1 gives a brief overview of the system. It also
includes a description of the installation proc+dure
used to configure the software for your computer. 
Chapter 2 presents general information about the use of
the system.  Chapters 3 through 9 give in-depth
information about each step in the DASOFT system. 
Chapter 10 is a more technical discussion of the DASOFT
software with special emphasis on program and file
storage formats.  Thcre are three Appendices:  A. a pen
width chart, B.  listings of pad footprints and pin
combinations supplied in the sample files, and C. 
sample input screens for several different types of
components.


If you're just learning DASOFT, this manual is best used
in conjunction with the DASOFT Training Guide.  The
"Guide" offers you a step-by-step walkthrough of the
entire system.  Then, for more detail, you can refer to
the appropriate chapters in this manual.








                                               INTRODUCTION




1@2




    1.1  Overview


    The DASOFT Design Automation process is quite simple. 
    The data entry consists of only a few basic steps:


    1. Create a component (Macro) library of the parts to be
    used.  The entry for each @omponent contains a
    description of the footprint for the device, information
    on the number of elements in the package, and pin names
    and functions (control in, control out, data in, data
    out, or power) from the data book.  The component
    library can be created or edited with the "A" option on
    the Main Menu.

                                                           u@ 

                                                             !|


                          
                    -T                                   @.'@@+@@@

                     L    |.                             @c

Footprint            1                               Pin Names and
                                                       Functions

                     Pin Combinations


    2. Create a design file in which each part is assigned a
    cation on the schematics and on the PCB board and each
    pin used is assigned a NETNAME (thereby defining inter-
    connections).  The design file for each PCB produced can
    be modified at any time and all documentation will
    automatically be updated.  Option "B" on the Main Menu
    is used to build your design file.

    3.  Create the board outline, power grid and mounting
    holes in the outline editor.

    4.  Compile the Design (DRL), Part (MAC) and outline
    information into a file the router can use through use
    ,f the printed circuit generation option.







INTRODUCTION




                                                            1@3



    5.  Run the Autorouter to let the system calculate trace
    routes.  The re-entrant feature of the router allows you
    to "pre-route" critical traces with the Route Editor. 
    Sections of the board can also be designated as off-
    limits to the router.  Any traces that can't be
    completed by the router will be listed so you @an add
    them with the Route Editor.  (Unroute listings are
    printed at the end of the Matrix printout and can be
    shown on the screen in the Route Editor.)


    6.  Edit the automatically routed artwork.  The Route
    Editor can be used to make changes in the artwork.  This
    means that you can really have final control over the
    artwork you are producing.

    This process is reflected in the Main Menu for the
    system:




   CMD?                                  DASOFT DESIGN AUTOMATION 2.6


CIRCUIT DESIGN AND DOCUMENTATION - PRINTED CIRCUIT BOARD GENE~ATION

(A) Macro Device Library EDITING (E) Physical Board OUTLINE Spec
(B) Design Requirements List EDITING (F) Printed Circuit GENERATION
(C) Automated Logic Drawings GENERATION (G) Routed Board EDITING
(D) Documentation GENERATION            (H) Board Artwork UTILITIES

-- DASOFT SYSTEM COMMANDS --      -- DASOFT PROGRAMS RUN FROM CP/M--

 (Q) EXIT to operating system                    ALDPLOT.COM
 (N) show NEXT command menu                      BORDROUT.COM
 (?) for HELP                                    BORDPLOT.COM
 (:) Select PROGRAM drive or default DATA drive
      Currently:
                  Program Drive = A
                     Data Drive = A




    A summary of the system is provided in the Training
    Guide and we suggest you spend a few minutes looking
    over the Main Menu and the System Flow Chart.  This
    should give you a feel for how the system is put
    together and how each routine interacts with you and
    with the other parts of the system.





                                                   INTRODUCTION




1-4


    1.2  DASOFT SYSTEM INSTALLATION


    The DASOFT system, like many other software packages on
    the market today, uses screen oriented input.  This is
    an easy-to-use, straightforward way of entering data
    but it requires interfacing the software to the
    terminal.  Because of the very large, and growing,
    number of terminals on the market today, it is
    impossible to provide software pre-configured for every
    user's system.  Therefore, we, like most other software
    vendors, have written an installation routine that
    allows each customer to configure the package for the
    hardware on which it will be used.  We have tried to
    make this process as simple as possible.  If you have
    any questions after you have been through the procedure
    as outlined both here and in the Training Guide, please
    give us a call and we will try to help you out over the
    phone. Since many important things about the system
    are determined in the install routine, close attention
    should be paid here.


    The first step of the installation of a DASOFT system is
    license registration.  Please be sure to return your
    signed license agreement to DASOFT BEFORE starting up
    the installation routine.  We cannot offer any software
    assistance unless the signed agreement is in our files.


    The system is usually shipped on two diskettes:  one for
    program files and one for data and source files.  (If
    your computer has drives with a more limited capacity,
    there may be more disks involved.) Before starting the
    Installation process, be sure you make copies of the
    diskettes you received from DASOFT.  Always work from a
    copy, keeping your masters write-protected.  (From time
    to time, you will want to take advantage of our update
    service and will be asked to send your original disks
    back to DASOFT for re-mastering.  So keep them in a safe
    and convenient place.)
















INTRODUCTION








The disks you receive should contain at least the
following files:


PROGRAM files:                         Reference files:

DASOFT.COM @   OUTLINE.26.                 **DASOFT.ASM @@@
INSTALL.26.    OUTOVL.OVL@                  TGRAPHS.ASM@.@@
DESEDIT.26@@   BORDCOMP.26 @                 PLOTTER.ASM @
PARTEDIT.26-   BORDROUT.26.@=@               PRETEND.RTE @-
ALDCOMP.26@    BORDEDIT.26-                 PRETEND.DRL..
NETLIST.26@    MATRIX.26 ..                  PRETEND.MAC .-
WIRELIST.26@   BORDPLOT.COM @@               PRETEND.OTL -
ALDPLOT.COM@   PLOTTER.CTL@                 PRETEND.RTE @
DSMSGS.26@.    TGRAPHS.CTL@



Reference files are not required for operation.


** The DASOFT Load Kernal, DASOFT.ASM,@ is shipped only
on request.)


Remember that microcomputers are notorious for
occasionally dropping bits out of memory, especially
when dynamic RAMs are involved or, in an industrial
environment, where large electrical loads are being
switched.  Keep plenty of backup copies.  Making backups
is often your only safeguard against these kinds of
system crashes and the subsequent loss of data and time.


The INSTALL routine uses three files:  DASOFT.COM,
TGRAPHS.CTL and INSTALL.26.  These files should be on a
single work diskette and, when the installation is
complete, a fourth file will be created:  DS.COM.  This
new file is the command file you will use in each DASOFT
work session in the future as it is configured for your
hardware.  It should be moved to your working "program"
diskette for day-to-day operation.














                                               INTRODUCTION




1-6



    To use the INSTALL routine, you should have a standard
    80 by 24 character terminal with clear screen controls
    which require th characters be sent to the terminal,
    and cursor addressing controls of the form CODE--CODE--
    XVAL--YVAL.  If your terminal has special graphics
    characters that include horizontal and vertical bars and
    corners, the INSTALL routine will allow you to enter
    this information so that you may take advantage of these
    added features in the graphics mode.

   he information needed at any point is clearly explained
    by the system as it requests the data, but some general
    notes  input format may be helpful.



    1.2.1  FULL SCREEN COMMANDS AND DATA

    The DASOFT system uses an input format known as 'Full
    Screen Mode' to allow you to enter and edit several
    fields of information at one time, or to choose an
    action from a displayed menu.  WHENEVER THE SYSTEM IS IN
    FULL SCREEN MODE, THE WORD 'CMD?' WILL APPEAR IN THE
    UPPER LEFT HAND CORNER OF THE SCREEN.  The CMD?  line
    indicates that the system is waiting for you to enter
    data.  Some type of data, be it a letter, number, or
    command, must be entered after the CMD? line followed by
    a carriage return before any action may take place.


    Often, in full screen mode, a menu is displayed and all
    that you need to enter is the menu command.  Other
    times, prompt fields are displayed on the screen
    followed by a colon (:).  The colon indicates that there
    is a data field that needs to have data entered
    (underline segments specify the number of characters
    allowed).  If a carriage return is typed WITH NO DATA ON
    THE CMD?  LINE then the CR acts as a Cursor Scroll Down
    command.  This will allow you to position the cursor at
    the beginning of a field and enter data.


    If you need more information about which structures can
    be accomodated, read CHAPTER 10 as it details the
    routines and information that use these full screen mode
    control keys.










INTRODUCTION




                                                        1@7



1.2.2  NON FULL-SCREEN INSTALLATION ENTRIES

At various times during the installation procedure, data
will be requested while NOT in full screen mode.  This
is indicated by the cursor remaining at the b@ginning of
the prompt line which is requesting the information. 
Generally, the data requested is either in the form of a
single letter or number, or in the form of a TWO DIGIT
HEXADECIMAL NUMBER.  We stress that this number is two
digits, and if it is less than 10hex, the upper digit
must be 0, such as 02hex not 2.  Pay attention to the
prompts printed by the routine which specify the
required data format for entry.

Once the system has been installed, you can access the
design system simply with the command:  A>DS (RET).  The
install program and the DASOFT.COM file don't have to be
kept on the disk after the first installation run.





































                                               INTRODUCTION




1-8




    1.3    Step-by-step installation



    Working on a COPY of your master disk, from CP/M type: 


    A>DASOFT INSTALL


    The following screen should appear on your CRT:




        DASOFT DESIGN AUTOMATION SYSTEM   Version 2.6
    -------------------------------------------------------
                  INSTALLATION ROUTINE
    -------------------------------------------------------


    Before starting you will need the following information:

        1) The CLEAR SCREEN COMMAND for your terminal

        2) The CURSOR POSITIONING COMMAND for your terminal

        3) How to generate special graphics characters, such as
           corners, and vertical bars, on your terminal
           (Optional, but a nice option).

     ---------------------------------------------------------
           Press any key to continue, Q to QUIT
     ---------------------------------------------------------





    Typing a "Q" here will allow you to stop the
    installation process and return to CP/M.














INTRODUCTION



                                                                     1@9





             Typing any other key, (a carriage return, for instance)
             will cause the next screen to appear:


         ---------------------------------------------------------------
                            PRE-DEFINED TERMINALS
         ---------------------------------------------------------------

              (A) Televideo 950                (B) Televideo 912/920
              (C) Televideo 910                (D) ADM-3
              (E) Heath H-19                   (F) Hazeltine 1500
              (G) ADDS Regent 25               (H) DMS-3/F "Fox"
              (I) IBM 3101 Terminal            (J) TRS-80 II P&T CP/M
              (K) MicroTerm ACT-V              (L) TEC model 571
              (M) FlashWriter II               (N) Visual 200
              @0) VIDEX Apple board            (P@ BIT-3 Apple board
              (R) Dialogue 80                  (S) VT-100
              (T) HP-125                       (U) not installed
              (Z) None of the above            (Q) QUIT

         ----------------------------------------------------------
 
         Press <RETURN> if you want to skip this section.

                     Enter your choice:




             If the terminal you are using is listed, enter its
             number and proceed to the next screen.


             If your terminal is not listed, you may want to try some
             of the listed options just to see if they might work. 
             There is frequently some overlap among terminals and
             many have the ability to emulate certain others.

















                                                            INTRODUCTION




1-10




    If you can not find an option that works with your
    terminal, select the "Z" option and the customization
    screen will come up:




Installing a terminal which is not menu selectable: 
------------------------------------------------------
If an item requires entering more than a single value
these values should be separated by spaces.  Values are
cssumed to be hexadecimal.  However, a value can be
entered in decimal if the sign "#" is entered first. 
For instance, you could enter either 1B or #27. 
Eleven items are needed to install a terminal:


1. Clear screen command                         (1-7 chacters)
2. Cursor positioning lead-in string            (1-7 characters)
3. Cursor string sent between row & column (0-7 characters)
4. Cursor positioning string sent after both row
   and column                                 (0-7 characters)
5. X coordinate offset                          (Usually 20 hex)
6. Y coordinate offset                          (Usually 20 hex)
7. Which coordinate is sent first               (Normally Y,X)
8. Whether the coordinates are sent in ASCII or HEX
   and if in ASCII, how many characters are sent. 
 9. Number of NULLS to be sent before cursor positioning string. 
 10.Inverse ON string                            (0-7 characters)
 11.Inverse OFF string                           (0-7 characters)


             ENTER ANY CHARACTER TO CONTINUE






















INTRODUCTION




                                                            1-11





                         Enter name of terminal:

                      Enter CLEAR SCREEN string:

                Enter CURSOR POSITIONING string: 

Enter the string separating the two coordinates:

    Enter string to send after both coordinates:

                        Enter INVERSE ON string:

                       Enter INVERSE OFF string:

          Enter the COLUMN offset (Default 20H):

         Now enter the @OW offset (Default 20H):

Enter 0 if the row offset is to be sent first.
                  Otherwise enter 1 (default 0):

Enter number of NULLS to be sent before the
          cursor positioning string (default 0):

            Are the changes made correct? (Y/N):





    Following the final entry above, the system will return
    to the general installation routine:





















                                                   INTRODUCTION




1-12





CMD?               

         You are now in FULL SCREEN MODE. 
In this mode RETURN will move the cursor to the next data field.

Enter the characters you wish to use to control the cursor
during full screen editing.

If this screen does not appear correct, your CLEAR SCREEN,
CURSOR CONTROL or INVERSE strings are incorrect.

               Cursor UP key : <
             Cursor DOWN key : >
             HOME cursor key : /
            DELETE FIELD key :          (control X)
        DELETE CHARACTER key :          (control D)

Are these keys preceded by an escape character?(Y/N) :

After filling in the data, enter any key on the command line
(followed by a return) to continue, "Q" always QUITS.





    If you want to use the default cursor controls, hit any
    character (then a carriage return) on the command line
    and the system will save the commands shown.  Typing a
    return on the CMD?  line will move the cursor to the
    first input field so that you can enter a different key
    for "Cursor up", etc.


    When filling in the above screen, be sure to hit a
    return after each entry.  This will bring the cursor
    back to the next entry if, being echoed back to the
    terminal, it has moved to another area on the screen.

    It is important to note that only ASCI printable
    characters can be entered through this screen.  Thus 7Fh
    (BS) cannot be installed as the delete character code. 
    Non-printing codes can be loaded into the installed
    kernal if you wish.  Instructions are in the Appendix
    labeled "Patches."









INTRODUCTION




                                                                     1@13


             The next screen in the installation routine offers
             several options:




           CMD?          
                      Select function by letter

                      (P)  Test PLOTTER driver

                      (G)  Install GRAPHICS driver

                      (T) Install TERMINAL

                      (R) RECONFIGURE editor MEMORY allocation

                      (D) Set default P~OGRAM and DATA drives

                      (S) SAVE and EXIT to DASOFT system

                      (Q) Exit to CP/M system






             These options can be used as follows:



             (P)  Test PLOTTER driver

             At this point you can run a test routine on your plotter
             and plotter driver.  If everything is operating
             correctly, a large DASOFT logo should be plotted.  Note: 
             this will only work if the proper plotter driver is
             installed and the plotter and computer port are properly
             connected and initialized.  We suggest you wait until
             you are more familiar with operation of the system
             before testing the plotter.



             (G) Install GRAPHICS driver

             This option allows you to customize your DASOFT system
             for the particular graphics characters available on your
             CRT.  The keys that you want to use to move the cursor
             around on the screen while in graphics mode can also be
             defined in this section.




                                                            INTRODUCTION




1-14



    The first screen under this  graphics option is




The aim of this section is to:

Install  the  TGRAPHS.CTL  program for use  in  ARTWORK EDITING.

If you have COLOR graphics and wish to use then with the system as an
option, you will -ALSO- need to install the TGRAPHS.CTL routines as
explained in the manual.

If no COLOR graphics are used, no other action than this routine
need be taken.


  Press any key to continue, Q to QUIT




    If anything other than Q is typed, the next screen will
    appear.




CMD?                

Define below the keys you wish to use for:
   CURSOR CONTROL in GRAPHICS MODE when editing PCB ARTWORK

The defaults shown are for a 10-KEY PAD, as shown in the manual. 
These keys are usually defined differently from the FULL SCREEN
mode cursor movement keys.


             MOVE cursor (NO DRAW) : ,
           DRAW when moving cursor : .
      SET A PAD at cursor location : 0
           Cursor active on SIDE 1 : 7
           Cursor active on SIDE 2 : 9
              SPECIAL FUNCTION key : 5
                  Cursor UP 1 grid : 8
                Cursor DOWN 1 grid : 2
                       Cursor LEFT : 4
                      Cursor RIGHT : 6

Press any key when on command line to oontinue, Q will always QUIT






INTRODUCTION




                                                         1@15





   You will probably not need or want to change the screen
   above and can hit any key (other than return, which
   would step you through the key selection) on the CMD? 
   line to get the next screen.







Does your terminal have SIMPLE GRAPHICS CHARACTERS
such as HORIZONTAL, VERTICAL LINES and CORNERS@
  (Y/N/Q)









   An "N" will take you back to the option menu where you
   can type an "S" to exit to DASOFT.


   "Q" will abort the graphics installation session. 


   A *Y" answer will bring up the next installation screen.























                                                  INTRODUCTION




1-16





To install SIMPLE GRAPHICS CAPABILITIES:

Enter the hex code for any characters and command codes necessary
to generate each character as it is requested, followed by the
<return> key at the end of the string.  (SEE MANUAL FOR MORE)

Enter characters as 2 digit hex numbers separated by spaces. 
A sign # may be used if you wish to enter this data in decimal. 
Each string must NOT exceed 7 values.

Press any key to continue, "Q" TO QUIT

        HORIZONTAL LINE SEGMENT character:
          VERTICAL LINE SEGMENT character:
              UPPER LEFT CORNER character:
             UPPER RIGHT CORNER character:
              LOWER LEFT CORNER character:
             LOWER RIGHT CORNER character:
Do you wish to TEST the GRAPHICS? (Y/N/Q):



    NOTE:  if your system uses a "$" as a control character
    see note below.

    A "Y" on the bottom line should produce the following
    message with a small square beneath it.




Below there should appear a box done in GRAPHICS characters. 
If it does not appear correct, check your terminal manual and try again
       ** IMPORTANT ** If it is not correct,
       enter a Q so that the GRAPHICS FILE will not
       be changed before your next try.

Press any key to continue, Q QUITS.





    Note:  Users of the Televideo 950 and terminals which
    use its code set should substitute A4H for the first
    character in each of the line segment entries above. 
    (The 24H = $ is read by the system as an end of line
    and will abort the entry.)






INTRODUCTION




                                                        1-17



Some terminals require one or more characters to "turn
on" graphics mode and some also require a "turn off"
string.  Your terminal manual should help with this
information.

Example graphics character codes:

                      VIDEX            BABY BLUE

Horizontal           1A 1A           1B A4 44 1B 25
Vertical             1A 15           1B A4 33 1B 25
Upper left           1A 16           1B A4 5A 1B 25
Upper right          1A 1C           1B A4 3F 1B 25
Lower left           1A 13           1B A4 40 1B 25
Lower right          1A 19           1B A4 59 1B 25





(T)   Install TERMINAL

The "T" option will allow you to alter the terminal
driver that the system uses.  This process is the same
as the one first used in the install routine.




(R)   RECONFIGURE editor MEMORY allocation

If option "R" is chosen, the system will look to see how
much memory you have and then set the appropriate bytes
in the DRL (Design Requirements List) editor.  This
option enables the er to take advantage of a larger
memory size (up to 64K) and thereby produce larger
designs.  There is no overt @ign of activi on the
screen; whan the function is @omplete and the DRL file
has been saved back to disk, the options are again
displayed.















                                               INTRODUCTION



1-18




    @D)   Set default PROGRAM and DATA drives

    This option allows you to specify which drives the
    system will use for storage of program files and data
    files.  ONLY THE DEFAULTS ARE SET HERE.  At any time,
    the d+faults may be overridden from the main menu (the
    ":" option).

    If you ever happen to bring up your DASOFT system with
    the drive assignments different from the defaults, you
    may get, instead of the Main Menu, an error message that
    says

       Error in reading overlay.

    Here you have two options.  You could type a "Q" and
    return to CP/M and either re-arrange the diskettes or
    re-install DASOFT, OR, you could simply select the
    default drive option ":" (while the error message is
    still on the screen).  This will bring up the routine
    for re-defining the program and data drives and will
    then return you to the Main Menu.





    At this point the installation is complete.  Typing any
    key other than "Q" will return you to the option menu
    where you can type "S" to save and exit to the DASOFT
    master menu.

    If you complete the installation process and exit with
    an "S" to save the installed system, a new file, DS.COM,
    will be created on your disk.  This file, DS.COM, is the
    installed version of your DASOFT software and you will
    use it in future work sessions.  The files DASOFT.COM
    and INSTALL.26 @an be removed from the working disks. 
    (Copies will still exist, of course, on your master
    disks.)















INTRODUCTION




                                                       2@1








      CHAPTER 2     Learning the System






The DASOFT system is intended to be as easy for a
newcomer to use as possible.  If you pay attention to
the menus and message prompts, the design process should
be self-explanatory.  ONE EXCEPTION to this rule is the
creation of MACRO files.  When creating parts in the
parts library, it is ABSOLUTELY ESSENTIAL that you know
what you are doing.  BEFORE ATTEMPTING TO CREATE A
MACRO, READ CHAPTER 3 ON MACRO EDITING.  Guessing at the
use of a field or entering incorrect data will yield
incorrect designs, even incorrect printed circuit
artwork.  BE CAREFUL.


Please take the time to do two things.  1.) Read the
manual - at least the introduction and Chapters 2
through 9.  2.) Create a practice design file, one with
only 2 or 3 simple devices.  Take this simple board
through the complete process; get a plot of the artwork
for it.  You will find that going through the system
quickly once will allow you to avoid time-consuming
errors on your "real" design.



The DASOFT Training Guide is a good way to practice with
the system.  Using a very straightforwa format, the
Guide steps you through a simple design from component
definition to artwork plots.















                                       LEARNING THE SYSTEM




2-2




    2.1  General Information


    There are several conventions that have been included in
    this version of DASOFT that should be noted.


    a.  File names will default.  This means that within any
    particular work period, once you have entered a design
    name, that name will stay with the system unless you
    specify a different name on the CMD?  line.  The design
    file name may be entered on the command line when you
    first call up the DASOFT program:

          A>DS PRETEND

    You can select a design file on another drive by
    preceding the filename with the drive designator:

          A>DS B:PRETEND



    b.  The system knows when a single key entry is required
    and when there is a possibility of multiple character
    entries.  If only one character is required, the screen
    will clear immediately on reading a keystroke.  If more
    than a single key is needed, or possible, a carriage
    return will be required to actually enter the command.



    c.  At various stages throughout the system, automatic
    backup files are created as you exit an edit session. 
    When you exit from the Macro Library Editor, after
    editing a pre-existing file, the system will create a
    file called filename.MAK.  This is a backup of the
    current filename.MAC file.  Likewise,. filename.BAK is a
    backup of the current filename.DRL file.  You should
    make regular full backups of all your work, but should
    you get behind, the system will make these crucial files
    without your specific input.



    d.  Every DASOFT system is shipped with a complete set
    of sample files.  These files all have a filename of
    PRETEND and are for the EPROM Emulator board used in our
    samples.  You may use this file as an example, edit it,
    plot it or delete it as you wish.





LEARNING THE SYSTEM




                                                                    2@3



             2.2  General COMPONENT Information


             ALTERNATE FORMS OF GATES

             Although components are listed in the library simply as
             7400, 7485, etc., the designer must often use either
             different technologies or different LOGICAL
             representations of gates to accurately document his
             design.  Several extensions can be added to the simple
             macro name to denote these changes.  Note that while
             these extensions apply to the use of the package in a
             design, (and therefore the added information is entered
             in the DESIGN FILE) only the external or logical
             functionality is changed; the library entry is still the
             "general" specification for the device, i.e. 7400.



 
             DeMORGAN EQUIVALENT FUNCTIONS

             Even though a gate is defined as one logical element by
             the macro or data book, such as an NAND gate for a 7400,
             it is possibl+ to use the same gate in an OR function. 
             It is very important that this usage be denoted in the
             logic diagrama to maintain the easy transfar of the
             designer's intentions through the schematic.  TO USE THE
             EQUIVALENT FUNCTION, USE A "*" AFTER THE MACRO NUMBER. 
             An example would be to ask for an OR gate by using a
             command such as 7400* .




             DIFFERENT GATES WITHIN A CHIP

             In many packages, th@re are multiple separate logical
             elements available at different pins on the package. 
             The different pin combinations are called and denoted in
             the DRL file through an alphabetical suffix appended to
             the MACRO AND UNIT NUMBERS.  This suffix is a single
             character, starting with A for the first and using as
             many characte@s as necessary for the number of gates in
             the package.  Using this suffix will cause the correct
             pin numbers to appear on the schematics, and these
             numbers can be either called originally when adding the
             gates or added later when editing.  If no extension is
             specified, all multi-gate packages default to an "A"
             suffix.  (ONLY the "A" gate and a PIN combination are
             entered in the Macro library.  Technology types are
             specified only in the DRL file.)



                                                    LEARNING THE SYSTEM




2-4




    Note that the GATE suffix is added in the SECOND
    character position so that it and the DeMorgan suffix
    may be used simultaneously.  For example, the second
    gate (pins 3,4,5) of a 7400 would be denoted 7400-B
    (note the dash used), and the sixth inverter in a hex
    inverter chip with the DeMorgan equivalency used would
    b@ 7404*F .

    When the gate appears for editing, the * marking will
    still be shown in the GATE NUMBER field (and can be
    changed), but the alphabetical suffix (specifying which
    gate it is) will not.  This suffix, instead, will appear
    as a suffix on the UNIT NUMBER.  Specifying a 7400*B,
    then will yield a gate number of 7400*, and a unit
    number of U01B.  The entire unit number, including the
    "*" and the gate letter, must be specifiad to edit the
    gate.

    In  placing  a package with multiple gates  on  the  PCB
     board, all gates must be entered in the DRL file with
     the SAME PCB location and orientation.  That is, you are
     placing PIN 1 of the component at an X-Y location, not
     each gate.
































LEARNING THE SYSTEM




                                                       2-5



TECHNOLOGY TYPES

The need sometimes arises to specify the particular
technology of logic being used.  The following
technologies are currently recognized by the Design
Editor:  LS, S, H, C, ALS, F, and HC. When using a
strange technology or even one of the above types
exclusively in a design, you may find it easier to not
specify the technology type on each gate and instead use
the comment editor to denote the technology used in a
comment on the first page.

THE TECHNOLOGY ABBREVIATION IS USED ONLY ON TYPE 1 AND
TYPE MACROS (see Chapter 3 or the Glossary for Type
definitions), AND IS SPECIFIED AFTER THE FIRST TWO
DIGITS OF THE MACRO NUMBER.

The first two digits are usually referred to as the
,family, of logic, such as 7400 family, 9900 family,
etc.  The one or two letter technology type may then be
added, followed by the rest of the macro number.  These
are some examples of macro entries which are valid:


           7400, 74LS92, 74COO*, 74S393, 54H08-C


NOTE:  The technology type is entered in the Design
Editor at the time the component is called into the
design.  This information is NOT entered in the Macro
Library.
























                                       LEARNING THE SYSTEM




 2-6



     2.3   DESIGN AUIOMATION HINTS



     With any system, experience makes the job easier. 
     Described below are certain "hints" that have been
     offered by DASOFT users.


     2.3.1  Schematic Logic Block Placement


     When placing logic blocks, plan on showing up to four
     levels of logic on a page.  These blocks can then be
     placed at X=50,100,150,200 easily remembered and used
     numbers.  The most important thing to remember, and the
     most often violated rule, is DO NOT PLACE ANY MORE THAN
     YOU HAVE TO ON A SINGLE PAGE.  Most users beginning to
     use the system think that the problem with flipping
     through many sheets of military-type schematics is the
     same with ALDs.  It really isn@t.  In fact, it is
     generally easier to have more pages, each containing a
     small group of logically related parts, and a few wires
     going off to other pages, than it is to have all the
     symbols and their names crammed onto one or two pages. 
     You will find that by reading the symbols and their
     names, the logical content and flow of each page makes
     itself readily known.

     USE THE LONGEST NAMES YOU CAN.  Although it means a
     little more typing, it is not for the system that you
     are doing the typing, hut for your own benefit later. 
     Character names such as "AX" or "BLT" are fine if a
     mnemonic is needed to remind you of a chip function, but
     as descriptive signal names, they are terrible.  Try
     using the convention of a . or - symbol on EVERY line
     name for active high or active low, this will aid in
     checking the polarity of signals without chasing line
     names.  Use a name like ".CPU.ADRSO" or "-RAM.WRTEN"
     instead of "AO" or "RD".
















LEARNING THE SYSTEM




                                                       2-7


2.3.2  RAM PLACEMENT AND ROUTING



Ram chips form a special case during routing because
they are generally so regular in form that the general
routing technique that applies to random signals does
not apply well to the tight arrays RAMs produce.  The
signal arrays to bus lines across RAM chips is so tight
and regular that the router will not do them well. 
Special routing is needed to incorporate RAMs into a
board.  Also, the current (May 1985) revision of the
router uses corners placed on 50 mil grids.  This means
no actual diagonal lines (even though they come out
looking diagonal), and lines in the RAM bus cannot pass
each oth+r as easily as hand-routed RAM lines.  The
following hints will make incorporating RAMS an easier
task.


Placement is important so that enough room is left
between chips for the routed lines to cross over each
other.  Look at the Eprom Emulator artwork example (The
PRETEND files on your diskette).  As you can see, the
RAM lines must 'stair-step' around each other, yielding
a slightly greater spacing between RAMs than could be
accomplished otherwise.  In general, place the RAM chips
just slightly farther apart than they are wide, i.e. .4
inch separation for .3 inch wide chips.


Even with this spacing, it is possible that not all
lines will bus evenly, depending on the package
configuration.  It is then necessary to either stub a
line, routing up on the other side of the board, or
route horizontally on both sides of the board.  It is a
good idea in most cases to place the RAM arrays at the
edge of the board so as to interfere with normal flow as
little as possible.  For boards which require a great
number of RAM chips, it may be a better idea to let the
system generate all of the random logic connections, and
then route the RAM bus artwork with the route editor.














                                       LEARNING THE SYSTEM




2-8



    When dealing with a line of RAMs, it is usually best to
    pre-route the bus lines before the general routing
    begins.  This guarantees that the bus lines will be laid
    out correctly and all other lines are secondary to them. 
    The easiest way to accomplish this is to start the
    router up with the BORDROUT command, but stop it
    immediatly by entering an "F" at the keyboard (the
    FINISH option) as soon as the router begins connecting
    lines.  An artwork file that is empty of everything but
    the IC pads will be generated, and then the RAM lines
    may be added in with the TRACE command in the Route
    Editor.  The RAM lines may even be done before the rest
    of the design is placed or even entered into the DRL, so
    that other changes will not effect the routed lines. 
    This pre-route file can be kept under another file name,
    then renamed to the same name as the DRL file each time
    so that it will be used as the base of the started route
    in other designs with RAM arrays.


    Examples

     ---- with PRE-ROUTED RAM area

       .                                                     
          @ -@                 .        

             @-   @- @ @  .  
     .    @                   

                                                            
                                       
                                              @.   @  =    =. 
                   ,  .@ @ =   .       = . @'=         



      ---- with NO pre-routing


                                                              
                      @.           @  @= @     =     @- @@   @  
      ==    @@          *      
                                            
                                                    
            ,                                                
                    = =@                             
       @@            
               @                                    ..     
            @ _@                        --=
       .@ @ -=  =    @* -@@    =                                          *@    ==                                                 @    =@       @                                                                       @ ,
                                                    









  LEARNING THE SYSTEM




                                                       2-9



2.3.3  PCB PLACEMENT


Each part must be assigned an X and Y coordinate
corresponding to its placement on the routing grid for
the printed circuit board.  These coordinates are
entered in the PCB X and PCB Y fields in the DRL editor.


The PCB X value (as with all values concerned with the
printed circuit artwork unless otherwise expressly
stated) is in 0.050 inch or 50 mil increments.  The
artwork is routed on 50 mil grids, and each grid unit is
one incremental X or Y value.

Once a coordinate has been determined for PIN 1 (the
reference point) of the chip, an ORIENTATION is
specified which relates a 90 degree rotational factor to
the chip.  Orientation 0 is specified as having PIN 2
BELOW PIN 1.  Each increment of orientation specifias a
90 degree clockwise rotation of the chip from there.

Once all parts placement coordinates have been
determined, they are entered into the PCB X , PCB Y and
ORIENTATION fields of each part in the DRL editor.

IMPORTANT:

NOTE:  WHEN PLACING MULTIPLE ELEMENTS IN THE SAME
PACKAGE, EACH ELEMENT MUST BE PLACED WITH THE SAME PIN 1
COORDINATE AND ORIENTATION.  Each logic element in the
design must have the correct placement information or an
error will result.


A blank artwork matrix printout can be very useful in
planning your parts placement.  the the "H" option on
the Main Menu, and, when it asks for a filename, type in
"BLANK".  The matrix printed on your dot-matrix printer
will then show a dot for every grid and the coordinates
will be listed along both axes.  You can then sketch in
your board layout and the PCB X and Y locations can be
easily read off and entered.


Another technique is the use of "puppets," a layout
system made by Bishop Graphics.  Modification of a
layout done with puppets is much faster and cleaner than
a drawn layout and so is the preferred method despite
the higher initial cost.





                                       LEARNING THE SYSTEM




                                                          3-1







         CHAPTER 3     Macro Library Editor








The first step in the design process is to create a
MACRO library file of the components to be used in your
design.  The Macro File contains three basic pieces of
information on any hardware part:  1) a symbolic
description of which pins on the package are control
inputs, control outputs, data inputs, data outputs, and
voltage pins, with mnemonic names for each pin; 2) a
description of what the "footprint" of the device looks
like on a print@d circuit board; and 3), if there are
multiple logical elements within the package, the
combination of pins that form each gate.


To enter the MACRO LIBRARY EDITOR an "A" is entered on
the command line of the master menu.  If you are
entering the system for the first time, DASOFT responds
with the following screen:


CMD?                   Name of MAC~0 file?


At this time you can enter a name (up to eight
alphanumeric characters meeting CP/M naming conventions)
for the MACRO file.  This name will be used to reference
all your design files for this particular project.




If you have been working with a file name, that name
will be taken as a default and all you need to do is
type a "return".


When you have entered the MACRO file name, or selected
the default name, if a file of that name already exists,
DASOFT will use it. If no file exists DASOFT will create
one.  DASOFT then responds with the ** MACRO LIBRARY
EDITING ** menu as follows:


                                        MACRO LIBRARY EDITOR




3@2






             -- Macro Library Editing Menu --

(A) ADD new macro devices              (F) Create PIN combinations

(B) LIST devices in library            (G) Create PAD footprints

(C) TRANSFER devices between libraries (?) Help


         -- "?" Equals PIN, PAD or DEVICE number --

(D??) DELETE device by number          (F??) Edit PIN combo by number

(E??) EDIT MACRO by number             (G??) Edit PAD combo by number


(Q) EXIT WITHOUT SAVING FILE           (S) SAVE edited file and EXIT





    The easiest way to build a design library is to transfer
    components from an existing library, either one provided
    by DASOFT or one you have created previously.  If a
    component required in the design does not already exist
    in another library, you can add it at any time.  You
    will probably want to have your Data Book handy.


    In most cases, you may go directly to the ADD screen
    (option A).  To determine if this is possible, ask two
    questions:


    Is the new device a single element package? 
    Does an appropriate PAD footprint already exist?


    If the answer to both questions is YES, you may go
    directly to the ADD routine.  If the answer to the first
    question is NO, you must make sure that there is an
    appropriate PIN combination (to define each gate).  If
    the answer to the second question is NO, you will have
    to create a PAD footprint.








MACRO LIBRARY EDITOR




                                                         3@3


3.1     CREATE PIN COMBINATIONS



Schematically a 7400 looks like this:

                          7400
                                     
                                     |
              1--|-''                 |--14
              2--|-|    ', ''       |
                                   |-|--13
              3-0|--------  | |    |-|--12
                            |
              4--|-'         --------|0-11
              5--|-|    '. ''       |
                                   |-|--10
              6-0|--------  | |    |-|--9

              7--|           --------|0-8
                 |                   |



There are 4 "NAND" gates (with 3 pins each) and 2
voltage pins.


To handle a component such as the 7400 in the most
effective and efficient manner DASOFT has devised a way
to describ@ ONE gate and then extrapolate the others as
needed.  This saves file space and makes data antry much
simpl@r.  The press for entering a 7400, and any other
multiple gate package, is describad below.


Only Type 1 and Type 2 devices (see the "Implicit ADD"
section of this chapter) use Pin combinations.



There is no limit to the number of devices that can
reference an existing PIN combination.  Each different
combination is given a "Reference Number" by which it
can be called and used to describe another component. 
So if a different part with the @ame configuration
exists in another library, that part may be transferred
into the current library and then its PIN Reference
number can be used for the new component.  (The actual
Pin Reference Number may change if there are already
other pin @ombinations in the library, but the defined
combination will be transferred and will be given the
next sequential refercnce number.)



                                        MACRO LIBRARY EDITOR




3-4


    To enter a new PIN combination choose the "F" option
    from the MACRO LIBRARY EDITING MENU, and DASOFT responds
    with the following input screen:




CMD?


     Number of ELEMENTS per package:    
     Number of PINS per element:   




A PIN combination is created for a TYPE 1 or TYPE 2 component ONLY IF
there are multiple gates in the package.  With TYPE 3 or J, or if the
component is a single element, skip this routine.

TYPE 1 devices do NOT have power and ground pins included in the PIN
combination.

TYPE 2 devices MUST have the power and ground pins listed with the pin
for EACH gate.







    DASOFT is asking you to enter the number (1 or 2 digits)
    of logical elements (gates) contained in the IC package.

    You are then asked to enter the number of pins
    associated with each element.  Again using the 7400
    device as an example, there are 3 pins associated with
    each gate.  Power and ground pins are ignored because,
    as a standard 14 pin DIP, a 7400 is entered as a TYPE 1
    device and the system assumes voltage pins.


    For our 7400 example we have the following inputs:

      Number of ELEMENTS per package:  4
      Number of PINS per.element:  3










MACRO LIBRARY EDITOR




                                                                      3-5



             From the CMD?  line, you next type a "C" to continue to
             the next screen:




          CMD?

              New PIN reference number= 01

                     A:            
                     B:            
                     C:            
                     D:            





             DASOFT automatically assigns the next sequentially
             available New PIN reference number.  In this case Ref
             Num 01 is assigned as this is the first PIN reference we
             hav@ created.

             NOTE: It is this New PIN reference number that will be
             used to recall this pin combination for either editing
             it or using it to add new component descriptions to the
             Macro Library.

             The pin reference number cannot be edited.



             For each element in a package, an A:, B:, etc. field is
             displayed.  Based on our first screen entry of 4
             elements for this IC package, the second screen shows 4
             elements labeled A,B,C, and D.

             At this point, you input the pin numbers associated
             with each logical element (gate) contained in the IC
             package.

             The field contains enough spaces to enter the 3
             character PIN NUMBER in the format +01 or 1 or -13, for
             example.  + signs are default, indicating active high; -
             signs indicate active low pins.









                                                     MACRO LIBRARY EDITOR




3-6


    NOTES:

    The pin signals are assumed to be positive true unless
    otherwise specified.


    The pin designations must be separated by COMMAS or
    DASOFT will respond with the following ERROR MESSAGE:

        COMMAS MUST SEPARATE ENTRIES

    Type 1 pin entries do not include power lines.

    Type 2 pin entries do include voltage pins in EACH
    gate entry.

    Pin numbers must be entered in the SAME ORDER as
    they will appear in the ADD command screen, i.e. control
    inputs, then control outputs, data inputs, data outputs,
    voltages.

    Pin references for Type 2 devices are not the same as
    for Type 1; please study the examples in the Appendix.

    Continuing with our 7400 example, the following entries
    would be made:




CMD?


    New PIN reference number= 01

                A:  1,2,-3
                B:  4,5,-6
                C:  9,10,-8
                D:  12,13,-11





    The following command options are available at this
    time:


    CMD? S

    The "S"AVE command issued at this time will complete the
    entry for this PIN combination, and return to the MACRO
    LIBRARY EDITING menu.




MACRO LIBRARY EDITOR




                                                         3-7



CMD?  Q

Issuing the "Q"UIT command at this time will result in a
return to the MACRO LIBRARY EDITING menu without any PIN
entry being made.






PIN references already entered in TTL.MAC library are:

            REF #     IC TYPE

              1)       7400
              2)       7402
              3)       7404
              4)       7410
              5)       7413



See Appendix B for detailed information on each of these
PIN references.






























                                        MACRO LIBRARY EDITOR




3-8




    3.2  CREATE PAD FOOTPRINTS



    A PAD footprint is required for most device
    configurations (NOT for Type 1 devices, Type 3
    components with only 2 pads, or Type J connectors). Like
    the PIN specifications, any number of devices may
    reference a given PAD footprint.


    If you choose the PAD command, "G", from the MACRO
    LIBRARY EDITING menu, DASOFT will respond with the
    following input screen:





CMD?                        Number of PADS in FOOTPRINT?


A PAD combination is created for each unique PCB footprint. The PAD
combination includes both the size (type 0, 1, 2, or 3) of the pads
and the spacing of all pads relative to the PIN 1 pad.  Type 2 and 3
pad sizes are user-definable in the Outline Editor.

Remember,hen entering PAD footprints, that the ORIENTATION of the
footprint on the PCB is specified in the design editor. Orientation
00 defines Pin 2 BELOW Pin 1.






    The total number of pads that will be laid down on the
    PCB artwork to install the device is entered.  Entry may
    be a 2 digit number up to 76. Assuming you want to enter
    the PAD footprints for a 16 pin DIP, enter the number 16
    on the command line:


    CMD?  16                   Number of PADS in footprint? 


    DASOFT responds with the following input screen:








MACRO LIBRARY EDITOR




                                                             3-9




CMD?              

New PAD reference number= 2            Pad type: (0-3): 1
Silkscreen pic type: 00           Xsize: 00           Ysize: 00

P(01):
P(02):
P(03):
P(04):
P(05):
P@06)@
P(07):
P(08):
P(09):

P(11):
P(12):
P(13):
P(14)@
P(15):
P(16):





    The blanks should be filled in as follows:


    New PAD reference number:

    DASOFT automatically assigns the next sequentially
    available New PAD reference number.  In this example
    another PAD reference already exists, so DASOFT assigned
    this entry the number 2.


    NOTE:  It is this New PAD reference number that will be
    used to recall this PAD footprint for the EDIT EXISTING
    PAD COMBO BY NO.  command, described later in this
    section, in the event changes must be made to this
    footprint.  The PAD REF NUM is referenced on the Macro
    ADD screen@











                                            MACRO LIBRARY EDITOR




3-10



    PAD TYPE @0@3): is equivalent to the PAD SIZE.


    Type 0 = .004 inches - via or feedthrough
         1 = .055 inches - standard IC pad
         2 = .06 inches - user definable, usually discrete
         3 = .1 inches - user definable, large pads


    Note:  The dimensions for Type 2 and Type 3 pads are set
    in the Outline Editor.


    Since we specified 16 pads in our example above, we see
    that DASOFT has returned with an input screen on which
    we can specify the relative positions of the 16 pads in
    the footprint.


    NOTES:

    All PAD positions are specified relative to whatever PAD
    the designer wishes to designate as the 00@00 PAD.  By
    convention, PAD 1 is the reference, with PAD 2 below it.

    All relative positions are specified in multiples of 50
    mil increments.

    The auto-router will NOT route to Type 3 pads because
    their large size blocks the destination coordinates. 
    They will be listed as unroutes and can be added with
    the Route Editor.


    ORIENTATION

    The Orientation field in the Design Editor defines a
    positional rotation about Pin 1 of each component. 
    Orientation 00 places the device on the board as its
    footprint was fined.  Orientation 01 would turn the
    component 90 degrees in a clockwise direction. 
    Orientation 02 and 03 each rotatthe device an
    additional 90 degrees.

    The final placement of the component on the board is,
    therefore, dependent on BOTH the entry in the
    Orientation field in the Design Editor AND the footprint
    definition in the Library Editor.








MACRO LIBRARY EDITOR



                                                         3-11



For example, if you define the footprint with Pin 2
below Pin 1, the component will appear that way on the
board if you specify 00 in the Orientation filed in the
Design Editor.  If you specify Orientation 3, the device
will be rotated 270 degrees and Pin 2 will be to the
RIGHT of Pin 1:


  Footprint                 00                    03

   1                       1                  ~ @ @ @ @ @
   2                       2    @
   @   @                                      1 2 @ @ @ @
   @   @                   @    @
   @   @                   @    @
   @   @                   @


Similarly.........

If you define the footprint with Pin 2 to the right of
Pin 1, it will appear in the same position on the board
if you give Orientation as 00 and will rotate 90 degrees
for Orientation 01:


 Footprint                 00                  01

 1 2 @ @ @             1 2 @ ~ @              @   1
                                                  2
 ~ ~ @ ~ @             @ @ @ ~ @              @   @
                                              @   @
                                              @   @


In TYPE 1 devices, the default footprint has Pin 1 at
0,0 and Pin 2 at 0,-2; i.e. below Pin 1.  Orientation 00
places Pin 2 BELOW Pin 1 on the board as in the top
example above.

In TYPE 3 components with only 2 pins (resistors,
capacitors, etc.) if you use the SPACING option instead
of defining a footprint, the 00 orientation will place
Pin 2 BELOW Pin 1.  These components will rotate like
TYPE 1 devices and our first example above.  Orientation
00 will place them VERTICALLY on the board.










                                        MACRO LIBRARY EDITOR




3@12



    P@01):



    Enter the RELATIVE coordinates, in multiples of 50 mil
    grids, which describe the X,Y OFFSETS of the pin number
    from PAD 1.  For example, the X,Y offset for pin 1 is
    0,0.  If pin 2 is 100 mils (0.1 inch) below pin 1 (the
    convention for orientation recommends that pin 2 is
    always entered below pin 1) then the offset for pad 2 is
    0,-2 or two 50 mil grids below (-Y) pad 1.  The same
    rules apply for all other numbered pads in the entry.



    For the standard 16 pin DIP integrated circuit PAD
    footprint, the designer would fill in the screen as
    follows:




CMD?

New pad reference number= 2            Pad type (0-3): 1
Silkscreen pic type: 00           Xsize: 00           Ysize: 00

P(01):  0,0
P(02):  0,-2
P(03):  0,-4
P(04):  0,-6
P(05):  0,-8
P(06):  0,-10
P(07):  0,-12
P(08):  0,-14
P(09):  6,-14
P(10):  6,-12
P(11):  6,-10
P(12):  6,-8
P(13):  6,-6
P(14):  6,-4
P(15):  6,-2
P(16):  6,0













MACRO LIBRARY EDITOR



                                                         3-13


The entry above specifies a pad footprint that looks
like this:

              1.   .16
              2.   .15-@.  
              3.   .14         0.10 inch
              4.   .13      (2 X 0.050" units)
              5.   .12
              6.   .11
              7.   .10
              8.   .9

               0.30 inch
        (6 X 0.050" units)


NOTES

The maximum deviation allowed is + or - 99 grid units
(99 x 2 x 50 mil = 9.9 inches)

The positive (+) dir@ction is assumed unless a negative
(-) coordinate is entered.


Many packages share common pad footprints and can be
added with an existing PAD reference number and you do
not have to create a new combination.  To find out
whether an appropriate PAD type exists for a new device,
you can look at the pad reference of another package of
the same type or look through the pad reference entries
with the PAD edit command.


The following PAD references are already entered in the
TTL.MAC file provided:

          REF #            PAD FOOTPRINT
           1               14 pin DIP
           2               16 pin DIP
           3               24 pin DIP
           4               40 pin DIP
           5                8 pin DIP
           6               20 PIN DIP



See APPENDIX B for more detailed information on each of
the PAD footprints listed above.







                                        MACRO LIBRARY EDITOR




3@14



    3.3   ADD NEW MACRO DEVICE


    Once appropriate PIN and PAD specifications exist in the
    file for reference, the new device can be entered into
    the library using the ADD command.


    To specify a device, the pins, and their associated
    mnemonic names, must be grouped into input/output
    classifications and then entered into the appropriate
    screen.  The "A" option is chosen from the Macro Edit
    Menu:


    CMD? A

    To which DASOFT responds with the next screen:




            -* ADDING a new macro device *-


First describe the TYPE of device and the NUMBER OF PINS of each type. 

Type 1: A 14 pin DIP package with power on PIN 14 and ground on PIN 7.

Type 2: A logical element with control inputs or control outputs, any
        package style.

Type 3: Only inputs and outputs; used for everything else.

Type J: Used for the special case of an EDGE CONNECTOR or a
        RIBBON CABLE CONNECTOR which has a regular array of pads.


            -* Enter the device type on the command line *-





    When you enter the number for the type device you want
    to enter, the system will automatically select the
    correct set of data entry screens.









MACRO LIBRARY EDITOR



                                                             3-15



    3.3.1    TYPE 1 ADD SCREEN

    If you entered a "1" on the CMD?  line of the first ADD
    screen, the following screen will appear:





 CMD?                            Press "C" to continue. 

                Enter type 1 device information

                       Number of INPUT pins:  
                      Number of OUTPUT pins:  


 Type 1 components have the following characteristics: 
 - they must be a 14 pin DIP with power on pin 14 and ground on pin
   7.
 - they require a PIN Reference entry IF there are multiple elements
   within the package.
 - they do NOT require a PAD Reference.
 - they may NOT have a "J" as the unit letter.






    Fill in the numbers requested, then type a "C" on the
    CMD? line to get to the next entry screen:




CMD?       

Gate number:      
Gate name:          Alias:              Pin ref#:  
Exp1:               Exp2:   

---Input List---                 ---Output List---
Pin no:                          Pin no:   

PWR(mA):  










                                            MACRO LIBRARY EDITOR




3-16




    GATE NUMBER


    The Gate or Part number is a 6 digit (NO ALPHAS) number
    by which the gate will be referenced while editing.

    NOTE:  Technology type information (LS, H, ALS, F etc.)
    is added as part of the part number when you call
    the device into your design file with the Design
    Editor, NOT here in the library entry.




    GATE NAME


    Enter the 3 Letter name of the gate.





    ALIAS



    Enter the 3 letter name which describes the function of
    the gate if DeMorgan's Theorem is applied to invert the
    gate.





    PIN REFERENCE NUMBER



    Enter the PIN Reference Number which describes the pin
    combinations which may be applied to different gates
    within a package (see PIN edit command to look at
    different PIN entries and check the reference number).












MACRO LIBRARY EDITOR




                                                         3-17


Exp1, Exp2



These fields are undefined at this time; you should just
skip over them by typing a "return".




PIN NO.



A 1 character, 2 digit number for the pin, under the
classification of either input or output.  A plus sign,
+, or a minus sign, -, preceeding the name indicates
active high or active low.  Plus, +, is the default and
need not be specified.  Up to 2 digits should be given
for the pin number itself.




PWR(mA)



The input current of the device, in milliamps up to
255, can be entered.



When the cursor is back up on the CMD?  line, you have
the standard two options: to Save or to Quit.



CMD?  S



Entering a "S" command will save the new macro and
return to the Main Menu.




CMD?  Q



Entering a "Q" will abort and return to Main Menu, and
no save will be made.


                                        MACRO LIBRARY EDITOR




3@18




    3.3.2   TYPE 2 MACRO ADD SCREEN

    If you typed a "2" on the first ADD screen, the system
    will call up the first Type 2 add screen:





 CMD?                              Press "C" to continue.


                Enter type 2 information

                   Number of CONTROL INPUT pins:  
                  Number of CONTROL OUTPUT pins:  

                           Number of INPUT pins:  
                          Number of OUTPUT pins:  

                         Number of VOLTAGE pins:  


 Type 2 components have the following characteristics: 
 - they have Control signals (CLOCK, INTERRUPT, etc.) as well as
   Data signals
 - they require a PIN Reference entry IF there are multiple elements
   within the package.
 - they have less than 76 pins.
 - they may NOT have a "J" as a unit letter.

    Fill in the blanks as required for your component.  If
    you are adding a package with multiple elements, enter
    numbers for the "A" gate only, plus power pins.



    Type a "C" to continue on to the second Type 2 add
    screen:














MACRO LIBRARY EDITOR



                                                             3-19






  CMD?     

Gate number:       
Gate name:          Alias?(Y/N):        Pin ref#:   
Exp1:               Exp2:               Pad ref#:   

--CNTL IN LIST--
P#:    NAME:   
--CNTL OUT LIST--

--INPUT LIST--

--OUTPUT LIST--

--VOLTAGE LIST--





    The entry fields can be filled in as follows: 


    GATE NUMBER


    The Gate or Part number is a 6 digit number representing
    the part, and by which the part will be referenced
    during editing.  Type 3 part numbers may include
    alphabetic characters, Type 1 and 2 numbers may not.




    GATE NAME


    Enter a 3 letter name for the part.




    ALIAS? (Y/N)

    Enter "Y" if the DATA portion of the type 2 macro may be
    alternatively defined as active high or active low by
    the designer.  For example, a latch may be considered to
    have active low data inputs and outputs, but a decoder
    might not.




                                            MACRO LIBRARY EDITOR




3-20



    PIN REFERENCE NUMBER


    IF multiple logical elements are contained within one
    package, it is necessary to create a PIN reference
    number with the PIN command.  The 1 or 2 digit number
    assigned by the PIN command is entered here.  If only
    one logic element is in the package, no PIN reference is
    required and this field should be left blank.




    Exp1, Exp2

    These two fields are undefined at this time and may be
    left blank.




    PAD REFERENCE NUMBER


    Enter the reference number that was given by the system
    to the particular PAD configuration that is appropriate
    for the device you are adding.




    P#    NAME:   


    The one character, two digit pin number is entered in
    the P# field.  The first character is either + for
    active high or - for active low. Plus, +, is the default
    and need not be entered.  A three letter mnemonic name
    for the pin function is entered into the name field. 
    (This is generally the same as the name given in the
    data book.)

    REMEMBER that the pin entries must be made in the exact
    order as in the PIN combination












MACRO LIBRARY EDITOR



                                                         3-21

PWR(MA)


The input CURRENT specified for the device is entered in
milliamps.  There is one PWR field for each voltage line
on the device, except ground which is expected to be the
last voltage pin assigned.


When the cursor is back on the CMD?  line, you have two
options:



CMD?  S


Entering "S" on the command saves the new macro entry
and returns to the main command screen.




CMD?  Q


Entering a "Q" on the command line exits to the main
command screen without saving the added macro or
changing the macro file.




























                                        MACRO LIBRARY EDITOR




3@22



    3.3.3    TYPE 3 MACRO ADD SCREEN


    If you entered a "3" on the first Macro edit screen the
    system will bring up the following Type 3 add screen:





 CMD?                                    Press "C" to continue.


              Enter type 3 device information.

                      Number of INPUT pins:  
                     Number of OUTPUT pins:  


Type 3 components have the following characteristics: 
- they are not either Type 1 or Type 2; ie. they are something else. 
- they may be an analog device
- they may use upto 3 prompts to specify further information about
  themselves: power, color, etc.
- they do not require a PAD Reference IF they have only 2 pins. They
  can use the SPACING entry on the design editor entry screen instead. 
- they may NOT have a "J" as a unit letter.






    After entering the correct number of pins, type a "C" on
    the CMD? line to continue to the next add screen:






 CMD?

Part number:                Unit ltr:      Part name:       
Pad ref#:           Spacing(Def):     Exp1:        Exp2:   
Prompt1:       Units:    
Prompt2:       Units:    
Prompt3:       Units:    

  -Input List-                    -Output List-
P#:    NAME:                     P#:    NAME:   





MACRO LIBRARY EDITOR




                                                         3-23


PART NUMBER


This is a 6 character alphanumeric name by which the
gate is listed and will be called during editing.

Note: Avoid the use of a single letter then numbers as a
part (gate) number.  When in the Design Editor, the
system will read it as a Unit Number instead of a device
number.  This field must be at least 4 characters long. 
Pad it with leading O's if necessary.




UNIT LETTER


When added to a design, each element is assigned a unit
letter and number.  Enter the unit letter you wish
assigned to the device you are adding.  For instance, if
R is entered as the unit letter for a resistor, each
resistor in the design will be labeled R01, R02 etc. 
instead of U01, U02....

Do NOT use the letter "J" for a unit letter in type 3
entries.




PART NAME


Enter a 6 character (alphanumeric) name which will be
used to describe this part on schematics.




Exp1, Exp2


These fields are undefined at this time.  Leave them
blank.











                                        MACRO LIBRARY EDITOR




3-24



    PAD REFERENCE NUMBER


    Enter the reference number which describes the pad
    footprint this part will have on the PCB artwork.  Even
    if the DASOFT PCB artwork functions are not being used,
    this information must be supplied. The only exception to
    this is a Type 3 entry having only two pins.  In this
    case, no PAD reference is required and thnext field,
    SPACING, is used instead.




    SPACING (DEF)


    IF the part being added has only two pins, such aa
    resistor or capacitor, a PAD reference number is not
    needed and the default spacing between the two pads is
    given instead.  The spacing is in multiples of 50 mil
    grid segments, up to 99.  For example, if you would like
    the spacing between resistor pins to be .5 inches, the
    default spacing would be 10.  This spacing is only the
    default and may be changed in the Design Editor.




    Prompt:      Units:   


    When creating generic parts, these fields can be useto
    prompt the designer for further information describing
    the part.  Enter a 5 letter prompt for the information,
    such as 'VALUE' and a three letter clarifier for units,
    such as 'OHM', or 'uF'.  Up to three prompts may be
    issued, only the first is printed on the schematics.




    P#:    NAME:   


    These fields are used to describe the pin number, with
    its mnemonic name and polarity.  The pin number is
    entered with a - sign prefix 1f active low.








MACRO LIBRARY EDITOR



                                                         3-25



As usual, when the cursor is again at the CMD? line, you
have two choices:


CMD?  S


Entering an "S" will save the entry and return to main
command screen.




CMD?  Q


Entering a "Q" will return to main command screen with
no save or change to the macro file.





































                                        MACRO LIBRARY EDITOR




3-26




    3.3.4     TYPE J CONNECTORS


    Connectors present a special case for the Macro add
    routine.  Card edge connectors are added as a Type J and
    ribbon connectors can be added as either a Type J or a
    Type 3.

    TYPE J CONNECTORS MUST HAVE AN EVEN NUMBER OF PINS. 

    TYPE J CONNECTORS CANNOT HAVE MORE THAN 102 PINS.


    CARD EDGE  --  Type J

    For card edge connectors, DASOFT takes over most of the
    entry procedure with pre-entered information; the
    designer only needs to choose the "J" option on the
    first Macro add screen and fill in the very short second
    screen:





Part Number:        Unit ltr:           Part name:      
Pad ref#:        Spacing(Def):        Exp1:      Exp2:  

Prompt 1:        Units:   
Prompt 2:        Units:   
Prompt 3:        Units:   

                    Exp3:  

        Number of connector pins:   

Type J components have the following characteristics: 
- they are either a card edge connector or a ribbon cable header. 
- they MUST have a "J" for the unit letter.
- they will not have lines drawn to them on the ALDs (schematics). 
- they have pins numbered consecutively 1 thru N, left to right, on th
  component side and N+1 thru last#, left to right, on the solder side
- they have a HIGHT, WIDTH and SPACE (center to center) specified in
  .005 inch units on the Design Editor entry screen. 
- they have a different definition for ORIENTATION. Check your User
  Manual for special information on "J" connector orientation. 
- they have a different PIN 1 placement scheme than other component
  types. Check your User Manual.







MACRO LIBRARY EDITOR




                                                             3-27


    The "J" entry tells the system to create a special macro
    (similar to a Type 3) with 3 special prompt fields: 
    Height, Width, and Spacing.  The height and width define
    the size of the fingers and the spacing is the distance
    between finger centers.

    ALL SIZE SPECIFICATIONS GIVEN ARE IN 0.005 INCH GRID
    UNITS.

    When creating fingers, the system drives the plotter at
    its best accuracy.  If you need .125 spacing fingers,
    even though we plot on .05 inch grids, you get .125
    spacing.  Connections to these fingers are interpolated
    properly to hit as close as possible.


    EXAMPLE

    A S-100 card edge connector would be entered as follows:

    Enter the Macro editor ADD command with an "A" and then
    choose "J" from the second screen.


    When the "J" screen comes up fill in the blanks:






Part number:100S Unit ltr:  J Part name: CON100
Pad ref#:      Spacing (Def):       Exp1:  Exp2:

Prompt 1: HIGHT                   Units: 005
Prompt 2: WIDTH                   Units: 005
Prompt 3: SPACE                   Units: 005

                   Exp3:
               Number of connector pins: 100





    Type an "S" on the CMD? line to save the entry.


    Then return to the main menu and enter the Design Editor
    with a "B".

    Make an implicit call for your connector by typing in
    the part number:  100S



                                            MACRO LIBRARY EDITOR




3-28





Element type: 100S                     Unit: J03
ALD position PG:01 X:40  Y 105     PCB position X: 32  Y:  06
Orientation: 00        Exp1:         Exp2:

    CON100
    PAD SPACING(GRIDS): 00
    HIGHT (005): 60
    WIDTH (005): 20
    SPACE (005): 25



    From this point, continue as you would for any entry.


    NOTE:  Connectors entered as a Type J device do not have
    lines drawn to them on the ALD.  They are, of course,
    routed on the FCB artwork.


    When entering connectors in a Macro Library as a Type J
    device, several default values and special cases should
    be kept in mind.


    1.  Pin numberings on the finger connectors conform to
    the S-100 standard.  That is, pins on the component side
    are numbered consecutively left to right; the pin on the
    backside of pin 1 is numbered after the far left pin on
    the front side.

                 9 10 11 12 13 14 15 16
                 1 2 3 4 5 6 7 8



    2.    Orientation   works  differently  for  card   edge
    connectors.

    00(default) - Connector on the bottom of the board (as
      in a S-100 connector) with pin 1 ON THE LEFT and pin
      50 on the right.
    01 - Connector on the left edge with pin 1 ON THE TOP. 
    02 - Connector on the top with pin 1 ON THE LEFT@ 
    03 - Connector on the right edge with pin 1 ON TH(
    TOP@








MACRO LIBRARY EDITOR




                                                                     3-29



            3.  Finger connectors are located on the PCB by the PIN
            CONNECTION POINT for pin 1.  For example, on connectors
            on the bottom of the board (orientation 00), the X,Y
            point used to position the connector is at the top of
            pin 1.  On a connector on the top of the board
            (orientation 02) the X,Y coordinate at the bottom of pin
            1 is used.


                            EEEEEEEEEEEEEEEEEEEEE
                            E                   E
                            E        (02)       E
                  EEEEEEEEEEE =                 EEEEEEEEEEE
                  E                                       E
                  E                                       E
                                                        E
            EEEEEEE                                       EEEEEEE

            E                                                   E
            E (01)                                         (03) E
            E            * = pin 1 connection point             E
            E                                                   E
            E                                                   E
            EEEEEEE                                       EEEEEEE
                  E                                       E
                  E                                       E
                  E                                       E
                  EEEEEEEEEEE @                 EEEEEEEEEEE
                            E       (00)        E
                            E                   E
                            EEEEEEEEEEEEEEEEEEEEE

























                                                    MACRO LIBRARY EDITOR




3-30



    RIBBON CONNECTORS


    Ribbon connectors may be added as either a "J" type
    device (as in the S-100 example above) or as a Type 3
    discrete component.

    If added as a J connector, the HIGHT prompt is used to
    specify the spacing between pins and Width is used to
    specify the space between the 2 ROWS of pins.  THE
    SPACING FIELD MUST BE 0 FOR A NORMAL CONNECTOR.  Type 1
    pads will be used.


    As with a card edge connector, Type J ribbon connectors
    will not have interconnecting lines to them on the ALD
    but will have traces drawn on the PCB artwork.


    If added as a Type 3 device (so that connecting lines
    WILL appear on the ALD), then a PAD footprint must be
    specified in the MACRO editor before the device can be
    added.  A 10-pin connector TYPE 3 entry could proceed as
    shown below:



    In the Macro editor, call up the PAD @ommand by typing
    a "G" on the CMD? line.

CMD?                            Number of PADS in FOOTPRINT? 10

New PAD reference number =18            Pad type (0-3): 2
SILKSCREEN PIC TYPE:                           XSIZE:  YSIZE: 
P@01):00,00
P(02):04,00
P(03):00,-02
P(04):04,-02 Note: this input creates a footprint that
P(05):00,-04 looks like this:  1.  .2
P(06):04,-04                          3.  .4 -  
P(07):00,-06                          5.  .6    n.10 inch
P(08):04,-06                          7.  .8
P(09):00,-08                          9.@  ,10
P(10):04,-08
                                        0.@=@0 in@h



    Save the PAD entry by typing "S" on the CMD?  line and
    enter ADD section of the Macro library editor and type a
    "3" to get to the entry screen.





MACRO LIBRARY EDITOR



                                                             3@31



CMD?             

             Enter type 3 device information

                          Number of INPUT pins: 10
                         Number of OUTPUT pins:   


Type "C" to continue-

Part number: CON10          Unit ltr:P        Part name:CONCT
Pad ref#:18       Spacing (Def):        Exp1:     Exp2:
Prompt 1:                   Units:
Prompt 2:                   Units:
P3 PROMPT:                  P3 UNITS:

-Input List 
P#:+01 NAME:
P#:+02 NAME:
P#:+03 NAME:
P#:+04 NAME:
P#:+05 NAME:
P#:+06 NAME:
P#:+07 NAME:
P#:+08 NAME:
P#:+09 NAME:
P#:+10 NAME:




    Type "S" on the CMD?  line to exit ADD and be sure to
    SAVE on your exit from the Design Editor.



    Note When entering a connector as a TYPE 3, DO NOT use
    "J" for the unit letter.


















                                            MACRO LIBRARY EDITOR




3-32



    3.4    EDIT EXISTING PIN COMBO BY NUMBER


    Any existing FIN combinations may be viewed and modified
    by entering the reference number of the PIN combination
    after the "F" option.


    CAUTION:  WHEN EDITING A PIN COMBINATION BE CAREFUL TO
    INSURE THAT ALL DEVICES REFERENCING IT ARE CAPABLE OF
    UTILIZING THE UPDATED VERSION.  Remember to remove the
    d@vice, if present from any design file, and then
    reenter it.



    CMD? F1

    This entry specifies implicitly that we wish to view or
    edit PIN REFERENCE 1.  Any number may be specified, but
    a space must follow the PIN command, before the :irst
    number.  If the pin number exists, it is displayed in
    the same form as the PIN ADD command, with correct
    polarities shown:




New pin reference number =1

                    A: +01,+02,-03
                    B: +04,+05,-06
                    C: +09,+10,-08
                    D: +12,+13,-11



    You can then step the cursor through the fields and make
    changes as needed.


    From the CMD?  line you can choose to either Save or
    Quit:


    CMD?  S

    Entering an "S" will save the edited pin reference and
    return to the main screen.


    CMD?  Q

    Entering a "Q" will exit back to the main screen without


MACRO LIBRARY EDITOR




                                                                     3-33

            changing the PIN file.



            3.5   EDIT EXISTING PAD COMBO BY NUMBER


            Any existing PAD may be viewed and modified by entering
            the reference number of the PAD footprint after the "G"
            option.


            CMD? G1


            If the "G" option is chosen followed by a number, it
            implicitly defines a pad edit command.  The pad
            reference entry defined by the number is displayed in
            the same format as the pad add command screen, but with
            all information pertaining to the entry on the screen
            for viewing.


            Once the pad entry is displayed, you can modify it as
            you like. After changes, if any, the following commands,
            entered on the CMD?  line, will return you to the main
            Library Editor menu.


            CMD? S

            Entering an "S" will save the changed PAD entry.


            CMD? Q

            Entering a "Q" will exit to the main command screen
            without changing the PAD file.




            CAUTION:  WHEN EDITING A PAD FOOTPRINT BE CAREFUL TO
            INSURE THAT ALL DEVICES REFERENCING IT ARE CAPABLE OF
            UTILIZING THE UPDATED VERSION.  Remember to remove the
            device, if present, from any design file, and then
            rnter it.
 









                                                     MACRO LIBRARY EDITOR




3-34



    3.6    EDIT EXISTING MACRO BY NUMBER


    Existing Macros may be viewed or updated by choosing the
    Macro edit option, "E", followed by the number of the
    device to be edited.



    CMD? E7400

    The Macro device called will be displayed on the screen
    in the same format as is used in the ADD screen.  By
    stepping the cursor through the fields, the user may
    make any changes necessary.



    CMD? S

    Entering an "S" will save the edited macro.



    CMD? Q

    Entering a "Q" will exit without changing the macro
    file.



    CAUTION:  WHEN EDITING AN EXISTING MACRO, MAKE SURE THAT
    THE PIN AND PAD FILES ARE NOT AFFECTED BY THE CHANGE. 
    Remember to remove the device, if present, from any
    design file, and then reenter it.





















MACRO LIBRARY EDITOR



                                                         3-35


3.7    LIST DEVICES IN LIBRARY


The "B" option produces a listing on the CRT of all the
devices contained in the currently logged Macro Library.


CMD? B


Note The user is STILL AT THE MAIN COMMAND LEVEL AND
MAY ENTER ANY COMMAND.  Only the screen is changed.



CMD? .   (period)


After the list screen is printed, typing a "." (period)
will reprint the main device command menu.  ( ANY NON-
COMMAND ENTRY WILL REPRINT THE COMMAND MENU).



































                                        MACRO LIBRARY EDITOR




3-36



    3.8   TRANSFER DEVICES BETWEEN LIBRARIES


    If the Macro device library that has been set up for
    the current design does not contain all of the devices
    necessary to @omplete the design, the needed devices may
    either be added using the ADD command "A" above, or,
    more easily, transferred from another Macro library
    using the Transfer command, "C".  Any required PIN and
    PAD combinations are transferred with the requested
    deviee and the next available PIN and PAD reference
    numbers are assigned.


    The first response by the system is for the name of the
    file FROM which the part is to be transferred.


    CMD?                    Enter OTHER MACRO file name


    After you ge the system a file name (up to 8
    alphanumeric characters conforming to CP/M file naming
    conventions -no extension is cessary), it will ask for
    the number of the macro to be transferred from that file
    or you can get a list of available components:



    CMD?

    Enter "L" for LIST or "PART NAME" to transfer


    Two options are open:


    CMD? 7400

    Entering a device name will transfer the device into the
    library being edited and save it automatically.  When
    the transfer is complete, this message will be repeated. 
    When finished, exit back to the last level with "Q".

    When a device is transferred, its PIN combination (if
    any) and its footprint are also transferred.  The
    reference number may be changed, however, to the next
    sequentially available number in the NEW library.








MACRO LIBRARY EDITOR




                                                         3-37



CMD? L

The *L* command, when given from the transfer routine,
prints on the screen the LIST OF MACROS IN THE OTHER
FILE.




CMD? Q

Entering a "Q" will move back to the 'ENTER NAME OF
OTHER MAC FILE' screen, where another file name could be
specified.  All parts transferred are saved
automatically.


This is the quickest way to build a MACRO library for a
given design.  All of the existing devices are gathered
from their various libraries using the transfer
function.  The few MACRO devices that may not be in a
library can be added using the ADD command to enter the
information directly from the manufacturer's data sheet.
































                                        MACRO LIBRARY EDITOR




3@38




    3.9   DELETE EXISTING DEVICE BY NUMBER

    Any devices that have become obsolete, or which are not
    needed any longer, may be deleted from the Macro library
    using the "D" (Delete) command followed by the device
    number.


    CMD?  D7400


    Upon execution of the Delete command the device is
    deleted, but the PIN and PAD references are not affected
    since they could be referenced by other MACRO devices in
    the library.


    CAUTION:  BEFORE DELETING A DEVICE FROM A MACRO LIBRARY,
    MAKE SURE THAT IT IS NOT REFERENCED IN AN ACTIVE DRL
    FILE USING THAT LIBRARY.

    *** ALWAYS DELETE A DEVICE FROM THE DRL FILE BEFORE
    DELETING IT FROM THE MACRO LIBRARY ***

    If you delete a device from your Library and then try to
    use your design file, you will run into serious
    problems.  Due to the extreme memory constraints
    inherent in a CP/M environment, the DASOFT Design Editor
    tracks order of entry as well as all other information
    as a series of offsets from the beginning of the file
    when the part was first entered.  Rebuilding
    this information after it's been corrupted by changing
    the Macro, is at best difficult, and usually impossible. 
    The result is an unusable DRL file.





















MACRO LIBRARY EDITOR



                                                         3-39





3.10   SAVE EDITED FILE AND EXIT


All of the updates entered during an editing session are
held in a temporary file until the end of the session. 
The "S" command, when executed, updates the MACRO file
being edited, and enters all of the changes made during
the session.






3.11   EXIT WITHOUT SAVING FILE


If the MACRO library was merely viewed, or if, for any
reason, the changes that were made during an editing
session are not to be saved for permanent updating of
the file, exiting the session using the "Q" command will
leave the MACRO file as it was prior to the editing
session.































                                        MACRO LIBRARY EDITOR



                                                        4@1









          CHAPTER 4         DESIGN EDITOR







First, a few comments on how the Design editor works:

The Design Editor works entirely memory resident.  This
is necessary torovide adequate speed, but it costs in
space allowed for the file system.  Approximately 800
NETNAMES can be used in the file. It does not matter how
many connection points are in each net.  The number of
components possible in a design can vary greatly
depending on the type of part used.  SSI gates use the
least memory space, followed closely by MSI/LSI, and,
finally, discrete components take up a gr@at deal of
space in the file.

In the editor, when a logic element is too larg@ for its
logic diagram to fit on the page, an alternate form of
entry page is used.  This entry consists of a columnar
format, with the pin number and its mnemonic name given
(with + or - as a prefix to denote high or low active
polarity) and then an entry field for the netname.  Each
section, control input, control output, etc., has a
header naming it to help clarify the type of line being
connected.  In the case of a large number of possible
connections (say an S-100 bus conneotor)@ two pag@s of
data may be held by the system.  In this @ase the
message line will prompt you to enter a 1 or a 2 in the
command line to page back and forth between the data
pages.














                                              DESIGN EDITOR




4-2




    To enter the Design Editor select option "B" on the main
    menu.  The system will respond with the following
    screen:






CMD?                                     Name of DESIGN FILE?




This option takes you into the core of the DASOFT Design
Automation software.  The Design Editor provides the means for
creating and editing a design file for each PCB project.  The
editor produces a file with "DRL" as the extent.

              example: P~@TEND.DRL

Other DASOFT programs work with the DRL file (and its associated
Macro Library) to produce the various finished products which
go into the making of a fully documented Printed Circuit Board
package.






    Enter the name of your design file or press return to
    select the default file.


    When the new file is opened, or your file has been
    found, the system will bring up the Design Editor menu.


















DESIGN EDITOR



                                                            4@3





CMD?           


       -- Design ~aquirements Listing File Editor --

(A) Edit DESIGN info HEADER (D) List Devices in MACRO LIBRARY

(B) Edit COMMENT BLOCKS          (E) List Devices used in DESIGN

(CT) Prevent future FILE CHANGES (F) Load a new MACRO FILE


            -- *??* Equals DEVICE or UNIT number --
          -- *[tt]. Equals optional technology type --

(??[tt]??) ADD a new Device (U??) EDIT an entered Device

(Q) EXIT WITHOUT SAVING FILE (S) SAVE edited file and EXIT

                       Type *?* for HELP







    4.1   (A)   EDIT DESIGN INFO HEADER

    The design header (HDR) contains the documentation
    information to be printed out on each page of the
    Automated Logic Drawings (ALD's) and on other project
    documentation.


    Information for the HDR is entered/edited by filling in
    the blanks or deleting and replacing the default
    information on the HDR INPUT SCREEN.















                                                  DESIGN EDITOR



4@4





CMD?

             Design number:          
                  Revision:    
              Design title:                           
                  Designer:                           

              Trace mode (Y/N)?  Y
             Route lines (Y/N)?  Y
             Plot output (Y/N)?  Y

       Use 100 mil grids (Y/N)?  N

     ALD matrix (X grid units):  15
     ALD matrix (Y grid units):  15
     PCB matrix (X grid units):  15
     PCB matrix (Y grid units):  20






    The following HDR fields are printed in the header block
    on each page of the ALD's generated for the design. 
    They are for documentation purposes only and are not
    used by DASOFT.


    Design number:         

    The Design number can be up to 8 characters in length. 
    The field is alphanumeric and is for documentation
    purposes only.



    Revision:    

    Revision is a 2 character alphanumeric field and is for
    documentation only.



    Design title:                           

    The name of the design is entered in the Design title
    block.  The field is 25 alphanumeric characters in
    length.





DESIGN EDITOR



                                                         4@5



 Designer:                           

 The name of the circuit Designer is entered here.  There
 are 25 alphanumeric characters available.  This field is
 the last field in the header that does not control
 options@




 The following are DASOFT control fields and are not
 printed out in the header of the ALD's.



 TRACE MODE (Y/N)?   

     Y     Print out comments as the system is
           processing. It is particularly comforting
           during the longer processing periods to
           know that the system is continuing to
           make progress.

     N     Suppress printing of comments during
           processing.



 PLOT OUTPUT (Y/N)?   

     Y = Send ALD's to the XY-plotter.

     N = Send ALD's to graphic screen for viewing.
         The character output and line drawing
         capabilities of the ALDPLOT program will be
         sent to the graphics device defined in
         GRAPHICS.CTL instead of the plotter.  This
         allows the designer to quickly see
         placement and lines before committing the
         drawing to the plotter.

 NOTE:  DEFAULT IS "Y"; FUNCTION IS ONLY IMPLEMENTED IF
 YOU HAVE DEVELOPED THE GRAPHICS.ASM FILE FOR YOUR
 HARDWARE.


 ALD matrix (X grid units):
 ALD matrix (Y grid units):

 A digit number defines the number of spaces used in
spacing the ABC/123 reference markers along the BOTTOM
and LEFT edge of the ALD drawing.  Default is 15.  The
number must be greater than 10.  These values will not
need to be changed in normal use.


                                              DESIGN EDITOR




4@6




    PCB MATRIX @GRID UNITS):   

    Specifies the number of character positions between the
    grid designators on the PCB plots for assistance in
    locating unroutes during interactive manual routing
    sessions and for locating parts in wirewrap.  This value
    will not need to be changed in normal use.


  NOTE:  FOR ALL GRID UNIT SPECIFICATIONS THE MINIMUM
    NUMBER OF CHARACTERS ALLOWED BETWEEN DESIGNATORS IS 10.




    Once the "HDR" screen has been filled in or updated, or
    just reviewed, there are 2 command options available to
    the designer:


    CMD?  S


    The "S" or Save command replaces the previous HDR
    information with the current screen information, and
    exits.


    CMD?  Q

    The "Q" or Quit command exits the HDR function without
    changing any fields on the original screen.























DESIGN EDITOR



                                                            4@7



    4.2   (B)   EDIT COMMENT BLOC@S


    Comment blocks may be placed at any location on the
    ALD's.  The default block location (X=210, Y= 09) is in
    the center of the titl@ block in the lower right hand
    corner of the page along with the HDR information.


    You can put multiple comment blocks on a single
    schemat;@ pa8e.


       Each blook allows 4 lines of 25 characters for entry             of
    any   information   you  would  like  to  add  to   your
    schematics.




CMD?

              -- COMMENT EDITOR --

              (A)  ADD new comment
              (#)  EDIT comment by page number
             - *#" equals page number

              (S)  SAVE and DONE





    CAUTION:  The "Q* and "S" commands work slightly
    differently in the comment function.  As individual
    comm@nt blocks are created and filled up using the "A*
    command, they are individually "S" Saved or "Q" Quit
    without change.  Then at the end of the entire edit
       session,   when   you are satisifi+d that all the comments
    are  correct,  the comment editing session can be  @ndad
       us;ng either the "Q" or "S" command, thus generating an
    up@ate for the entire session, and an exit back to the
    Design Editor.











                                                  DESIGN EDITOR




4@8




    @A)  ADD A NEW COMMENT

    Upon entering an "A" on the CMD?  line, DASOFT returns
    with the following input screen.




    CMD?     


              ALD PAGE:    X: 210 Y:  09

              :                         
              :                         
              :                         
              :                         




    ALD PAGE:    X: 210 Y:  09


    A comment is created ("A"dded) simply by entering the
    ALD page number on this line (1 to 99).


    NOTE A page number must be specified.  A comment entered
    without a page number will not be saved by DASOFT.

    IF YOU WANT TO DELETE AN EXISTING COMMENT, DELETE THE
    PAGE NUMBER AND THEN SAVE THE ENTRY.



              X:   


    The X coordinate, up to 3 digits, where the upper left
    corner of the 4 line by 25 character comment block is to
    appear.  Range is 1 to 255.


              Y:   

    The Y coordinate, up to 3 digits, where the upper left
    corner of the comment block is to appear.

    The default "X" and "Y" coordinates may be used (places
    the comment in the center of the HDR block in the lower
    right hand corner of the ALD) or changed to any location
    desired on the page.


DESIGN EDITOR




                                                        4@9



CAUTION Comments can and will be overlayed on top of
one another if more than one comment is *A"dded with the
same ALD PAGE and *X*,"Y" coordinates.  This may be
useful if care is taken.  If such an overlay is not
desired, the coordinates of the comment blocks may be
changed using the EDIT COMMENT BY PAGE NO. function, and
cycling through the comments on the page until you get
to tbe one you want to edit.


The text area is designated by 4 ":*'s which indicate
that 4 lines of 25 characters are available for each
comm+nt blook.



<1>   EDIT COMMENT BY PAGE NUMBER


Successive entries of a page number will bring up all
comment blocks on that page.  When the last comment on
the page has been displayed, the following message will
be printed:


          PAGE NOT FOUND@ POINT@R AT TOP

Re-entry of the page number will reset the pointer, and
again cycle through each comment on the page.


NOTE The EDIT command must be entered from the COMMENT
EDITOR command screen.  Direct cycling from one comment
to the next without first exiting with an "S" or "Q"
command will not work.



(S)   SAVE AND EXIT TO DRL

After all comments have been Added and edited the
session is terminated using the *S* command at which
point the design comment file is updated.












                                              DESIGN EDITOR




4@10




    4.3    (??[tt]??)    IMPLICIT ADD NEW DEVICE


    The IMPLICIT ADD command is used to add devices to the
    design being formed in the DRL file.  The part number of
    a device in the Macro library is entered on the CMD? 
    line of the menu.  The system references the MACRO file
    for component information and then displays the full
    edit screen for data input.  A UNIT NUMBER is
    automatically assigned by the system.


    Once the designer completes the DEVICE INPUT SCREEN, the
    component is fully defined in the design.  At this point
    DASOFT takes over and makes the interconnections for
    completi the ALD and PCB layout and routing.


    The Design Editor has two special features that make
    library files smaller andesign entry easier.


    1.  Different TECHNOLOGY TYPES may be specified as the
    components are entered into the DESIGN file.  They are
    not stored as separate parts in the library.  Therefore,
    you can make one library entry for a 7400 and call it
    into different designs as 74LSOO, 74ALSOO, 74SOO, 7400
    etc.


    2.  Components with multiple gates in a package are
    entered in the library as the "A" gate plus a PIN
    combination.  (See Chapter 3.) You may call any of the
    gates into the DESIGN file by entering the part number
    FOLLOWED by a hyphen and the gate letter:  7400-B or
    7404-C.  The system will make the correct pin
    references.


















DESIGN EDITOR



                                                            4@11



    When the device number of a desired component is
    entered,


    CMD?  7485


    DASOFT responds with the appropriate device input screen
    as follows:




CMD?

Element pe: 7485                  Unit number: U01
ALD position PG:    X:    Y:        PCB position X:       Y:
Ori+ntation:        Exp&:                 Exp2:
                     +-------+
                -02==|A<B
                -03--|A=B
                -04--|A>B
                     +-+   +-+
                       |CMP|
                     +-+   +-+
                -%0--|AO  A<B|--07-:
                -%2--|A%  A=B|--06-:
                -%3--|A2  A>B|--05-:
                =15=-|A3
                -09--|BO
                -%%--|B%
                -!4--|B2
                -01--|B3
                     +-------+
                          VCC|--16-:
                          GND|--08-:






    On@e the screen is displayed data may be entered as in
    the following example:












                                                  DESIGN EDITOR




4@12






CMD?

Element type: 7485                Unit number: U01
ALD position PG:  X: 50 Y: 90 PCB position X: 25 Y: 50
Orientation: 00 Exp1:             Exp2:
                      +-------+
       CNTRL lN 1-02--|A<B
       CNTRL IN 2-03--|A=B
       CNTRL IN 3-04--|A@B
                      +-+   +-+
                       |CMP|
                      +-+   +-+
       +DATA IN 1-10--|AO A<B|--07-:  CNTRL OUT1
       +DATA IN 2-12--|A1 A=B|--06-:  CNTRL OUT2
       +DATA IN 3-13--|A2 A>B|--05-:  CNTRL OUT3
       +DATA IN 4-15--|A3
       +DATA IN 5-09--|BO
       +DATA IN 6-11--|B1
       +DATA IN 7-14--|B2
       +DATA IN 8-01--|B3
                      +-------+
                           VCC|--16-: +5VDC
                           GND|--08-: GND






    The fields are used as follows:


    ELEMENT TYPE:

    The element type is the device number specified by the
    designer in the Macro Library file, and is usually the
    same as the manufacturer's part number for IC's.  The
    part bearing this number is retriev@d from the MACRO
    file by the Design Editor.  NEVER change this
    information as it is shown by the Editor.













DESIGN EDITOR



                                                        4@13




UNIT NUMBER:

Unit numbers are automatically assigned sequentially by
DASOFT as parts are added to the design.  Each Unit
number is a 1 character, 2 digit, 1 character (if
needed) field which defines the package of the gate or
logical el+ment.  The field is incremented with each
additional element added unless the number is altered
during the add session.  The A,B,C, etc. suffix on the
part indicates which element in the package is
specified.  Thus, U14A, U14B, and U14C are all located
within package U14, but on different pins.


The unit number can be edited at this point if
necessary. The circumstances under which the unit number
would be changed usually oocur when using IC's that
@ontain multiple gates within the same package. That is,
the various gates can be assigned to appropriate
packages by editing the unit numbers.




ALD POSITION PG:    X:    Y:   


The first thing you need to specify is the location of
the device on the Automated Logic Diagram (ALD).  The
entry includes the page number (2 digits), followed by
the "X" and "Y" coordinates of the location on that page
where the schematic symbol should appear.  X values may
range from 0 to 255, Y values from 0 to 110.  The
placement specifi+s the Y @oordinate of the first line
of the drawing where the Unit Number is placed and the X
coordinate starts at the leftmost character of the
signal connection line, where the pin numbering is
located.


NOTE If the page number is 0, the device will not appear
in the drawings, but it will still show up in other
documentation.












                                              DESIGN EDITOR



4@14




    The coordinate system is Cartesian and the layout on an
    11 by 17 inch drawing is as follows.

        . Y = 110 MAX.









                                              X = 255 MAX.
        |                                                 >
      X,Y = 0,0
                  50          100         150         200





































DESIGN EDITOR



                                                        4@15




PCB POSITION X:       Y:    


The physical location of the device on the Printed
Circuit Board can similarly be specified at this time,
or a second edit session can be used to enter the PCB
locations after the first pass at the design is
completed.

The coordinate system used for the Printed Circuit Board
layout is also Cartesian, but specifies a 50 mil grid
matrix.  The X and Y fields are three digits wide, X
ranging from 0 to 250 and Y ranging from 0 to 127.  The
specification places PIN 1 of the device in the exact
grid location.



Following is the maximum size grid layout for PCB's.

   . Y = 127 MAX. (128 x 0.05in = 6.4in)









                  X = 250 MAX. (250 x 0.05in = 12.5in)
   |                                                  >
  X,Y = 0,0





















                                              DESIGN EDITOR



4@16




    ORIENTATION:   



    Orientation specifies the rotation of a part about PIN 1
    for physical placement on the Printed Circuit Board.



    Allowable orientation entries are:  00, 01, 02, and 03
    which rotate the device in 90 degree increments about
    pin 1 in a clockwise direction.  Default is 00.


    Orientation 00 places the device on the board as its
    footprint was defined.  Orientation 01 would turn the
    component 90 degrees in a clockwise direction. 
    Orientation 02 and 03 each rotate the device an
    additional 90 degrees.

    The final placement of the component on the board is,
    therefore, dependent on BOTH the entry in the
    Orientation field in the Design Editor AND the footprint
    definition in the Library Editor.



    For example, if you define the footprint with Pin 2
    below Pin 1, the component will appear that way on the
    board if you specify 00 in the Orientation field in the
    Design Editor.  If you specify Orientation 3, the device
    will be rotated 270 degrees and Pin 2 will be to the
    RIGHT of Pin 1:

                            Orientation           Orientation
      Footprint                 00                    03

       1                       1                @ @ @ @ @ @
       2   @                   2    @
           @                        @             1 2 @ @ @ @
           @
                               @    @
           @                   @    @











DESIGN EDITOR



                                                        4@17


Similarly.........

If you define the footprint with Pin 2 to the right of
Pin 1, it will appear in the same position on the board
if you give Orientation as 00 and will rotate 90 degrees
for Orientation 01:

                      Orientation          Orientation

 Footprint                 00                  01

 1 2 @ @ ~             1 2 ~ @ ~                  1
                                                  2
 ~ @ ~ ~ ~             ~ ~ @ ~ ~                  @




In TYPE 1 devices, the default footprint has Pin 1 at
0,0 and Pin 2 at 0,-2; i.e. below Pin 1.  Orientation 00
places Pin 2 BELOW Pin 1 on the board.


In TYPE 3 devices with only 2 pins, if you choose to use
the SPACING field instead of defining a footprint, the
system will treat the device as if Fin 2 were defined
BELOW Pin 1.  That is, Orientation 00 would place the
component VERTICALLY on the board with Pin 1 at the top.




























                                              DESIGN EDITOR



4@18




    Exp1:, Exp2:



    These fields are not implemented at this time.  Leave
    them blank.




    :                    (NETNAMES)



    Any device pins that you want connected in your design
    must be labeled with appropriate NETNAMES.  It is the
    NETNAME that specifies the design interconnections (i.e. 
    all identical NETNAMES specify a NET of
    interconnections).  The more descriptive the NETNAMES,
    the more information is transferred to the reader of
    your Automated Logic Drawings (ALD's).


    At each pin of the logic drawing of the device, a colon
    marks the beginning of a netname field.  Netnames may be
    up to 10 alphanumeric characters.  You can use the ten
    digits, the 26 alphbetic characters, comma, period,
    plus, minus, etc.  Depending on your plotter, some
    @haracters (a back slash) may cause the plotter to
    misplot the schematics.  It isimportant to experiment on
    your first trip through the system to see how your
    plotter reacts to the NETNAME characters you intend to
    use.  Maintain a list of "legal" characters for future
    reference.  A blank field is no connection.  Everywhere
    an identical name is used in the file, an
    interconnection is defined.



















DESIGN EDITOR



                                                        4@19




When the screen has been filled in completely, the
cursor will return to the CMD?  command line.  At this
time you may either save the screen as entered or quit
the session with no save:



CMD?  S

The *S* or SAVE command will add the new device to the
design, as specified in the device input screen above,
by entering the above information into the DRL file.



CMD?  Q

The "Q" or QUIT command will terminate the implicit ADD
function without adding the device to the DRL file.




































                                              DESIGN EDITOR



4@20




    4.4     (U??)    IMPLICIT EDIT ENTERED DEVICE


    To make a @hange to an entry in the desi8n, simply eall
    up the component to be modified by its UNlT NUMBER.  If
    you don't know its unit number, get a list of components
    used in the design (option "E").


    CMD?  U02


    DASOFT responds by retrieving the previously entered
    device information from the DRL file, and displays it as
    follows:




    CMD?

Element type: 7485                Unit number: U01
ALD position PG: 1  X: 50 Y: 90   PCB position X: 25    Y: 50
Orientation: 00    E1:             E2:
                     +-------+
    : CNTRL IN 1-02--|A<B
    : CNTRL IN 2-03--|A=B
    : CNTRL IN 3-04--|A>B
                     +-+   +-+
                       |CMP|
                     +@+   +-+
    : +DATA IN 1-10--@AO  A<B|--07-:  CNTRL OUT1
    : +DATA IN 2-12--|A1  A=B|--06-:  CNTRL OUT2
    : -DATA IN 3-13--|A2  A>B|--05-:  CNTRL OUT3
    : -DATA IN 4-15--|A3
    : .DATA IN 5-09--|BO
    : +DATA IN 6-11--|B1
    : -DATA IN 7-14--|B2
    : +DATA IN 8-01--|B3
                     +-------+
                          VCC|--16-:  +5VDC
                          GND|--08-:  GND






    At this time there are several options in addition to
    the editing of any of the previously entered information
    on the screen shown above:




DESI0N EDITOR




                                                        4-21



CMD?  D


The "D" DELETE function will erase the entire device
record from the DRL file.  That is, the component will
be removed from your design file.




CMD?  C


The COPY command is most useful for the design of RAM
and similar such arrays, where few changes need to be
made to each device entry.  The COPY command actually
ADDs the existing device to the design again, thus
allowing the designer to @dit the few changes needed,
and have DASOFT make the new entry to the DRL file.




CMD?  S


The "S* command will update the device record in the DRL
file with any n@w or changed information entered during
the edit session@




CMD?  Q


The QUIT @ommand exits the edit session without any
updates to the DRL file.

















                                              DESIGN EDITOR




4@22




    4.5   (F)   LOAD A NEW MACRO FILE


    If you need a device that is not in your design library
    file, another library file may be temporarily accessed
    using the Load command.


    CMD?   F

    DASOFT responds with:


    CMD?                    ENTER NAME OF NEW MACRO FILE


    The name of any other library file may be entered, thus
    making all of the devices in that file available to the
    current design.  No file extension is necessary.



                   CAUTION

    ALL DEVICES ADDED TO THE DESIGN FROM ANOTHER LIBRARY
    FILE MUST BE ADDED TO THE CURRENT LIBRARY FILE WITH THE
    MACRO LIBRARY EDITOR (TRANSFER COMMAND) BEFORE ANY
    ADDITIONAL DASOFT FUNCTIONS CAN BE PERFORMED.



























DESIGN EDITOR



                                                        4-23




  4.6  (D)   1.IST DEVICES IN MACRO LIBRARY


  Execution  @f the List command from the DRL FILE EDITING
     menu   will   produce a complete list of all         the   dev;ces
     available    in the MACRO library of the same name as           the
  DRL file or, alternatively, it will list all the devices
  available  in the MACRO file that has  been  temporarily
  loaded using the LOAD command.


  The following is an example of such a listing for the
  TTL Macro file supplied:




CMD?

    7400      7422      74138     74242
    7401      7423      74139     74243
    7402      7425      74148     74244
    7403      7426      74150     74245
    7404      7427      74151     74253
    7405      7428      74153     74259
    7406      7430      74154     74373
    7407      7432      74157     74374
    7408      7433      74163     R
    7409      7437      74164     74175
    7410      7438      74166     74197
    7411      7440      74169     C
    7412      7447      74179
    7413      7455      74181
    7414      7473      74182
    7415      7474      74191
    7416      7483      74198
    7417      7485      74221
    7420      7486      74240
    7421      74124     74241





  When the list is displayed on the screen, any of the
  normal Design Editor commands can be given.  That is,
  the CMD?  line is ready to receive any option selection
  from the menu.  For instance,







                                                DESIGN EDITOR




4-24




    CMD?  7400


    The implicit ADD command can be executed directly from
    the list screen.  In this example the 7400 device would
    be brought up for the designer to add it to the DRL
    design file.



    If you would like to have the menu re-displayed, type a
    period, ".", followed by a eturn" and the menu will
    come back.










































DEGN EDITOR




                                                           4@25



   4.7    (E)   LIST DEVICES USED IN DESIGN


   The LIST DEVICES USED command produces a screen listing
   of the devices already used in the current design.


   The format is  --UNIT NUMBER    DEVICE NUMBER--




   Important uses for this command include

   1) Getting a cross reference between DEVICE NUMBERS and
   UNIT NUMBERS for DRL file editing assistance.

   2) Gathering common logical elements together and
   assigning them to appropriate packages.

   3) Determining whether any additional logical elements
   are still available in packages that have been used.





CMD?                                  ENTER C TO CONTINUE


     R02   R             U22C  7404          U12   2147
     L01   LED           U22F  7404          U13   2147
     R06   R             U23A  7408          U15   2147
     L05   LED           U21   74175         X01   24PHDR
     L02   LED           U20   74175         X04   24PHDR
     R04   R             U19A  7408          X02   24PHDR
     L03   LED           U24A  7415          X03   24PHDR
     L04   LED           U24B  7415          U22D  7404
     U01   74%97         U21C  74&5          U19C  7408
     U02   ?4%57         U18C  7400          U23B  74(8
     U03   74%97         U18D  ?@00          U!@@  7400
     U04   7@!57         U07   74%53         U23C  7408
     U05   74%97         U09   2%@?          U17B  7400
     U06   7@ 57         U%6   2 @ 7          U19B  ?408
     U08   74%53         U23D  ?408          U19D  @408
     U22A  ?404          U10   21@7          C05   C
     U22B  7404          U1&   2@:7          C06   C








                                                 DESIGN EDITOR



4@26




    NOTES If more devices have been used than will fit on
    one screen, subsequent screens may be accessed by
    entering "C" on the CMD? line to continue.



    The UNIT NUMBERS are listed in the order that they were
    last edited.  Thus prior to any editing sessions, they
    will be listed in ascending numerical order, in the
    sequence in which they were added to the design, for the
    various device types.


    As with the Library List, any menu item may be selected
    on the CMD? line while the list is being displayed.


    CMD?  "S" or "Q" to save or quit.




    CMD?  7400


    The implicit ADD command can be implemented directly
    from the USEd devices list screen.  The above example
    would cause DASOFT to recall the 7400 device input
    screen so that you can add it to the design.


    The menu will be re-displayed if you type a "." period.























DESIGN EDITOR




                                                        4@27



4.8    (S)   SAVE THIS DRL FILE AS EDITED


When the *S"ave command is executed DASOFT will ask if
it should indeed delete the OLD backup DRL file and
SAVE the newly edited version.  This is your last chance
to change your mind.


CMD?                 OK TO DELETE BACKUP AND END? (Y/N)


Entering a "Y* on the CMD?  line causes the existing DRL
file to be replaced by an updated DRL file containing
all of the changes and additions entered during the
current edit session@  Th+ OLD file will b+ renamed
FILENAME.BAK.



Entering an "N* on the CMD?  line causes the system to
return to the Design Editor menu for further editing
before termination of the session.


Alternatively, the option of exiting the session with a
*Q* command which will preserve the backup DRL file, and
disregard the changes entered during this edit session.



























                                              DESIGN EDITOR




4@28




    4.9    (Q)   EXIT WITHOUT SAVING FILE


    If the edited version of the DRL file is not desired for
    any reason, it will be discarded and DASOFT will revert
    to the backup file when a DRL edit session is exited
    using the "Q" command.


    The "Q" command may also be used to exit an edit session
    where the DRL file was viewed but no changes were made.






    4.10    (CT)    F~EVENT FUTURE FILE CHANGES


    When the design is oomplete@ and CAST IN CONCRETE @o to
    speak, the (CT) command (Commit) is used to insure that
    it will stay that way.

    A oomplete aet of documentation for a particular release
       @an be   pr.eaer.ved.

    Any future desigchanges or updates require a complete
    new set of documentation and a new revision number.

    So be careful and don't commit (CT) the design
    prematurely!  Create a backup first.























DESIGN EDITOR




                                                              5@1









              CHAPTER 5     Outline Editor







    The design (DRL) files and macro (MAC) files contain all
    of the information on the parts that have been used in
    the design, their physical sizes and pin layouts, and
    where each part is placed and interconnected.  The only
    data needed to complete the physical board itself is the
    outline of the board, positions and sizes of mounting
    holes, the sizes of pads used in the design, and the
    placement of power grids for power distribution.  This
    data is entered into the system through the OUTLINE
    editor.


    Generic outline files for S-100 bus cards, STD-Bus,
    etc., can be developed once and then re-used in other
    designs simply by renaming the file and changing the
    power grid layouts with the editor.


    Entering the (E) option from the main menu will call the
    Outline Editor program.  The system will assume the
    default filename unless you specify another one.




CMD?                                          Enter design name.



The OUTLINE EDITOR uses the DASOFT Graphics Mode to input
information about the physical specifications of the PCB.  Each
screen character represents 1 50-mil grid on the board matrix.

Cursor movement commands are used to @nter the edge of the board
and the power and ground grids.  Mounting hole locations and
sizes are entered from the menu option (M). Pad sizes are defined
with the option (P).




                                                  OUTLINE EDITOR




5@2



    After you enter the design name, and then the name of
    the OUTLINE file to be used, the system will respond
    with the following menu:





 CMD?
                -- OUTLINE EDITOR --

(0) Enter/Edit board OUTLINE (P) Define PAD size

(G) Enter/Edit POWER GRID lines (E) Use Cursor to ERASE lines

(M) Enter/Edit MOUNTING HOLES (?) for HELP

(Q) EXIT WITHOUT SAVE            (S) SAVE file and EXIT




    Enter the desired option on the command line.







    If, after you have entered the design filename and the
    system has responded with the message "New file
    created", no further activity occurs, check your design
    file.  @f any component is not placed, or is placed out
    of bounds, the Outline Editor cannot display it.  The
    easiest way to check a large file is to print out a
    netlist and partslist.  The netlist will show if any
    pin that has been used is misplaced, and the partslist
    will show you if you have a component in your design
    file that was not used at all.
















OUTLINE EDITOR




                                                              5@3



    5.1  (0@  ENTER/EDIT BOARD OUTLINE


    If you select the (0) command, the system enters
    GRAPHICS MODE.  Graphics mode differs significantly from
    the normal command input mode, and is characterized by
    the GRAPHICS MODE sign at the top of the screen (where
    the CMD?  line used to be, see below), and the X and Y
    coordinates of the Graphics Cursor on the right side top
    of the screen:



OUTLINE mode             X = 005 Y = 079 Pen [ UP ]
                     Cursor side: 1 Viewing side: 1



    It is possible for the cursor to be on one side of the
    board while you are viewing the opposite side.  If you
    are drawing something and it does not appear on the
    screen as the cursor moves, it is possible that you are
    looking at the other side of the board.  The outline
    should be entered and edited on SIDE 1 of the board, but
    can be viewed on either sid@.  When in doubt, use . the
    CURSOR SIDE% key (as defined in your graphics control
    keys and explained again below) or CURSOR SIDE2 key to
    display the side you wish to see.


    The PEN sign is a notice that the cursor is down/active
    (or up/inactive) in whatever command mode is chosen. 
    The cursor is turned on or off (active or inactive) by
    the CURSOR ACTIVE and CURSOR INACTIVE command keys
    defined in your graphics key definitions.  When the
    cursor is off (PEN UP) it may be moved around on the
    screen with the cursor movement keys without changing
    any data.  If the cursor is on (PEN DOWN) wherever the
    cursor moves it will change data.


    TO EXIT GRAPHICS MODE, type any non-command character
    to r@turn to the CMD?  line and then an *S" or "Q* will
    return you to the main menu.











                                                  OUTLINE EDITOR




5@4



    G~APHICAL REPRESENTATIONS


    To represent the board, the OUTLINE program uses the
    TGRAPHS.CTL program in a manner similar to the operation
    of the Route Editor.  (S@e Chapter 6.) The printed
    circuit board itself is represented by a matrix of .050
    inch (50 mil) grids:  127 grids high (y) by 250 grids
    wide (x).  The board outline may be placed anywhere
    inside this area.  The terminal will show a WINDOW of
    this matrix 20 grids high (one inch) and 80 grids wide
    (four inches).


    CHARACTER REPRESENTATIONS


    Characters are used to represent what type of line
    segment or pad is in each 50 mil grid location on the
    screen.  The pads specified for the board are
    represented by 'o' for small (type 0) pads or vias
    (feedthroughs).  The '@' character represents an IC pad
    (Type 1).  Type 2 and Type 3 pads are shown as '0' and
    ,0,@ respectively.  Large pads will be surrounded by
    ,M@s.  These characters are barriers, and represent the
    number of grids that these large pads will cover in the
    artwork.


    Power supply grids will be represented by the numbers 1-
    4.  Up to four different power grids may be entered into
    the system (see GRID command, below), and each grid will
    be repres@nted by a different number.  Finally, the
    actual outline of the board will be represented by '#'s.



    GRAPHICS KEYS


    As explained in more detail in the section on
    TGRAPHS.ASM in CHAPTER 10), the Graphics Control Keys
    define all movement and function while in Graphics Mode. 
    The user may selecthichever keys best suit his needs,
    but the default keys were chosen to work with a 10-key
    pad on the terminal keyboard.  This provides a logical
    layout for the keys defined, and keeps the graphics mode
    keys separate from the normal editing keys.  Norma)
    typewriter keys are inactive when in graphics mode,
    except for the "S" and "Q" which are used to exit.






OUTLINE EDITOR




                                                          5@5



  KEY                         USE

          CURSOR ACTIVE.  Cursor will now alter data@
          CURSOR  INACTIVE.    Cursor  moves   without
          altering.
  0       SET  PAD  DOWN.   A via is placed  at  cursor
          location.
  5       SPECIAL FUNCTION KEY

  8       SCROLL UP.    Move the cursor up one grid@
  4       SCROLL LEFT.  Move the cursor one grid left.
  2       SCROLL DOWN.  Move the cursor one grid down.
  6       SCROLL RIGHT. Move the cursor one grid right

  7       SIDE 1  Cursor is now active on side 1 of  the
          board.
  9       SlDE  2  Gursor is now active on side 2  of  the
          board.



The  special function key enables the user to call  upon
   subrout;nes that control th+ d;splay of th@ data window. 
The function key is followed by either a 1, 2, or 3.  If
a 5-1 is typed, the terminal will display Side 1 of the
board, without altering the location of the data window. 
If a 5-2 is typed, the terminal will display Side 2 of
the board again, without alt@ring the window.  If a 5-3
is typed, the terminal will display whichever side was
last selected, but will scroll the data window lo@ation
around to center the cursor in the window.  For instance
if the cursor is erasing on Side 2 towards one edge of
the screen, a 5-1 will display Side 1 but the cursor
will still be on the edge of the scr@en on Side 2.  If a
5-3 is typed, Side 2 will still be displayed but the
window will be moved so that the cursor now appears in
the center of the screen.



















                                              OUTLINE EDITOR




  5@6




       To    oreate   tbe board ou t1ine,     use the 8 4   2-6  keys   to
    move  the cursor to a point on what should (will) be the
    edge of the board.   This may be 0,0 on the grid in  the
    bottom  left  corner of the screen.   Typing the  Cursor
    Active  key  (a period ".") turns the PEN DOWN sign  on,
    and as you move the cursor around the board it will draw
    a line of "#"s, marking the edge of your board.


    NOTE THE OUTLINE MAY BE OF ANY SHAPE, BUT MUST MAKE A
    COMPLETE BARRIER AROUND THE BOARD.  NO GAPS MAY EXIST IN
    THE BOARD OUTLINE.











































OUTLINE EDITOR




                                                              5@7



    5.2  @G)   ENTER/EDIT POWER GRID LINES


    To enter a power supply grid line, the (G) command will
    cause a second full screen mode display to appear.




CMD?          


      Enter DRL NETNAMES for GRIDS below

      Then enter on the CMD? line the grid number to edit


                 Grid 1 name:
                 Grid 2 name:
                 Grid 3 name:
                 Grid 4 name:





    To create and edit the power grids, a grid must be named
    for each voltage NETNAME used in the design file (up to
    4).  This 10 character name must match the name attached
    to the power pins in the design file.  You don't have to
    use all four power grids but you may not skip a number;
    i.e., if you have only two grids, they must be grids 1
    and 2, not 1 and 3.


    Once the names of the grids have been specified, you
    only have to enter on the CMD?  line the number (1
    through 4) of the grid you want to add in the outline
    fil+.  If no action is needed, a "Q" or "S" will exit
    back to the main command screen.  If a grid number is
    specified, th+ terminal will enter GRAPHICS MODE for
    writing the grids onto the board.


    To place grids on the board, use the graphics control
    keys and the activate cursor keys, etc., to move, draw
    lines, and place via holes to switch sides of the board
    and continue lines.







                                                  OUTLINE EDITOR




5@8




    NOTE Due to the way the automatic routing package
    operates, grids 1 and 3 should be routed vertically on
    Side 1 of the board, connected by vias to horizontal
    strings on Side 2.  Grids 2 and 4 should have their
    active grid areas running horizontally on side 2 of the
    board, and can be connected by vertical stringers on
    side 1. No power grids should lay exactly on top of each
    other.  No routes will be made to any grid which has
    power planes simultaneously on both sides of the bod. 
    The router connects to the grids by routing to grid 1
    and 3 horizontally on side 2, putting in a via at the
    ,n+otion point to connect to the grid on the other
    side.  Similarly, connections between the chips and
    grids 2 and 4 are made on side 1 with vias connecting to
    the grids on the other side.


    Remember when entering grids, unlike creating the
    outline, it DOES matter which side the cursor is active
    on.  Use the 7-9 keys to switch the cursor to the right
    side of the board no matter which side you happen to be
    looking at on the terminal screen.  When finished with a
    grid, a "Q" or S" "will exit graphics mode.  If a
    mistake is made, use the ERASE command to take out the
    error and then the GRID command again to replace it.






























OUTLINE EDITOR




                                                            5@9



  5@3   (M)  MOUNTING HOLE ENTERING/EDITING


  Giving the (M) command initiates an editor for adding,
  deleting, or modifying the mounting holes.  The first
  prompt by the system is:


  CMD?            Add or Edit mounting hole?(A/E)


  If the Add option is specified, a mounting hole editing
  screen will appear similar to the one below@ however all
  data fields will be blank.  If editing is specified, the
  first entered mounting hole data will appear in the data
  fields of the full screen editing screen.




CMD?                       Save, Continue, Delete


                Hole X location: 120
                Hole Y location: 20
         Hole diameter (ines): 0.100
      Pad diameter (.005 grids): 25






  On the command line, several options are available: 

  IF IN ADD MODE -

   *D*elete will kill the entry being made. 
   "S"ave will store this entry at the end of
      the list, and exit back to the main
      command screen.
   *C*ontinue  will save this entry  and create
      another add screen for another hole.












                                                OUTLINE EDITOR




5@10




    IF IN EDIT MODE -

     "S"ave will  store the  updated  data  and
        return to the main command level. 
     "D"elete will remove this entry from the list
     "C"ontinua will save the current entry and
        build the edit scre+n for the next  entry
         in the list.  If "C"ontinue is used
         while pointing to the last hole entry in
         the list, the pointers wrap around and
         th@ first entry of the list is displayed
         again with an appropriate meaaag@.











































 OUTLINE EDITOR




                                                          5@11


5.4  (P)  Define PAD size


The PAD command is used to specify the sizes of pads
which will be used on the artwork.  Four sizes of pads,
referred to as Type 0-3, are defined in the system. 
Typ+ 0 is used for Via or feedthrough holes.  Type 1 is
used for integrated circuit pads (the square looking
ones) and is constant in the system.  Type 0 and Type 1
pads cannot be altered except by going into th@ source
code.  Type 2 is usually used for discrete components at
the user's discretion.  Type 3 is used for large
@omponents.  The user may change these pad sizes as
required for each individual design or simply use the
defaults.


     Pad type                           Default size

0 = via or feedthrough                     .04 inches
1 = standard IC pad                        .055 inches
2 = user definable, usually discrete       .06 inches
3 = user definable, usually large pads     .1  inches

NOTE:  Only pads smaller than .1 inches will be auto
routed to.

When entering the PAD command, a second Full Screen Mode
editing screen is presented, like the one below.  Two
prompt fields exist for the Type 0, 2, and 3 size pads. 
The first field is for the actual hole size to be
drilled in the board.  This data may eventually be used
for the automated fab and silkscreen drawings.  The
field is up to 5 characters.

The second field for each pad is the pad diameter.  This
is the outside diameter of the pad surrounding the hole,
and is specified in .005 inch grid units.  For example,
a 0.040 inch hole, divided by .005 inch grid units
yields 8 grids.  The defaults are shown on the screen
for reference.  After entering the data, a "Q" or "S"
entered on the CMD?  line will save the data and return
to the main input screen.

When  the pads are plotted,  all interior diameters will
be  constant.   This is so that the exact @enter of  the
   pad   ts claarly marked and the pad        master can     then   be
used for drilling purposes.








                                              OUTLINE EDITOR




5@12




    PAD COMMAND INPUT SCREEN




CMD?


                         Hole size           Pad diameter
                          (inches)           (.005 grids)

            Vias          0.040                  8
            Type 2 =      0.060                 12
            Type 3 =      0.100                 20






    Remember that the router cannot route to Type 3 pads. 
    Connections to Type 3 pads will be listed in the Unroute
    List (option H on the main menu) and should be added
    with the Route Editor.






























OUTLINE EDITOR




                                                          5@13


5.5  @S@  SAVE FILE AND EXIT


All editing is being done to a temporary file.  No long-
term storage is done until the *S"ave command is issued
from the command line.  The system then prints the
message:


 PLEASE WAIT ONE MINUTE FOR PROCESSING

Then, as each section of the outline file is saved, the
system will give you a progress report.


When all processing is complete, the system returns to
the main menu.




5.6  (Q)   EXIT WITHOUT SAVE


If no storage of the edited file is needed or desired
 for any reason, issuing a *Q" for Quit at the main
 command level will abort the editing session and return
 to the DASOFT main command processor without modifying
 any files.



























                                               OUTLINE EDITOR




                                                             6@1










                  CHAPTER 6     Route Editor







    The DASOFT Route Editor allows you to modify the route
    produced by the BORDROUT program.  The route editor is
    re-entrant so that you can pre@route certain traces if
    you wish, then let tha router do its job with the pre-
    entered routes already established.





    6.1  USING THE ROUTE EDITOR

    After the artwork file (filename.RTE) has been generated
    by the BORDROUTprogram, the Route Editor command "G* is
    entered from the DASOFT system.  The program is loaded
    and responds with the following screen:



CMD?                              Enter design filename.
  Default:B:PRETEND




The Route Editor uses the DASOFT Graphics Mode to EDIT artwork
routed with the BORDROUT auto-router.

Screen characters represent each 50 mil grid of the board matrix,
and by moving the cursor the user may
    Add Traces and vias - Add mode (T) with pen down (. period)
  ERASE traces and vias - ERASE mode (E) with pen down (. period)
     change CURSOR SIDE - with "7" (side 1) and "9" (side 2)
    change VIEWING SIDE . with "5%" (sid+ %) and "52"(side 2)
        @hange PAD SIZE - with PAD command (P@





                                                   ROUTE EDITOR




6-2





    Enter the name of the design file you would like to
    edit.  If a "default" filename is given and is the one
    you want, just type return.


    The system will respond with the following screen:







CMD?            

               Route Editor Commands

(T) Add trace           @N) Print NUMBER of unrouted nets
(E) ERASE lines (C) Show COORDINATES of nxt unroute
(F) Add FAT grid linesP) + <1> Change default PAD size
                            <E> ERASE pad
                            <M> Reference MARK

(Q) EXIT WITHOUT SAVE   (S) SAVE file and EXIT






    Entering any of the full screen graphics editing
    commands (T, E, or F) will result in the system going
    into GRAPHICS MODE as evidenced by the mode message
    being printed at the top of the screen where the CMD? 
    line used to be.


    TO EXIT GRAPHICS MODE BACK TO THE MENU, TYPE EITHER AN
    "S" OR A "Q" TO GET TO THE CMD? LINE, THEN TYPE AN "H".















ROUTE EDITOR




                                                        6@3



The default graphics control keys are: 

KEY                         USE

        Pen DOWN. Cursor will now alter data. 
        Pen UP. Cursor moves without altering data.
0 SET PAD DOWN. A via is placed at cursor location.

5       Sp@CIAL FUNCTION KEY
8       SCROLL UP.    Move the cursor up.
4       SCROLL LEFT.  Move the cursor one grid left.
2       SCROLL DOWN.  Move the cursor one grid down.
6       SCROLL RIGHT. Move the cursor one grid right

7 SIDE 1 Cursor is now active on side 1 of board. 
9 SIDE 2 Cursor is now active on side 2 of board.




The special function key enables you to call upon
special screen subroutines to change the displayed
window.  The function key is followed by either a 1, 2,
or 3.  If a 5-1 is typed, the terminal will display Side
1 of the board, without altering the location of the
data window.  If a 5-2 is typed, the terminal will
display Side 2 of the board, without altering the data
window coordinates.  If a 5-3 is typed, the terminal
will display whichever side was last s@lected, but will
scroll the data window location around to c@nter the
cursor in the window.  For instance if the cursor is
+rasing on Side 2 towards one edge of the screen, a 5-1
will display Side 1 but the cursor will still be on the
edge of the screen.  If a 5-3 is typed, Side 2 will
still be displayed but the window will be moved so that
the cursor now appears in the center of the screen@

There are s+veral features which ease the editing
process.  When you are in Graphics Mode, a message at
the top left of the screen will always tell you which
mode you have selected: add trace, erase, or fat lines.

From the graphics mode screen you can select any of the
menu commands without exiting to the CMD?  line.  If you
type any key other than a command or question mark, ?,
the system will ignore it.









                                               ROUTE EDITOR




6-4




    A question mark, typed from the grahics mode, will bring
    up a special "Editing Command List".  The commands on
    this list are used only while editing.



Available commands:

     (Q),(S) Return to the CMD? line
     (C) display Coordinates of next UN-route
     (T) Trace mode
     (E)  Erase mode
     (F)  Fat line mode
     (P)  Change FAD size
     (?)  command list

     (,)  pen UP
     (.)  pen DOWN
     (0)  draw Pad
     (7)  cursor on side 1
     (9)  cursor on side 2
     (5)  special function key


Cursor controls:

     (8)  up
     (4)  left
     (6)  right
     (2)  down                     Press any key to continue





    With this new feature, you can move back and forth
    quickly between adding and erasing lines.  Adding pads
    can also be done directly on the screen, without first
    exiting to the CMD?  line and then antering the P(ad)
    command.

    All keys other than those used for Editing Commands will
    be inactive in graphics mode.












ROUTE EDITOR




                                                        6@5



6.2  @T) ADD TRACE COMMAND


When you give the ADD TRACE command (T), the system
enters graphics mode and you can move the cursor around
and draw traces on the board.


NOTE IN THE ADD AND ERASE FUNCTIONS, NO CHANGE IS MADE
TO THE FIRST GRID LOCATION OCCUPIED BY THE CURSOR WHEN
THE CURSOR ACTIVATION KEY IS PRESSED.  THEREFORE THE
CURSOR SHOULD BE ON TOP OF THE PAD FOR STARTING OR ON
TOP OF THE LAST SEGMENT OF THE LINE BEING CONNECTED TO
WHEN THE CURSOR IS ACTIVATED FOR DRAWING.


Moving the cursor around will automatically insert the
characters you entered in the Install routine to
represent corners, horizontal line segments, etc.  Use
the *7* and *9" keys to switch sides of the board, and
the 0 key for setting via pads.  Use "Q" or "S" to exit
back to command mode when done.



The edge of the board is marked on the screen with the
character *#", just as it is in the Outline Editor. 
Likewise, the mounting holes are marked with the letter
"M*.  When the graphics mode screen first comes up the
cursor will be just inside the lower left corner of the
board.  As you move the cursor around, the system will
not let you move outside the board area.























                                               ROUTE EDITOR




6@6




    6.3  (E)   ERASE LINE$


    Occasionally the route efficiency can be improved by
    removing an existing route. After positioning the cursor
    at the appropriate point on the unwanted route,
    implem@nting the (E) command will cause DASOFT to delete
    that portion of the route that the cursor moves along. 
    You can then re-enter the route as you want it to be
    with the "A"dd command.


    Erase works like the ADD TRACE command only when the
    cursor is active (pen down) it will erase any line or
    via it crosses.  The ERASE command cannot be used to
    erase type 1,2,or 3 pads, and will beep and stop an
    attempt to do so.  Do not worry about the message if you
    intend to cross over the pad, it will allow you to do so
    on the second attempt.  Use the "Pad erase" function
    described in section 6.7 below to remove pads.


    NOTE WHEN ERASING A VIA, ONLY THE SIDE THE CURSOR IS ON
    IS AFFECTED.  YOU MUST ERASE VIAS ON BOTH SIDES OF THE
    BOARD.






























ROUTE EDITOR




                                                        6-7



6.4   (F)   ADD FAT GRID LINES


Wide (FAT) grid lines are most often used for power and
ground traces.  Implementing the FAT (F) command will
cause DASOFT to add a wide trace anywhere on the board,
not just where power grids were added in the Outline
Editor.  Lines entered with the FAT command have
priority and will be plotted over anytng on the final
artwork except mounting holes.


You can erase a FAT line with the "E"rase function, just
as you would a regular trace.

Lines added with the (F) command will be removed by the
BORDROUT program (the auto-router) if it is run after
the fat lines are entered.  Therefore, use the FAT
command ONLY on the final edit of the artwork.




































                                               ROUTE EDITOR




6@8




    6.5           PRINT @UMBER OF UNROUTED NETS


    Aft@r the autorouter has been run, there will be a
    certain number of PIN-@IN connections that could
    not be completed.

    The first step in the route editing session is to
    determine how well the router did on its own, and
    perhaps consider repositioning a component to achieve a
    more efficient route.

    The Number command, (N), tells you how many unrouted
    nets were left.  Unrouted net coordinates are printed on
    the screen by using the Show Unroutes command (C)
    (below).  After each Show Unroutes command the NUM count
    is decremented.  You can get a hardcopy list of the
    unroutes by using the Artwork Utility, (H) on the Main
    Menu.




































ROUTE EDITOR



                                                      6@9




6.6  @C)  SHOW COORDINATES OF NEXT UNROUTE


The (C) @ommand is used to print out the coordinates  of
  an uout@d net segment.  The system will enter Graphics
Mode as in the ADD Trace command and print the message

 X1= 045 Y1=132  X2=50 Y2=102

X1,Y1 is the destination of the unrouted line, X2,Y2 is
the coordinate position of the source pin.  Note the X
and Y cursor location numbers at the top of the screen
are set to the source location.  Type a "5" then "3" to
scroll your screen to that location.  The source pin
will be marked with an S and the destination pin will be
marked with a D.  This is to help you keep track of the
exact pins to be connected.  The "S" shows up at 0,0
until the first Show Unroutes command, (U), is entered.


If one end of the unroute is a finger on a card-edge
connector, the message will include the SIDE of the
finger as in the example below;


From  148,123   FING SIDE  2    to   166,053




CS      Restart  Unroute List


The command "CS" will reset the unroute counter
(pointer) to the top of the list.  This can be very
useful in that it allows you to step through the
unroutes several times, even after making the
connections.  A check of the edited entries is thereby
very easy.
















                                               ROUTE EDITOR




6@%0




    6.7   (P) <%>   CHANGE DEFAULT PAD SIZE
              <E>   ERASE PAD


    Whenever the set pad key (0) is pressed in ADD Traee
    mode, a via or feedthrough pad will be pla@ed there.  If
    you wish to hand place another type of pad, giving the
    (F) command followed by a space and the type (size) of
    pad desired will change the default pad size so that
    this new pad will be placed whenever the Set Pad key is
    pressed.  If an "E" is entered for new pad size, any
    time the Set pad key, "0", is pressed the pad will be
    deleted from both @ides of the board.





    All changes to the artwork are temporary, until you give
    the "S"ave COMMAND from the CMD? line.  Then the artwork
    file is updated.





    REMEMBER Backups of the artwork file, (filename.RTE) are
    NOT made automatically by the Route Editor.  For this
    reason, it is always wise to make a copy of your file
    before each route editing session.
























ROUTE EDITOR








6.8   @S)   SAVE FILE AND EXIT


After the edit session is completed, exiting the session
using the (S) command, will cause the Route Editor to
updat@ th+ route file with the changes entered during
the session.  No backup is created.





6.9   (Q)   QUIT WITHOUT SAVE


Exiting the edit session with the "Q" command will cause
no changes to be made to the route file.



NOTE DUE TO THE LARGE SIZE OF THE ARTWORK FILE, NO
BACKUPS ARE CREATED.  WE STRONGLY URGE YOU TO CREATE
BACKUPS OF ARTWORK FILES ON SEPARATE DISKS BEFORE
EDITING OR RE-ENTERING THE ROUTER.































                                               ROUTE EDITOR




6-12




    NOTES ON ROUTE EDITING


    A word here on how the artwork is being represented on
    the screen may be useful.  A 20 by 80 character window
    is printed with each character representing a 50 mil
    square of the PCB@  The default characters are described
    here, but you can, of course, change them for your
    terminal in the Installation Routine.


    * is fat power grid

    | is vertical trace

    \ or/  is a corner

    - horizontal line

    o @ 0 0 are the four pads, in order of size

    # is the board edge

    M is a mounting hole

    X is a finger connection


    When an editing command is entered, the graphic control
    keys become active, and the screen cursor can be moved
    and scrolled around the board to add and delete lines.























ROUTE EDITOR



                                                            6@13




    Below is a sample Route Editor screen as seen on a CRT
    with no special graphics characters:




 CMD? U                              X=042  Y=013  Pen [ UP ]
                                     Cursor side=1 Viewing side=1
X1=024 Y1=062 X2=046 Y2=052

 //| || |  o   || |      |||   || |     || *      | | /-/    |||
/~// ||~/  *   ||~|    ~ |||   ||~|    ~|| *     @/ | |~     ||\-
| |  ||    *   || |      |||   || |     || *        | |\----o||o@
@~@  @\~       @|~/    ~ @@|   @\~\@.@@~@@ *     ~@-/ @@@@@@-/\-@
o @            @@        @@@            @@ *
 ~@  | ~       @@~@@\  ~ @@@   \@~    /~@@ *          @~
 //            @\@@\@    @@@          @ @@ *
 ~@@\\-@       \@~ @@  ~ @@@          @~/@ *  \\ ~    @@
    \@@\   *     @ |@    o@@             @ *
           *     @ @\@@@@@/@             o *   @ ~    @~
           *     @ \@@---@@/          o    *   @ @    o
           *                               *   | @
       o   *     o               o         *   | o
           *                               *
           *                               *   o
         *                               *






    The @o' symbols are VIA OR FEEDTHROUGH HOLES.
    The '~' symbols are INTEGRATED CIRCUIT PADS.
    The '0' symbols are TYPE 2 PADS (DISCRETES).
    The '0' symbols are TYPE 3 PADS.
    The 'X' symbols are REGISTRATION MARKS.
    And,  of  course,  ----- horizontal tracas,     vertical
    traces, and / or \ signs are used for corners.
















                                                   ROUTE EDITOR



                                                         7@1









        CHAPTER 7    NON-INTERACTIVE PROGRAMS










Some of the DASOFT programs require no more input from
the user than starting up the routine.  These programs
are options *C*, *D*, *F*, and "H" on the main menu.  We
will discuss each one in turn.



7.1  (C)   AUTOMATED LOGIC DRAWING GENERATION

Once the DRL file has been created and all schematics . 
locations have been assigned, and header information has
been entered, it is time to create the logic drawings. 
Usually there are several iterations at this point,
where you can quickly put together a schematic page or
two, analyze the resulting drawings, and then 'fine
tune' the design before making the final plots.  To
produce the ALDs, enter the ALD compiler, (C).  The
system will prompt you for the nam+ of the design file@ 
(If the "default" file is correct, just press <return>.)




CMD?                                Name of DESIGN file?



The ALD compiler will combine the component information
from your Macro Library file (filename.MAC) with the
information in your design file (filename.DRL) to
produce a "to-from" list which the schematic plot
routine, ALDPLOT, can use.  This file is called
filename.ALD.

           example: PRETEND.ALD



                                      NON-INTERACTIVE PROGRAMS




7-2




    Any time a change is made to either the DRL or MAC file,
    the ALD compiler should be run again to update the
    Automated Logic Drawings.



    Enter the DRL file name just as you would in the design
    editor, without a file extension.  Then WAIT.  A great
    deal of activity will happen at first, followed by long
    pauses.  As each page of schematics is compiled, the
    system will print a message on the screen (unless you
    have set the TRACE MODE to "N" in your design file
    header.)


    Most users find that plotting individual ALD pages
    frequently throughout the design process is very useful. 
    At any point in the design entry the ALD program can be
    run and an up-to-the-minute schematic can be plotted.



    FORMAT OF THE LOGIC DRAWING

    On the left and right margins of the schematic page,
    CROSS REFERENCES are printed for all signals on the page
    which connect to other pages.  Any signal used only
    within the sheet will not have a cross reference
    listing.  The cross reference is done automatically, and
    is created each time the design file is compiled.

    The cross-page reference entry is two lines:  th@ first
    being simply the NETNAME which is connecting to another
    sheet.  All netnames are shown in alphabetical order
    from top to bottom to aid in cross-referencing.  The
    second line of each reference is the PAGE REFERENCE,
    which lists up to three connected page numbers.  If more
    than three references exist, an asterisk "*" is printed
    after the last page position to indicate that there are
    more than three entries.


    All signal flow is from left to right, input to output. 
    The left side cross references are always inputs to the
    logic elements on the page, and the cross reference
    entries on the right side are always outputs from the
    entries on this page going to other pages. Bidirectional
    nets are defined either as inputs or outputs, depending
    on how the macro was created.






NON-INTERACTIVE PROGRAMS




                                                         7@3



Each gate or logical unit will have its UNIT NUMBER
printed on top of its ANSII symbol, and the MACRO NUMBER
displayed below the symbol.  Type 1 or discrete logical
gates appear as boxes ), and Type 2 elements appear as
boxes with a 'hat' on top to designate control inputs
and outputs.  ALL Type 3 components will appear as
rectangles, but with the additional information of the
PART NAME and one extra informational field printed
under the box.



The DASOFT system makes use of the ANSII standard
notation in all automated logic drawings.  In the most
complicated instance, a device will look as follows on
the ALD:



Unit number                 U21
                         .           
Netname    READ.ENBL-01-0@1
           READ.ENBL-@5-0@@2
               -           |     @                  
Pin number                 |TSD                     Part name
                                 L
            DATABUSO-02-O@AO     1Y@]|0-03-BUS.D17
            DATABUS1-04-O@A1     1Y1@-05-BUS.DI6
                         @A2     1Y@O-07-BUS.DI5
            DATABUS2-06-0@
            DATABUS3-10-@1A3     1Y@O-09-BUS.DI4
            DATABUS4-12-O@AO     2Y@O-11-BUS.DI3
            DATABUS5-14-0.@A1     2Y.1@@-13-BUS.DI2

Part Number                74LS367
                                           @@@@ Pin name
Part  Location            @'n@ 020,020



The title block in the lower left corner of the
schematic page contains the drawing page number, title,
part number, designer, etc., and, if you wish, a comment
or two about the logic on the page.


Comments   may  be  placed anywhere on a  page.









                                      NON-INTERACTIVE PROORAMS




7@4




    The left side of the ALD is numbered with 0 as the
    lower left corner as in Cart+sian coordinate systems,
    and increases numericaly towards the top.  The bottom of
    the figure is lettered increasing to the right.  The
    spacing of these axis references may be changed.  (See
    the HDR command in the Design Editor for further
    information.) When the system has finished compiling
    all pages of the ALD, it creates an intermediate file
    called, filename.ALD.













































NON-INTERACTIVE PROGRAMS








    7.2   (D) DOCUMENTATION GENERATION


    The "D" @ommand is given from the Main Menu when you
    want to get hard copy listings of your work The system
    will ask which type of report you want:




CMD?                      Compile NETLIST or WIRELIST?  (N/W/Q)

NETLIST: the NETLIST describes each complete NET (circuit) of the
board, giving the pin number and location on the ALD and the PCB of
every node on the NET.
PARTSLIST: the PARTSLIST provides the description, quantity and
location of each different component on the board. This list is
automatically produced at the end of every NETLIST. 
WIRELIST:  the WIRELIST can be used for the production of wire-
wrapped prototype boards. The connections to be wired are given in
order of length and wrap layer.

If you choose to send the list directly to the OUTPUT device, no
file will be created on the disk. To save the list to disk, type N in
response to the OUTPUT question and th@n type the file from CP/M.





    To select the type of documentation you want, enter one
    character:  N is for Netlist, W is for Wirelist, and Q
    will abort and return to th@ DASOFT main menu.  If
    either N or W is chosen, the system will ask for the
    name of the design file to be used:



    CMD?                                Name of DESIGN file?


    Enter the name of the file you wish to use or hit
    <return> to select the default file.  The system will
    then prompt you for the desired output:


    CMD?                       Output to list device (Y/N/Q)








                                          NON-INTERACTIVE PROGRAMS




7@6




    If N is specified, the data generated will be sent to
    the disk as a file named FILENAME.NET which can then be
    printed at any time.  If Y is entered, the file will go
    to the CP/M list device directly.  A "Q" will abort the
    documentation program.


    Figures 7.1, 7.2 and 7.3 are samples of the lists
    produced.



    Note:  The PARTSLIST is printed automatically at the end
    of the NETLIST.



    The WIRELIST provides two lengths for each wire.  The
    "Manhattan" length is the straight X plus Y distance. 
    For example, the Manhattan distance from 1,1 to 2,2 is
    2, over 1 and up 1.  The "Computed" wire length is a
    fudged diagonal (between a true hypotenuse and the
    Manhattan length) PLUS wrap on both ends.
































NON-INTERACTIVE PROGRAMS




                                                                     7 7
PRETEND .DRL  NETLIST LISTING REV 2.4
   Title: EPROM EMULATOR
   Design No: 901      Rev 02
   Designed by: DAVID W. RUSSELL



      +5V
         R02   P(02)     PG 05, G- 5     OUTPUT            PCB= 050, 070
         R06   P(02)     PG 05, G- 2     OUTPUT            PCB= 012, 070
         L02   P(01)     PG 05, K- 4      INPUT            PCB= 082, 070
         R04   P(02)     PG 05, G- 4     OUTPUT            PCB= 090, 070
         U01   P(14)     PG 02, N- 3     VOLTAGE           PCB= 014, 064
         U02   P(16)     PG 03, D- 5     VOLTAGE           PCB= 030, 066
         U03   P(14)     PG 03, D- 2     VOLTAGE           PCB= 046, 064
         U04   P(16)     PG 03, G- 5     VOLTAGE           PCB= 062, 066
         U05   P(14)     PG 03, G- 2     VOLTAGE           PCB= 078, 064
         U06   P(16)     PG 03, K- 5     VOLTAGE           PCB= 094, 066
         U08   P(16)     PG 03, N- 4     VOLTAGE           PCB= 126, 066
         U22A  P(14)     PG 02, D- 5     VOLTAGE           PCB= 094, 024
         U23A  P(14@     PG 02, G- 6     VOLTAGE           PCB= 110, 024
         U21   P(16)     PG 02, N- 4     VOLTAGE           PCB= 078, 024
         U20   P(16)     PG 02, N- 5     VOLTAGE           PCB= 062, 024
         U19A  P(14)     PG 02, G- 3     VOLTAGE           PCB= 046, 024
         U24A  P(14)     PG 05, D- 5     VOLTAGE   (LS)    PCB= 126, 024
         U07   P(16)     PG 03, N- 6     VOLTAGE           PCB= 110, 066
         U09   P(18)     PG 01, D- 6     VOLTAGE           PCB= 014, 044
         U16   P(18)     PG 01, N- 3     VOLTAGE           PCB= 126, 044
         U10   P(18)     PG 01, G- 6     VOLTAGE           PCB= 030, 044
         Ull   P(18)     PG 01, K- 6     VOLTAGE           PCB= 046, 044
         U13   P(18)     PG 01, D- 3     VOLTAGE           PCB= 078, 044
         U15   P(18)     PG 01, K- 3     VOLTAGE           PCB= 110, 044
         U17A  P(14)     PG 02, G- 5     VOLTAGE           PCB= 014024
         U18A  P(14)     PG 02, K- 4     VOLTAGE           PCB= 030, 024
         C05   P(02)     PG 06, N- 5     OUTPUT          PCB= 086, 003
         C06   P(02)     PG 06, N- 5     OUTPUT            PCB= 111, 003
         C07   P(01)     PG 06, N- 4      INPUT            PCB= 004, 049
         C08   P(01)     PG 06, N- 3      INPUT            PCB= 037, 055
         C09   P(01)     PG 06, N- 3      INPUT            PCB= 134, 066
         C10   P(01)     PG 06, N- 2      INPUT            PCB= 134, 044
         Cll   P(01)     PG 06, N- 1      INPUT            PCB= 134, 024
         V01   P(01)     PG 06, G- 5     OUTPUT            PCB= 022, 094
         R01   P(01)     PG 06, K- 4      INPUT            PCB= 037, 070
         C02   P(01)     PG 06, K- 5      INPUT            PCB= 047, 085
         U14   P(18)     PG 01, G- 3     VOLTAGE           PCB= 094, 044
         C03   P(02)     PG 06, N- 7     OUTPUT            PCB= 024, 001
         C04   P(02)     PG 06, N- 6     OUTPUT            PCB= 040, 001
         U12   P(18)     PG 01, N- 6     VOLTAGE           PCB= 062, 044
     *WARNING...Multiple outputs

      +A.SEL.10
         U08   P(14)     PG 03, N- 4     CTL INP           PCB= 126, 062
         U17C  P(08)     PG 02, K- 5     OUTPUT            PCB= 014, 012

      +A.SEL.11
         U07   P(14)     PG 03, N- 6     CTL INP           PCB= 110, 062
         U17D  P(11)     PG 02, K- 4     OUTPUT            PCB= 014, 018


                                                  NON-INTERACTIVE PROGRAMS



       7 8
     ************ PARTS LIST ************

PRETEND .DRL   PARTS  LISTING REV 2.4                  FIGURE 7.2
   Title: EPROM EMULATOR
   Design No: 901      Rev 02
   Designed by: DAVID W. RUSSELL


        QTY:   PART #:      UNIT#:   PCB LOC:
         01     BRIDGE
                             B01    X= 005, Y= 100

        QTY:   PART #:      UNIT#:   PCB LOC:
         05     LED
                             L01    X= 060, Y= 070       COLOR  GREEN
                             L05    X= 022, Y= 070       COLOR  RED
                             L02    X= 082, Y= 070      OLOR  GREEN
                             L03    X= 100, Y= 070       COLOR  GREEN
                             L04    X= 122, Y= 070       COLOR  GREEN

        QTY:   PART #:      UNIT#:   PCB LOC:
         01     +5VREG
                             V01    X= 022, Y= 094

        QTY:   PART #:      UNIT#:   PCB LOC:
         08     2147
                             U09    X= 008, Y= 044
                             U16    X= 120, Y= 044
                             U10    X= 024, Y= 044
                             Ull    X= 040, Y= 044
                             U13    X= 072, Y= 044
                             U15    X= 104, Y= 044
                             U14    X= 088, Y= 044
                             U12    X= 056, Y= 044

        QTY:   PART #:      UNIT#:   PCB LOC:
         04     HEADER
                             X01    X= 055, Y= 100
                             X04    X= 115, Y= 100
                             X02    X= 075, Y= 100
                             X03    X= 095, Y= 100

        QTY:   PART #:      UNIT#:   PCB LOC:
         01     FINGER
                             J01    X= 070, Y= 112       HIGHT  120    005

        QTY:   PART #:      UNIT#:   PCB LOC:
         02     7400
                             U17    X= 008, Y= 024
                             U18    X= 024, Y= 024

        QTY:   PART #:      UNIT#:   PCB LOC:
         01     7404
                             U22    X= 088, Y= 024





       NON-INTERACTIVE PROGRAMS



7-1@




    7.3   (F)   COMPILING THE PRINTED CIRCUIT INFORMATION


    Once the placement information has been entered into the
    DRL file and the outline and physical parameters have
    been specified in the OTL file, all information
    necessary to generate the printed circuit artwork has
    been supplied.  Only two more steps are necessary to
    produce the artwork file itself.  The interconnection
    and placement data in the DRL file must be compiled into
    a series of interconnectons for the router and the
    router itself must be run.


    IMPORTANT -

    Any time a change has been made to the DRL file to
    effect a change to the artwork in additional routing
    attempts, the DRL file must be re-compiled before
    routing.  Only when using the re-entrant features of the
    router (see next section) is it not necessary to run the
    FCB compiler before running the router.


    To run the compiler, @nter the "F" command from the
    DASOFT Main Menu.  The program will be loaded and
    respond with the prompt:




CMD?                             Enter DESIGN filename




    The PCB compiler combines information from the DRL, MAC
    and OTL files to produce input files for the auto-
    router.  It creates a filename.RBN file which is used by
    the BORDROUT package.






    After you enter the name of the design file being
    compiled (no file extension), or selected the default
    file, the system next asks for:






NON-INTERACTIVE PROG@AMS



                                                         7-11




CMD?                            Please enter plot date.




Enter the date of the plot (for keeping track of the
various iterations you may make).  This field is not
analyzed, so any information may actually be entered.


The  compiler  then  begins  execution,   issuing   some
informational messages such as:

PASS1  Searching for finger connectors

PASS2  Generating PAD list

PASS3  Generating NET list

PASS4  Segmenting and Linking Net list

Linking net:  w/  nodes, single ended nets:      LINKED!



These are info@mational messages only, indicating the
compiler's progress as it determines the connections and
optimizes the routing strategy.  At this point, two
error messages are alao pos:sibl@. They are:


***ERROR...SINGLE ENDED NET..NO CODE GENERATED! 

and

UNIT U01 PLACED INCORRECTLY


The first error message indicates a single ended net, or
that a line name with only one connection pin was found. 
This is not a fatal error, since no routing codes are
generated for the pin, but it does indicate posaible
error in the DRL file; the NETLIST program should be
run from the "D" command to find out which net caused
the +r.r.or. and if it should be corr@@ted b+for+ finishing
the artwork.








                                      NON-INTERACTIVE PROGRAMS




7-12




    The second error indicates that the named unit number
    either was not placed at all in the DRL file or had a
    placement that resulted in pads being placed outside of
    the routing matrix area.  This is a fatal error, and the
    compiler will abort after it completes this pass.  THE
    COMPILER WILL NOT ABORT BEFORE ALL ERROR MESSAGES ARE
    PRINTED.


    When the compiler has finished, it will print the
    prompt:


                      Enter any key to return to system


    This is to allow you to view any error messages and make
    notes before the screen is cleared and control returns
    to the DASOFT system.  Type in any key to exit.



































NON-INTERACTIVE PROGRAMS



                                                         7@13




7.4   (H)   BOARD ARTWORK UTILITY


The "H" option on the Main Menu generates a hardcopy
MATRIX printout of the PCB routing on a standard 132
column printer.  The printout uses specified characters
to represent the various components of the PCB layout.


This option allows you to produce a hardcopy printout of
your board grid matrix.  The printed copy is 132 columns
wide and you may set the length with the (break number)
option.

A blank matrix (for use in initial parts placement) may
be generated by typing "BLANK* for the filename.

A list of the UNROUTES left by the router will be
printed at the end of the artwork printout.  To get a
list of the unroutes without the matrix, simply set the
break point at zero.



CMD?                         Name of ARTWORK file?




Enter the name of the artwork file (up to 8 characters)
to be printed.


Then select whether you want the output to go

a.) directly to the printer with no copy saved on disk,
(Y), or

b.) to a filename.MAT file on the disk for printing at a
later time, (N).


CMD?                 Send output to list device (Y/N)?












                                      NON-INTERACTIVE PROGRAMS




7-14




    Theaximum matrix size is 250 grids in the X direction. 
    Since many boards may be smaller than this, it is
    unnecessary (and even undesirable) to print out all of
    the blank grids after the final board coord;nate.  The
    break line number is ALWAYS THREE DIGITS and will be the
    last line printed by the "H" utility program.  Fill in
    on the next screen whether you want the complete matrix
    printed or only part of it:


    CMD?               Enter break number or N for default





    A BLANK matrix may be printed at any time.  This matrix
    can be very useful both in placing your components and
    in planning for the Route Edit process.  To produce the
    blank matrix, simply type "BLANK" on the command line
    when you are prompted for the design file name.


    Since one of the primary uses of the artwork matrix is
    route editing, a list of unroutes (those connections
    that could not be made by the auto-router) is printed at
    the end of every printout.  If you want just the
    unroute list tell the program to break at line 000.



























NON-INTERACTIVE PROGRAMS



                                                             8@1









                  CHAFTER 8  BORDROUT








    To automatically route your printed circuit board, run
    BORDROUT from CP/M.



CMD?                                          Enter design name.






    Enter your Design filename:







    This program will automatically route your printed
    circuit board.  It is a re-entrant routine, so if there
    is a filename.RTE file on your disk, i.e. one created by
    an earlier route pass, the output of this program run
    will be ADDED to the existing file.  If this is
    happening, the system will display the message

               ROUTE FILE LOADED

    and you will get a number of "Net previously routed"
    messages as the router progresses.









                                                    AUTO-ROUTER




8@2




    After you enter the name of the file you want to have
    routed, the system will read in the filename.RBN created
    by the PCB compiler, (F), create a new artwork image
    from the OUTLINE file, and begin routing.  While it is
    running, the router issues messages such as:


     Route #1
     Routing from 10,10 to 20,10
     Try #1 Destination found, retracing, complete
     Route #2
     Routing from 20,10 to 30,10
     Try #1  Destination found, retracing, complete


     Route #1A
     Routing from 30,10 to 40,10
     Try #1  Bad try
     Try #2 Destination found, retracing, complete
     Etc.


    The above comments are informational messages only. 
    Whenever the router begins an attempt at routing a
    trace, the starting search message is printed.  If the
    line was completed, the "complete" message is printed. 
    If the line required the addition of a via, a comma,
    ",", will be printed below the "Try #".  A second
    "retracing, commplete" message (r+presenting the second
    segment of the net) will then be displayed.



    The system will make up to 3 attempts at routing a net
    before it will list it as an "unroute". If you see three
    "Bad try" messages, you know that net will be in the
    unroute list.



    After all of the signal lines have been attempted, the
    terminal should beep and print


     Routing POWER lines


    This signifies that the system has begun routing the
    power grid lines.






AUTO-ROUTER



                                                         8@3




After the router has completed its job, it will print a
message of the form:


Tctal number of Nets attempted so far (hex) =
Number of incomplete routes so far =

Saving file:



This scr+en indicates the number of attempted nets and
th@ number that it could not do.  Note that the numbers
are in 4 digit hexadecimal (base 16).









































                                                AUTO-ROUTER




8-4



    ~OUTE~ KEY ENTRY CODES

    While the router is running, it will accept some key
    inputs as instructions.  These are summarized below, all
    other keys are ignored.


     KEY            COMMAND

      F         Finish line being routed then save file
      Q         Abort routing immediately
      S         Display route status
      C         Continue routing



    USE OF RE-ENTRANT ROUTER FEATURES


    The BORDROUT program is re-entrant, which means that the
    artwork generation may be stopped at any time.  After
    the router is stopped, you can view the job done so far
    by using the Route Editor.  You can add traces to those
    that the router has entered or you can delete any that
    you don't like.  The router can then be started again
    and will work with the changes you made to the file. 
    There are two basic cases where you may want to make use
    of these @eatures.  The first is for pre-routing
    important or critical nets, and the s@cond is for
    multiple pass routing attempts.



    PRE-ROUTING CRITICAL NETS


    Whenever it is important that a line be routed in a
    certain way, or the length of a line is critical as in
    clock nets or analog circuitry, it is advisable to pre-
    route these critical nets in the route Editor before the
    router starts routing. Pre-routing is also suggested for
    lines which cannot be handled well by the general routing
    algorithm, such as RAM bus lines.

    To pre-route a net, compile the DRL file as normal for a
    design, and start the BORDROUT program.  As soon as the
    router has started, and the 'starting search' messages
    begin to appear, type an 'F'. This will cause the router
    to create an artwork file at this stage of the route. 
    The Route Editor can then be used on this temporary file
    to route in any nets that are require special treatment.





AUTO-ROUTER




                                                                        8@5





   The router cbeoks for the existence of a FILENAME.RTE
 file on the disk of the same name as the one it intends
 to create.  If this file exists, it will be loaded into
 the router's working space first, and then all
 subsequent routes will be secondary to the pre-routed
 nets.

 IT IS ALWAYS IMPORTANT TO MAKE BACKUPS OF YOUR E-
 ROUTED ARTWORK FILES.


 When the router starts working on a pre-routed net, it
 issues the message


 ROUTE FILE LOADED


 This is an informational message that a file is loaded
 into the work space.  If you were not planning to do a
 multiple pass route, you might stop the execution and
 figure out what files you have.  THE BEGINNING OF
 EXECUTION OF THE ROUTER DEST~OYS THE OLD .RTE FILE, so
 once the router has started, the old file is gone, even
 if you abort the route. (Another reason to make frequent
 backups.)


 During routing, the router checks each pin to pin
 connection it tries to make for any possible branches
 which may already interconnect them.  If no oonneotion
 exists betw+en the two points, processing continues as
usual.  If some type of conn+ction does already exist,
however, the program prints: NET PREVIOUSLY ROUTED and
ignores the nnection.


















                                                AUTO-ROUTER




8@6



    NOTE It is possible to get the NET PREVIOUSLY ROUTED
    message even on the first pass of the router.  This is
    caused by the fact that the PCB compiler can, in some
    cases, create redundant nets.  These nets are created
    when, for instance, three points are to be connected;
    let's call them A, B, and C.  The compiler will create
    interconnections between A-B, and B-C to complete the
    n@t.  In some cases, the compiler will also create a net
    from A-C, which MAY be redundant.  If the router
    completes the A-B line, but cannot create the B-C line
    because of obstacles, it will try the A-C line in an
    attempt to get the net routed.  If it detects that the
    A-B and B-C lines are already connected and therefore
    the A-C line really is redundant, it will issue the NET
    PREVIOUSLY ROUTED message and skip the redundant net.



    The other case which warrants using the re-entrant
    router facilities is when the router, occasionally,
    makes an obviously poor choice in routing a line; one
    which can be seen to keep a number of other nets from
    being completed.  In this case the route editor can be
    used to remove the obstructing net and the router can be
    run again to make a second attempt at the other lines.


    An important attribute of the router is that it works in
    a "daisy chain" fashion.  It will only make two
    connections to a pad and will only check for two
    connections while looking for previously routed nets. 
    The router decides to route on the horizontal or
    vertical side depending on which distance is greater
    from source to destination.  It chooses the "longest
    distance" side on which to start.  If you have used a
    pad as an end point / or a segment that you want to do
    but it is not in the order the compiler has laid out for
    the router, the router will run two lines to that pad
    anyway, thus creating a pad with more than two
    connections.  (The from-to list the router works with
    is the .RBN file.) This means if you do any pre-routing
    or editing which puts more than two lines to a pad , or
    violate ita rul@ of routing the "longest distance" on
    its proper side, the router may not see that a
    connection has already been made.  It will then
    erroneously report the route as undone and attempt to
    redundantly route it.








AUTO-ROUTER



                                                         8@7

The che@king routine can be visualized by imagining a
mouse in a maze.  The mouse starts at the source "pad"
and follows the first *line* it encounters to wherever
it leads.  When the mouse gets to a "pad", it checks in
a circle and once again follows the first "line" it
finds.  With more than one entrance and on@ exit to a
"pad" the mouse can run down the wrong line and never
find the destination, even though it is connected.  When
the router encounters a pad with more than two
connections it will send a message to the screen.















































                                                AUTO-ROUTER




















        CHAPTER 9    PLOTTING ROUTINES










There are two different programs used in the DASOFT
system to plot design output.  These are 1.) ALDPLOT
for plotting the Automatic Logic Drawings (schematics),
and 2.) BORDPLOT - for plotting checkplots and final
PCB artwork.


Both plot routines communicate to the plotter through
the *plotter driver*.  The plotter driver must be
customized for the particular hardware you are using. 
These changes are usually small.  The file PLOTTER.CTL
must be on your disk in order to run ALDPLOT and
BORDPLOT.

Every customer is supplied with the source code to our
plotter driver routines.  The source files are usually
shipped on the "DATA" disk and are a series of .ASM
files.  If you modify one of these routines, you will
have to assemble it according to the instruction in
Chapter 10, section 10.2.  For the system to use the
plotter driver it must be called PLOTTER.CTL.











                                           PLOTTING ROUTINES




9@2




    9.1  ALDPLOT


    The plot program for schematics is run from CP/M.  When
    it is selected the following screen will appear:






Enter your Design filename ([PARMS):








    Several optional parameters may be entered after the
    filename on the ALDPLOT command line (preceeded by a
    square bracket, [):


    # - up to 2 digits, specifying one single page of the
    schematic diagrams to be printed.  If a page parameter
    is not specified, all pages will be printed in order,
    starting with page 1.


    B - specifies that NO BORDER should be drawn.  This
    option can be used if you have pre-printed schematic
    paper.


    N  - no matrix


    After you enter the filename and any parameters, the
    system will read in your plotter driver and check to see
    that your plotter is communicating.  It will display the
    name and revision of your driver as you entered it:


    DMP-41 PLOTTER DRIVER REV.1.0


    It will then give you a chance to check that your
    plotter is ready to go with both pen and paper:





PLOTTING ROUTINES



                                                          9@3


 Please change plotter PAPER then hit any key. 

 When you hit a key, the plot should start.

 To generate additional copies of the same schematic,
 only the ALDPLOT command is required.  If, however, a
 change is made to th@ file in the design editor, the
 file must be recompiled with the ALD compiler, (C).

 It is possible to stop the plotter without stopping the
 plot process.  This interrupt system works through the
 console, checking console status at break points in the
 route process.  To halt a plot, hit any key on the
 keyboard. A <return> does nicely.


 When the plotter has stopped, you will have several
 command options:







 Commands:   (C) - Continue
             (Q) - Quit
             (R) - Restart plot
             (S) - Restart program

Enter command:





 These options work as follows:

 (C) @ will start up the plotter again with no change

 @Q) - will QUIT the plot completely

 (R) - will  restart  the   plot  page  WITH  THE  SAME
       FILENAME AND PARAMETERS

 (S) - will  restart   the  ALDPLOT  program;  i.e.  you
       @ould start a plot of a different file with
       different parameters.


 NO BLANK PAGES ARE ALLOWED IN THE SCHEMATIC.  Any pages
 left blank in the middle of your schematic will make the
 router think it has finished the job and end.



                                            PLOTTING ROUTINES




9-4





    9.2   BORDPLOT


    To plot copies of the routed PCB Artwork, run BORDPLOT
    from CP/M.


Enter your Design filename ([PARMS):


    BORDPLOT will produce plots of your routed artwork on
    your X-Y plotter.  You may modify the output in several
    ways by adding parameter options to the filename entry
    above.  The option selections should follow the name and
    be preceded with a [ square bracket:  PRETEND [COB2

    Options:

    C - Composite (2-layer) artwork (Default is 3-layer)
    0 - Draw OUTLINE
    A - Plot component side only
    B - Plot solder side only
    2 - Plot at 2X size
    S - Slow the plotter for better ink flow
    T - Enter TEXT mode after artwork plot
    I - Registration marks for size 'C/D'page \ coordinates
    J - Registration marks for size 'B' page below

    The options work as follows..

    C Composite artwork, with pads and lines on side 1,
    and pads and lines on side 2 (Default is 3-layer:  pad
    master, component side, solder side)

    0 Draw the board outline on the artwork (Default is
    no outline)

    A    Plot the first side only

    B    Plot the second side only

    2    Plot  double size artwork (2:1)  (Default is 1:1)

    T Enter text mode after drawing the artwork, to allow
    the designer to add text to the sheet.  (Default is quit
    after artwork plot)

    S Slow the plotter down (if it can) to deposit more
    ink on the sheet.  (Default is fastest speed possible)

    I    1st = 10,150            J    1st = 10,100
         2nd = 300,160                2nd = 150,90


PLOTTING ROUTINES




                                                             9@5

    The plotting process can be halted at any time by typing
    any key.  This stop function can be used if you want to
    change pens, move the paper or make any other
    adjustments.  The plot will continue where it left off
    if you type a *C" on the menu:



Commands:        (C)  Continue
                 (R)  Restart
                 (T)  Exit to TEXT mode
                 (Q)  Quit


Enter Command:



    The (R) Restart option will begin the plot over, with
    the same parameters you first entered.

    The (T) Exit to TEXT mode will cause the system to
    abandon the plot it was working on and go directly into
    TEXT mode.

    As usual, the (Q) option will quit the program.




    TEXT MODE


    If a T is entered on the BORDPLOT command line, after
    each page is plotted, the system will allow the user to
    add text (or even logos) to the artwork. To position the
    cursor for writing, the 2-4-6-8 keys are used just as in
    the graphics mode operations.  Be very careful when
    adding text to your board.  There is NO ERASE.

    Alternatively, TEXT mode may be entered from the BORDPLOT
    menu that comes up when you halt the plot by typing any
    key.



    There are several special options in the text mode: 


    ORIENTATION


    Text may be added to the board in three different
    orientations.



                                               PLOTTING ROUTINES




9@6


    0     left to right, horizontal @parallel to bottom of
          board)

    6  = bottom to top, vertical, (parallel to right edge of
          board)

    4  = upside down, right to left




    SCALE  (or size)

    0 = approximately 100 mil

    1 =               150 mil

    2 =               250 mil

    3 =               500 mil


    As in the other Graphics Mode sections, type a "."
    (period) to lower the pen; i.e.  to start writing. Then
    usa a "," (comma) to raisa the pen and discontinue
    writing; i.e. to move to another location.































PLOTTING ROUTINES



                                                         9@7



There are two additional special features of the Text
Mode.  If the symbols !  or # are typed after a "."
(period) to lower the pen, the system will draw a pre-
set shape.


A # sign will draw a rectangle:



A ! sign will draw an IC shape:


You can exit TEXT mode with a *Q".




CAUTION IN ALL CASES, EXPERIMENT WITH THE TEXT MODE
OPERATION BEFORE TRYING IT ON A FINISHED PIECE OF
ARTWORK.  PRACTICE DOES HELP.



































                                           PLOTTING ROUTINES




                                                       10@1













       CHAPTER 10    TECHNICAL SYSTEM INFORMATION











This chapter presents a detailed description of the
DASOFT system.  While most users will never need to use
it, those who want to delve more deeply into the
package, perhaps to integrate the system with other
software or hardware, will find it invaluable.


10.0 BLOCK DIAGRAM


Figure 10.1 shows the steps and programs involved the
DASOFT system.


DESIGN ENTRY AND DOCUMENTATION

Designer input to the system occurs in two places for
the generation of documentation and design editing.  The
first is the description of the physical parameters of a
part in the Macro Library Editor.  This oduces the
parts library file FILENAME.MAC.  This library file is
called by the Design Editor program, and is used with
the design+r's input on how the parts in the library are
to be interconnected.  It produces the Design
Requirements List file, which contains all of the
information about the interconnected parts.  All
information pertaining to the design is contained in the
Macro file and the DRL file together.  The DRL file
contains references to the information it needs from the
Macro file.



                               TECHNICAL SYSTEM INFORMATION




10@2



    @ow that the computer basically knows all the
    information the designer has intended for the design,
    the processes that follow involve pulling subsets of
    information out of the design and parts library files
    and reformatting it into pictures or printouts detailing
    the design in a way familiar to the designer and easy to
    use.  The remaining compiler programs shown in Figure
    10.1 load in both the DRL and MAC files to create either
    additional descriptive files or drawings.


    The ALD Generation program is used to compile  Automated
    Logic  Drawings.   The DRL file and MAC file are loaded,
    and then a file called filename.ALD is created with  the
    basic   information  on  symbology,   line  names,   and
       ;nterconnect;ons.       The   ALDPLOT program then is run        to
    read this file and format the data in the final stage to
    the plot device.   The ALDPLOT program also contains  an
    automatic line router to draw in the lines between names
    to automatically schematically interconnect the figures.


    NOTE The ALDPLOT program uses only the filename.ALD
    file created by the compiler.  Any changes made to the
    design file will not be reflected in the drawings
    produced or any other documentation until it has been
    recompiled by the ALD program.


    The Documentation Generator can load in two different
    programs for the documentation phase of a design.  The
    Netlist generator compiles the DRL (and, of course MAC)
    file into interconnection information, and
    alphabetically sorts the list of net names assigned by
    the designer.  The resulting sorted netlist can be
    easily scanned to be sure intended interconnections were
    @orrectly entered into the DRL file.  Error messages and
    warnings are issued as the program automatically checks
    for a large number of loads on an output, multiple
    outputs tied to a line, no input pins or no output pins
    on a n+t, or a single ended connection ( a no-connect). 
    During the design process, this list can be periodically
    generated and scanned so that typographical errors (the
    most frequent kind) can be caught quickly and corrected
    during the next edit session.  An example of a netlist
    output can be found in Figure 7.1.










TECHNICAL SYSTEM INFORMATION




                                                       10@3


The Netlist generator also produoes a sorted Parts List
for the user, to aid in preparing a prototype for
testing.  The parts list includes such information as
the number of each device, its part number, which unit
numbered parts are that part, and the PCB location (Find
List) of each part.  Generic parts@ such as resistors
   and capacitor.s, may have up to tbree @pecification
fields to further define the part, These specification
fields are also printed in the parts list.

The Netlist generator may either create a file called
,FILENAME.NET' which may be viewed from the system
console or printed, or it can send output directly to
the operating system LIST device.


The other program which may be called from the
Documentation Generator compiles a Wire-wrap list.  This
list keeps a count of the number of wires and their
lengths which will be necessary tbuild a wire-wrap
prototype of the board, and sorts a wirelist by wrap
height and length of wire to aid the designer in
produng the board as fast as possible without the
overhead of studying the schematic interconnection
structure and deciding which order to wrap.  Using a
sorted wirelist produces a simple, well-built prototype
which is also easy to change and modify.  The wirelist
 routine creates a file called 'FILENAME.WIR@ or sends
 the output directly to the operating list d+viee. 
 Figure 7.2 is an example of the Wirelist printout.


























                                TECHNICAL SYSTEM INFORMATION




                                                       10@5



PCB ARTWORK GENERATION AND EDITING

To create printed circuit boards, one further step must
be taken by the designer.  In the DRL file, the designer
has already specified all of the lines which
interconnect the modules and where the modules are
placed on the printed circuit board.  The MAC file
specifies what the pads for each device look like, how
many there are, and where each pad is looated re@ative
to the single devic+.  The information still missing,
then, is that specifying the physical characteristics
of the board:  its shape, user-defined pad sizes, the
location and size of mounting holes, if any, and the
position of fat power supply grid lines.


This information is specified by the OUTLINE entry
program.  To run the OUTLINE program, a DRL file must be
specified so that the outline program can read the
locations of all specified parts and show them on the
graphics console (optional) if available.  If a graphics
display is being used@ the TGRAPHS.CTL I/0 subsystem
subroutines are loaded, and the display will a@tivate
with the picture of placed parts and show the outline
and holes, etc. as they are entared through the program. 
If graphics are not used, the system console shows the
necessary information to complete the entry of the
outline.


Once the outline is complete, the PCB compiler can be
run to generate the interconnection list from the DRL
and MAC files.  The D~L file contains the
interconnections and chip placement, and the MAC file
contains th@ offsets to fine tune tha coordinates to the
individual pins.  The compiler generates a temporary
file FILENAME.RBN which contains the coordinates of all
pads (used or not), and a from-to list of all line
segments which make up a net, sorted to smallest line
first.  After the creation of this file, automatic board
routing can commence.


The automatic routing program, while simple compared to
some running on mnframe computers, is the edge of what
the 8-bit microcomputer can accomplish in real time. 
The restrictions on the BORDROUT router are:  1> a 12.5
by 6.4 inch board@ double sided artwork, on 0.050 inch
spacings between lines.  The router will automatically
place one via or feedthrough hole in a net if needed,
and tries to place all horizontal lines on one side and
all vertical lines on the other side.



                               TECHNICAL SYSTEM INFORMATION




10@6



    The router loads in the FILENAME.RBN temporary file
    which contains the compiled interconnection data from
    the DRL file.  The router runs in anywhere from ten
    minutes for a small board (say, 10 chips in a 3 by 5
    inch board) to several hours (80 chips in 12 by 6
    inches).  Upon completion of the auto route, the system
    informs the user of the number of interconnections which
    were attempted and the number of interconnections the
    router failed to complete.  As a rule, the router is
    designed to accomplish 80% of the lines.  The router
    creates an artwork file of the same file name as the
    design file, but with a .RTE file extension.

    The BORDROUT router is re-entrant@ meaning that the
    program may be stopped at any point in its run, the
    generated artwork may be modified, and then the system
    may be restarted without losing or regenerating those
    connections alraady present in the artwork.  Thus
    critical lines may be pre-routed by hand with the route
    editor, then the system may be run to route around the
    critical nets.  If the system makes an obviously poor
    choice for a net, it can be stopped and corrected, and
    then restarted.  If a simple chip substitution or
    addition is made to the file, the new chip may be added
    to the design file, the .RBN regenerated and only the
    new connections added by the router without the need to
    regenerate the entire artwork.


    After all route phases are complete, the lines too
    difficult for the router to add automatically may be
    added by using the Route Editor.  First, however, let us
    look at the physical representations of the board, with
    the BORDPLOT and MATRIX routines.


    The matrix artwork generation routine loads the route
    file (.RTE) into memory and generates a 128 (Y) by 250
    (X) character matrix representing the exact .050 mil
    s@gments of the board.  This printout (132 columns are
    needed ) makes it easy for the d+signer to view the
    entire artwork coordinate grid at once and red-pencil in
    any changes or deletions.  This printout is a simple
    memory dump of the contents of the .RTE file converted
    to their ASCII equivalents.  The result does not look
    much like a circuit board.  If your printer has graphic
    characters@ you can modify the program to use them. 
    Once these changes are marked, you can easily read the
    coordinates of the changes from the marked grids, as an
    aid to entering the changes in the route editor.






TECHNICAL SYSTEM INFORMATION



                                                       10@7



To see an actual artwork plot representation of the
file, the BORDPLOT program is run.  The routed artwork
file is loaded, along with the PLOTTER.CTL I/0 subsystem
subroutines for plotter control.  The artwork file is
then scanned for lines, and each artwork trace and pad
are plotted out to the drawing device.

To use the route editor, the terminal control I/0
subsystem, TGRAPHS@CTL is loaded, and a 20 by 80
oharacter (each character representing .050 inches)
representation of a window of the artwork is printed on
the screen.  Using the graphics control keys defined by
the user, the cursor can be moved about the screan, and
the screen can be scrolled around the entire artwork to
provide full coverage.  It is a simple, yet highly
visual way of editing the artwork.








































                               TECHNICAL SYSTEM INFORMATION




10@8




    10.1 DASOFT LOAD ~ERNAL AND FULL SC~EEN PACKAGE


    DASOFT.ASM is the 'load kernal' or main control program
    for the DASOFT system.  This program is responsible for
    loading other programs as requested by the user, and
    provides the full screen interface and system menus. 
    Most of the file is taken up by system subroutines. 
    These subroutines are those most used by all of the rest
    of the system, and so are kept in the load kernal as
    opposed to reproducing them in the individual system
    programs.  Another important feature of the load kernal
    is the full screen package subroutines.  This program
    is available to the user for developing additional full
    screen software of his own, and the formats for use will
    be discussed in another section.


    CHANGES TO LOAD KERNAL

    If the DASOFT installation routine (see CHAPTER 1)
    cannot configure the system automatically for the
    particular terminal you are using, it will be necessary
    to 'patch' the routines by hand.  To do this, refer to
    the explanations of the routines which may need to be
    modified below.  Print out and refer to the source
    listing of the DASOFT.ASM file.  Only two subroutines
    and a @ew 'equates' need be changed in the DASOFT file
    to reconfigure it to whatever system console you are
    using.  The two routines are for clearing the screen and
    cursor addressing, and are explained further below. 
    First, the following equates must be changed to
    configure your system (or use the defaults):


    TOPPTR

    Topptr is a 16 bit address pointer to the top of the
    system stack.  DASOFT comes configured for a 48K system
    (including CP/M).  Running the install routine will
    automatically set the stack pointar to the top of
    available memory, and the DRL and MAC editors are
    configured to run in this memory size.  The install
    routines will also reconfigur@ the DASOFT and DRL
    programs for larger memory sizes.  A 64K system will
    have approximately 2.5 times the storage capacity for
    designs as a 48K system.








TECHNICAL SYSTEM INFORMATION



                                                       10@9



COMMAND CHARACTERS

Full screen editing requires several keys for screen
control.  These keys can be user defined in the DASOFT
load kernal listing.  The full screen package reads the
console devicwithout an automatic echo, so that
command key entries are not printed on the console. 
This way, any code the terminal sends can be used for
the command, even unprintable codes.  The equate table
defines the hex value of these control codes sent from
the terminal.  The user may define these to best suit
the system console being used and personal preference.


USER DEFINED COMMAND KEYS


SCRLUP

SCRLUP is the command key whieh causes the full screen
editor to go to the PREVIOUS entry field.  In full
screen mode, editing is accomplished by altering fields
of characters on the screen.  To access these fields
move the cursor 'up' or 'down' through the defined field
locations.  The defined key, when pressed, will move the
cursor up to th@ last screen entry position used, or
wrap around to the bottom of the screen if at top.  The
default is the "<" key.


SCRLDN

SCRLDN is the key defined to cause the cursor to scroll
down to the next field in full screen editing. 
Scrolling will wrap around to the first field if
scrolling down from last field.  Fields are in a
sequential order, not necessarily physically above or
below one another.  The default is the ">".  No special
reason.  The CR or carriage return key is always a
default scroll down except when following a command. 
This key is not often used, but is occasionally handy to
have.


HOME

Home is the key defined to move the cursor immediately
to the full screen edit command line in the upper left
corner of the screen.  This is most often used to raturn
directly to the command line rather than scrolling
around to it by SCRLUP or SCRLDN.  The default @s the
/ character.




                               TECHNICAL SYSTEM INFORMATION




10-10



    DELETE

    Delete is the key used to delete the entire contents of
    a data field in full screen mode.  The cursor is reset
    to the left hand or starting position of the data field,
    and the field is cleared.  It is handy to have this key
    defined close to the scroll down or return keys.  The
    default is the "Control X".


    CHARDEL

    CHARDEL is the single character delete key.  Default is
    "Control D" This key will delete the last character
    entered and continue on, instead of deleting the entire
    data field.


    ESCAPE FLAG

    The escape byte is true (nonzero) or false (zero) to
    define whether the cursor command keys (see USER Defined
    Keys below) are to be preceded by an ESCAPE character
    (1BH).  IF ESCAPE IS TRUE, the console must send an
    escape character before the command character.  The
    command character is defined as an ASCII character which
    matches one of the User Defined Command Keys.  A
    character not preceded by an escape character will be
    treated only as data.  IF ESCAPE IS FALSE, only one
    character is required to cause a cursor command to be
    executed.  In this case, only those keys not usually
    used for data (such as TAB, or LINE FEED) should be used
    as the cursor command keys, since they will always be
    treated as commands and never as data. Decide which mode
    best fits your terminal, then set the Escape byte True
    or False and then define the User Defined Keys to be the
    appropriate command characters.



















TECHNICAL SYSTEM INFORMATION



                                                       10@11




CURSOR ADDRESSING


MOVCUR is the cursor addressing routine. 

PARAMETERS:

REGISTER DE HAS THE ADDRESS OF TWO BYTES SPECIFYING X,Y
COORDINATE PAIR.  THE FIRST BYTE CONTAINS THE X VALUE,
SECOND BYTE IS Y.  X MAY BE IN THE RANGE OF 0 TO 79, Y
MAY RANGE FROM 0 TO 23. THESE ARE UNSIGNED, POSITIVE, 8-
BIT BINARY NUMBERS, WITH X=0, Y=0 DEFINING THE UPPER
LEFT CORNER OF THE SCREEN. NO OUTPUTS BACK TO SYSTEM, NO
REGISTERS MAY BE CHANGED.  This subroutine is used to
send the proper control characters to the system console
to enable DASOFT to define a cursor location on the
screen for full screen editing.  Most consoles only
require a few extra characters to define a cursor
movement command and the proper formatting of the
location codes.  The WRITE subroutine can be called to
send an ASCII character in the A register to the
console.




CLEAR SCREEN COMMAND


CLRSCRN is used to clear the entire console screen. 

PARAMETERS:

THIS SUBROUTINE HAS NO INPUT PARAMETERS, NO OUTPUT
PARAMETERS. NO INTERNAL REGISTERS MAY BE CHANGED!

This subroutine is used to blank the screen between full
screen sessions or when changing the page of data.  It
should be fast, or the full screen editing features will
be less efficient.  Most terminals have a simple command
code for clearing the screen.  Again, the WRITE routine
will send a character in the A register to the console
through the operatinS system.












                               TECHNlCAL SYSTEM lNFORMATlON




1@@12



    DASOFT LOAD KERNAL INTEGRATION


    After changing the subroutines and system equates as
    necessary, simply use the disk operating system ASM
    (assemble) command to produce the file DASOFT.HEX, then
    the LOAD command to provide the file DASOFT.COM.  Now
    the command DASOFT may be entered from the console and
    the system is in operation.  It is not necessary to
    change the load kernal for adding in new system
    functions later (unless radical changes in software of
    your own are added) because the load kernal is set up to
    load the present and future planned packages.  Whenever
    a function is asked for from the main control screen
    which has not yet been purchased for your system, the
    kernal simply checks the disk for the needed file.  If
    the file is not present, the kernal responds to the
    request by saying 'Sorry, not currently supported' , and
    returns to input mode waiting for another command.




    USING THE FULL SC~EEN EDITING PACKAGE


    This section is intended to be an explanation of the USE
    of the full screen package if the user wishes to write a
    routine which will use full screen editing under the
    DASOFT system.  If a user routine loads DASOFT.COM at
    100 Hex, the disk utility routines and full screen
    editing programs will be at the use of the calling
    program.


    NOTE THAT DASOFT RETAINS RIGHTS TO THE USE AND
    DISTRIBUTION OF THE DASOFT PROGRAM AND A ROUTINE USING
    DASOFT CANNOT BE SOLD WITH DASOFT AS AN INTEGRAL PART. 
    DASOFT CAN BE USED ONLY  A LICENSED SYSTEM.


    To create a full screen editing session, a SCREEN
    CONTROL BLOCK (SCB) is required to be set up by the user
    before calling the full screen subroutines.  The SCB
    consists of the following three parts.


    1)DATA POINTE~ This is a 16 bit address specifying
    where the start of the DATA BUFFER is located.  The data
    buffer is descbed in more detail below.






TECHNICAL SYSTEM INFORMATION



                                                     10@13




2)FIELD PROMPT This entry contains first, the X screen
coordinate where this field descriptor will be printed. 
A field for screen editing is defined by this prompt
string, which specifies to the user what data is
expected to be entcred into the field, and then a data
field which contains the edited or entered data. 
Second, the next byte is the Y coordinate on the screen
for the position of the prompt field.  Third, the next
byte specified in the SCB Field Prompt is either the
COUNT of characters in the field prompt string or a
delimiter of OFFH to indicate that this field is a
COMMENT field only, and does not have an associated data
field.  The cursor will not be scrolled to a comment
field, but it will be printed in the XY location
specified.  Next is the FIELD PROMPT STRING which will
be printed on the screen at the specified location, and
will be followed by an input buffer for data entry.  The
final byte of the Prompt field itself must be a dollar
sign '$' terminator to indicate the end of the string.


3)SCB DELIMITER After all of the field definition
strings have been defined, a final OFFH delimiter must
be placed at the end of the SCB.


           Screen Control Block Example

SCREEN:
          DW   BUFFER         ;LOCATION OF DATA BUFFER
          DB   5,1,0FFH,'COMMENT ON LINE ONE$'
          DB   10,3,16,'ENTER DATA HERE:$'
          DB   OFFH           ;FINAL DELIMITER
BUFFER:   DB              $'



The DATA BUFFER is a string of data fields starting at
the address specified by the data buffer pointer in the
SCB.  Each field can be of any length, but MUST BE
TERMINATED BY A DOLLAR SIGN.  Each field must be in the
order in which the prompts are specified in the SCB. 
Data may be sent to the screen data fields through these
data buffer fields, and data entered on the screen will
be stored in the buffer associated with the field of the
SCB that was being edited on the screen.  Each field
must follow directly after the terminator of the last
buffer field.  No final delimiter is n@eded on the data
buffer.






                               TECHNICAL SYSTEM INFORMATION




10@14




    FULL SCREEN SUBROUTINES


    FSCMDL is a subroutine to issue ONLY a command line on
    the screen.  No entry parms are required, and HL points
    to the command string entered at the screen upon exit. 
    Carry is set if the command entered started with 'Q'.


    FSENTR is the full screen entry subroutine for building
    editing screens.  Upon entry, DE is an address which
    points to the start of the SCB for that screen.  HL
    points to the start of the command screen upon exiting,
    and CARRY will be set if the command line contained a
    ,Q@ upon exiting.


    FSE~R this routine prints a string of up to 31
    characters in the top right 'message' field of the
    screen.  The print string must be dollar sign
    terminated.  Upon entry, DE points to the string to be
    printed, all registers are saved.  The message field
    will be automatically cleared whenever a new message is
    printed or when either of the full screen editing
    subroutines exit.






























TECHNICAL SYSTEM INFORMATION



                                                       10@15




10.2 PLOTTER INTERFACE CONTROL SUBROUTINES


The plotter routines have been kept as simple as
possible to accommodate the widest variety of possible
plotters.  As an overview, the plotter must be able to
perform the following functions:


1) HOME THE PEN TO LOWER LEFT CORNER AUTOMATICALLY
AND CONSISTANTLY

2) DRAW A LINE FROM THE CURRENT PEN LOCATION TO A
LOCATION +/- X AND +/- Y OFFSET, WITH PEN UP OR DOWN,
IN .005 INCH STEPS OR LESS.  X AND Y VALUES
ARE 12 BIT BINARY INTEGERS REPRESENTING .005 IN.


It   is  important that th@ home function  be  accurate,
   since   homing    is done to provid+     a r+ference point      for
   drawing some characters or lines relat:iv+ to each           ot:her
on   the  sheet.    It  is  especially  important   when
generating   printed   circuit  artwork  that  home   be
accurate.   Likewise,  it is important that the steps be
exactly  (.005)  inches.    Few  plotters  can  actually
achieve the accuracy needed,  however,  so a  correction
factor  can be determined by the user for his particular
plotter  and programmed in.   The  correction factor  is
only  used  for PCB artwork,  however,  since  no  other
drawings  produced by the plotter are particularly  size
sensitive. Note that if your plotter does not use a .005
inch step size (or a fraction thereof),  your plots will
not  come  out to be the right size  when  plotting  the
printed  circuit  artwork.   In particular,  do not  use
plotters  which  have  millimeter  step  since  no  easy
conversion is possible to implement.





PLOTTER ROUTINE REQUIREMENTS

The subroutines must be originated at 1800 Hex and be no
longer than 1024 bytes total.  The first 17 bytes must
be a jump table.









                               TECHNICAL SYSTEM INFORMATION




10@16



    PARAMETER FORMAT

    The signed X and Y displacement commands passed to the
    plotter subroutines are in the form of four bytes stored
    at location TBLAD.  These four bytes contain the
    following information:


     Byte 1) LOWER 8 BITS OF X MAGNITUDE (.005 STEP)
     Byte 2) (Bit 0=least significant)
       Bit 6 --x- ---- X = PEN UP/DN BIT 0=PEN UP
       Bit 5 ---x ---- X = SIGN BIT 0=POSITIVE
       Bits 0-3 ---- xxxx UPPER 4 (LEAST SIGNIFICANT) BITS
             X  MAGNITUDE
     Byte 3) LOWER 8 BITS OF Y MAGNITUDE (.005 STEP)
     Byte 4) Bit 5=SIGN (0=+) 0-3 = 4 BITS Y MAGNITUDE
               (MOST SIGNIFICANT 4 BITS)


    These four bytes provide all of the information needed
    to define a vector from the current pen location to the
    next pen location.  Most of the DASOFT routines use
    only 90 and 45 degree angles, but this cannote assumed
    to be the only possible angles of vectors.  Care taken
    to provide the greatest accuracy will yield more
    acceptable circles in printed @ircuit artwork and other
    plots.




    PLOTTER CORRECTION FACTORS


    The last 4 bytes of the jump table section are for
    correcting the plotter if it is not exact in its step
    size over a distance. The first byte is the SIGN of the
    correction, 0 for positive denoting that STEPS MUST BE
    ADDED TO THE PLOTTER MOVES to correct for the
    inaccuracy, if the sign bytes are nonz@ro, it means
    STEPS WILL BE SUBTRACTED FROM THE PLOTTER MOVES to
    compensate@  The first byte is the correetion factor f@r
    the Y axis.  The second byte is the AMOUNT of
    adjustment, an 8 bit binary number.  This factor is
    derived by making the plotter move 10-16 inches, then
    measuring the line drawn as exactly as possible.  Divide
    the TOTAL number of (.005) inch grid steps the plotter
    movcd to draw the line by the NUMBER OF STEPS it was in
    error, measured as accurately as possible.  This will
    give you the NUMBER OF GRIDS WHICH MAY BE MOVED BEFORE
    ADDING OR SUBTRACTING ONE STEP FROM THE MOVE.  This
    number is the adjustment amount byte.  The same
    derivation applys to figuring the X axis sign and
    adjustment magnitude.


TECHNICAL SYSTEM INFORMATION



                                                       10@17



PLOTTER SUBROUTINE DESCRIPTIONS


HOME

Home is called with no parameters and has no outputs
back to the system.  No registers except A may be
changed.


INIT

Init is called during start-up to initialize the output
port or other system which must communicate with the
plotter@  No paramaters on input, none on output, no
registers destroyed@


MOVE

Move is the actual subroutine which uses the four bytes
passed in the TBLAD location to move the plotter pen. 
Some plotters may find it necessary to reformat the
information to suit.  No other parameters are passed to
the subroutine, none are expected back.


CHGPPR

Change Paper is called to inform the user that the
plotter has finished the current sheet and needs another
sheet inserted into the plotter.  If you have one of the
nifty plotters that can change its own paper, you may
want to change the routine.  No parameters are passed,
none expected back.




















                               TECHNICAL SYSTEM INFORMATION




10-18



    CHGPEN

    Change pen is called to inform the user that the plotter
    needs a different pen size inserted.  This is only used
    during PCB artwork generation to do the power gridding
    lines with thicker pens.  The A registar has the
    parameter on entry, with the pen sizes decoded from the
    value of A. 0= #000 pen, 1= #0 pen, 2=#1 pen, 3= #4 pen. 
    These sizes refer to KOH-1-NOOR RAPIDOGRAPH sizes, and
    @an be @hanged at user proference, (see the section on
    plotter needs).  We have found that a 00 size pen works
    better in some cases than a 000 size pen for the logic
    drawings, so consider the two interchangable in our
    descriptions.



    PLOTTER REQUIREMENTS

    In addition to needing an interface to your computer,
    the plotter will require the following items:

     1) #00, #0, #4 KOH-I-NOOR RAPIDOGRAPH PENS
     2) PEN CLEANING FLUID
     3) 'B' SIZE (11" x 17") PAPER AND MYLAR SHEETS
     4) DRAFTING INK

    The pen sizes @an be ohanged at user preference, but we
    have found these sizes to work nicely.  The 00 pen is
    used for the Automated Logic Drawings (ALD), which is
    very fine lettering by normal standards.  A 000 pan
    provides very @crisp' easy to see lines, but is a little
    light for reproductions.  The 00 pen line is slightly
    fatter, but is also darker and provides easily read and
    reproduced characters.  A RAPIDOMETRIC .25 mm pen also
    provides very good lines, but you must take care that
    the pen will fit correctly in the plotter pen holder! 
    Cleaning fluid is necessary with any drafting pens,
    expecially at the 000 and 00 sizes.  P@ns need to be
    cleaned often and stor+d between uses in cleaning fluid. 
    Keeping the caps on the pens will prevent them from
    clogging for a few days, but care and cleaning are a
    must for good artwork.  Normal drafting ink for
    RAPIDOGRAPH pens or others is acceptable, you may find a
    better one.  11 inch by 17 inch paper is used for
    all purposes.  Vellum sheets without grid lines produce
    fine schematics and is easy on the pens.  Other paper
    may be used with care.  Mylar should be (.003) inch
    frosted one side, with frosted side to pen when used: 
    Bishop Graphics series number 8808 or equivalent. 
    Normally mylar is only used for final PCB artwork
    production because of its high cost, but your
    documentation standards may require permanent schematics
    on mylar.


TECHNICAL SYSTEM INFORMATION




                                                           %0@%9



    PLOTTER ROUTINE INSTALLATION

    For operati@n with version 2.6, your plotter driver MUST
    have the following equates:

     RDRL      EQU  0103H
     CLEARS    EQU  0108H
     PSTRNG    EQU  010EH
     INCHNE    EQU  011DH

    After m,difying the plotter driver, it is necessary to
    assemble the file, move it into DDT to make an image of
    the file at 0100h, then save the file as PLOTTER.CTL. 
    Below is an example of the installation procedure. After
    running the ASM program to assemble your PLOTTER.ASM
    program into PLOTTER.HEX, object code.


A>DDT PLOTTER.HEX        ;USE DDT TO LOAD PLOTTER.HEX INTO 1800H

-M1800,1BFF,100          ;MOVE THE PROGRAM TO 100H
-=C                      ;USE GO OR CNTL-C TO EXIT DDT

A>SAVE 4 PLOTTER.CTL     ;CONTROL PROGRAM INSTALLED































                                  TECHNICAL SYSTEM INFORMATION



.10-20




     10.3 G~AFHICS INTERFACE SUBROUTINES


     All data sent to the display device is built around a
     128 x 256 element matrix.  This matrix may represent the
     characters on the logic diagram or line segments of the
     printed circuit artwork.

     To circumvent the need for graphics entirely, the
     program TGRAPHS.ASM or TGRAPHS.CTL is another program of
     the same form, structure, and command linkage as
     GRAPHICS.CTL, but specially set up to use your termil
     display to do the printed circuit artwork.  This
     program will represent the artwork in a 20 by 80 window
     of characters, each character representing one 50 mil
     square of the artwork (see section 5).  If no color or
     graphics devices are being used, install ONLY the
     TGRAPHS.CTL program.  If high quality graphics are being
     installed, and they can be used to better implement
     artwork editing, rewrite TGRAPHS to run with the new
     graphics and install along with GRAPHICS.  BOTH must be
     installed if graphics are being used for PCB editing.

     Whenever a command is sent to the display device to turn
     on a display element, a memory location in the DASOFT
     system is also set, so that the memory matrix may
     always be referred to for information regardless of
     what is happening or being displayed on the graphics
     device.


     Cursor control characters entered from the console are
     also defined to conform to your keyboard layout.  A 10-
     key pad along side makes a good cursor control and
     function pad.  If other graphics input forms are
     available such as a joystick, mouse or digitizing
     tablet, the cursor routines may be modified to read
     these devices and send the proper character to thc main
     processor instead of reading the keyboard.



     First we will list the functions and necessities of the
     graphics section, and then discuss examples of how to
     best attain these goals with the limited graphics
     available.  Ideally with a 512 by 512 high resolution
     color system, display of PCB information would be both
     +asy to read and easy to program.  With the 128 by 128
     available, the graphics tends to be less r+adab1e and
     barder to program.  If you can do so, by all means feel
     free to spend the money on denser graphics.




 TECHNICAL SYSTEM INFORMATION




                                                                   10@21



            G~APHICS EQUATES

            DATA and STATUS are two equates for communicating to the
            output port for the graphics device.  DATA is the IO
            address of the output data port, STATUS is the control
            port of the device.  These bytes will be changed
            radically for different display devices, be they ports,
            printer interfaces, or memory mapped.  Memory mapped
            graphics systems will require memory outside the 48k
            reserved for the DASOFT system and operating system.

            Cursor control characters are defined at the start of
            the program. They are:

            CURUP... Move cursor up one unit. 
            CURDN Move cursor down one un;t. 
            CURLFT Move cursor left one unit. 
            CURRT Move cursor right one unit. 
            CURMOV Move the cursor without setting points. 
            SETPNT All movements after setpnt will mark
                     coordinates.
            SETPAD Place a pad at the current coordinates. 
            FUNCT Function key, F then 1 calls side1, F then 2
                     calls side2.  And so on for the third user
                     routine.


            The function key is only used for programs employing
            full cursor control routines for interactive graphics. 
            Other programs may still ca the user defined routines
            through the numbers 1,2, and 3 alone.  These cursor
            controls are used in thOUTLINE (Outline Editor) and
            BORDEDIT (Route Editor) routines.












 









                                           TECHNICAL SYSTEM INFORMATION




10@22



    INCUR

    The CURSOR INPUT subroutine in the graphics package is
    responsible for sending a character back to the calling
    routine in the A register.  This character represents
    the command for moving the cursor as defined in the
    Command Characters section, i.e.  CURLFT, CURDN, and so
    on.  In most cases these imputs will simply be read from
    the system console, but in the case of Joystick or Light
    Pen input, it is possible to read external devices and
    send the appropriate command character back rather than
    read the console.  Only the A register may be changed. 
    No inputs, no other outputs needed, no other registsrs
    may be changed.


    INIT

    Init performs any functions necessary to initialize the
    graphics device for use.  It is called once during
    startup, no parameters are sent, none expected back.  No
    registers should be destroyed.


    PLOT

    The plot routine uses the coordinate information passed
    in XDOT and YDOT, the implicit color information
    contained in ACTIVE1 AND ACTIVE2 and an erase parameter
    COLOR to p1ot one pixel or segment on the screen. 
    XDOT is the X coordinate (absolute) for the point, in
    the range of 0 to 255.  YDOT is the Y coordinate
    (absolute) for the point, in the range of 0 to 127.

    ACTIVE1 and ACTIVE2 are bytes which implicitly define
    color in the system.  In PCB artwork, when an element
    appears on side 1 (component side) of the artwork,
    ACTIVE1 will be non-zero.  Alternately ACTIVE2 will be
    nonzero when an element appears on side 2 of the
    artwork.  If something appears on both sides, (such as
    a pad), both ACTIVES will be on, and ACTIVE1 takes
    precedence.  If COLOR is non-zero, ANY ADDRESS SENT IS
    DEFINED TO BE DONE WITH THE BACKGROUND OR ERASE COLOR.













TECHNICAL SYSTEM INFORMATION




                                                        10@23


SETCURS

The set cursor routine is called in the same way as PLOT
with XDOT and YDOT defining the location, but in this
case only a cursor is provided at that location.  Unless
your graphics controller provides automatic cursor
functions, however, this can be difficult.  Putting a
cursor character in a location destroys the color byte
alr@ady there, and some way must be programmed to
retrieve the information in that spot when the cursor
is moved to another location.  This can be most
easily accomplished by looking back into the main
processor's memory array to the byte that was stor@d in
the array when the point was initially plotted on tbe
graphics device.  Since the cursor is only a graphics
function and has nothing to do with the memory array in
the DASOFT system, the main array can always be looked
at to provide graphs data for zoom, pan, and cursor
control@

Two matrix storage techniques are used during the
course of the DASOFT systems.  A byte called SHORT in
the jump table section determines which format is being
used.  Two other bytes, TEMP3 and TEMP4 will be used in
format 1 only to define the array sizes.  In format 2,
the array size is fixed and these two registers ar@ not
needed.


The PCB formats are as follows:

MATRIX  FORMAT 1:   (SHORI=0)
MATRIX START= 2000H     FIRST BYTE OF ARRAY
      BYTE  FORMAT--
UPPER NIBBLE SIDE 1 INFORMATION CODE
LOWER NIBBLE (LSB) SIDE 2 INFORMATION CODE
TEMP3= MAXIMUM X AXIS COORDINATE
TEMP4= MAXIMUM Y AXIS COORDINATE



In this format, both sides of the printed circuit are
kept simultaneously in the array, one nibble (4 bits)
per grid unit per side.  The upper 4 bits of the byte
denote a CHARACTER representing a pad or line segment on
side 1, likewise the lower 4 bits represent a line
segm@nt on side 2.









                               TECHNICAL SYSTEM INFORMATION




10@24



    MATRIX FORMAT 2

    SHORT =1 DEFINTION OF FORMAT 2
    MATRIX START SIDE 1 =7000H SIDE ONE IN SEPARATE MATRIX
    MATRIX START SIDE 2 =8000H SIDE TWO IN SEPARATE MATRIX

    BYTE  FORMAT-- EACH BIT IN BYTE REPRESENTS ONE PIXEL  ON
              SCREEN FROM LEFT  TO RIGHT,  STARTING AT 0,0
    MAXIMUM X COORDINATE IS 249, MAX Y COORDINATE IS 127

    Depending on the value of SHORT, the byte denoting the
    use of 4k matrices rather than 32k matrix, the
    information needed for cursor movement and screen
    changing (see below) is available in the computer
    memory.



    USING MATRIX INFORMATION IN 1K X 1@ SCREENS

    For those lucky enough to have large graphics screens,
    more care must be taken in printing the line segments
    to the screen.  In 128 x 256 or less modes, only one
    pixel is written to the screen for aach grid character,
    regardless of what it is representing.  In higher
    density modes, the user routine must look into the
    matrix to find exactly what type of character is being
    used at that point, i.e., a horizontal or vertical line,
    a corner or a pad, and draw the correct character on the
    screen. The drawback in doing this, however, is that the
    methods for storing these characters diffars for ALDs
    and PCB artwork.  Luckily, there is a way to tell the
    difference so that the interface routine will be able to
    adapt to the storage technique being used just as it
    needs to adapt to the different matrix storage
    techniques.


    1) Whenever logic diagrams are being routed, TEMP4=110
    AND SHORT=0.  PCB artwork is generated with TEMP4=128
    and SHORT=0 or 1.


    2) ALD line segment characters are stored in the MIDDLE
    4 bits of the matrix element, with the other 4 bits
    being indeterminate, or any state.  The code is

         XX 0001  XX   HORIZONTAL  LINE
            0010       VERTICAL    LINE
            0011       LOWER LEFT CORNER
            0100       LOWER  RIGHT CORNER
            0101       UPPER RIGHT CORNER
            0110       UPPER LEFT CORNER



TECHNICAL SYSTEM INFORMATION




                                                       10@25


BINARY CODES 0-3 SHOULD BE TREATED AS BLANKS, ANY CODE
OTHER THAN THOSE DEFINED ABOVE SHOULD BE TREATED AS
BARRIERS AND COLORED IN ENTIRELY OR SHADED.


3) PCB line segment characters are stored in upper or
lower nibble of each grid matrix positon, depending on
the side you want to look at.  These codes are straight
binary,

   0     blank
   1     power grid line
   2,3   not used
   4     horizontal line
   5     vertical
   6     upper right corner
   7     lower right corner
   8     upper left corner
   9     lower left corner Hexadecimal

A,B,C,D are different pad types (0-3) and any code above
D is a barrier.





SPECIAL USE SUBROUTINES

To make the system use more user oriented, three
subroutines in the grahics interface have the ability to
be CALLED BY THE USER THROUGH THE SYSTEM, BUT ARE NOT
CALLED BY THE SYSTEM.  This enables the user to
configure in PAN, and ZOOM functions to make better use
of the limited graphics available.  These routines are
called SIDE1 and SIDE2, since they were originally
written to pan between the left and right sides of the
matrix on the screen.  NOTE THAT THE DA SYSTEM ASSUMES
ALL GRAPHICS POINTS ARE ON THE SCREEN AND THE USER MUST
PAN AS NECESSARY.  See the SIDE1 and SIDE2 routines in
the GRAPHICS.ASM file for an example on panning the
screen left to right.  All that is necessary is to pull
the information out of the matrix locations in memory
and print it en mass+ to the screen.












                               TECHNICAL SYSTEM INFORMATION



 10@26




     INSTALLING GRAPHICS ROUTINES

     When the routines have been altered as needed, assemble
     the file as usual to GRAPHICS.HEX.  GRAPHICS ROUTINES
     MUST BE ORIGINED AT 1COOH AND CAN BE NO LONOER THAN
     1024 BYTES IN LENGTH.  (Unless memory is available
     outside of that used by DASOFT) Onee in DDT, move the
     image of the assembled file to the start location of
     0100H.  The commands for this process are:



 A>DDT GRAPHICS.HEX            ;LOAD OBJECT CODE INTO 1COOH

 -M1C00,1FFF,100               ;MOVE PROGRAM TO 100H
 - C                           ;EXIT DDT WITH GO OR CNTL-C

 A>SAVE 4 GRAPHICS.CTL         ;SAVE OBJECT CODE INTO CTL FILE



     This procedure will create the file necessary for
     operation.































TECHNICAL SYSTEM INFORMATION



                                                       10@27




10.4 HOW THE DRL FILE IS STORED IN MEMORY

Since all of the information needed to define your
design is contained in the DRL file (and to some extent
in the Macro file), we believe in giving you full
information on how that file is organized so that you
may write your own programs to compile your design
information into a format you may require and we do not
support.  The DRL file is organized into three sectiona. 
First, the Header, contains file length and organization
address parameters, header information, current unit
letter assignments, and a cross reference of unit number
names to DRL file entries.  Second the DRL file entries
themselves, one complete entry for each logical element@ 
Last, tbe storage for the comments themselves.


Exact (Relative) addresses, our mnonic name for the
entry byte(s) or blocks and their description are given
in order below.



DRL STORAGE BLOC@S BYTE (HEX!)

0-1 STRTNAM:  THE OFFSET ADDRESS FROM THE DRL FILE
ITSELF TO THE START OF THE NAME FILE BLOCK.  THIS NUMBER
ALSO SPECIFIES INCIDENTALLY THE LENGTH OF THE HEADER
SECTION INCLUDING THE CROSS REFERENCE.

2-3 NAMLEN:  THIS IS THE BINARY COUNT OF BYTES USED IN
THE NAME FILE BLOCK.  THESE COUNTS ARE 16 BIT UNSIGNED
INTEGERS LEAST SIGNIFICANT BYTE FIRST.

4-5 STRTDRL:  THIS IS THE OFFSET ADDRESS FROM THE START
OF THE FILE TO THE START OF THE DRL FILE BLOCK.

6-7 DRLLEN:  THE LENGTH COUNT OF THE DRL FILE BLOCK (ALL
2-BYTE PAIRS ARE LEAST SIGNIFICANT BYTE FIRST, NORMAL
8080 FORMAT).

8-9 STRTCOM:  OFFSET ADDRESS FROM THE START OF THE FILE
TO THE START OF THE COMMENT FILE BLOCK.

A-B COMLEN:  The length count of the comment storage
area.

OC-17 RESERVED      THIS AREA RESERVED FOR FUTURE USE







                               TECHNICAL SYSTEM INFORMATION




10-28



    18@3? UNIT REF

    THESE 32 BYTES ARE 16 ENTRIES OF TWO BYTES EACH.  THE
    FIRST BYTE IS A UNIT LETTER USED IN THE FILE, AND THE
    SECOND BYTE IS THE NEXT AVAILABLE UNIT NUMBER. THIS IS A
    BINARY INTEGER.  EACH U NUMBER IS USED ONLY ONCE IN A
    FILE.

    38-7A ALD HDR :  THIS IS THE INFORMATION FROM THE ALD
    HEADER SCREEN.  THE FOLLOWING IS A BREAKDOWN OF THE INFO
    STORED THERE:

    PART NUM 8 BYTES ASCII ENTERED DESIGN PART NUMBER. 
    40-41 REVISION 2 BYTES ASCII REVISION NUMBER OR LETTER. 
    42-5B TITLE 25 BYTES ASCII ENTERED TITLE
    5C-74 DESIGNER 25 BYTES ASCII ENTERED DESIGNER NAME
    75-7A @ARMS TRACE, ROUTE, PCB, ALDX, ALDY PARAMETERS. 
    FIRST 2 ASCII, LAST 4 BINARY.

    7B-87 RESERVED      RESERVED FOR FUTURE USE.

    88-STRTNAM XREF:  BYTE 88 DEFINES THE START OF THE CROSS
    REFERENCE FILE.  THIS FILE CONTAINS ONE ENTRY FOR EACH
    LOGIC ELEMENT ENTERED, AND IS IN THE FOLLOWING FORMAT
    (RELATIVE BYTES):  ss CROSS REFERENCE ENTRY BYTES ** 0-
    UNUM                THESE FIRST THREE BYTES ARE THE UNIT
    NUMBER OF THE DESIGN.  THE FIRST BYTE IS THE ASCII UNIT
    LETTER, THE SECOND BYTE IS THE BINARY UNIT NUMBER, AND
    THE THIRD BYTE IS THE ASCII GATE EXTENSION (A,B,ETC.) IF
    ANY.

    ** 3-4 DISPL           THIS IS A BINARY
    DISPLACEMENT ADDRESS FROM THE BEGINNING OF THE DRL FILE
    TO THE START OF THE DRL ENTRY FOR THIS UNIT NUMBER. TO
    COMPUTE THE ADDRESS OF ANY ACTUAL GATE ENTRY OF THE DRL
    FILE, THE BASE ADDRESS OF THE ENTIRE FILE IS ADDED TO
    THE OFFSET ADDRESS (STRTDRL) AT THE BEGINNING OF THIS
    FILE, AND THE DISPLACEMENT ADDRESS IS THEN ADDED IN TO
    GET THE FINAL ADDRESS.  THESE 5 BYTES ARE REPEATED FOR
    EACH UNIQUE UNIT NUMBER IN THE FILE, AND THE ENTIRE
    SECTION ENDS AT STRTNAM.















TECHNICAL SYSTEM INFORMATION




                                                       1@-29



NAME FILE ENTRIES

The name file contains all of the net names used in the
DRL file to denote interconneetions.  Since each name
defines two or mor+ nodes of a n+t and each name can
be up to 10 letters in length, it is much more efficient
in terms of file space to save the name only once in
this name file and assign a number to it to be saved in
the individual DRL entries.  NOTE THAT THE ENTIRE 10
BYTES OF THE NAME ARE ALWAYS STORED, thus it does not
represent any savings to use short names.  Make your net
names as descriptive as possible.  The following is a
break down of the two fields represented in the name
file block.



0-1 NAME This is the 16 bit number assigned to the
entered net name.  This number is stored in the DRL
entry sections to denote an interconnection.  A 0000
entry in any field denotes a NULL field, or no
interconneetion.

2-OB RNAME This is the real 10 byte ASCII name entered
as the net or interconnection name.  All 10 bytes
including any spaces are saved.





























                               TECHNICAL SYSTEM INFORMATION




10-30




    D~L FILE ENT~IE$


    The DRL file entries for each unique logic alement or
    unit number are slightly different, depending on the
    type of element used (1,2,3).  The starting address of
    the DRL entry for a given unit number is found by
    adding the base , offset, and displacement address found
    in the header section together.  These bytes define the
    information contained in the given entry.


    TYPE  1 DRL ENTRY STORAGE FORMAT BYTE (HEX) 0 TYPE  CODE

    This first byte of the field is the binary type number
    (1-3) describing the format type of this entry.  The
    first byte of all entries is the type. (01H for T1).


    1-3 MACRO # The next three bytes are a BINARY COMPRESSED
    macro number.  This compressed format matches the
    storage format of the macro in the macro file.  See the
    macro manual for details of the compression format. 
    This number can be matched against cross-reference
    entries in the macro file to find the macro entry used
    by this DRL antry.

    4 ALD PAGE One byte binary number representing the page
    of the schematic this entry is to be printed on.

    5-6 ALD X,Y These 2 bytes are binary numbers
    representing the absolute coordinates the DRL entry will
    start at on the ALD.  The coordinate refers
    approximately to the upper left corn+r of the logic
    block as drawn.

    7-8 PCB X,Y These 2 bytes are binary numbers giving the
    exact X and Y coordinate values for pad placement on the
    PCB.  These values are for (.05) grid element spacing,
    showing the placement of PIN 1 of the gate package.

    9 ORIENTATION:  The PCB X and Y coordinates dafine the
    location of PIN 1 of the IC on the board.  Orientation,
    currently defined as an unsigned byte integer between 0
    and 3 definea the position the rest of the chip takes in
    relation to pin 1.  The four standard orientations are
    these:

    0: (default) pin 2 below pin 1
    1: pin 2 to left of pin 1
    2: pin 2 above pin 1
    3: pin 2 to right of pin 1.



TECHNICAL SYSTEM INFORMATION




                                                                    10@31


             Oriantation meanings change slightly when used with
             connectors or fingers.

             OA-OB PANDOS These two bytes are undefined, and may
             be defined by the user if the need arises for more
             infmation in the DRL file.  No promises are made that
             Dasoft will not use them in the future, but we will try
             not to@  It should be noted that use of these bytes
             may make DRL files non-transportable between different
             systems.

             OC TECHTYPE Thia byte specifies the technology type
             which may have been specified by the user when calling
             in a macro with an implicit add.  The following codes
             apply to the four technology types currently recognized,
             and more may be added later.  0:  NO TECHNOLOGY
             SPECIFIED 1:  LS 2:  S 3; H 4:  C
             NOTE THAT THE MOST SIGNIFICANT BIT IS DEFINED AS THE
             ALIAS BIT.  If this bit is set in the technology byte,
             the alias of the gate was specified, or the '*' option
             when adding a macro.

             OD DELIMITER:  A Hex FF always denotes the end of the
             head information for the DRL entry.  This byte will
             always be FF for a type 1 entry.

 

             INPUTS

             The next section of the Type1 DRL entry denotes the
             connections made to this gate.  The first byte is an
             unsigned integer byte count of the number of inputs for
             this package.  For example, if the macro specified two
             inputs for a 7400, the input count would be 2.  This
             is followed by TWO BYTES OF NAME REFERENCE FOR EACH
             INPUT.  These two bytes are the name number assigned to
             the 10 byte interconnection name specified in the Name
             List section.  If no name was connected to an input or
             output line, a NULL ENTRY or 0000 name is assigned.















                                            TECHNICAL SYSTEM INFORMATION




 10@32



     OUTPUTS

     Following the last byte of the input name list is the
     byte count of the outputs for the gate or macro.  Again,
     a list with two bytes of name reference for each output
     follows the count byte.  POWER IF AND ONLY IF THE
     PACKAGE DESIGNATION LETTER IS A, four bytes will follow
     the last output name reference.  Since power and ground
     connections are predefined for Type1 macros, and only
     the first gate ('A' gate) of the package gets the power
     line names assigned to it, these four bytes (forming the
     two power name refer+nces) only appear for the first
     gate.





     TYPE 2 DRL STORAGE

     FOR THE FIRST 15 BYTES, THE TYPE2 DRL ENTRY IS IDENTICAL
     TO THE TYPE1 ENTRY.  The bytes, their order, and their
     meaning are identical for the head information on the
     Type1 and Type2 entries.  The only changes between
     these two types appears after the FF delimiter.  We will
     only show the short form of the storage to start with.


     BYTE (HEX)        DESCRIPTOR
     0                TYPE
     1-3              MACRO NUMBER
     4-6              ALD PAGE, X, Y

     7-9              PCB X, Y, ORIENTATION
     A-B              EXPANDOS
     C                TECHNOLOGY TYPE
     D                FF DELIMITER

        CONTROL INPUTS COUNT, 2 BYTE NAME REFERENCE LIST
        CONTROL OUTPUTS COUNT, 2 BYTE NAME REFERECNE LIST
        DATA INPUTS COUNT, 2 BYTE NAME REFERENCE LIST
        DATA OUTPUTS COUNT, 2 BYTE NAME REFERENCE LIST
        POWERS           COUNT, 2 BYTE NAME REFERENCE LIST


     The only change is that now there are more fields of
    the macro to make connections to, and the power
    interconnections are explicitly defined by their own
    field.  Again, the two byte interconnection lists match
    the name file with least significant byte first.






TECHNICAL SYSTEM INFORMATION




                                                       10@33



TYPE 3 DRL STORAGE

FOR BREVITY, FIELDS WHICH ARE IDENTICAL TO TYPE1 AND
TYPE2 MACROS IN NAME AND USE WILL BE LISTED ONLY BY
THEIR BYTE DESCRIPTOR DESIGNATION.

    BYTE (HEX)         DESCRIPTOR
    0                  TYPE
    1-3                MACRO NUMBER
    4-6                ALD PAGE, X, Y
    7-9                PCB X, Y, ORIENTATION
    A-B                EXPANDOS .
    C                  TECHNOLOGY TYPE
    D                  PAD SPACING

The pad spacing defines the distance between pads for
TWO PIN type discrete components such as resistors,
diodes, etc.  The macro file defines a DEFAULT PAD
SPACING which will be used if none is specified.  This
number is one byte, specifying .05 inch grid spacing
numbers.  The default for resistors, for example is 10,
or .5 inch separation between pads@

  OE     PROMPT COUNT

Unique to Type 3 macros are the additional information
prompts built in.  Up to three prompts for information
may be made (as defined in the macro file) and the user
responses to these prompts are stored verbatim in the
DRL entry for further processing as needed.  Not all
prompts are usually used, however, as in the resistor
which only asks for resistance value in ohms and a power
rating.  This byte integer specifies how many prompts
were answered and stored in th+ DRL entry.

PROMPT1
PROMPT2
PROMPT3    Five bytes each, ASCII responses to prompts.

OPTIONAL AS DEFINED BY PROMPT COUNT Each prompt response
is assigned six bytes in the DRL entry.  The first five
bytes are the ASCII string entered by the user in
response to the prompt, and the sixth byte being an
ASCII '$' delimiter.


DELIMITER After the last used prompt field, the FF(H)
delimiter marks the end of the header block and he
beginning of the I/0 interconnect section.






                               TECHNICAL SYSTEM INFORMATION




 10@34



     INPUTS             COUNT, 2 BYTE NAME REFERENCE LIST

     OUTPUTS           COUNT, 2 BYTE NAME REFERENCE LIST

     The FF delimiter marks the end of the head section as
     before, and is identical in use to the Type1 macro with
     the exception that NO POWER FIELDS ARE DEFINED.  Type3
     macros only have inputs and outputs, and sometimes not
     even those.


     COMMENT STORAGE

     The final storage section is for comments; the area is
     defined by STRTCOM and COMLEN.  Each comment requires
     107 (decimal) bytes of storage in the DRL file.  They
     are stored in a block with bytes defined as:


     BYTE            DESCRIPTOR

     0               PAGE NUMBER comment will be printed  on.
     1-2             X,  Y,  COORDINE of upper left  corner
     3-1D            LINE 1: 25 bytes ASCII  line,  +  '$'
                     terminated.
     1E-37           LINE 2: Same  format.
     38-51           LINE 3: Same format.
     52-6B           LINE 4: .Same format


     Each comment is four lines by twenty-five characters,
     with a '$' terminator appended to the end of the string
     when stored in the file.  No terminators are used
     between comments since the storage is exactly defined
     for all comments.





















TECHNICAL SYSTEM INFORMATION



                                                           10@35


              FIGURE 10.3 DRL FILE STORAGE EXAMPLE


A>DDT EXAMPL@DRL
DDT VERS 2.2
NEXT  PC
0500 0%00
-D
0100 AB 00 80 0& 2B 02 54 0& 7F 03 6B 00 00 00 00 00 ....+.T...k..... 
0%10 00 00 00 00 00 00 00 00 55 05 4A 03 00 00 00 00 ........U.J..... 
0&20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 
0130 00 00 00 00 00 00 00 00 38 31 31 32 30 32 20 20 ........81?202
0140 41 20 45 58 4% 4D 50 4C 45 20 4F 46 20 4D 41 47 A EXAMPLE OF MAG
0150 49 43 20 20 20 20 20 20 20 20 20 44 41 56 49 44 IC DAVID
0160 20 57 2E 20 52 55 53 53 45 4C 4C 20 20 20 20 20 W. RUSSELL
0170 20 20 20 20 4E 59 59 4E OF OF 14 00 00 00 00 00 NYYN........ 
0180 00 00 00 00 00 00 00 00 4A 01 20 00 00 55 01 42 ........J. ..U.B
0190 4C 00 55 01 41 62 00 55 01 43 7C 00 55 03 20 92 L.U.Ab.U.C|.U. . 
01AO 00 55 04 20 CD 00 4A 02 20 08 01 01 00 2B 44 41 .U. ..J. ....+DA
01BO 54 41 2E 42 30 20 20 02 00 2B 44 41 54 41 2E 42 TA.BO ..+DATA.B
01CO 31 20 20 03 00 2B 44 41 54 41 2E 42 32 20 20 04 1 ..+DATA.B2
01D0 00 2B 44 41 54 41 2E 42 33 20 20 05 00 2B 44 41 .+DATA.B3 ..+DA
01EO 54 41 2E 42 34 20 20 06 00 2B 44 41 54 41 2E 42 TA.B4 ..+DATA.B
01FO 35 20 20 07 00 2B 44 41 54 41 2E 42 36 20 20 09 5 ..+DATA.B6
0200 00 2D 49 4F 2E 52 45 41 44 20 20 OA 00 2D 49 4F .-IO.READ ..-IO
0210 2E 57 52 49 54 45 20 OB 00 2D 49 4F 2E 45 4E 41 .WRITE ..-IO.ENA
0220 42 4C 45 OC 00 2B 52 45 41 44 2E 44 41 54 41 OD BLE..+READ.DATA. 
0230 00 2B 35 56 20 20 20 20 20 20 20 OE 00 47 4E 44 .+5V ..GND
0240 20 20 20 20 20 20 20 OF 00 2D 52 45 41 44 2E 44 ..-READ.D
0250 41 54 41 11 00 2B 49 4E 50 55 54 2E 42 30 20 12 ATA..+INPUT.BO . 
0260 00 2B 49 4E 50 55 54 2E 42 31 20 13 00 2B 49 4E .+INPUT.B1 ..+IN
0270 50 55 54 2E 42 32 20 14 00 2B 49 4E 50 55 54 2E PUT.B2 ..+INPUT. 
0280 42 33 20 15 00 2B 49 4E 50 55 54 2E 42 34 20 16 B3 ..+INPUT.B4 . 
0290 00 2B 49 4E 50 55 54 2E 42 35 20 17 00 2B 49 4E .+INPUT.B5 ..+IN
02AO 50 55 54 2E @2 36 20 18 00 2B 49 @E 50 55 54 2E PUT.B6 ..+INPUT. 
02BO 42 37 20 %9 00 2B 44 41 54 4% 2E 42 37 20 20 1A B7 ..+DATA.B7
02CO 00 2B 4F 55 54 2E 45 4E 4% 42 4C 1B 00 2B 4F 55 .+OUT.ENABL..+OU
02DO 54 50 55 54 2E 42 30 1C 00 2B 4F 55 54 50 55 54 TPUT.BO..+OUTPUT
02EO 2E 42 31 &D 00 2I 4F 55 54 50 55 54 2E 42 32 1E .B1..+OUTPUT.B2. 
02FO 00 2B 4F 55 54 50 55 54 2E 42 33 1F 00 2B 4F 55 .+OUTPUT.B3..+OU
0300 54 50 55 54 2E 42 34 20 00 2B 4F 55 54 50 55 54 TPUT.B4 .+OUTPUT
03%0 2E 42 35 2& 00 2B 4F 55 54 50 55 54 2E 42 @6 22 .B5!.+OUTPUT.B6s
0320 00 2B 4F 55 54 50 55 54 2E 42 37 03 2D 02 FO 01 .+OUTPUT.B7.-... 
0330 3; 50 OA 32 03 00 00 00 00 03 32 30 2@ 20 20 24 2P.2......20 $
0340 32 30 20 20 20 24 20 20 20 20 20 24 FF 14 01 00 20 $ $.... 
0350 02 00 03 00 04 00 05 00 06 00 07 00 19 00 00 00 ................ 
0360 09 00 OA 00 OB 00 00 00 00 00 OD 00 00 00 00 00 ................ 
0370 00 00 00 00 OE 00 00 01 4A 02 80 01 96 46 %E 28 ........J....F.(
0380 00 00 00 00 FF 02 OC 00 OC 00 01 OF 00 0% 4A 02 ..............J. 
0390 80 01 64 46 1E 28 00 00 00 80 FF 02 OB 00 09 00 ..dF.(.......... 
03AO 01 OC 00 OD 00 OE 00 01 4A 02 80 01 64 32 1E 28 ........J...d2.(
03BO 00 00 00 80 FF 02 OB 00 OA 00 01 1A 00 02 4A 25 ..............J%
03CO F3 0& C8 50 3C 37 00 00 00 01 FF 02 00 00 OF 00 ...P<7.......... 
03DO 00 08 11 00 12 00 13 00 14 00 15 00 %6 00 17 00 ................ 
03EO 18 00 08 01 00 02 00 03 00 04 00 05 00 06 00 07 ................


                                   TECHNICAL SYSTEM INFORMATION



10-36


03FO 00 19 00 02 OD 00 OE 00 02 4A 25 F3 01 C8 32 3C .........J%...2<
0400 1E 00 00 00 01 FF 02 1A 00 OE 00 00 08 01 0( 02 ................ 
0410 00 03 00 04 00 05 00 06 00 07 00 19 00 08 1B 00 ................ 
0420 1C 00 1D 00 1E 00 1F 00 20 00 21 00 22 00 02 OD ........ .!."... 
0430 00 OE 00 03 2D 02 FO 01 32 32 5A 32 03 00 00 00 ....-...22Z2.... 
0440 00 03 32 30 20 20 20 24 32 30 20 20 20 24 20 20 ..20 $20 $
0450 20 20 20 24 FF 14 11 00 12 00 13 00 14 00 15 00 $............ 
0460 16 00 17 00 18 00 00 00 00 00 1B 00 1C 00 1D 00 ................ 
0470 1E 00 1F 00 20 00 21 00 22 00 00 00 00 00 00 01 .... .!."....... 
0480 D2 09 53 41 4D 50 4C 45 20 49 4E 2F 4F 55 54 20 ..SAMPLE IN/OUT
0490 50 4F 52 54 53 20 46 52 4F 4D 20 24 4D 49 43 52 PORTS FROM $MICR
04AO @1 20 49 4E 54 45 52 @( 4! 43 45 20 43 4F 4E 4E 0 INTERFACE CONN
04BO 45 43 5@ 4F 52 24 20 20 20 2@ 20 20 20 20 20 20 ECTOR$
04CO 20 20 20 20 20 20 2@ 20 20 20 20 20 20 20 20 24                $
04DO 28 34 20 4C 49 4E 45 53 20 58 20 32 35 20 43 4F (4 LINES X 25 CO
04EO @C 53 20 41 56 41 49 4C 29 24 1B 00 1C 00 %D 00 LS AVAIL)$...... 
04FO 1E 00 1F 00 20 00 21 00 22 00 00 00 00 00 00 01 .... .!.s....... 
0500 C3 &5 00 7A E6 38 OF OF OF C9 CD 03 03 87 4F 21 ...z.8........0! 
05&0 42 06 09 4E CD &5 00 23 4E CD 15 00 OE 2C CD 15 B..N...#N.... .. 
0520 00 C3 15 00 CD 03 03 E6 06 FE 06 C2 BE 02 OE 53 ...............S
0530 CD 15 00 OE 50 C3 15 00 CI 2E @0 2A OC 00 7C CD ....P......*..|. 
0540 D5 02 7D CD D5 02 OE 20 CD 15 00 CD 15 00 C9 21 ..).... .......! 
0550 00 00 39 22 13 00 3A 10 00 B7 CA 71 03 21 FF FF ..9"..:....q.!.. 
 0560 22 OE 00 3C C2 71 03 3C 32 10 00 2A OC 00 C3 97 "..<.q.<2..*.... 
 0570 03 CD 9E 06 C2 40 05 21 10 00 7E B7 CA 83 03 35 .....@.!..-....5
































TECHNICAL SYSTEM INFORMATION



                                                       10@37




10.5 MACRO FILE STORAGE

The Macro file itself is stored in four major sections,
the Header and cross reference, Macro entry storage, Pin
file, and Pad file.  The header section contains the
pointers to the other sections and the cross reference
which is a group of pointers from macro numbers to the
address of the macro entry for that number.  The
following is a description of the entire file.

BYTE (HEX)

0-1
STRTMAC:  These two bytes are a 16 bit OFFSET ADDRESS. 
The offset is from the start of the Macro file itself to
the sta of the macro entry file section.  By
coincidence this number is also the end of the header
cross reference section.  These offset numbers and byte
counts are stored in the usual 8080 least significant
byte first format.

2-3
MACLEN:  This is a 16 bit count of the number of bytes
in the macro entry file which starts at STRTMAC.

4-5
STRTPIN:  This is a 16 bit OFFSET ADDRESS from the start
of the Macro file itse@f to the start of the PIN file.

6-7
PINLEN:  This is a 16 bit byte count of the number of
bytes in the PIN file which starts at STRTPIN.

8-9
STRTPAD:  This is a 16 bit OFFSET ADDRESS from the start
of the Macro file itself to the start of the PAD file.

OA-OB
PADLEN:  This is a 16 bit byte count of the number of
bytes used in the PAD file which starts at STRTPAD.

OC-OF
RESERVED:  These two bytes are reserved for future use.












                               TECHNICAL SYSTEM INFORMATION




10@38




    CROSS REFERENCE


    The remaining bytes from address 10H until STRTMAC are
    the cross reference table of macro numbers to entry
    addresses.It is with this table that the programs gain
    access to the macro entries themselves.  Each cross
    reference entry requires five bytes of storage.


    THE FIRST THREE BYTES ARE THE DATA COMPRESSED MACRO
    NUMBER. This data compression consists of separating the
    ASCII string representing a macro number into three 2-
    letter segments, no matter how many letters or numbers
    were involved in the name.  Ea@h 2-digit segment is
    then converted to straight unsigned 8-bit binary numbers
    representing the number specified, unless there was no
    number.  If the 2-digit segment contained all blanks, an
    80H character is inserted in the byte to denote this. 
    In other words, if a blank occurs in the last digit of
    the segment or in both, the most significant bit is set. 
    In this coding it is possible to recover the entire 6
    character name from only 3 bytes.  For example, a 7400
    macro number is converted to strings of 74,00, and
    space- space (since nothing was specified in the last 2
    digits).  This is then converted to the three digit
    binary representation of 4AH (74), OOH,(0), and 80H
    (space-space).  This is the compressed format in which
    all macro numbers are handled internally.  For Type3
    macros with alphanumeric names, the names are still
    converted in the same manner, disregarding the actual
    ASCII characters, and the REAL name is then looked up in
    the PART NUMBER field of the macro entry itself.


    THE LAST TWO BYTES ARE THE DISPLACEMENT FROM THE START
    OF THE MACRO ENTRY FILE TO THE MACRO BEING REFERENCED. 
    By doing the standard Base+Offset+Displacement addition,
    it is possible to quickly find the macro entry of any
    macro number.  The base address  the starting address
    of the Macro file itself, the offset is STRTMAC, and the
    cro@s reference displacement address ishe
    displacement@  The cross reference file ends at
    STRTMAC.











TECHNICAL SYSTEM INFORMATION




                                                       10@39



TYPE 1 MACRO STORAGE

The macro entry file runs from STRTMAC to STRTPIN.  As
previously mentioned, three types of macros are defined
t, handle all possible cases of electronics gadgetry. 
These three types have somewhat different storage
defintions due to the slightly different data needs of
each.  The following is a complete description of the
storage allocated to each of the three types.


BYTE (HEX RELATIVE)

0
TYPE:  The first byte of all entries is the type number
of the macro referenced.  This is a single binary
number, range 1-3.

1-3
NAME:  This is the LOGICAL name of the FUNCTION of the
gate being created.  Three ASCII characters are stored
as entered in the definition, AND, OR, INV, etc.

4-6
ALIAS:  This is a 3 byte ASCII field with the DeMorgan
LOGICAL gate alias name as entered in the definition.

7
PINREF:  This is a single number, 8 bits, which is the
PIN REFERENCE number assigned to this gate type.

8-9
EXPANDOS:  These two bytes are for future expansion but
may be user defined if need be.

OA-?
PIN LIST:  The first byte is a count of the number of
INPUT pins defined in this macro.  This is followed by
one byte for each pin, 8 bits binary SIGNED integer. 
The most significant bit of the byte is @et if the '-'
minus sign was used in the pin definition to specify
ACTIVE LOW.  The remaining 7 bits are the binary
representation of the pin number.  After the last pin
number in the list, the next byte is the count of
outputs in the definition.  This, again, is followed by
that number of pin numbers in the list.  Finally,
following the last output pin number, one byte
containing the binary equivalent of the power in
milliamps is stored, range 0-255.






                               TECHNICAL SYSTEM INFORMATION




10@40




    TYPE 2 MACRO STORAGE

    Since many of the bytes in the Type2 and Type3 macros
    are defined the same, they will be represented here in
    short form, with only the differences between types
    fully explained.


    BYTE (HEX RELATIVE)

    0     TYPE

    1-3   NAME

    4 ALIAS?:  This byte contains an ASCII 'Y' or 'N'
    entered from the editor to enable or disable the
    aliasing function for Type 2.

    5     PIN REFERENCE

    6-7   EXPANDOS

    8 PAD REFERENCE:  This byte is the binary Pad
    reference number referring to the PAD file entry for
    this package's footprint on the printed circuit board.

    9-?  PIN NUMBER LISTS:  The Type2 and Type3 pin number
    lists are different from the Type1 list in that each pin
    now also has a mnemonic name associated with it to aid
    the designer.  The first byte following the pad
    reference, again, is the count of the number of CONTROL
    INPUTS specified in the file.  Even if this count is
    zero, the count byte will be present.  The count byte is
    followed by four bytes, the first being the pin number,
    in the same format as Type1 with the MSB denoting the
    ACTIVE LOW functionality of the pin.  The next three
    bytes are the 3-byte ASCII mnemonic name associated with
    the pin.  These four bytes are stored with the entered
    data for each pin specified in the count byte.


    Following the last entry in the Control input sections,
    identical count and pin list sections follow for CONTRO
    OUTPUTS, DATA INPUTS, DATA OUTPUTS, and POWER PINS. 
    After the last power pin number definition, there are
    POWER PIN COUNT - 1 single byte entries for the power
    dissipation estimate numbers, as defined in Type1. There
    is always one less power count than there are pins
    because we assume that one of them is the ground or
    return line.  The power estimates should have been
    entered in the same order as the pin names were defined.




TECHNICAL SYSTEM INFORMATION



                                                       10@41




TYPE 3  MACRO STORAGE


Type1 and Type2 macros use the least amount of storage
space because they are defined to be of a certain type,
and of the types most often used in the design.  Type3,
however, must take up the slack of being able to define
all other types of parts and as such requires great
flexibility and greater storage requirements.


BYTE (HEX RELATIVE)

0       TYPE

1-6
PART NUMBER:  This is the 6 byte field which is the
actual, non-compressed ASCII string which will be used
to specify this macro number back to the user.  The
compressed form is still used internally.

7
UNIT LETTER:  This is the letter which will be used for
the unit number of the part when it is called, a
voltage regulator for example might have a unit letter
of 'V', so the package will be called V01 when entered
into the DRL file.

8-OD
PART NAME:  This is a 6 byte ASCII string which gives a
full name to the part on the schematic.  Resistors might
be labled R01, but under the part this nam@@ like RESIST
will appear, or VREG, etc.

OE
PAD REFERENCE:  This reference defines the footprint of
the part, same as Type2, but no pin references are given
to Type3 components.

OF
DEFAULT SPACING:  For 2-Pin components such as
resistors, diodes, etc., a pad reference is not needed. 
This binary digit specifies the distance on @05 inch
grids between the two pads.

10-11     EXPANDOS









                               TECHNICAL SYSTEM INFORMATION




10-42




    12-?
    PROMPTS:  To enable the user to add extra information
    necessary about a Type3 macro at the design stage, three
    prompt fields can be displayed for the user and his
    responses to these prompts stored in the DRL file. 
    Three prompt fields of 9 bytes each are stored,
    regardless of whether or not all prompt fields are
    used.  Blank or unused prompt fields are just not
    printed. THE FIRST 6 BYTES ARE THE PROMPT QUESTION, such
    as 'VALUE' for the resistance value of a resistor.  THE
    NEXT 3 BYTES ARE THE PROMPT UNITS, to define and clarify
    the users response.  'Value@, for instance, would have a
    unit field of 'OHM'.  The question field is actually
    only 5 bytes of ASCII characters, with a '$' terminator
    as the sixth character.




    PIN LI$T$

    The Pin number and mnemonic name lists for the INPUTS
    and OUTPUTS then follow the last prompt byte the same as
    in type 2@  NO POWER ESTIMATE IS STORED FOR TYPE3
    MACROS.



    IN FILE STORAGE


    The PIN file starts at STRTPIN.  The first byte of the
    file segment is the NEXT AVAILABLE REFERENCE NUMBER. 
    The remainder of the file is consecutive PIN file
    entries of the following format:  The first byte of the
    entry is the refer+nce number assigned.  The next bytes
    are individual segments containing the ASCII gate
    reference letter A,B,C, etc., followed by the binary pin
    number with the MSB set to indicate active low.  The A-
    PIN#,PIN#...  entry is followed by tha B-PIN#...  entry,
    until all gate @ombinations are exhausted, then an FF
    terminator marks the end of the reference.













TECHNICAL SYSTEM INFORMATION



                                                       10@43




PAD FILE STORAGE

The first byte of the PAD file is the NEXT AVAILABLE
REFERENCE NUMBER.  This is followed by the consecutive
entries for the Pad references used by the macros.  The
first byte of an entry is the count of pads in the
footprint, 8 bit binary.  The next byte is THE HOLE SIZE
(0-3) IN THE MOST SIGNIFICANT 2 BITS, and the silkscreen
picture type in the lower 5 bits.  Thes@ bits will be
used by a program later and are not user definable at
this time.  The next 2 bytes are for future expansion
and are undefined as to content.  They will hold X and
Y scale factors for the silkscreen, as entered on the
PAD file entry screen.  Finally, the next bytes are the
SIGNED BINARY NUMBERS representing the relative offsets
of all pads starting in sequence with pad 1. THE NUMBERS
ARE IN 2'S COMPLIMENT NOTATION FOR NEGATIVE NUMBERS. The
file ends at STRTPAD + PADLEN.





































                               TECHNICAL SYSTEM INFORMATION




10-44



                FIGURE 10.4 MACRO STORAGE EXAMPLE


A>DDT TEST.MAC
DDT VERS 2.2
NEXT  PC
0200 0&00
-D
0100 1F 00 96 00 B5 00 13 00 C8 00 2B 00 00 00 00 00 ..........+..... 
0110 4A 00 80 00 00 4A 55 80 10 00 05 F4 80 5F 00 01 J....JU...... .. 
0120 41 4E 44 4F 52 20 01 00 00 02 01 02 01 83 16 02 ANDOR .......... 
0!30 43 4D 50 09 00 00 00 01 03 02 41 @C 42 03 41 45 CMP.......ALB.AE
0140 42 04 41 47 42 00 08 OA 41 30 20 OC 41 31 20 OD B.AGB...AO .A1 . 
0150 41 32 20 OF 41 33 20 09 42 30 20 OB 42 31 20 OE A2 .A3 .BO .B1 . 
0160 42 32 20 01 42 33 20 03 07 41 4C 42 06 41 45 42 B2 .B3 ..ALB.AEB
0170 05 41 47 42 02 10 56 43 43 08 47 4E 44 58 03 4C .AGB..VCC.GNDX.L
0180 45 44 20 20 20 4C 4C 45 44 20 20 20 02 04 00 00 ED LLED
0190 43 4F 4C 4F 52 24 20 20 20 20 20 20 20 20 24 20 COLOR$ $
01AO 20 20 20 20 20 20 20 24 20 20 20 02 01 2B 20 20 $ ..+
01BO 02 2D 20 20 00 01 01 41 01 02 83 42 04 05 86 43 .- ...A...B...C
01CO 09 OA 88 44 OC OD 8B FF 02 10 40 00 00 00 00 00 ...D......@..... 
01DO FE 00 FC 00 FA 00 F8 00 F6 00 F4 00 F2 06 F2 06 ................ 
01EO F4 06 F6 06 F8 06 FA 06 FC 06 FE 06 00 01 01 01 ................ 
01FO 01 01 01 42 02 10 56 43 43 08 47 4E 44 58
































TECHNICAL SYSTEM INFORMATION




                                                       10@45



10.6 STORAGE OF THE FILENAME.RBN FILE

This file contains the information necessary to route
the design in the DRL file.  The byte format of this
design is as follows:

Byte 0-7 DRL FILE NAME.  This is the 8 bit ASCII file
name of the DRL file, without the DRL extension.  Byte
8-12H OUTLINE LE NAME.  This is an 8 bit field with
the OUTLINE filename given to the compiler followed by 3
bits containing the OUTLINE file extension bytes in the
operating systems format.

Byte 13H-1CH  PART NUMBER.
The first 8 bytes are the part number from the header
file in the DRL file, followed by two bytes of the
revision number from the same place. These bytes are all
ASCII strings.

Byte 1DH-35H  TITLE.
These 25 bytes are the ASCII string design title from
the DRL header.  Byte 36H-45H DATE.  These 16 ASCII
characters are the user's response to the date query in
the OUTLINE file.  The part number, title, and date are
all printed on the artwork generated by the system.

Byte 46H  FF DELIMITER.
Marks the end of the first file segment, containing the
ASCII information.



SEGMENT TWO, FINGER DATA:

For each finger or connector, a seven byte entry is made
with the binary numbers representing 1) the number of
fingers/2, 2) the orientation code for the finger, 3)
the spacing in .005 grid units, 4) the height parameter,
5) the width parameter, 6) the initial X coordinate (.05
grid) of pin or finger 1, 7) the initial Y coordinate of
finger 1.

After the last connector entry byte, an FF Hex
terminator marks the end of the section.











                               TECHNICAL SYSTEM INFORMATION




10@46




    SEGMENT THREE, PAD LIST

    For each chip, a pad list entry is made starting after
    the FF terminator from segment two.  The first byte
    contains the number (B bit binary) of pads in the
    footprint, the second byte contains the pad type number
    (0-3) for which type of pad was used and the most
    significant bit is set if the orientation of the chip
    was 1 or 3 (horizontal).

    Two bytes for each pad then follow with the binary X and
    Y coordinates of each pad in the footprint.  After the
    last pad entry, an FF Hex terminator marks the end of
    segment three.



    SEGMENT FOUR, ROUTE INTERCONNECTION COORDINATES

    The next section is a series of coordinates which define
    a to-from list for routing.  The first two bytes of the
    4 byte entry are the SOURCE X and Y coordinates (8 bit
    binary).  The last two bytes of the entry are the
    DESTINATION X and Y coordinates.  For all practical
    purposes the source and destination may be considered
    interchangeable.

    An FF Hex terminator marks the end of the signal route
    segment.



    SEGMENT FIVE, POWER CONNECTION COORDINATES

    The next segment is made up of TWO BYTE entries with the
    SOURCE X and Y coordinates of a power line which was
    specified to connect to a power grid.  Each entry will
    be routed to the nearest power grid location, so there
    are no source bytes defined.  Since up to four power
    supply grids are possible, there will be four
    interconnection lists, each terminated with an FF Hex
    terminator.  If a grid was not used, the FF terminator
    will still be present in the file.  The last segment 5
    terminator marks the end of the FILENAME.RBN file.











TECHNICAL SYSTEM INFORMATION



                                                       10@47




10.7 FILE STORAGE FOR THE ROUTED ARTWORK FILE


After the router executes, the information file
containing all of the data for the route is in the
<<name>>.RTE file.  The format of that file is as
follows:

Byte 0-7
The first 8 bytes are the DRL file name the route was
generated from.  Also the name of this file.

Byte 8-18 (Decimal this  time)
The next 11 bytes are the full character name of the
OUTLINE file with its .OTL file extension.

Byte 19-28
The next 10 bytes are 8 bytes for PART NUMBER and 2
bytes for REVISION.

Byte 29-53
The next 25 bytes are the DESIGN TITLE as specified in
the DRL file header.

Byte 54-FF terminator
The next 16 bytes are the characters entered in response
to the DATE query in the outline file.

This SECTION  is terminated by a hex FF.



FINGER DATA:

The next section contains any number of 7 byte entries
the same as they were specified for the RTE.BIN file. 
These entries should be identical to those in the
RTE.BIN file.  The entire section has a hex FF
terminator.
















                               TECHNICAL SYSTEM INFORMATION



10@48




    LIST OF UNROUTES

    The next section is any number of 4 byte entries
    specifying the source and destination of a line which
    was not routed.  The first 2 bytes of an @ntry are th+
    Source X, and Source Y coordinate.  The last 2 bytes are
    the Destination X and Destination Y coordinates.  If it
    was a power line which was not routed, the Destination X
    byte WILL BE ZERO.  This zero is just a flag denoting a
    power line, not a coordinate.  The second Destination
    byte then is a number from 1-4 denoting the first,
    second, etc.  The second byte is a code for the power
    grid it was to route to.  This ordering refers to the
    order in which the power grids were entered in the
    OUTLINE file.  This entire section is terminated with a
    hex FF.




    MATRIX

    The next 8004 Hex bytes are the interconnection matrix. 
    Some storage is wasted because the matrix is actually
    250 by 128 grids.  The first 4 byt@s are the counts of
    Routed wires and Unrouted Wires, in 16 bit numbers least
    significant byte first.  The rest of the matrix is
    split up as X coordinates 0-249 first, with Y as 0, then
    the next 250 X coordinates with Y as 1, etc.  In other
    words, the X coordinates form the sequential addresses.

    The PCB matrix is stored as ONE BYTE per grid unit,
    with the UPPER NIBBLE denoting the wiring code for SIDE
    1 (component side), and the LOWER nibble denoting the
    wiring code for Side 2.  These codes are:

      0      Nothing here
      1,2,Special line codes for thick lines
      4 horizontal line segment
      5 vertical line segment
      6 upper right corner le segment
      7 lower right corner
      8      upper left corner
      9      lower left corner
      A(hex) VIA hole, pad type 1
      B IC socket pad , type 2
      C      type 3 pad
      D      type 4 pad
      E,F    not used at this time.






TECHNICAL SYSTEM INFORMATION




                                                       10@49


Special codes:  CONDITIONAL VIAS are assigned to
connector fingers during routing.  These via codes
will be different from normal hole ces.  For normal
pads, the side 1 and side 2 pad code will be identical. 
For conditional vias, combinations of these codes denote
the following special cases.  Conditional vias are
removed at the end of a route simply by not printing
them if they are not used.  The codes, however, remain
in the route file.  The purpose of conditional vias is
to create a route path to the other side of a board for
the second half of the connector fingers, even if they
are not used.  If no via is needed to route to the
finger, the conditional via is not printed or routed.


CONDITIONAL VIA CODES

E5:  A side ?, Horizontal finger connection point. 
AB:  A side 2, Horizontal finger connection point. 
 4E:  A side 2, Vertical finger conne@tion point. 
 AC:  A side 1, Vertioal finger @onne@tion point. The
 entire route section is terminated by a hex FF.


































                                TECHNICAL SYSTEM INFORMATION



                                                              B@l




APPENDIX B      PIN AND PAD REFERENCES - TTL Library



PIN Ref #   Example      Configuration

   1         7400        A:+01,+02,-03
                         B:+04,+05,-06
                         C:+09,+10,-08
                         D:+12,+13,-11

   2         7401        A:+02,+03,-01
                         B:+05,+06,-04
                         C:+08,+09,-10
                         D:+11,+12,-13

   3         7404        A:+01,-02
                         B:+03,-04
                         C:+05,-06
                         D:+09,-08
                         E:+11,-10
                         F:+13,-12

   4         7410        A:+01,+02,+03,-12
                         B:+03,+04,+05,-06
                         C:+09,+10,+11,-08

   5         7413        A:+01,+02,+04,+05,-06
                         B:+09,+10,+12,+13,-08

   6         7407        A:+01,+02
                         B:+03,+04
                         C:+05,+06
                         D:+09,+08
                         E:+11,+10
                         F:+13,+12

   7         7408        A:+01,+02,+03
                         B:+04,+05,+06
                         C:+09,+10,+08
                         D:+12,+13,+11

   8         7411        A:+01,+02,+13,+12
                         B:+03,+04,+05,+06
                         C:+09,+10,+11,+08

   9         7421        A:+01,+02,+04,+05,+06
                         B:+09,+10,+12,+13,+08
  10         7425        A:+03,+01,+02,+04,+05,-06,+14,+07
                         B:+11,+09,+10,+12,+13,-08,+14,+07



B@2






  11         7473        A:-01,+02,+14,+03,+12,-13,+04,+11
                         B:-05,+06,+07,+10,+09,-08,+04,+11

  12         7474        A:-03,-04,-01,+02,+05,-06,+14,+07
                         B:-11,-10,-13,+12,+09,-08,+14,+07

  13         74124       A:-06,+02,+03,+04,+05,+07,+16,+08
                         B:-11,+01,+14,+13,+12,+10,+16,+08

  14         74139       A:-01,+02,+03,-04,-05,-06,-07,+16,+08
                          B:-15,+14,+13,-12,-11,-10,-09,+16,+08

   15         74221       A:+14,+15,-03,+02,-01,+13,-04,+16,+08
                          B:+06,+07,-11,+10,-09,+05,-12,+16,+08



                                                              B-3

Ref#   Pad Type   # Pins   Footprint

 1        1         14      00,00
                            00,-02
                            00,-04
                            00,-06
                            00,-08
                            00,-10
                            00,-12
                            06,-12
                            06,-10
                            06,-08
                            06,-06
                            06,-04
                            06,-02
                            06,00

 2        1         16      00,00
                            00,-02
                            00,-04
                            00,-06
                            00,-08
                            00,-10
                            00,-12
                            00,-14
                            06,-14
                            06,-12
                            06,-10
                            06,-08
                            06,-06
                            06,-04
                            06,-02
                            06,00



B 4


Ref#   Pad Type   # Pins   Footprint

 3        1          24     00,00
                            00,-02
                            00,-04
                            00,-06
                            00,-08
                            00, 10
                            00,-12
                            00,-14
                            00,-16
                            00,-18
                            00,-20
                            00,-22
                            12,-22
                            12,-20
                            12,-18
                            12,-16
                            12,-14
                            12,-12
                            12,-10
                            12,-08
                            12,-06
                            12,-04
                            12,-02
                            12,00



                                                                             B@5

  Ref#     Pad Type     # Pins     Footprint

   4          1           40       00,00
                           00,-02
                           00,-04


                           00,-38
                           12,-38
                           12,-36


                           12,-04
                           12,-02
                           12,00

5        1         8       00,00
                           00,-02
                           00,-04
                           00,-06
                           06,-06
                           06,-04
                           06,-02
                           06,00

6        1        20       00,00
                           00,-02
                           00,-04


                           00,-14
                           00,-16
                           00,-18
                           06,-18
                           06,-16


                           06,-04
                           06,-02
                           06,00




                                                      C-1

APPENDIX C

                        PATCHES

The following assumes no knowledge of programing but a
good familiarity with CP/M .and particularly the
debugger@  There are several possibly useful
modifications which can be made easily to the DASOFT
system.  They are:

      1) Installing non@printing cursor control codes
      2) Directing plotter driver output to the screen
      3) Changing the compiler for use with the Route
         100 Option

Before you jump right in, there are some general
guidelines to follow.  The first thing to do is invoke
the debugger and "F"ill from 100 to AOOO with 0.  Then
use "1= to give the debugger the filename and then
"R"ead it in.

It's very important that you load files in this manner
rather than just typing *DDT filename" because few of
the DASOFT files start at 100.  Thus, as much of the
debugger as the file has not overlayed will be left in
memory and you will be unable to tell where the garbage
stops and the file begins.

After the modifications have been made, remember to move
the file, if necessary, to 100, and *Save* the proper
number of blocks.  Don't forget to "Save" only the
length + load offset.

1) Many terminals use non.printing codes for cursor
control keys such as the arrcw keys.  If the codes used
are one byte long, it is possible to patch these
directly into the installed kernal.  The locations are:

      Scroll up (return to last data field) 293
      Scroll down (go to next data field) 294
      Home (home cursor to command line) 295
      Delete (delete entire field)           296
      Char del (delete preceding characterz) 297
      Terminal Backspace (new line without
      line feed)                         299-29C

2) Directing the plotter output to the screen can be
very useful when you need to debug your serial
communications or an associated DASOFT plot file.  To do
this you change the "output" equate from 5 (which is the
CP/M list device) to 2 (which is the CP/M console out). 
Then save the assembled file as CONPLOT.CTL.  If you pip
the original driver to the name PENPLOT.CTL you will
then have twc interchangable drivers.  You can go from




C@2


    plotter output to console output and back by "pip"ing
    PLOTTER.CTL=( desired driver).


    3) Users of Route 1@0 who need to make boards longer
    than 12.5" or wider than 6.4" will find th@ XMax at
    2BE4, YMax at 2BE6.

    If  you  have Type 1 devices in the design,  the Typ@  1
     footprint starts at 2BFC.  Patch as always, but be
     @areful of how long the file is.  The compiler is longer
     than it used to be.



                                        G@1



                    GLOSSARY



ALD: Automated Logic Drawing; "schematics" drawn
   with ANSII standard logic symbols.

ALDPLOT.COM:   plot   routine   for  output   of
   automated logic drawings.  Run directly from
CP/M.  Requires a@@ess to "filename.ALD" file
which is produced by the ALD compiler (option
C on the Main Menu).

ALD position: location of a logic symbol, in X,Y
   coordinates, on a schematic page. Maximum X =
   250, maximum Y = 110.


ALDCOMP.26:   compiler  for  the  generation  of
   automated logic drawings.  Requires access to
   *filename.MAC* and "filename.DRL*.  Produces
   *filename.ALD=.

Alias: inverted function of logic gate.

Artwork matrix: hardcopy output to printer of PC
   board layout with X and Y values shown along
   each axis and component and trace locations
   shown.  Can be used as worksheet for
   component placement and route editing.

BORDEDIT.26: route editor for on-screen editing
   of PC board traces and pads.  Requires
   access to "filename.RTE" file.

Board  outline:  the  shape or perimeter of  the
   board.  Entered in the Outline Editor, it
   defines the boundaries of the area the auto-
   router can use to route traces.

BORDCOMP.26: PCB compiler.Organizes to-from list
   for the router to use.  Requires access to
   "filaname.DRL", "filename.MAC*, and
   "filename.OTL" files. Produces a file @alled
   *filename.RBN".











                                          GLOSSARY



G@2


       BORDPLOT.26:   program  for plotting  checkplots
          and :inal artwork. Can be run from main
          menu or directly from CP/M.  Requires
          access to "filename.RTE" and "filename.OTL"
          files and the PLOTTER.CTL program.

       BORDROUT.COM: the auto-router program.  Requires
          access to the files "filename.DRL",
          "filename.MAC" and "filename.RBN".  Produces
          a file called "filename.RTE".  Can be run
          directly from CP/M.

       CMD line:  space in the upper left corner of the
          screen for entering a menu selection or
          system command (Save, continue, quit, delete,
          etc.)

       Comment  editor:  a  sub-routine in  the  Design
          Editor for inputing text for comments which
          will appear on your ALDs. Comments are stored
          as part of the DRL file.

       Component  types:   categories  of devices  used
          when entering parts in the macro library.

       Computed wire length: @alculated by the wirelist
          generator, a "fudged" diagonal (between a
          true hypotenuse and a Manhattan length)
          which also includes wrap on both ends.

       DASOFT.ASM: source code for the load kernal.

       DASOFT.COM:  machine   readable  object code  of
          the load kernal, not installed for any
          particular  hardware.

       DESEDIT.26:  the main Design Editor. Produces  a
          "filename.DRL" file as output. When a "save"
          is executed after an edit session on an
          existing file, the old file is renamed
          "filename.BAK" and kept as a backup.

       DRL:     Design    Requirements    List.     The
          "filename.DRL" file is the output of the
          Design Editor, containing interconnection and
          placement information specific to a single
          circuit board design.










GLOSSARY



                                        G@3

DS.COM:  the executable load kernal after it has
   been installed for a specific hardware
   system.

DSMSGS.26:   text file for screen messages

FATlines:  wide traces entered directly into a
   design in the Route Edit mode.  Fat lines
   are separated out at the plot stage for
   plotting with a broader tip pen.

Footprint:   the predefined layout of pads of  a
   spified size in an array that will
   *match" the pin spacing of a given
   component.

Graphics  mode:  certain editing screens  within
   the system that use the TGRAPHS.CTL file to
   implement graphics on a character-based
   terminal.

Hight:  in  a  macro entry,  used to define  the
   height of a finger on a card edge connector
   or the distance between rows of pins on a
   ribbon header connector.

INSTALL.26:    the   installation  routine   for
   configuring the software to a specific
   hardware system.

Load kernal:  the master control program for the
   DASOFT system.

Macro:   a  PCB  component,  either  digital  or
   analog.

Macro library:  a file storing information about
   each of the components used in a design. 
   Stored information includes details on pad
   footprints, numbering of pins, mnemonics,
   and pin combinations if there are multiple
   elements.

Manhattan wire length:  the distance between two
   points on a grid (pins on a board),
   counting grids steps with no diagonals
   (i.e. from 1,1 to 2,2 is a length of 2; over
   1 and up 1).









                                          GLOSSARY



G@4


       Net:  the  set  of  all  component  pins  to  be
          connected to each other in a design, as
          defined by each having been assigned the
          same netname.

       Netlist:   a listing by net (netname) of all pin
          to pin connections in a design, giving both
          ALD and PCB positions in X-Y coordinates.

       Netname:  a  10  character,  alpha-numeric  name
          given to a pin to designate that it is to
          be connected to another pin of the same
          name. Should conform to standard CP/M filename
          conventions. (+,-,/,.,A-Z,O-9)

       NETLIST.26: netlist generation program. Requires
          access to the *filename.DRL* and
          "filename.MAC" files.  Produces a file
          called "filename.NET" which can then be typed
          from CP/M.

       Orientation:   the  position of a component on a
          board with respect to its rotation around
          pin 1. Defined as *00" if pin 2 is below
          (towards the bottom of the board) pin 1.

       Outline:  the  perimeter,  or edge,  of  the  FC
          board.  Defines the area available to the
          router for locating traces.

     OUTLINE.26:  outline  editor usad to enter board
          outline, pad size, power grid line, and
          mounting hole infmation.  Requires access
          to the "filename.DRL" and "filename.MAC"
          files. Produces a file called "filename@OTL".

       OUTOVL.OVL:  overlay  file used by  the  Outline
          Editor.
       Pad reference number:  designator of pre-defined
          footprint which can be given to "re-use"
          the same pad layout for another device.

       PARTEDIT.26:  the macro library editor  program.
          Produces a "filename.MAC" file.  When a
          "save" is entered after an edit session on
          an existing file, the old file is renamed
          "filename.MAK" and kept as a backup.










GLOSSARY



                                        G@5


MATRIX.26:    artwork matrix generation program.
   Requires access to "filename.MAC",
   "filename.DRL", and *filename.OTL".  Produces
   a file called "filename.MAT".  A listing of
   UNROUTES is given at the end of the matrix.

Pincombination:  used in the definition of
   macros that have more than one element in a
   package to specify which pins form each
   element.

Pin reference number:   the designation given to
   a pre-defined pin combination.  Can be
   called to define another component that has
   an identical multiple element configuration.

PLOTTER.CTL:  assembled  version of the  plotter
   driver.  Used by the routines ALDPLOT and
   BORDPLOT to control the plotter.

Power  grid  lines:  wide lines entered  in  the
   Outline Editor for voltage and ground
   traces.


Quit:  to  leave an edit session without  saving
   any changes.  Old file is maintained and no
   backup is made.

Route  editor:  a graphics mode program used  to
   pre-route critical traces and to modify or
   add routes after the auto-router is done.

Save:   command used to update a data file  with
   changes made during an edit session.  In
   the Macro Editor it renames the old file as
   "filename.MAK" and in the Design Editor it
   renames the old file "filename.BAK".No backup
   is made in the Route Editor.

Segment:  the  portion of a net between 2  pins.
   Would be an entire net if only 2 pins share
   a netname.

Space:  the  center to center spacing of fingers
   on a card edge connector.  (Must be left
   blank on ribbon connectors.)










                                          GLOSSARY



G@6


       Spacing: the number of 50-mil grid units between
          pins on a 2-pin, Type 3 device.  A default
          value can be entered in the macro
          definition and changed as needed when the
          device is entered in the design file. 
          Replaces "pad footprint".

       Text  mode:    a  sub-routine  in  the  BORDPLOT
          program that allows you to control the
          plotter directly from the keyboard.  Can
          be accessed directly from CP/M by
          typing "BORDPLOT TEXT" after the CP/M
          prompt A>@

       TG@APHS.CTL:   the   assembled  version  of  the
          program TGRAPHS.ASM which is used to
          control the terminal graphics mode.

       Type 1 device:  in the Macro Library,  a 14  pin
          DIP package with power on pin 14 and ground
          on pin 7.  May have multiple elements.

       Type 2 device:  in the Macro Library,  a logical
          device with control inputs or outputs as
          well as data lines.  May have multiple
          elements.

       Type 3 device:  in the Macro Library,  a  device
          with only inputs and outputs.  Used to
          describe "everthing @lse"@

       Type  J device:  in the Macro Library,  used for
          the special case of card edge connectors or
          ribbon connectors.

       Unit letter (ltr): the alphabetic portion of the
          reference for components in a design.  The
          letter "U" is standard and "C" is
          frequently used for capacitors, "R" for
          resistors, etc.

       Unit   number:   the  numeric  portion  of   the
          componenteference.  It is increased
          automatically by the Design Editor as each
          component of the given letter is entered.












GLOSSARY



                                        G@7

Unroutes:  those pin to pin connections that the
   auto-router could not complete.  A list can
   be printed with the artwork matrix program
   and the unroutes can be completed with the
   Route Editor.

Width:  the  width  of a finger in a  card  edge
   connector  or the  center  to center  spacing
    of pads in a row on a ribbon header
    connector.

 Wirelist:   a  hardcopy  printout  for  use   in
    wirewrapping prototype boards.  Lists wires
    by length, longest to shortest, in w@ap
    layers.










































                                           GLOSSARY





                              INDEX                  I@1



 A                                      D

 ADD                                    Default drives  1-3,  1-17
    comments to ALD  4-8                Delete
    components to design  4-10             pads in route editor 6@10
    pads to PCB  6-10                      component from MAC  3-38
    traces s to ALD  4-6                   component from DRL  4-20

 ALD 1-3                                DeMorgan equivalents  2-3
    ANSI symbols defined  7-2
    comments on  4-7
    size  4-13

 ALDCOMP  7-1                           E

 ALDPLOT  9-1                           Edit
    options  9-1, 9-4                      comments by page #  4-7
                                           library entries  3-34
                                           design entries   4-20
 Alias                                     routes   6-10
    defined  3-14, 3-16
    how to use  2-3                     Edge connectors

 Artwork matrix  7-13                      creating 3@26
                                           finger dimensions  3-26
                                           orientation  3-28
 B                                      Element type (see component type)

 Board outline  5-1                     Erase
    enter/edit  5-1                        traces  6-6
                                           pads  6-10
 BORDPLOT  9-5                             power grids  5-7
                                           fat lines  6-7
 BORDROUT  8-1


 C
                                        F
 CMD line  1-6
                                        FAT lines
 Comments editor  4-7                      enter in route editor  6-7
                                          power grids in outline file  5-
Commit files  4-11

Component types  3-14

Copy entries in design  4-21

Cursor control  1-6
   install  1-14
   outline editor  5-4
   route editor  6-2



                                                   Index





I@2


Feedthroughs (see vias)              Library, component
                                        build  3-1
Filename                                TTL  4-23
   default  2-2
   defined  3-1
                                     Line widths
File storage formats                    pen chart  A-1
   load kernal  10-8                    power grids  5-7
   DRL file  10-27                      FAT lines  6-7
   MAC file  10-37
                                     List
Footprints                              devices in library  3-35, 4-23
   define  3-8                          components in design 4-25
   in TTL Library  3-13
   maximum size  3-13
                                     Logic symbols
                                        defin@d  7-2
                                        placement on ALD  2-6, 4-13

G                                    LS, S, C, etc.
                                        (see Technology types)
Gates
   multiple in package  2-3, 2-9, 4-10
   alternate forms  2-3
   DeMorgan equivalents  2-3
                                     M
Graphics characters
   install 1-14                     Matrix
   in route editor 6-12                 ALD 4-13
                                        PCB  4-15
Graphics mode                           blank artwork  7-14
   outline editor  5-4
   route editor 6-2                 Mounting holes 5-11
   control keys 5-4



                                     N
I
                                     Netlist
Install  1-6, 1-8                       create  7-5
   graphics characters 1-16            sample 7-7
   terminal cursor controls 1-12,-14
   terminals not on m@nu 1-10 Netnames 2-6, 4-18




J                                    0

J connectors                         Orientation
   add to library  3-26                 defined  4-16
   lines on ALD  3-27                   c,nne,t,rs  3-10
   orientation  3-26, 3-28
                                     Outline editor  5-1


       Index




      I@3

Pad                                       S
   combinations @footprints)
      create  3-13                        Spacing
      edit  3-32                             2 pin devices  3-24
      in TTL  3-13                           in footprints  3-12
   reference numbers  3-9, 3-13
   sizes, changing  5-11
        , default
   spacing  3-12, 3-24
                                          T
Partslist
   create  7-5                            Technology types  2-5
   sample  7-8
                                          Text mode  9-6

                                          Title blocks  4-3
Pin
   combinations                           Transfer components  3-36
      edit  3-32
      numbering  3-3                      TTL library  4-23
   numbering on connectors  3-28
   reference numbers in TTL  3-7          Type 1 @omponents
   samples  B-1                              defined  3-14
                                             add  3-15
Placement
   ALD  2-6                               Type 2 components
   PCB  2-6, 2-7                             defined  3-14, 3-18
                                             add  3-18
Plotter drivers
   defined  10-15                         Type 3 components
   installing custom  10-19                  d+fined  3-14, 3-22
                                             add  3-22
Power grids  5-7
                                          Type J components
Pre-routing  8-4                             defined  3-14, 3-26
                                             add  3-26
                                             sple


R

Ribbon connectors  3-30                   U

Route Editor  6-1                         Unit letters  3-23, 3-26
   graphics mode  6-2, 6-12
   re-entrant features  6-2, 8-4          Unit numbers  4-12

                                          Unroutes
                                             list  7-13
                                             completing  6-5
                                             show next unroute  6-8






                                                   Index




                                                    I@4



V

Vias
   default size  3-9, 5-11
   placement  6-2




W

Wirelist
   create  7-6
   sample  7-9










































                                                  Index





*** END OF DOCUMENT **.

















                                                  Index





*** END OF DOCUMENT **.

