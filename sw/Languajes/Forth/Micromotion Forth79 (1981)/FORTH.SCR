( FORTH79 Utilities Screen File       11-Jan-82   )                                                                             ( (c) Copyright 1981                             )              (          MicroMotion                           )              (          12077 Wilshire #506                   )              (          Los Angeles, CA  90025                )              (            (213) 821-4340                      )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ( User Personalization Screen #1         DLR   15-Dec-81  )                                                                     HEX  2 LOAD                                                     CR CR                                                           CR ." Personalization of FORTH-79 Version "                          011F C@ 1 .R ." ." 0120 C@ 1 .R CR                         CR ." How many screen buffers do you want? "                                                          RD1DEC 2 MAX 0105 !       CR ." Length for creating new screen file? " RD1DEC 0107 !      CR ." Enter alternate keyboard codes for DEL: " 0109 2 SETBYTS  CR ." Enter your console output DEL sequence: " 010B 3 SETBYTS  CR ." Can your terminal output lower-case? "                         GETLN @ 0DF AND 059 = 010E C! DROP CR                      CR ." User Personalization completed." CR                       FORGET GETN                                                     SAVE                                                            ( User Personalization Screen #2         DLR   16-Dec-81  )                                                                    : GETN     ( addr --- addr+x n )                                    DUP C@  IF   ( next char is non-zero )                             BEGIN  DUP C@ BL = WHILE 1+ REPEAT  ( skip blanks )             1- 0 0 ROT CONVERT ROT ROT DROP                              ELSE  ( next char = 0  )  0                                     THEN ;                                                      : GETLN    ( --- oldbase addr )  BASE @ PAD 40 EXPECT PAD ;     : SDSB!    ( oldbase addr n --- )  SWAP DROP SWAP BASE ! ;      : RD1DEC   (  ---  n  )    GETLN DECIMAL GETN SDSB! ;           : RD1HEX   (  ---  n  )    GETLN HEX GETN SDSB! ;               : SETBYTS  (  addr  count  ---  )                                   GETLN HEX >R ROT R> 4 ROLL 0 DO                                    GETN 3 PICK C! >R 1+ R> LOOP                                 2DROP BASE ! ;                                               ( HELLO   GO   TURNKEY  ONERR  )                               : HELLO                (  print greetings  )                        CR ." FORTH-79  Double-Number Version 2.0"                      CR ." IBIS/CRAY DTV   1850 EVERGREEN"                           CR ." DUARTE,  CA  91010  213-357-2180"                         CR ." Copyright (c) 1982"  CR ;                                                                                             : GO ( coldstart word )                                              ( perform any needed user initialization here )                LAST? HELLO WARM  ;                                                                                                         : TURNKEY (  TURNKEY <name>  )                                      ?FIND ' (BOOT) ! ;         TURNKEY GO                                                                                       : ONERR   (  ONERR <name>  )                                        ?FIND ' (QUIT) ! ;                                           ( Selective DESTRUCT  )                                                                                                          HEX                                                                                                                           : DESTRUCT      ( destroy compiler words )                        [COMPILE] FORTH ' SPACES LFA @                                     BEGIN DUP ' THRU U< 0=                                          WHILE DUP @ BF AND OVER C! PFA LFA @                            REPEAT DROP ;                                                                                                                DECIMAL                                                                                                                                                                                                                                                                                                                                                                                        ( Save current configuration as an OPTIMIZER system )                                                                           HEX                                                                                                                            : SAVE                                                               103 @ 101 !       ( Reset JP COLDST )                           FORTH DEFINITIONS   OPTIMIZER                                   HERE FENCE !                                                    HERE 1- 100 /                                                   DECIMAL                                                         CR ." After the CP/M prompt '>', type:"                         CR ."   SAVE " . ." FORTH.COM"                                  BYE  ;                                                                                                                      DECIMAL                                                        67                                                               ( Save current configuration as a 79-STANDARD system )                                                                          HEX  103 @ 101 !  DECIMAL    ( Reset JP COLDST )                                                                                FIND COLD (BOOT) !           ( Reset coldstart switch )         FORTH DEFINITIONS   79-STANDARD                                 HERE FENCE !                                                    HERE 1- 256 /                                                   CR ." After the CP/M prompt '>', type:"                         CR ."   SAVE " . ." FORTH.COM"                                  BYE                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( Editor I/O Installation  )                                                                                                    EDITOR  C/SL C/L MIN ' C/SLN !  FORTH                                                                                          : EDQUIT      TDONE  QUIT ;                                     : <TINIT>     (TINIT) ' EDQUIT  CFA (QUIT) ! ;                  : <TDONE>     (TDONE) ' (*QUIT) CFA (QUIT) ! ;                                                                                   FIND <TINIT> 0 SEVEC !                                          FIND <TDONE> 1 SEVEC !                                          FIND (CH)    2 SEVEC !                                          FIND (CV)    3 SEVEC !                                          FIND (HOME)  4 SEVEC !                                          FIND (BELL)  5 SEVEC !                                                                                                                                                                          ( Direct BIOS version of CRTEMIT )                                                                                                HEX                                                                                                                           (   As written, this code picks up the address of BIOS at    )  (   compile time and therefore must be compiled on the same  )  (   CP/M system in which it is to be run.                    ) CODE CONOT                                                         BC PUSH,  C E LD,  1 @ 09 + CALL,  BC POP,  RET,  END-CODE                                                                   :  <INIT>   0 (CTL) !   ' CONOT IOVEC 2+ ! ;                                                                                       FIND <INIT> 0 SEVEC !                                                                                                           DECIMAL                                                                                                                       ( Direct BIOS version of CRTEMIT, lower -> upper case )                                                                           HEX                                                                                                                           (   As written, this code picks up the address of BIOS at    )  (   compile time and therefore must be compiled on the same  )  (   CP/M system in which it is to be run.                    ) CODE CONOT    (  Version for terminal without lower case     )      BC PUSH, A E LD,  61 CP,  CY 1 L# JR,  07B CP,  NCY 1 L# JR,    20 SUB,  1 L: C A LD,  1 @ 09 + CALL,  BC POP,  RET,            END-CODE                                                                                                                       DECIMAL                                                      :  <INIT>   0 (CTL) !   ' CONOT IOVEC 2+ ! ;                       FIND <INIT> 0 SEVEC !                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ( DUMP   dynamic screen width version  DLR  2-Jan-82    )                                                                       HEX                                                             ( display n memory locations in hex starting at addr  )        : DUMP         (  addr  n  ---   )                                BASE @ HEX C/SL 49 > 8 * 4 ROLL 4 ROLL CR 3 PICK                   IF CR 5 SPACES 10 0 DO I 3 .R LOOP CR THEN  ( heading )      1- OVER + SWAP FFF8 4 PICK - AND       ( round start addr   )      DO CR I 0 4 D.R SPACE               ( print address      )      DUP 7 + I + I DO I C@ 3 .R 1 /LOOP  ( print mem contents )      2 SPACES DUP 7 + I + I                                             DO I C@ 7F AND DUP BL <          ( print ASCII )                OVER 7F = OR IF DROP 2E THEN EMIT 1 /LOOP                    DUP 8 + /LOOP CR DROP BASE ! ;                               DECIMAL                                                                                                                        ( DUMP   wide screen version )                                                                                                  ( Display n memory locations in hex starting at addr    )       ( shortened version for CRTs of width 73 chars or wider )        HEX                                                           : DUMP      (  start-addr  #-bytes  ---  )                        BASE @ ROT ROT HEX  CR CR 6 SPACES                              10 0 DO I 3 .R LOOP CR        ( print heading )                 OVER + SWAP FFF0 AND DO       ( round starting address )          CR I 0 4 D.R 2 SPACES       ( print address )                   I 10 + I DO I C@ 3 .R LOOP  ( print memory contents )           2 SPACES I 10 + I DO I C@   ( print ASCII contents )              7F AND DUP 20 ( space ) <                                       OVER 7F = OR IF DROP 2E ( "." ) THEN EMIT LOOP                10 +LOOP CR BASE ! ;                                          DECIMAL                                                        ( DUMP   narrow screen version )                                ( Display n memory locations in hex starting at addr   )        ( shortened version for CRTs of width 72 chars or less )        HEX                                                            : DUMP      (  start-addr  #-bytes  ---  )                          BASE @ ROT ROT HEX  CR CR ." ADDR: " OVER U.                    1- OVER + SWAP FFF8 AND               ( round addr     )       DO CR I 0 4 D.R SPACE I 7 + I          ( print addr     )        DO I C@ 3 .R 1                        ( print contents )        /LOOP 2 SPACES I 7 + I                                          DO I C@ 7F AND DUP BL < OVER 7F = OR  ( printase & Stack dump           DLR  21-Aug-81  )                                                                       DECIMAL                                                                                                                       : .B  BASE @ DUP ." Now in base " DECIMAL . CR BASE ! ;                                                                         : .S  BASE @                                                        SP@ 2+ S0 @ 2DUP =                                                 IF CR ." <empty stack>" CR 2DROP                                ELSE SWAP                                                          DO CR I @ DUP DECIMAL 7 .R                                         HEX ."  (" 0 4 D.R ." H)" 2                                     +LOOP                                                        CR                                                           THEN BASE ! .B ;                                                                                                          ( VLIST  Full-screen optional version   )                                                                                        DECIMAL                                                                                                                       : VLIST                                                             0 (CTL-C) ! CR 1 OUT ! CONTEXT @ @                              BEGIN                                                              DUP C@ 31 AND OUT @ + C/SL 3 - >                                   IF CR 1 OUT !                                                   THEN                                                         DUP ID. SPACE SPACE PFA LFA @                                   DUP 0= ?KEY DUP IF KEY DROP THEN OR                          UNTIL DROP CR ;                                                                                                                                                                                                                                              ( INFO VLIST begin )                                                                                                             HEX                                                            (  print PFA and contents of PFA )                             : (ADDR)            (  PFA  ---  )                                  SPACE DUP 0 4 D.R                                               ."  (" @ 0 4 D.R ." ) " ;                                                                                                    (  print name-field bit indicators )                           : NFBIT           (  len-byte  char  mask  ---  len-byte  )         3 PICK AND NOT IF DROP BL THEN EMIT ;                                                                                                                                                                                                                                                                                                                                                        ( INFO VLIST continues )                                       : (INFO)      ( PFA --- )     CR DUP NFA C@                        50 ( "P" ) 40 NFBIT  4E ( "N" ) 20 NFBIT                        1F AND DUP 0 3 D.R  OVER (ADDR) OVER NFA ID.                    9 SWAP - SPACES   DUP NFA 1+ C@ BL OR A0 =                      IF DROP EXIT THEN   CFA DUP  @ DUP ' (:) -                      IF ( not a : word ) OVER 2+ =                                     IF ." code " DROP                                               ELSE  DUP @ NEXT =                                                 IF ( an IOVEC word ) DROP ' NOOP                                ELSE @ DUP C@ 0 ( Z-80 NOP ) = ( DOES>? )                          IF ( search for PFA ) BEGIN 1- DUP @ ' (:) = UNTIL 2+           THEN                                                         THEN NFA ID.                                                 THEN                                                          ELSE 2DROP   THEN ;                                           ( INFO VLIST end )                                                                                                             : INFO     (  ---  )                                               FIND DUP 0= 0 ?ERROR 2+ ( CFA -> PFA )                          BASE @ SWAP HEX (INFO) BASE ! CR ;                                                                                           : VLIST    (  fancy VLIST  ) BASE @ HEX                            0 (CTL-C) ! CONTEXT @ @                                         BEGIN PFA DUP (INFO)                                               LFA @ DUP 0= ?KEY DUP IF KEY DROP THEN OR                    UNTIL DROP CR    BASE ! ;                                                                                                     DECIMAL                                                                                                                                                                                                                                                         ( INDEX                                  DLR  15-Aug-81  )                                                                     : (INDEX)         (  n  ---  )                                      DUP SCRLEN @ <                                                     IF CR DUP 3 .R SPACE BLOCK 64 -TRAILING TYPE                    ELSE DROP                                                       THEN ;                                                                                                                   : INDEX           (  from  to  ---  /  print index of screens  )    0 (CTL-C) !   1+ SWAP                                              DO I (INDEX) ?KEY                                                  IF KEY DROP LEAVE THEN                                       LOOP CR ;                                                                                                                                                                                                                                                 ( TRIAD  LPON  LPOFF                     DLR  15-Aug-81  )                                                                     : TRIAD                                                              0 (CTL-C) ! CR 3 / 3 * DUP 3 + SWAP                             DO                                                                 CR I SCRLEN @ <                                                    IF I LIST THEN                                               ?KEY                                                               IF LEAVE THEN                                                LOOP                                                         CR   ;                                                                                                                     : LPON    ' LPEMIT   IOVEC 2+ ! ;                               : LPOFF   ' STDEMIT  IOVEC 2+ ! ;                                                                                                                                                                ( LPINDEX  LPTRIAD                       DLR  15-Aug-81  )                                                                     : LPINDEX          (  first#  last#  ---  )                         0 (CTL-C) !  LPON    ( disable ctl-c, LPT on ) DUP ROT          DO CR CR I 2DUP 59 + MIN SWAP                                      DO I (INDEX) ?KEY IF LEAVE THEN 1 /LOOP                         CR  12 EMIT                                                     ?KEY IF KEY DROP LEAVE THEN 60                               /LOOP DROP  LPOFF  ( printer off )  ;                                                                                       : LPTRIAD          (  first#  last#  ---  )                         0 (CTL-C) !  LPON    ( disable ctl-c, LPT on ) SWAP             DO R> 3 / 3 * >R I TRIAD 12 EMIT                                   ?KEY IF KEY DROP LEAVE THEN  3                               /LOOP  LPOFF  ( printer off )  ;                                                                                             ( DOC - formats & lists screens )                               (  starts on any screen #, not mod3 like TRIAD )                                                                               : DOC       (  first#  last#  ---  )                               0 (CTL-C) !  LPON  ( printer on )  SWAP                         BEGIN 3 0                                                          DO 2DUP I + DUP LIST > NOT ?KEY OR                                 IF LEAVE THEN                                                LOOP 3 + 2DUP < NOT                                          WHILE                                                           12 EMIT ( form feed )                                           REPEAT 2DROP  ?KEY IF KEY DROP THEN                             12 EMIT  LPOFF ( printer off )  ;                                                                                                                                                                                                                             ( CATALOG )                                                     ( Print the 1st line of each definition )                      : CATALOG     (  from-scr#  thru-scr#  ---  )                      1+ SWAP CR                                                      DO I SCRLEN @ <                                                    IF I BLOCK DROP 16 0                                               DO I (LINE) OVER C@ BL -                                           IF J 3 .R I 3 .R                                                   SPACE -TRAILING TYPE CR                                      ELSE 2DROP                                                      THEN                                                         LOOP ?KEY                                                       IF LEAVE THEN                                                THEN                                                         LOOP ;                                                                                                                        ( HUNT - words on blocks )                                      ( Requires String Enhancement IN$ )                                                                                            : HUNT        (  from-blk  to-blk  ---  )                         1 WORD COUNT 2SWAP                                              1+ SWAP DO                                                       I BLOCK  16 0 DO                                                 DUP 2OVER ROT C/L IN$                                           IF CR J 3 .R  I 3 .R SPACE                                        DUP C/L TYPE                                                  THEN C/L +                                                     LOOP DROP  ?KEY                                                 IF LEAVE THEN                                                  LOOP 2DROP ;                                                                                                                                                                                   ( LOAD-BUFFERS )                                                                                                               : LOAD-BUFFERS        (  from#  to#  blkcount  ---  )               SAVE-BUFFERS EMPTY-BUFFERS                                      1 MAX DUP NBUF > 5 ?ERROR 0 DO                                     2DUP 32768 OR BUFFER SWAP 1 R/W                                 SWAP 1+ SWAP 1+                                              LOOP 2DROP ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ( COPY-BLOCKS )                                                                                                                : COPY-BLOCKS         (  from#  to#  blkcount  ---  )               DEPTH 3 < 1 ?ERROR >R 2DUP <     ( <MOVE ? )                    IF R@ + SWAP R@ + SWAP R>                                          BEGIN DUP 0>   ( more blocks? )                                 WHILE DUP NBUF MIN >R  ROT R@ - ROT R@ - ROT R@ -                  R> 2OVER ROT LOAD-BUFFERS SAVE-BUFFERS                       REPEAT                                                       ELSE R>                                                            BEGIN DUP 0>   ( more blocks? )                                 WHILE DUP 2OVER ROT NBUF MIN LOAD-BUFFERS SAVE-BUFFERS             ROT NBUF + ROT NBUF + ROT NBUF -                             REPEAT                                                       THEN DROP 2DROP ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ( Portable Comments )                                                                                                          : XSTANDARD   ( reverse standardness )   LATEST BL TOGGLE ;     : ?) ( DELIM --- ) BLK @ ( LOADING? )                             IF BEGIN ( SEARCH FOR DELIMITER )                                    DUP WORD DUP C@ + 1+ C@ OVER = ( DELIM = ACTUAL DELIM? )      WHILE BLK @ BLOCK >IN @ + C@ 41 = ( NEXT CHAR = R.PAREN? )        IF  1 >IN +! ( SKIP R.PAREN ) DROP EXIT THEN                  REPEAT DROP                                                  THEN ;                                                                                                                        : ((           ( ignore if 79-Standard, otherwise comment )       MODE @ 0= IF 41 ( R.PAREN ) ?) THEN ; IMMEDIATE               : (&           ( ignore if Non-standard, otherwise comment )      MODE @    IF 38 ( & )       ?) THEN ; IMMEDIATE               : )) ;      : &) ;        ( dummies )                            ( FORTH-79 Enhancements begin )                                                                                                : HEX   16 BASE ! ; HEX                                         : C,    HERE 1 ALLOT C! ;                                       (( : ?ERROR ( T/F ERR# --- ) SWAP ( ERROR? )                         IF CR ." *ERR# " DECIMAL . ABORT                                ELSE DROP THEN ; ))                                        (( : 2* DUP + ; ))                                              (( : 2/  2  / ; ))                                              : U2/  2/ 7FFF AND ;                                            : 2DUP  OVER OVER ;        : 2SWAP ROT >R ROT R> ;              : 2OVER 4 PICK 4 PICK ; (( : 2DROP DROP DROP ; ))               (( : DABS DUP 0< IF DNEGATE THEN ; ))                           (( : DLITERAL STATE @                                              IF SWAP [COMPILE] LITERAL [COMPILE] LITERAL                     THEN ;  IMMEDIATE ))                                          ( FORTH-79 Enhancements continue )                                                                                             (( : HILO 0 100 U/MOD ; ))                                      (( : SQUISH 100 * SWAP FF AND OR ; ))                           : ><   HILO SWAP SQUISH ;                                                                                                       : CARRAY ( #bytes --- )  ( # --- addr )                                  CREATE 1+ ALLOT    DOES> + ;                           : ARRAY  ( #words --- )  ( # --- addr )                                  CREATE 1+ 2* ALLOT DOES> SWAP 2* + ;                                                                                   : CTABLE ( #bytes --- )  ( # --- contents )                              CREATE          DOES> + C@ ;                           : TABLE  ( #words --- )  ( # --- contents )                              CREATE          DOES> SWAP 2* + @ ;                                                                                     ( FORTH-79 Enhancements continue )                                                                                             (( : STR$ ( D# --- STRING )                                          SWAP OVER DABS <# #S ROT SIGN #> ; ))                      (( : D.R ( D# WIDTH --- )                                            >R STR$ R> OVER - SPACES TYPE ; ))                                                                                         : S->D  (  n  ---  d  )       0 OVER 0< - ;                     : .R    (  n  width  ---  )   >R S->D R> D.R ;                  : D.    (  d  ---  )          0 D.R SPACE ;                     : D+-   (  d1  n  ---  d2  )  0< IF DNEGATE THEN ;                                                                               DECIMAL                                                                                                                                                                                                                                                         ( FORTH-79 Enhancements continue )                                                                                             : 2!            SWAP OVER ! 2+ ! ;                              : 2@            DUP 2+ @ SWAP @ ;                               : 2ROT          6 ROLL 6 ROLL ;                                 : 2CONSTANT     CREATE , , DOES> 2@ ;                           : 2VARIABLE     CREATE 4 ALLOT ;                                : D-            DNEGATE D+ ;                                    : D0=           0= SWAP 0= AND ;                                : D=            D- D0= ;                                        : DMIN          2OVER 2OVER D< 0= IF 2SWAP THEN 2DROP ;         : DMAX          2OVER 2OVER D<    IF 2SWAP THEN 2DROP ;         : DU<           ROT SWAP 2DUP U<                                                   IF 2DROP 2DROP 1                                                ELSE  =  IF U< ELSE 2DROP 0 THEN                                THEN ;                                        ( FORTH-79 Enhancements endon-standard double-number enhancements begin,  UDN* )                                                                       CODE  UDN*      (  ud  un  ---  ud  )                               HL POP,  A 16 LD,  EXX,  DE POP,  BC POP,                       IX 0 LD,  HL 0 LD,                                            1 L:  IX IX ADD,  HL HL ADC,  EXX,  HL HL ADD,  EXX,              NCY 2 L# JR,   IX BC ADD,  HL DE ADC,                         2 L:  A DEC,  NZ 1 L# JR,  IX PUSH,  HL PUSH,  EXX,               NEXT JP,                                                       END-CODE                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( Non-standard double-number enhancements end,  DN*  D* )                                                                      : DN*       (  d1  n  ---  d2  )                                    2DUP XOR >R ABS >R DABS R> UDN* R> 0<                           IF DNEGATE THEN ;                                                                                                           : D*        (  d1  d2  ---  dtring Enhancements begin )                                   (( CR ." ** WARNING **  (') is Non-Standard." HEX                 CR ." Compile-time: (') is compiled by " 22 EMIT ."  (quote)"   CR ."   and is followed by a packed string."                    CR ." Run-time: (') pushes the string argument"                 CR ."   ( --- addr len ) and passes flow-of-control"            CR ."   to the CFA following the string." ))                  HEX                                                            : (')   ( run-time )           (  ---  st-addr  len  )              R@ COUNT DUP 1+ R> + >R ;                                   : "     ( string literal )     (  ---  temp-addr  len  )            22 ( " ) STATE @ ( compile-time? )                             IF COMPILE (') WORD C@ 1+ ALLOT                                 ELSE WORD DUP C@ 1+ PAD SWAP CMOVE                               PAD COUNT                                                      THEN ; IMMEDIATE                                              ( String Enhancements continue )                                                                                               : S!   (  string store  )     (  str1  str2  ---  )                 DROP DUP 2- C@  ( max target length )                           ROT MIN ( count ) DUP 3 PICK 1-                                 C! CMOVE ;                                                                                                                  : STRING                                                            CREATE                     (  n-max  ---  )                       1 MAX FF MIN ( make string )                                    DUP C, 0 C, ALLOT ( max, current length )                     DOES>                      (  ---  st-addr  len  )                1+ COUNT ;                                                                                                                                                                                                                                                 ( String Enhancements continue )                                                                                               : STRING-ARRAY         (  n-maxsiz  n-dim  ---  )                   CREATE 0                                                          DO DUP C, 0 C, DUP ALLOT LOOP DROP                            DOES>   (  n-index --> string  )                                  DUP C@ 2+ ROT * + 1+ COUNT ;                                                                                              : SUB!                 (  str-from  str-to  ---  )                  ROT MIN 0 MAX CMOVE ;                                                                                                       00 STRING NULL$                                                                                                                                                                                                                                                                                                                  ( String Enhancements continue )                                                                                               : LEN             (  ---  len  )                                    SWAP DROP ;                                                 : MLEN            (  ---  max-len  )                                DROP 2- C@ ;                                                                                                                : MID$            (  string  n-start  n-len  ---  addr  len  )      >R OVER MIN 1 MAX 1-  ( clip n-start )                          SWAP OVER -           ( clip n-len )                            R> MIN >R + R> ;                                            : RIGHT$          (  str-n-len  ---  substr  )                      OVER 1+ SWAP - 0FF MID$ ;                                   : LEFT$           (  str-n-len  ---  substr  )                      1 SWAP MID$ ;                                                                                                                ( String Enhancements continue )                                                                                               (( : S=          (  str1  str2  ---  str1=str2  )                 ROT OVER =                                                      IF ( same length ) ?DUP                                           IF ( not both null )                                              1 SWAP 0                           ( do each char )             DO DROP OVER C@ OVER C@ XOR 7F AND ( unequal?     )               IF 0 LEAVE                                                      ELSE 1+ SWAP 1+ SWAP 1                                          THEN                             ( do next char )             LOOP                                                          ELSE ( both null ) 1 THEN                                     ELSE ( unequal length ) DROP 0 THEN                             SWAP DROP SWAP DROP ;   ))                                                                                                     ( String Enhancements continue )                                                                                               (&  CODE S=          (  str1  str2  ---  str1=str2  )               EXX,  BC POP,  DE POP,  ( len2 in BC, addr2 in DE         )     HL POP,  A C LD,  L CP, ( len1 in HL, Z=1 if lengths same )     HL POP,  NZ 2 L# JR,    ( addr1 in HL, jp if lengths diff )     A OR,  Z 2 L# JR,       ( jp if lengths = 0               )     B C LD,                 ( get length into B               )   1 L: A (DE) LD,  DE INC,  ( get char of str2                )     (HL) XOR,  HL INC,      ( compare char of str1            )     NZ 2 L# JR,  1 L# DJNZ, ( exit if different, loop if same )   2 L: EXX,  HL 0 LD,       ( return FALSE if Z=0             )     NZ NEXT 1- JP,                                                  HL INC,  NEXT 1- JP,    ( else return TRUE                )     END-CODE   &)                                                                                                                ( String Enhancements continue )                                                                                               (( : S<             (  str1  str2  ---  str1<str2  )               ROT OVER MIN                   ( least length      )            SWAP OVER > >R                 ( len2 > min        )            ?DUP                           ( neither is null?  )            IF -1 SWAP 0                   ( do each char      )              DO DROP OVER C@ OVER C@ XOR 7F AND                                IF C@ 7F AND SWAP C@ 7F AND > LEAVE                             ELSE 1+ SWAP 1+ SWAP -1                                         THEN                       ( do next char      )              LOOP                         ( -1 if no decision )              DUP 0<                                                          IF 2DROP DROP R> ELSE R> DROP THEN                            ELSE 2DROP R>                                                   THEN ;         ))                                             ( String Enhancements continue )                                                                                               (&  CODE S<          (  str1  str2  ---  str1=str2  )               EXX,  BC POP,  HL POP,  DE POP,   ( pop arguments       )       B C LD,  A E LD,  B SUB,                                        NCY 1 L# JR,  B E LD,                                         1 L: AF AF' EX,  DE POP,                                          A B LD,  A OR,  Z 3 L# JR,                                    2 L: A (HL) LD,  HL INC,  7F AND,   ( compare next chars  )       C A LD,  A (DE) LD,  DE INC,  7F AND,                           C CP,  NZ 4 L# JR,  2 L# DJNZ,    ( loop if equal       )     3 L: AF AF' EX,                                                 4 L: EXX,  A 0 LD,  H A LD,  RLA,   ( copy CY bit to flag )       L A LD,  NEXT 1- JP,              ( return & push HL    )       END-CODE   &)                                                                                                                ( String Enhancements continue )                                                                                               : S+                 (  str-from  str-to-add-to  ---  )             >R OVER R@ + OVER 2- C@ MIN 2DUP                                SWAP 1- C! R> 1+ 0FF MID$ SUB! ;                                                                                            : CHR$               (  n  ---  str-of-len-1  )                     PAD ! PAD 1 ;                                                                                                               : ASC                (  str  ---  ASCII-of-1st-char  )              DROP C@ ;                                                                                                                   : VAL                (  str  -->  double-precision-n  )             >R PAD 1+ R@ CMOVE                                              0  PAD 1+ R> + C!                                               0 0 PAD CONVERT DROP ;                                       ( String Enhancements continue )                               (( : IN$        (  str1  str2  -->  pos-str1-in-str2  )            DUP 4 PICK -                  ( len2 - len1      )              DUP 0>                        ( len2 > len1?     )             IF  SWAP OVER -                ( str1 not NULL$   )              IF 0 SWAP 2+ 1                ( do by ch in str2 )               DO DROP 3 PICK C@ OVER C@ =  ( match?           )                IF   3 PICK 3 PICK 3 PICK                                         OVER S=                   ( match            )                 IF I LEAVE ELSE 1+ 0 THEN                                      ELSE 1+ 0                                                       THEN                                                           LOOP                         ( try next char    )              ELSE DROP 0 THEN              ( scan complete    )               >R 2DROP DROP R>                                              ELSE DROP S= THEN ( len1 >= len2 ) ; ))                        ( String Enhancements continue )                                                                                               (& CODE IN$     (  str1  str2  -->  pos-str1-in-str2  )             EXX,  BC POP,  HL POP,  DE POP,                                 B E LD,  DE POP,  A B LD,  A OR,  Z 5 L# JR,                    A C LD,  B SUB,  NCY 1 L# JR,  A XOR,  5 L# JR,               1 L: A INC,  A INC,  C 1 LD,                                    2 L: AF AF' EX,  HL PUSH,  DE PUSH,  BC PUSH,                   3 L: A (DE) LD,  DE INC,  (HL) XOR,  HL INC,                      7F AND,  NZ 4 L# JR,  3 L# DJNZ,                              4 L: BC POP,  DE POP,  HL POP,                                    A C LD,  Z 5 L# JR,  HL INC,  AF AF' EX,                        C INC,  C CP,  NZ 2 L# JR,  A XOR,                            5 L: EXX,  L A LD,  H 0 LD,  NEXT 1- JP,                          END-CODE    &)                                                                                                               ( String Enhancements end )                                                                                                    : GET$               (  n-max  ---  string  )                      ( inputs packed string at PAD )                                 PAD 1+ DUP ROT EXPECT 0                                         BEGIN 2DUP + C@ WHILE 1+ REPEAT                                SWAP 1- C! PAD COUNT ;                                                                                                        : INPUT$             (  ---  string  )                              40 GET$ ;                                                                                                                   : GET                (  n  ---  d#  )                               GET$ VAL ;                                                                                                                  : INPUT              (  ---  d#  )                                  40 GET ; DECIMAL                                             ( /LOOP                                    DLR  1-Jan-82   )                                                                     DECIMAL                                                                                                                       CODE (/LOOP)                                                        E 0 +IY) LD,  D 1 +IY) LD,  HL POP,  HL DE ADD,                 0 +IY) L LD,  1 +IY) H LD,  E 2 +IY) LD,  D 3 +IY) LD,          DE HL EX,  A OR,  HL DE SBC,  NCY ' BRANCH JP,                  DE 4 LD,  IY DE ADD,  BC INC,  BC INC,  NEXT JP,              END-CODE                                                                                                                      : /LOOP                                                             3 - 11 ?ERROR                                                   COMPILE (/LOOP) HERE - , ;   IMMEDIATE                                                                                                                                                       ( ?FIND  )                                                                                                                     : ?FIND   (  FIND with "unknown" error on failure  )                 FIND DUP 0= 0 ?ERROR ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( <CMOVE Z-80 Ass'y language OPTIMIZER definition )                                                                            (& CODE <CMOVE        (  from  to  count  ---  )                   EXX,  BC POP,  HL POP,  HL BC ADD,                              HL DEC,  DE HL EX,  HL POP,  HL BC ADD,                         HL DEC,  A B LD,  A OR,  M 1 L# JP,                             C OR,  Z 1 L# JR,  LDDR,                                      1 L: EXX,  NEXT JP,  END-CODE  &)                                                                                                                                                                DECIMAL                                                                                                                                                                                                                                                                                                                                                                                        ( Fast 8-bit * 8-bit --- 16-bit )                                                                                              CODE C*     (  c1  c2  ---  un  )                                   DE POP,  HL POP,  A E LD,  A OR,  NZ 1 L# JR,                   HL 0 LD,  PUSH JP,                                            1 L:  H A LD,  H DEC,                                               A XOR,  L SRL,   NCY 2 L# JR,  A H ADC,                     2 L:  A RR,  L RR,   NCY 3 L# JR,  A H ADC,                     3 L:  A RR,  L RR,   NCY 4 L# JR,  A H ADC,                     4 L:  A RR,  L RR,   NCY 5 L# JR,  A H ADC,                     5 L:  A RR,  L RR,   NCY 6 L# JR,  A H ADC,                     6 L:  A RR,  L RR,   NCY 7 L# JR,  A H ADC,                     7 L:  A RR,  L RR,   NCY 8 L# JR,  A H ADC,                     8 L:  A RR,  L RR,   NCY 9 L# JR,  A H ADC,                     9 L:  A RR,  L RR,   H A LD,  PUSH JP,                          END-CODE                                                       ( Z-80 Random number generator        RBA 22 Nov 81 )           DECIMAL                                                        VARIABLE SEED                                                                                                                   CODE SETSEED      (  ---  )                                        A R LD, H A LD, A R LD, D A LD,                                 A R LD, RLA, D RR, RRA, CPL, L A LD,                            SEED ) HL LD, NEXT JP, END-CODE                                                                                              : RND             (  ---  n  )                                     SEED @ 13 U* DROP HILO SWAP SQUISH                              7 + DUP SEED ! ;                                                                                                             : RANDOM          (  n1  ---  n2  )                                ABS RND U* SWAP DROP ;                                                                                                        ( Some Auxiliary definitions begin )                                                                                              HEX                                                                                                                          7F CONSTANT BS                                                  : ><        HILO SWAP SQUISH ;                                  : U2/       2/ 7FFF AND ;                                       : SWAPDROP  SWAP DROP ;                                         : CARRAY    CREATE 1+ ALLOT DOES> + ;                           : ARRAY     CREATE 1+ 2* ALLOT DOES> SWAP 2* + ;                : CTABLE    CREATE DOES> + C@ ;                                 : TABLE     CREATE DOES> SWAP 2* + @ ;                             DECIMAL                                                                                                                                                                                                                                                       ( Some Auxiliary definitions end )                              HEX                                                            : ACCEPT   (  addr  n  ---  ) ( builds packed string at addr )      >R 1+ DUP R> EXPECT 0                                              BEGIN 2DUP + C@ WHILE 1+ REPEAT                              SWAP 1- C! ;                                                : YES/NO        ." (Y/N)?" KEY DUP EMIT 59 = ;                  : READY?        ." . READY(CR)?" KEY 0D = ;                     : ?TERMINAL     ?KEY ;                                          : VOC-LINK      V-LINK ;                                        : U.R           >R 0 R> D.R ;                                   : -FIND         FIND DUP IF 2+ DUP NFA C@ 3F AND 1 THEN ;       C/SL CONSTANT I/L                                                                                                                DECIMAL                                                                                                                         ( CALL ass'y language from FORTH          DLR 3 Jan 82 )        HEX                                                            5 ARRAY Z80REG                                                  CODE CALL          (  addr  ---  )                                    HL POP, 1 L# ) HL LD, BC PUSH, IY PUSH,                         HL 0 Z80REG ) LD, HL PUSH, AF POP,                              HL 1 Z80REG ) LD,                                               DE 2 Z80REG ) LD, BC 3 Z80REG ) LD,                             IX 4 Z80REG ) LD, IY 5 Z80REG ) LD, CD C,                  1 L: 2 ALLOT                                                         1 Z80REG ) HL LD, AF PUSH, HL POP, 0 Z80REG ) HL LD,            2 Z80REG ) DE LD, 3 Z80REG ) BC LD,                             4 Z80REG ) IX LD, 5 Z80REG ) IY LD,                             IY POP, BC POP, NEXT JP, END-CODE                                                                                          DECIMAL                                                         (HANDY NOTATIONS for use with CALL )                                                                                           : A!     (  n  ---  )   256 * 0 Z80REG ! ;                      : A.     (  ---  )      0 Z80REG @ 256 / . ;                    : HL!    (  n  ---  )   1 Z80REG ! ;                            : HL.    (  ---  )      1 Z80REG @ U. ;                         : DE!    (  n  ---  )   2 Z80REG ! ;                            : DE.    (  ---  )      2 Z80REG @ U. ;                         : BC!    (  n  ---  )   3 Z80REG ! ;                            : BC.    (  ---  )      3 Z80REG @ U. ;                         : IX!    (  n  ---  )   4 Z80REG ! ;                            : IX.    (  ---  )      4 Z80REG @ U. ;                         : IY!    (  n  ---  )   5 Z80REG ! ;                            : IY.    (  ---  )      5 Z80REG @ U. ;                         : REG.   (  ---  )      A. HL. DE. BC. IX. IY. ;                                                                                 ( PAUSE   MS for various clocks  )                                                                                             : PAUSE    ( wait on key, exit if <RETURN> )                        KEY 13 = IF QUIT THEN ;                                                                                                      (  Millisecond Delay for 4 MHz Z-80 )                          : MS       (  #-milliseconds-to-delay  ---  )                       0 DO 12 0 DO LOOP LOOP ;                                                                                                     (  Millisecond Delay for 3 MHz Z-80 )                          : MS        (  delay  ---  )                                        0 DO 9 0 DO LOOP LOOP ;                                                                                                      (  Millisecond Delay for 2.041 MHz Z-80, ie Softcard )         : MS        (  delay  ---  )                                        0 DO 5 0 DO LOOP LOOP ;                                      ( ASCII,   >CHARS )                                             ( converts following char to ASCII code )                      : ASCII         (   ---   <char>   C  )                            BL WORD 1+ C@ STATE @                                           IF [COMPILE] LITERAL                                            THEN ; IMMEDIATE                                              HEX                                                             ( convert string of bytes to string of chars )                  ( by masking off high order bit )                              : >CHARS        (  addr  n  ---  addr  n  )                         2DUP                                                            BEGIN DUP                                                       WHILE SWAP DUP C@ 7F AND OVER C!                                  1+ SWAP 1-                                                    REPEAT 2DROP ;                                               DECIMAL                                                         ( Optimized CASE statement begins )                             ( 79-STANDARD  CASE )                                           ( n CASE n1 OF ... ENDOF n2 OF ... ENDOF otherwise ENDCASE )    HEX OPTIMIZER                                                  : CASE                                                              STATE @ 0= 9 ?ERROR                                             CSP @ SP@ CSP ! 4 ; IMMEDIATE                                                                                               : OF                                                                4 - 0B ?ERROR                                                   COMPILE OVER COMPILE = COMPILE 0BRANCH                          HERE 0 , COMPILE DROP 5 ; IMMEDIATE                                                                                         : ENDOF                                                             5 - 0B ?ERROR   COMPILE BRANCH                                  HERE 0 , SWAP 2 [COMPILE] THEN 4 ; IMMEDIATE                 ( Optimized CASE ends   GODO )                                                                                                 : ENDCASE                                                           4 - 0B ?ERROR  COMPILE DROP                                     BEGIN SP@ CSP @ -                                               WHILE 2 [COMPILE] THEN                                          REPEAT CSP ! ; IMMEDIATE                                                                                                    : (GODO)                                                            0 MAX 2+ 2* R@ 2+ 2+ @ MIN R@ + 2+ @ ;                                                                                      : GODO                                                              COMPILE (GODO) COMPILE EXECUTE COMPILE BRANCH                   HERE 0 , 2 ; IMMEDIATE                                       DECIMAL                                                                                                                         ( FORTH-79 CASE     PAW-1SEP81 )                               VARIABLE (CASE)  5 2* ALLOT                                     : ::  : ;                  ( prevent recursion )                : :  0 (CASE) ! :: ;       ( initialize )                       : CASE                                                              2 (CASE) +!  0 (CASE) DUP @ + ! ; IMMEDIATE                 : OF                                                                1 (CASE) DUP @ + +! COMPILE OVER COMPILE =                      [COMPILE] IF COMPILE DROP ; IMMEDIATE                       : ENDOF                                                             [COMPILE] ELSE ; IMMEDIATE                                  : ENDCASE                                                           COMPILE DROP                                                    BEGIN (CASE) DUP @ + @                                          WHILE [COMPILE] THEN  -1 (CASE) DUP @ + +!                      REPEAT -2 (CASE) +! ; IMMEDIATE                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ( SCREEN ENVIRONMENT FOR APPLE CP/M BEGINS )                    DECIMAL  40 ' C/SL !  24 ' L/S !  HEX                          VARIABLE PV                                                     VARIABLE PH                                                     CREATE AKSAV  6 ALLOT                                           CREATE (SCRFUN) HERE DUP 2- !                                     0016 ,  21 C, F397 ,  19 C,  7E C,  B7 C,  C8 C,                F2 C, HERE A + ,  F5 C,  3A C, F397 ,  CD C, HERE 3 + ,         F1 C,  5F C,  020E ,  C3 C, 0005 ,                            CREATE CXY HERE DUP 2- !                                          E5FD ,  C5 C,  071E ,  CD C, ' (SCRFUN) ,                       3A C, ' PH ,  67 C,  3A C, ' PV ,  6F C,  3A C, F396 ,          B7 C,  F2 C, HERE 5 + ,  5D C,  6C C,  63 C,   5F C,  84 C,     67 C,  7B C,  85 C,  E5 C,  5F C,  020E ,  CD C, 0005 ,         E1 C,  5C C,  020E ,  CD C, 0005 ,                              C1 C,  E1FD ,  C3 C, NEXT ,                                    ( SCREEN ENVIRONMENT FOR APPLE CP/M ENDS )                     : (TINIT)                                                           0 (CTL) !  ' CRTEMIT IOVEC 2+ !  0B0B F3AC DUP @ AKSAV ! !      0 F3AE DUP @ AKSAV 2+ ! !  0202 F3B0 DUP @ AKSAV 4 + ! ! ;  : (TDONE)                                                           1 (CTL) !  ' STDEMIT IOVEC 2+ !  AKSAV @ F3AC !                 AKSAV 2+ @ F3AE !  AKSAV 4 + @ F3B0 ! ;                     : (CV)                                                              0 MAX L/S 1- MIN PV ! CXY ;                                 : (CH)                                                              0 MAX C/SL 1- MIN PH ! CXY ;                                CREATE (HOME) HERE DUP 2- !                                       E5FD ,  C5 C,  011E ,  CD C, ' (SCRFUN) ,                       21 C, 0000 ,  22 C, ' PV ,  22 C, ' PH ,                        C1 C,  E1FD ,  C3 C, NEXT ,                                   BELL)   7 EMIT ;  DECIMAL                                       ( SCREEN ENVIRONMENT FOR CRAY NORTHSTAR DIALOGUE 80 )           80 ' C/SL !  24 ' L/S !                                         VARIABLE PV   VARIABLE PH  HEX                                  : (TINIT)  0 (CTL) ! ' CRTEMIT IOVEC 2+ ! ;                     : (TDONE)  1 (CTL) ! ' STDEMIT IOVEC 2+ ! ;                     : CXY  1B EMIT 3D EMIT PV @ 20 + EMIT PH @ 20 + EMIT ;          : (CH)  0 MAX C/SL 1- MIN PH ! CXY ;                            : (CV)  0 MAX L/S 1- MIN PV ! CXY ;                             : (HOME)  1E EMIT 0 PV ! 0 PH ! ;                               : (BELL)  07 EMIT ;                                             DECIMAL                                                                                                                                                                                                                                                                                                                                                                                          ( Screen Environment for TDL VDB video board   )                80 ' C/SL !                                                     24 ' L/S  !                                                      HEX                                                           : (TINIT)                        ( initialize terminal )              0 (CTL) !  ' CRTEMIT IOVEC 2+ !  ;                        : (TDONE)                        ( release terminal )                 1 (CTL) !  ' STDEMIT IOVEC 2+ !  ;                        : (HOME)                         (  ---  )                            0C EMIT ;                                                 : (CH)                           (  n  ---  )                         0 MAX 4F MIN D0 POUT ;                                    : (CV)                           (  n  ---  )                         0 MAX 17 MIN C0 + D0 POUT ;                               : (BELL)  ;                                                       DECIMAL                                                        ( SCREEN ENVIRONMENT FOR LEAR-SIEGLER ADM-3 )                   (                    AND TELEVIDEO 910      )                  80 ' C/SL ! 24 ' L/S !                                          VARIABLE PV  VARIABLE PH  HEX                                   : (TINIT)  0 (CTL) ! ' CRTEMIT IOVEC 2+ ! ;                     : (TDONE)  1 (CTL) ! ' STDEMIT IOVEC 2+ ! ;                     : CXY  1B EMIT 3D EMIT PV @ 20 + EMIT PH @ 20 + EMIT ;          : (CH)  0 MAX C/SL 1- MIN PH ! CXY ;                            : (CV)  0 MAX L/S 1- MIN PV ! CXY ;                             : (HOME)  1A EMIT  0 PV ! 0 PH ! ;                              : (BELL)  07 EMIT ;                                             DECIMAL                                                                                                                                                                                                                                                                                                                          ( SCREEN ENVIRONMENT FOR PERKIN-ELMER BANTAM )                 80 ' C/SL ! 24 ' L/S !  HEX                                     : (TINIT)  0 (CTL) ! ' CRTEMIT IOVEC 2+ ! ;                     : (TDONE)  1 (CTL) ! ' STDEMIT IOVEC 2+ ! ;                     : (CH)  0 MAX C/SL 1- MIN 1B EMIT 59 EMIT 20 + EMIT ;           : (CV)  0 MAX L/S  1- MIN 1B EMIT 58 EMIT 20 + EMIT ;           : (HOME)  1B EMIT 4B EMIT ;                                     : (BELL)  07 EMIT ;                                             DECIMAL                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ( SCREEN ENVIRONMENT FOR VECTOR FLASHWRITER 2 AND VECMON 4.x )                                                                 80 ' C/SL !  24 ' L/S !                                         VARIABLE PV  VARIABLE PH                                                                                                        HEX                                                             : (TINIT)  0 (CTL) ! ' CRTEMIT IOVEC 2+ ! ;                     : (TDONE)  1 (CTL) ! ' STDEMIT IOVEC 2+ ! ;                     : CXY 1B EMIT PH @ EMIT PV @ EMIT ;                             : (CH) 0 MAX C/SL 1- MIN PH ! CXY ;                             : (CV) 0 MAX L/S  1- MIN PV ! CXY ;                             : (HOME) 04 EMIT 0 PV ! 0 PH ! ;                                : (BELL) ;                                                      DECIMAL                                                                                                                                                                                          ( SCREEN ENVIRONMENT FOR HEATH/ZENITH H/Z-19 AND H/Z-89 )                                                                      80 ' C/SL !  24 ' L/S !                                         VARIABLE PV  VARIABLE PH                                                                                                        HEX                                                             : (TINIT)  0 (CTL) ! ' CRTEMIT IOVEC 2+ ! ;                     : (TDONE)  1 (CTL) ! ' STDEMIT IOVEC 2+ ! ;                     : CXY 1B EMIT 59 EMIT PV @ 20 + EMIT PH @ 20 + EMIT ;           : (CH) 0 MAX C/SL 1- MIN PH ! CXY ;                             : (CV) 0 MAX L/S  1- MIN PV ! CXY ;                             : (HOME) 1B EMIT 45 EMIT 0 PV ! 0 PH ! ;                        : (BELL) 7 EMIT ;                                               DECIMAL                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ( EDITOR Control Table Builder words )                                                                                            FORTH DEFINITIONS  HEX                                                                                                        ( define command code as HEX value )                           : CMD       (  n  <command-word>  ---  )                            EDITOR FIND DUP 0= 0 ?ERROR SWAP                                CMDADR ! ;                                                                                                                   ( connect control-char to command-word )                       : CTRL      (  <char>  <command-word>  ---  )                       BL WORD 1+ C@ 40 -  CMD ;                                                                                                      DECIMAL                                                                                                                                                                                       ( Control Char definitions for MicroPro Word Master emulation )                                                                 EDITOR HEX                                                      00 CMD BELL      ( ignore NULL                                ) CTRL A TLEFT     ( move cursor left 5 char positions          ) CTRL B C==>      ( altenate cursor to begin. & end of line    ) CTRL C FWD       ( edit next higher numbered block            ) CTRL D TRIGHT    ( move cursor right 5 char positions         ) CTRL E TUP       ( move cursor up 5 lines                     ) CTRL F INSTOG    ( toggle insert/replace mode                 ) CTRL G CDEL      ( delete character under cursor              ) CTRL H CLEFT     ( move cursor left 1 char position           ) CTRL I LCOPY     ( push copy of current line to "save" buffer ) CTRL J CDOWN     ( move cursor down 1 line                    ) CTRL K CUP       ( move cursor up 1 line                      ) CTRL L CRIGHT    ( move cursor right 1 char position          ) ( Control Char definitions for MicroPro Word Master emulation )                                                                 CTRL M CCR       ( move cursor to beginning of following line ) CTRL N SPLIT     ( break the current line into 2 lines        ) CTRL O LPOP      ( insert line popped from "save" buffer      ) CTRL P FLIP      ( shift screen left/right if < 80 columns    ) CTRL Q BELL      ( ignore CTRL-Q                              ) CTRL R REV       ( edit previous lower numbered screen        ) CTRL S SCRFLUSH  ( write current screen to disk block         )(( CTRL T BELL )) ( ignore CTRL-T in standard version          )(& CTRL T TLCLR &) ( clear "save" buffer                       ) CTRL U LMOVE     ( push curr. line to "save" buff & delete it ) CTRL V JOIN      ( replace all right of cursor w/ foll. line  ) CTRL W BELL      ( ignore CTRL-W                              ) CTRL X TDOWN     ( move cursor down 5 lines                   ) CTRL Y BELL      ( ignore CTRL-Y                              ) ( Control Char definitions for MicroPro Word Master emulation )                                                                (( CTRL Z BELL )) ( ignore CTRL-Z in standard version          )(& CTRL Z RENEW &) ( restore current screen from disk block    ) 1B CMD BYE       ( exit from editor back to FORTH interpreter ) 1C CMD BELL      ( ignore CTRL-\, FS                          ) CTRL ] BLKLOAD   ( exit editor to FORTH & LOAD current screen ) 1E CMD DOGGLE    ( alternately move cursor to top & bottom    ) 1F CMD SCLR      ( clear current screen image, in memory only ) 20 CMD CHROUT    ( vector for all printable chars             ) 21 CMD C<==      ( RUBOUT, delete character left of cursor    )                                                                 DECIMAL                                                         FORTH                                                           FORGET CMD                                                                                                                      ( EDITOR Control Table Builder words )                                                                                            FORTH DEFINITIONS  HEX                                                                                                        ( define command code as HEX value )                           : CMD       (  n  <command-word>  ---  )                            EDITOR FIND DUP 0= 0 ?ERROR SWAP                                CMDADR ! ;                                                                                                                   ( connect control-char to command-word )                       : CTRL      (  <char>  <command-word>  ---  )                       BL WORD 1+ C@ 40 -  CMD ;                                                                                                      DECIMAL                                                                                                                                                                                       ( Control Char definitions for Apple-based editor  )            EDITOR HEX                                                       0 CMD BELL                                                     CTRL A TLEFT                                                    CTRL B C==>                                                     CTRL C CDOWN                                                    CTRL D DOGGLE                                                   CTRL E CUP                                                      CTRL F CRIGHT                                                   CTRL G TRIGHT                                                   CTRL H C<==                                                     CTRL I SPLIT                                                    CTRL J CDEL                                                     CTRL K LMOVE                                                    CTRL L LCOPY                                                    CTRL M CCR                                                      ( Control Char definitions for Apple-based editor  )            CTRL N BELL   ( [ VIA KEY )                                     CTRL O LPOP                                                     CTRL P INSTOG                                                   CTRL Q SCRFLUSH                                                 CTRL R REV                                                      CTRL S CLEFT                                                    CTRL T FLIP                                                     CTRL U BELL   ( N/A VIA KEY )                                   CTRL V FWD                                                      CTRL W TUP                                                      CTRL X TDOWN                                                   (( CTRL Y BELL ( UNUSED) ))                                     (& CTRL Y TLCLR &)                                              (( CTRL Z BELL ( UNUSED) ))                                     (& CTRL Z RENEW &)                                               ( Control Char definitions for Apple-based editor  )                                                                            1B CMD BYE                                                      1C CMD BELL   ( N/A ON APPLE )                                  CTRL ] BLKLOAD                                                  CTRL ^ JOIN                                                     1F CMD SCLR   ( N/A ON APPLE )                                  BL CMD CHROUT ( ALL OTHER CHARS )                               21 CMD C<==   ( DELETE )                                                                                                        DECIMAL                                                         FORTH                                                           FORGET CMD                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( IBIS/CRAY BANNER FOR DTC )                                   : TEST BELL CR CR CR CR CR 10 SPACES                            ." $$$  $$$      $$$   $$$$$$     $$$$$ $$$$$$   $$$$   $$  $$ "CR 10 SPACES                                                    ." $$$  $$$      $$$  $$$        $$     $$   $  $$  $$   $  $ " CR 10 SPACES                                                    ."      $$$            $$$       $$     $$ $$$  $$  $$   $  $ " CR 10 SPACES                                                    ." $$$  $$$$$$   $$$    $$$  $$$ $$     $$$$    $$  $$    $$ "  CR 10 SPACES                                                    ." $$$  $$    $  $$$     $$$     $$     $$ $    $$$$$$    $$ "  CR 10 SPACES                                                    ." $$$  $$    $  $$$      $$$    $$     $$ $$   $$  $$    $$ "  CR 10 SPACES                                                    ." $$$  $$$$$$   $$$  $$$$$$      $$$$$ $$  $$ $$$  $$$   $$ "  -->                                                              ( IBIS/CRAY BANNER CONTINUE )                                   CR CR CR CR                                                    CR 20 SPACES ." $$$$$$$       $$$$$$$$$$       $$         $$ "  CR 20 SPACES ." $$    $$          $$           $$         $$ "  CR 20 SPACES ." $$    $$          $$            $$       $$ "   CR 20 SPACES ." $$    $$          $$             $$     $$ "    CR 20 SPACES ." $$    $$          $$              $$   $$"      CR 20 SPACES ." $$    $$          $$               $$ $$ "      CR 20 SPACES ." $$$$$$$           $$                 $ " CR ;S                                                                                                                                                                                                                                                                                                                                                                                                                                                                  