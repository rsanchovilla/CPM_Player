	TITLE HELLO
	NAME ('HELLO')
HELLO::
;
;
;
;HELLO: 
;
;DO;
;
;
;	
;	/* SIMPLE I/O FUNCTIONS */
;
;	/* CALL BDOS FUNCTIONS WITH RETURN CODE */
;	BDOS1: PROCEDURE (FUNC,PARM) BYTE EXTERNAL; /* gets RegA */
	EXTRN BDOS1
;
;    		DECLARE FUNC BYTE;     /* goes to RegC */
;    		DECLARE PARM ADDRESS;  /* goes to RegDE */
;	END BDOS1;
;
;	/* CONOUT - CONSOLE OUT */
;	WR$CON: PROCEDURE (CHAR);
G0001:
	JMP G0005
;
;  		DECLARE  CHAR  BYTE;
A0006:
;
;  		CALL BDOS1(2, CHAR);
	MOV L,C
	MOV H,B
	MOV A,L
	STA A0007
	LXI B,02H
	PUSH B
	LDA A0007
	MOV E,A
	MVI D,0
	POP B
	CALL BDOS1
;
;	END WR$CON;
	RET
;
;
;	/* CONIN - CONSOLE IN (read one char blocking with echo) */
;	RD$CON: PROCEDURE BYTE;
G0005:
	JMP G0008
;
;  		DECLARE  CHAR  BYTE;
;
;  		CHAR=BDOS1(1, 0);
A0009:
	LXI B,01H
	PUSH B
	LXI D,0H
	POP B
	CALL BDOS1
;
;  		RETURN CHAR;
	STA A000A
;
;	END RD$CON;
	RET
	RET
;
;
;	/* PRINT STR$ - print string terminated with $ */
;	PR$BUF:	PROCEDURE (ADRS);
G0008:
	JMP G000C
;
;  		DECLARE  ADRS  ADDRESS;
A000D:
;
;  		CALL BDOS1(9, ADRS);
	MOV L,C
	MOV H,B
	SHLD A000E
	LXI B,09H
	PUSH B
	LHLD A000E
	XCHG
	POP B
	CALL BDOS1
;
;	END PR$BUF;
	RET
;
;
;	/* READ STR$ - input string from keyboard */
;	RD$BUF: PROCEDURE (BUF) ADDRESS;
G000C:
	JMP G000F
;
;  		DECLARE  BUF  BYTE;
A0010:
;
;  		CALL BDOS1(10, .BUF);
	MOV L,C
	MOV H,B
	MOV A,L
	STA A0011
	LXI B,0AH
	PUSH B
	LXI D,A0011
	POP B
	CALL BDOS1
;
;	END RD$BUF;
	RET
;
;
;	/* CONSOLE STATUS - return 0 if no keys waiting */
;	CN$RDY: PROCEDURE BYTE;
G000F:
	JMP G0012
;
;  		DECLARE  ST  BYTE;
;
;  		ST=BDOS1(11, 0);
A0013:
	LXI B,0BH
	PUSH B
	LXI D,0H
	POP B
	CALL BDOS1
;
;  		RETURN ST;
	STA A0014
;
;	END CN$RDY;
	RET
	RET
;
;
;	/* LOGIN DISK - select disc. DSK=0 for A:, 1 for B:, etc */
;	LOGIN: PROCEDURE (DSK);
G0012:
	JMP G0016
;
;  		DECLARE  DSK  BYTE;
A0017:
;
;  		CALL BDOS1(14, DSK);
	MOV L,C
	MOV H,B
	MOV A,L
	STA A0018
	LXI B,0EH
	PUSH B
	LDA A0018
	MOV E,A
	MVI D,0
	POP B
	CALL BDOS1
;
;	END LOGIN;
	RET
;
;
;	OPEN: PROCEDURE (FCB) BYTE;
G0016:
	JMP G0019
;
;  		DECLARE  FCB  BYTE;
A001A:
;
;  		DECLARE  ST  BYTE;
;
;  		ST=BDOS1(15, .FCB);
	MOV L,C
	MOV H,B
	MOV A,L
	STA A001B
	LXI B,0FH
	PUSH B
	LXI D,A001B
	POP B
	CALL BDOS1
;
;  		RETURN ST;
	STA A001C
;
;	END OPEN;
	RET
	RET
;
;
;	CLOSE: PROCEDURE (FCB) BYTE;
G0019:
	JMP G001E
;
;  		DECLARE  FCB  BYTE;
A001F:
;
;  		DECLARE  ST  BYTE;
;
;  		ST=BDOS1(16, .FCB);
	MOV L,C
	MOV H,B
	MOV A,L
	STA A0020
	LXI B,010H
	PUSH B
	LXI D,A0020
	POP B
	CALL BDOS1
;
;  		RETURN ST;
	STA A0021
;
;	END CLOSE;
	RET
	RET
;
;
;	/* DELECT FILE */
;	DLETE: PROCEDURE (FCB) BYTE;
G001E:
	JMP G0023
;
;  		DECLARE  FCB  BYTE;
A0024:
;
;  		DECLARE  ST  BYTE;
;
;  		ST=BDOS1(19, .FCB);
	MOV L,C
	MOV H,B
	MOV A,L
	STA A0025
	LXI B,013H
	PUSH B
	LXI D,A0025
	POP B
	CALL BDOS1
;
;  		RETURN ST;
	STA A0026
;
;	END DLETE;
	RET
	RET
;
;
;	/* READ FILE SEQUENTIAL */
;	RD$DSK: PROCEDURE (FCBA) BYTE;
G0023:
	JMP G0028
;
;  		DECLARE  FCBA  ADDRESS;
A0029:
;
;  		DECLARE  ST  BYTE;
;
;  		ST=BDOS1(20, FCBA);
	MOV L,C
	MOV H,B
	SHLD A002A
	LXI B,014H
	PUSH B
	LHLD A002A
	XCHG
	POP B
	CALL BDOS1
;
;  		RETURN ST;
	STA A002B
;
;	END RD$DSK;
	RET
	RET
;
;	
;	/* WRITE FILE SEQUENTIAL */
;	WR$DSK: PROCEDURE (FCBA) BYTE;
G0028:
	JMP G002D
;
;  		DECLARE  FCBA  ADDRESS;
A002E:
;
;  		DECLARE  ST  BYTE;
;
;  		ST=BDOS1(21, FCBA);
	MOV L,C
	MOV H,B
	SHLD A002F
	LXI B,015H
	PUSH B
	LHLD A002F
	XCHG
	POP B
	CALL BDOS1
;
;  		RETURN ST;
	STA A0030
;
;	END WR$DSK;
	RET
	RET
;
;
;	/* CREATE NEW FILE  */
;	MAKE:PROCEDURE (FCBA) BYTE;
G002D:
	JMP G0032
;
;  		DECLARE  FCBA  ADDRESS;
A0033:
;
;  		DECLARE  ST  BYTE;
;
;  		ST=BDOS1(22, FCBA);
	MOV L,C
	MOV H,B
	SHLD A0034
	LXI B,016H
	PUSH B
	LHLD A0034
	XCHG
	POP B
	CALL BDOS1
;
;  		RETURN ST;
	STA A0035
;
;	END MAKE;
	RET
	RET
;
;
;	/* RENAME FILE  */
;	RNAME: PROCEDURE (FCBA) BYTE;
G0032:
	JMP G0037
;
;  		DECLARE  FCBA  ADDRESS;
A0038:
;
;  		DECLARE  ST  BYTE;
;
;  		ST=BDOS1(23, FCBA);
	MOV L,C
	MOV H,B
	SHLD A0039
	LXI B,017H
	PUSH B
	LHLD A0039
	XCHG
	POP B
	CALL BDOS1
;
;  		RETURN ST;
	STA A003A
;
;	END RNAME;
	RET
	RET
;
;
;	/* RETURN CURRENT DRIVE - 0 for A:, 1 for B:, etc  */
;	DRIVE: PROCEDURE BYTE;
G0037:
	JMP G003C
;
;  		DECLARE  ST  BYTE;
;
;  		ST=BDOS1(25, 0);
A003D:
	LXI B,019H
	PUSH B
	LXI D,0H
	POP B
	CALL BDOS1
;
;  		RETURN ST;
	STA A003E
;
;	END DRIVE;
	RET
	RET
;
;
;	/* SET DMA ADDRESS */
;	STDMA: PROCEDURE (BUF);
G003C:
	JMP G0040
;
;  		DECLARE  BUF  ADDRESS;
A0041:
;
;  		CALL BDOS1(26, BUF);
	MOV L,C
	MOV H,B
	SHLD A0042
	LXI B,01AH
	PUSH B
	LHLD A0042
	XCHG
	POP B
	CALL BDOS1
;
;	END STDMA;
	RET
;
;
;
;	/* PRINT CR LF */
;	PRTCRLF: PROCEDURE;
G0040:
	JMP G0043
;
;		CALL WR$CON(13);
A0044:
	LXI B,0DH
	CALL A0006
;
;		CALL WR$CON(10);
	LXI B,0AH
	CALL A0006
;
;	END PRTCRLF;
	RET
;
;
;	/* PRINT DECIMAL NUMBER */
;	PRTNUM: PROCEDURE(N);
G0043:
	JMP G0045
;
;    		DECLARE N ADDRESS;
A0046:
;
;    		DECLARE S(5) BYTE INITIAL(' ',' ',' ',' ','0');
;
;    		DECLARE (I,J) BYTE;
;
;    		I = 4;
	MOV L,C
	MOV H,B
	SHLD A0047
	MVI A,04H
;
;    		DO WHILE N > 0;
	STA A0049
G004C:
	MVI A,0H
	LHLD A0047
	EXTRN BP66@
	CALL BP66@
;
;        		J = N MOD 10 + '0';
	RRC
	JNC G004D
	MVI A,0AH
	LHLD A0047
	EXTRN BP72@
	CALL BP72@
	MVI A,030H
	EXTRN BP57@
	CALL BP57@
	SHLD T004E
	LDA T004E
;
;        		N = N / 10;
	STA A004A
	MVI A,0AH
	LHLD A0047
	EXTRN BP71@
	CALL BP71@
;
;        		S(I) = J;
	SHLD A0047
	LHLD A0049
	MVI H,0
	XCHG
	LXI H,A0048
	DAD D
	SHLD T0051
	LDA A004A
;
;        		I = I - 1;
	LHLD T0051
	MOV M,A
	MVI L,01H
	LDA A0049
	EXTRN BP31@
	CALL BP31@
;
;    		END;
	STA A0049
	JMP G004C
;
;    		DO I = 0 TO 4;
G004D:
	MVI A,0H
	STA A0049
	JMP G0054
G0055:
	MVI A,01H
	LHLD A0049
	EXTRN BP25@
	CALL BP25@
	STA A0049
G0054:
	MVI L,04H
	LDA A0049
	EXTRN BP36@
	CALL BP36@
;
;        		IF S(I) <> ' ' THEN
	RRC
	JNC G0057
	LHLD A0049
	MVI H,0
	XCHG
	LXI H,A0048
	DAD D
	MOV A,M
	MVI L,020H
	EXTRN BP35@
	CALL BP35@
;
;            			CALL WR$CON(S(I));
	RRC
	JNC G005B
	LHLD A0049
	MVI H,0
	XCHG
	LXI H,A0048
	DAD D
	SHLD T004E
	LHLD T004E
	MOV C,M
	CALL A0006
;
;    		END;
G005B:
	JMP G0055
;
;	END PRTNUM;
G0057:
	RET
;
;
;	/* PRINT 0 TERMINATED STRING VIA BDOS FUNCTION */
;	PRTSTR: PROCEDURE(STR);
G0045:
	JMP G005E
;
;        	DECLARE STR ADDRESS;
A005F:
;
;        	DECLARE S BASED STR BYTE;
;
;        	DECLARE I BYTE;
;
;        	I = 0;
	MOV L,C
	MOV H,B
	SHLD A0060
	MVI A,0H
;
;        	DO WHILE S(I) <> 0;
	STA A0062
G0066:
	LHLD A0062
	MVI H,0
	XCHG
	LHLD A0060
	DAD D
	MOV A,M
	MVI L,0H
	CALL BP35@
;
;            		CALL WR$CON(S(I));
	RRC
	JNC G0067
	LHLD A0062
	MVI H,0
	XCHG
	LHLD A0060
	DAD D
	SHLD T0063
	LHLD T0063
	MOV C,M
	CALL A0006
;
;            		I = I + 1;
	MVI L,01H
	LDA A0062
	CALL BP25@
;
;        	END;
	STA A0062
	JMP G0066
;
;    	END PRTSTR;
G0067:
	RET
;
;
;
;DECLARE S (10) BYTE INITIAL ('Hola',0);
;
;	
;	CALL PRTSTR(.S);
G005E:
	LXI B,A006B
	CALL A005F
;
;	CALL PRTCRLF;
	CALL A0044
;
;  
;END HELLO;
	EXTRN EXIT@
SCAT@:
	CALL EXIT@
	DSEG 
A0007:
	DS 01H
A000A:
	DS 01H
A000E:
	DS 02H
A0011:
	DS 01H
A0014:
	DS 01H
A0018:
	DS 01H
A001B:
	DS 01H
A001C:
	DS 01H
A0020:
	DS 01H
A0021:
	DS 01H
A0025:
	DS 01H
A0026:
	DS 01H
A002A:
	DS 02H
A002B:
	DS 01H
A002F:
	DS 02H
A0030:
	DS 01H
A0034:
	DS 02H
A0035:
	DS 01H
A0039:
	DS 02H
A003A:
	DS 01H
A003E:
	DS 01H
A0042:
	DS 02H
A0047:
	DS 02H
A0048:
	DB 020H
	DB 020H
	DB 020H
	DB 020H
	DB 030H
A0049:
	DS 01H
A004A:
	DS 01H
A0060:
	DS 02H
A0062:
	DS 01H
A006B:
	DB 048H
	DB 06FH
	DB 06CH
	DB 061H
	DB 0H
	DS 05H
T000B:
	DS 01H
T0015:
	DS 01H
T001D:
	DS 01H
T0022:
	DS 01H
T0027:
	DS 01H
T002C:
	DS 01H
T0031:
	DS 01H
T0036:
	DS 01H
T003B:
	DS 01H
T003F:
	DS 01H
T004B:
	DS 01H
T004E:
	DS 02H
T0050:
	DS 02H
T0051:
	DS 02H
T0063:
	DS 02H
T0065:
	DS 01H
	END
