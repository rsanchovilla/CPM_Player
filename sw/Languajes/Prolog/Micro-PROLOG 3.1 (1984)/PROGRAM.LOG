program-mod (add delete list kill edit cedit accept function
"?REV-P?" "?DECL?")
(Parse-of-S Parse-of-SS Parse-of-Cond CON ON APPEND which :
Expression-Parse infix postfix "?VARTRANS?" dict func end yes all =)
((function x)
  (CON x)
  ("?DECL?" x func))
((add X)
  (NUM X)
  /(LESS 0 X)
  (R Y)
  (add X Y))
((add X)
  /
  (add 32767 X))
((add X Y)
  (Parse-of-S Z Y)
  (SUM X1 1 X)
  (ADDCL Z X1)
  ("?DECLARE?" Z))
(("?REV-P?"  X1 Z)
  ("?VARTRANS?" (X|Y) X1)
  (Parse-of-SS X Z x)
  (Rev-body Y x "if~M~J    "))
((Rev-body () () X))
((Rev-body (X|Y)  (Z|x) Z)
  (Parse-of-Cond X x y)
  (Rev-body Y y "and~M~J    "))
(("?DECLARE?" ((X|Y)|Z))
  ("?DECL?" X dict))
(("?DECL?" X Y)
  (OR ((CL ((Y X)))/) ((ADDCL ((Y X))))))
((edit X)(R Y)(edit X Y))
((cedit X)(R Y)(cedit X Y))
((edit X Y)(gedit X Y DELCL))
((cedit X Y)(gedit X Y /*))
((gedit X Y x1)
  (CON X)(CL ((dict X)))
  (CL ((X|Z)|x) Y Y)
  (Parse-of-S ((X|Z)|x) z) (RFILL (Y z) X3)(INT X3) (R X1)
  (Parse-of-S y1 X1)(EQ y1 ((X4|Y4)|Z4))
  (SUM 1 X6 X3)(NOT SYS (X4|Y4))(x1 X Y)(ADDCL y1 X6)
  (IF (EQ X4 X) () ((PP relation changed to X4)("?DECLARE?" y1)))
  )
((Acceptin X)
  (P X)
  (R Y)
  (OR ((LST Y) (ADDCL ((X |Y))) (Acceptin X)) 
      ((OR ((EQ Y end)) ((P " " Y not a list)(PP)(Acceptin X)))) 
  ))
((accept X)
  ("?DECL?" X dict)
  (Acceptin X))
((delete (X|Y))
  /
  (Parse-of-S Z (X|Y))
  (OR ((DELCL Z)) ((PP No sentence (X|Y)))))
((delete X)
  (CON X)
  (R Y)
  (delete X Y))
((delete X Y)
  (IF (DELCL X Y) () ((PP No  sentence Y for X))))
((kill all)/
  (P Entire program "?(yes/no)")
  (R y)(EQ y yes)(KILL ALL)  
  (PP Entire program deleted))
((kill X)(CON X)
  (DELCL ((dict X)))/
  (KILL X)(remove func X)(remove infix X)(remove postfix X)    
  (PP Definition for X deleted))
((remove Y X)(OR ((DELCL ((Y X)))) ()))
((kill X)(OPMOD X)/ CLMOD
  (KILL X)
  (PP Module X deleted))
((kill X)(P "No sentences for ")(PP X))
(("?LIST-PRED?" X)(NOT DEF X)/(P "No sentences for ")(PP X)) 
(("?LIST-PRED?" X )
  (CL ((X|Y)|Z))
  ("?REV-P?" ((X|Y)|Z)  y)
  (P  | y)(PP)
  FAIL)
(("?LIST-PRED?" X))
((list all)/
  (FORALL ((CL ((dict X)))) (("?LIST-PRED?" X))))
((list X)
  (OR ((CL ((dict X)))) ((ON X (infix postfix dict func)))) 
  /("?LIST-PRED?" X))
((list X)(P "No sentences for ")(PP X))
CLMOD
((CL ((dict X)))) ((ON X (infix postfix dict func)))) 
  /("?LIST-P