exptran-mod
( Expression-Parse )
(@ # + - ~ * % 
APPEND CONS func & and yes rel-form)
((COPYRIGHT 1984 LPA LTD V2-16))
((less + x2)) 
((less "-" x2))
((less ~ x2))
((op x)
  (NOT VAR x)
  (sysop x))
((fn x)
  (CON x)(fn1 x))
((fn1 APPEND))
((fn1  @))
((fn1 x)(CL ((func x))))
((fn1 x)
  (PP x assumed not to be function name)FAIL)
((sysop +))
((sysop ~))
((sysop "-"))
((sysop *))
((sysop %))
((sysop /))
((Expression-Parse x y z)
  (VAR z)/
  (X-parse x y z ()))
((Expression-Parse x x z)
  (NOT CL ((rel-form)))(symbval z))
((symbval ())/)
((symbval ((X|Y)|Z))
  (APPEND Y1 (x) Y)/
  (IF (sysop X) ((EQ Y1 (y1 y2))(EQ x (y1 X y2))) ((EQ x (X|Y1))))
  (symbval Z))
((name / %)/)
((name ~ -)/)
((name x x))
((X-parse x x y y) (NOT LST x)/)
((X-parse (y1 x y2) z Z Y)
  (op x)
  (X-parse y1 z1 Z Y1)(name x x1)
  (X-parse y2 z2 Y1 ((x1 z1 z2 z)|Y))
  /)
((X-parse (y1 x1 y2 x2 |Y) z Z X)
  (op x1)(op x2)/
  (IF (less x1 x2) ((X-parse (y1 x1 (y2 x2|Y)) z Z X))
				 ((X-parse ((y1 x1 y2)x2|Y) z Z X)))
  )
((X-parse (x y Y) z ((CONS y1 Y1 z)|Z) Z1)
  (NOT VAR x)(EQ x CONS)/
  (Zip (y Y) (y1 Y1) Z Z1))
((X-parse (x|Y) z Z Z1)
  (fn x)/
  (Zip Y Y1 Z ((x|Y2)|Z1))
  (APPEND Y1 (z) Y2))
((X-parse X Y Z Z1)
  (Zip X Y Z Z1))
((Zip x x y y )
  (NOT LST x)
  /)
((Zip ()() y y)/)
((Zip (y|Y) (y1|Y1) Z Z2)
  (X-parse y y1 Z Z1)
  (Zip Y Y1 Z1 Z2))
CLMOD
x y y )
  (NOT LST x)
  /)
((Zip ()() y y)/)
((Zip (y|Y) (y1|Y1) Z Z2)
  (X-parse y y1 Z Z1)
  (Zip Y Y1 Z1 Z2))
