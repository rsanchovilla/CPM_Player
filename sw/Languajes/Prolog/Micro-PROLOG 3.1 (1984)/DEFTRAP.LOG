deftrap-mod ("?ERROR?") (q c is-told add if tell data-rel)
((COPYRIGHT 1984 LPA LTD V2-16))
((P-code 0 "Arithmetic overflow"))
((P-code 1 "Arithmetic underflow"))
((P-code 3 "Invalid form of use"))
((P-code 5 "File error"))
((P-code 6 "Too many files opened")) 
((P-code 7 "Close all files first"))
((P-code 8 "Bad data in file"))
((P-code 9 "Write error"))
((P-code 10 "Disk or directory is full"))
((P-code 11 "Break !"))
((P-code 12 "Illegal use of modules"))
((P-code X " "))
(("?ERROR?" 4 (ADDCL ((X|Y)|Z) |x))
  (P  "Cannot add sentences to" X)(PP)
  ABORT) 
(("?ERROR?" 4 (Z X|x))/
  (IF (CON X) ((EQ X Y)) ((EQ X ((Y|y)|z))))
  (PP Cannot delete sentences for Y)ABORT)
(("?ERROR?" 2 (X|Y))
  (CL ((data-rel X)))/FAIL)
(("?ERROR?" 2 (Y|Y1))/
  (PP No definition for Y)(PP trying: Y Y1)
  (P "error&(? for info)") RCLEAR (INTOK "CON:" x)
  (respond x (Y|Y1))
  )
(("?ERROR?" X (Y|Y1))
  (P-code X x)(P "Evaluation error: " X x)(PP)
  (PP trying :Y Y1)
  ABORT)
((respond q X)
  (ABORT))
((respond tell (X|X1))/
  (add (X X2 if is-told((X X2))))
  (X|X1) )
((respond c X)
 / X)
((respond / X)/
  (R x)(R Y)
  (x Y)
  (P "error&") (INTOK "CON:" Z)/
  (respond Z X))
((respond z (Y|Y1))
  (PP to quit enter: q )
  (PP or enter :tell(see manual))
  (P or enter: / "<any command>" (eg / add (sentence), / load file))(PP)
  (PP to continue enter: c)
  (P "error&")(INTOK "CON:" x)
  (respond x (Y|Y1)))
CLMOD
 add (sentence), / load file))(PP)
  (PP to continue enter: c)
  (P "erro