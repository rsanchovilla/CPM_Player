; File:  DEBUG.LIB  (c)		12/02/83	The Soft Warehouse


; To read in DEBUG.LIB without having muSTAR loaded, simply enter
; the muLISP command:  (RDS DEBUG LIB)  followed by a <RETURN>.

(LOOP (PRIN1 (QUOTE *)) (EVAL (READ)) ((NULL RDS)) )

(PUTD 'DEFUN '(NLAMBDA (NAM$ EXP$)
  (PUTD NAM$ EXP$)
  NAM$ ))


(DEFUN TRACE (LAMBDA LST
  (STUB 'TRACE LST) ))

(DEFUN BRK (LAMBDA LST
  (STUB 'BRK LST) ))

(DEFUN CLEAR (LAMBDA LST
  (UNSTUB LST) ))

(DEFUN HISTORY (LAMBDA (
    % Local: % LST)
  (SETQ! LST (CAR! HISTORY))
  (LOOP!
    ((EQ! LST))
    ( ((EQ! (CAR! LST)))
      (APPLY! (CAR! (CAR! LST)) (CDR! (CAR! LST))) )
    (POP! LST) ) ))

(SETQ HISTLEN 15)

(DEFUN BACKTRACE (LAMBDA (
    % Local: % LST)
  (SETQ! LST (REVERSE! BTRLIST))
  (LOOP!
    ((EQ! LST))
    (APPLY! PRTCALL! (LIST! (CAR! (CAR! LST)) (CDR! (POP! LST)))) ) ))

(DEFUN STUB (LAMBDA (FLAG LST NAM
    % Local: % NAM$)
  (SET FLAG T)
  (SETQ NAM$ T)
  (LOOP
    ((ATOM LST) NAM$)
    (SETQ NAM (POP LST))
    ( ((NOT (GETD NAM T))
	(SETQ NAM$)
	(PRIN1 NAM) (PRINT " is undefined") )
      (FLAG FLAG NAM)
      ((TRACED NAM))
      (PUT NAM 'DEBUG (CONS (PACK (LIST NAM '!)) (COND
	  ((NUMBERP (GETD NAM)) NIL)
	  ((CADR (GETD NAM))) )))
      (MOVD NAM (CAR (GET NAM 'DEBUG)))
      (PUTD NAM (LIST (GETD NAM T) 'ARGLST! (LIST 'TRACE! NAM))) ) ) ))

(DEFUN TRACED (LAMBDA (NAM)
  (EQ (CAR (CADDR (GETD NAM))) 'TRACE!) ))

(DEFUN UNSTUB (LAMBDA (LST NAM)
  (SETQ LEVELCOUNT 0)
  (RPLACD 'LEVELCOUNT)
  (SETQ BTRLIST)
  (LOOP
    ((ATOM LST))
    (SETQ NAM (POP LST))
    ( ((GET NAM 'DEBUG)
	(REMFLAG 'BRK NAM)
	(REMFLAG 'TRACE NAM)
	(MOVD (CAR (GET NAM 'DEBUG)) NAM)
	(REMPROP NAM 'DEBUG) ) ) ) ))


(DEFUN TRACE! (NLAMBDA (NAM! 
    LST!)
  ( ((AND! (EQ! LEVELCOUNT 0) SCAN)
      (SETQ! SCAN)
      (SETQ! HISTORY)
      (SETQ! CALLCOUNT 0)
      (RPLACD! 'CALLCOUNT)
      (SETQ! MAXLEVELCOUNT 0)
      (RPLACD! 'MAXLEVELCOUNT) ) )
  (PUTADD! 'CALLCOUNT NAM!)
  (PUTADD! 'LEVELCOUNT NAM!)
  ( ((LESSP! LEVELCOUNT MAXLEVELCOUNT))
    (SETQ! MAXLEVELCOUNT LEVELCOUNT) )
  ( ((AND! (NUMBERP! (GET! 'MAXLEVELCOUNT NAM!))
	   (LESSP! (GET! 'LEVELCOUNT NAM!) (GET! 'MAXLEVELCOUNT NAM!))))
    (PUT! 'MAXLEVELCOUNT NAM! (GET! 'LEVELCOUNT NAM!)) )
  ( ((EQ! BACKTRACE))
    (PUSH! (CONS! NAM! ARGLST!) BTRLIST) )
  (HISTORY! NAM! ARGLST! LEVELCOUNT 'PRTCALL!)
  ( ((TRACEP! NAM!)
      (PRTCALL! NAM! ARGLST! LEVELCOUNT) ) )
  ( ((AND! BRK
	(FLAGP! 'BRK NAM!)
	(LEQ! MINCALL CALLCOUNT)
	(OR! (EQ! (NUMBERP! BRKLEVEL))
	     (EQ! LEVELCOUNT BRKLEVEL) )
	(OR! (EQ! (NUMBERP! (GET! 'BRKLEVEL NAM!)))
	     (EQ! (GET! 'LEVELCOUNT NAM!) (GET! 'BRKLEVEL NAM!)))
	(OR! (EQ! (SETQ! LST! (GET! 'DEBUGIN NAM!)))
	     (LOOP!
		((ATOM! LST!) NIL)
		((ASSOC! (POP! LST!) BTRLIST)) )) )
      (TERPRI!)
      (PRIN1! "Break-point:  ")
      (PRTCALL! NAM! ARGLST!)
      (SETQ! LST! (BREAK!)) ) )
  ((EQ! (EQ! LST!)))
  (SETQ! ARGLST! (APPLY! (CAR! (GET! NAM! 'DEBUG)) ARGLST!))
  (HISTORY! NAM! ARGLST! LEVELCOUNT 'PRTRSLT!)
  ( ((TRACEP! NAM!)
      (PRTRSLT! NAM! ARGLST! LEVELCOUNT) ) )
  ( ((EQ! NAM! (CAR! (CAR! BTRLIST)))
      (POP! BTRLIST) ) )
  (PUTSUB! 'LEVELCOUNT NAM!)
  ARGLST! ))

(DEFUN TRACEP! (LAMBDA (NAM!
     % Local: % LST!)
   (AND! TRACE
	(FLAGP! 'TRACE NAM!)
	(LEQ! MINCALL CALLCOUNT)
	(LEQ! MINLEVEL LEVELCOUNT)
	(LEQ! LEVELCOUNT MAXLEVEL)
	(LEQ! (GET! 'MINLEVEL NAM!) (GET! 'LEVELCOUNT NAM!))
	(LEQ! (GET! 'LEVELCOUNT NAM!) (GET! 'MAXLEVEL NAM!))
	(OR! (EQ! (SETQ! LST! (GET! 'DEBUGIN NAM!)))
	     (LOOP!
	       ((ATOM! LST!) NIL)
	       ((ASSOC! (POP! LST!) BTRLIST)) ) ) ) ))

(DEFUN LEQ! (LAMBDA (NUM1 NUM2)
    (OR! (EQ! (NUMBERP! NUM1))
	(EQ! (NUMBERP! NUM2))
	(EQ! NUM1 NUM2)
	(LESSP! NUM1 NUM2) ) ))

(DEFUN HISTORY! (LAMBDA (NAM LST NUM NAM1)
  (SETQ! HISTORY (TCONC! HISTORY (LIST! NAM1 NAM LST NUM)))
  ((LESSP! HISTLEN (LENGTH! (CAR! HISTORY)))
    (RPLACA! HISTORY (CDR! (CAR! HISTORY))) ) ))  

(DEFUN PUTADD! (LAMBDA (NAM1 NAM2)
  ((EQ! (NUMBERP! (CAR! NAM1))))
  (SET! NAM1 (PLUS! (CAR! NAM1) 1))
  ((NUMBERP! (GET! NAM1 NAM2))
    (PUT! NAM1 NAM2 (PLUS! (GET! NAM1 NAM2) 1)) )
  (PUT! NAM1 NAM2 1) ))

(DEFUN PUTSUB! (LAMBDA (NAM1 NAM2)
  ((EQ! (NUMBERP! (CAR! NAM1))))
  ( ((EQ! (CAR! NAM1) 0))
    (SET! NAM1 (PLUS! (CAR! NAM1) -1)) )
  ((NUMBERP! (GET NAM1 NAM2))
    ((LESSP! 0 (GET NAM1 NAM2))
      ((EQ! (GET NAM1 NAM2) 1)
        (REMPROP! NAM1 NAM2) )
      (PUT! NAM1 NAM2 (PLUS! (GET! NAM1 NAM2) -1)) ) ) ))

(DEFUN PRTCALL! (LAMBDA (NAM LST NUM
    % Local: % PRIN1 PRINT)
  (PRTNAM!)
  (SETQ! NAM (CDR! (GET! NAM 'DEBUG)))
  (PRIN1! '"[")
  ( ((EQ! NAM)
      ((ATOM! LST))
      (LOOP!
	(PRTEXP! NAM (POP! LST))
	((ATOM! LST))
	(PRIN1! ", ") ) )
    ((ATOM! NAM)
      (PRIN1! NAM)
      (PRIN1! ": ")
      (PRTEXP! NAM LST) )
    (LOOP!
      (PRIN1! (CAR! NAM))
      (PRIN1! ": ")
      (PRTEXP! (POP! NAM) (POP! LST))
      ((ATOM! NAM)
	((ATOM! LST))
	(LOOP!
	  (PRTEXP! NAM (POP! LST))
	  ((ATOM! LST))
	  (PRIN1! ", ") ) )
      (PRIN1! ", ") ) )
  (PRIN1! '"]")
  (TERPRI!) ))

(DEFUN PRTRSLT! (LAMBDA (NAM LST NUM
    % Local: % PRIN1 PRINT)
  (PRTNAM!)
  (PRIN1! "= ")
  (PRTEXP! NAM LST)
  (TERPRI!) ))

(DEFUN PRTNAM! (LAMBDA ()
  (SETQ! PRIN1 T)
  (SETQ! PRINT T)
  ( ((NUMBERP! NUM)
      ( ((EQ! (SPACES!) 0))
        (TERPRI!) )
      ( ((LESSP! NUM 10)
          (SPACES! 1) ) )
      (PRIN1! NUM)
      (PRIN1! '"|")
      (SPACES! NUM) ) )
  (PRIN1! NAM)
  (SPACES! 1) ))

(DEFUN PRTEXP! (LAMBDA (NAM EXP)
  (PRIN1! EXP) ))


(MOVD 'CAR 'CAR!)
(MOVD 'CDR 'CDR!)
(MOVD 'ASSOC 'ASSOC!)
(MOVD 'CONS 'CONS!)
(MOVD 'LIST 'LIST!)
(MOVD 'REVERSE 'REVERSE!)
(MOVD 'RPLACA 'RPLACA!)
(MOVD 'RPLACD 'RPLACD!)
(MOVD 'TCONC 'TCONC!)
(MOVD 'GET 'GET!)
(MOVD 'PUT 'PUT!)
(MOVD 'REMPROP 'REMPROP!)
(MOVD 'FLAGP 'FLAGP!)
(MOVD 'ATOM 'ATOM!)
(MOVD 'NUMBERP 'NUMBERP!)
(MOVD 'EQ 'EQ!)
(MOVD 'LESSP 'LESSP!)
(MOVD 'SET 'SET!)
(MOVD 'SETQ 'SETQ!)
(MOVD 'PLUS 'PLUS!)
(MOVD 'LENGTH 'LENGTH!)
(MOVD 'PRIN1 'PRIN1!)
(MOVD 'TERPRI 'TERPRI!)
(MOVD 'SPACES 'SPACES!)
(MOVD 'APPLY 'APPLY!)
(MOVD 'BREAK 'BREAK!)
(MOVD 'LOOP 'LOOP!)
(MOVD 'AND 'AND!)
(MOVD 'OR 'OR!)
(MOVD 'POP 'POP!)
(MOVD 'PUSH 'PUSH!)

(CLEAR)

(RDS)
