PROGRAM Write;

{	Version history
	- 01-Aug-2004, P. Schorn, included some optimizations
	- 02-Jul-2004, P. Schorn, changed standard procedures
	- 26-Apr-2002, P. Schorn, send output to list device instead of punch
	- 30-Mar-2002, P. Schorn, cleaned up data types
	- 24-Mar-2002, P. Schorn, added force Z80 CPU
	- 23-Mar-2002, P. Schorn, fixed bug in test for file exists
	- 18-Mar-2002, P. Schorn, added flag for binary transfer
	- 16-Mar-2002, P. Schorn, initial version
}

PROCEDURE BDOS(WORD function, input);	EXTERNAL;
PROCEDURE INPORT(WORD port);		EXTERNAL;
PROCEDURE OUTPOR(WORD port, data);	EXTERNAL;
PROCEDURE STPSUB;			EXTERNAL;

CONST	commandLineAddress	= 80h;
	FCBLength		= 36; { allow random access }
	printCharCmd		= 02h;
	listOutputCmd		= 05h;
	printStringCmd		= 09h;
	versionNumberCmd	= 0ch;
	openFileCmd		= 0fh;
	readSequentialCmd	= 14h;
	setDMAAdressCmd		= 1ah;
	cr			= 13;
	lf			= 10;
	crlf			= cr + 256 * lf;
	eof			= 1ah;
	simhport		= 0feh;
	attachPTP		= 16;
	detachPTP		= 17;
	getVersionSIMHCmd	= 6;
	recordSize		= 128;
	noError			= 0;
	true			= 1;
	false			= 0;

{
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|DR|F1|F2|//|F8|T1|T2|T3|EX|S1|S2|RC|DO|//|DN|CR|R0|R1|R2|
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
 00 01 02 .. 08 09 10 11 12 13 14 15 16 .. 31 32 33 34 35
}

BYTE 	commandLine	AT commandLineAddress;
	dirChar = ':':[1];
	usage			= ('Write a file to PTP (binary or text (default)). ',
				   'Usage: WRITE <file name> [B]', crlf, '$':[1]);
BYTE[recordSize]	buffer	= (
	crlf, crlf, 'For SIMH. Copyright 2004 by Peter Schorn, peter.schorn@acm.org',
	crlf, crlf, eof:[1]);
BYTE[FCBLength]	defaultFCB;
BYTE	done			= ('kB written ($');
	doneBinary		= ('Binary).',					crlf, '$':[1]);
	doneText		= ('Text).',					crlf, '$':[1]);
	signon			= (crlf, 'WRITE V-1.08 (01-Aug-04)  SIMH Interface V');
	SIMHVersion		= ('XXX',					crlf, '$':[1]);
	fileDoesNotExist	= ('File does not exist.',			crlf, '$':[1]);
	couldNotCreateFile	= ('Could not create file.',			crlf, '$':[1]);
	simhrequired		= ('SIMH required.'); { must be followed by crlfString }
	crlfString		= (crlf, '$':[1]);
	size0 = (        '$':[1], 0:[4]); { all sizeX entries use the same number of bytes }
	size1 = ('.125', '$':[1]);
	size2 = ('.25',  '$':[1], 0:[1]);
	size3 = ('.375', '$':[1]);
	size4 = ('.5',   '$':[1], 0:[2]);
	size5 = ('.625', '$':[1]);
	size6 = ('.75',  '$':[1], 0:[1]);
	size7 = ('.875', '$':[1]);
WORD	cpmResult, recordCount;
BYTE	byteCount, isText, s1, s2, s3, drive;

PROCEDURE CPM2(WORD function, input);
	BEGIN
	cpmResult := BDOS(function:[1], input)
	END CPM2;

PROCEDURE printString(WORD stringp);
	BEGIN
	CPM2(printStringCmd, stringp)
	END printString;

PROCEDURE printChar(WORD char);
	BEGIN
	CPM2(printCharCmd, char:[1])
	END printChar;

PROCEDURE printUnsignedInt(WORD int);
	BEGIN
	IF	int << 10
	THEN	printChar(int + '0')
	ELSE	printUnsignedInt(int DIV 10);
		printChar(int MOD 10 + '0')
	ENDIF
	END printUnsignedInt;

PROCEDURE fillBlanks(WORD count);
	BEGIN
	WHILE s2 <<= count:[1] DO
		defaultFCB[s2]:[1] := ' ';
		s2 := s2 + 1
	ENDWHILE
	END fillBlanks;

PROCEDURE inport;
	BEGIN
	RETURN INPORT(simhport)
	END inport;

LABEL	showWritten;

BEGIN
OUTPOR(simhport, getVersionSIMHCmd);
buffer[0]:[2] := inport + 256 * inport;
buffer[2]:[2] := inport + 256 * inport;
IF	buffer:[4] = simhrequired:[4]
THEN	SIMHVersion[0]:[2] := inport + 256 * inport;	{ obtain three characters of version }
	SIMHVersion[2]:[1] := inport;
	REPEAT
	UNTIL	inport = 0
ELSE	printString(@simhrequired);
	STPSUB;
	EXIT				{ make sure we are running under SIMH }
ENDIF;

printString(@signon);
IF	commandLine[0]:[1] = 0
THEN	printString(@usage);
	STPSUB;
	EXIT
ENDIF;

IF	(commandLine[commandLine[0]:[1]]:[1] = 'B') AND
	(commandLine[commandLine[0]:[1] - 1]:[1] = ' ')
THEN	commandLine[commandLine[0]:[1]]:[1] := ' ';
	commandLine[0]:[1] := commandLine[0]:[1] - 2;
	isText := false
ELSE	isText := true
ENDIF;

s1 := 0;
drive := 0;				{ currently logged drive is default }
WHILE s1 << FCBLength DO		{ clear File Control Block }
	defaultFCB[s1]:[1] := 0;
	s1 := s1 + 1
ENDWHILE;

CPM2(versionNumberCmd, 0);		{ CP/M 3 treats command lines which start with ':' special }
IF	(cpmResult >>= 30h) AND (commandLine[1]:[1] = ':')
THEN	s1 := commandLine[0]:[1];
	WHILE s1 >> 0 DO		{ shift command line right by one position }
		commandLine[s1 + 1]:[1] := commandLine[s1]:[1];
		s1 := s1 - 1
	ENDWHILE;
	commandLine[1]:[1] := ' ';	{ first character should be ' ' as before }
	commandLine[0]:[1] := commandLine[0]:[1] + 1
ENDIF;

IF	commandLine[2]:[1] = dirChar	{ name starts with dirChar }
THEN	s1 := commandLine[0]:[1];	{ find last dirChar }
	WHILE commandLine[s1]:[1] <> dirChar DO
		s1 := s1 - 1
	ENDWHILE;
	IF	(s1 = 2) OR (s1 = commandLine[0]:[1])
	THEN	printString(@usage);
		STPSUB;
		EXIT			{ dirChar should not be first or last character }
	ENDIF;
	s1 := s1 + 1			{ s1 points to first character of CP/M file name }
ELSE	IF	(commandLine[0]:[1] >>= 3) AND (commandLine[3]:[1] = ':')
					{ destination has drive letter prefixed }
	THEN	IF	commandLine[0]:[1] = 3
		THEN	printString(@usage);
			STPSUB;
			EXIT		{ ':' should not be last character }
		ENDIF;
		s1 := 4;
		drive := commandLine[2]:[1] - 'A' + 1
	ELSE	s1 := 2
	ENDIF
ENDIF;
defaultFCB[0]:[1] := drive;
s2 := 1;
s3 := 0; { no extension so far }
WHILE (s1 <<= commandLine[0]:[1]) AND (s2 <<= 11) DO
	IF	commandLine[s1]:[1] = '.'
	THEN	s1 := s1 + 1;
		s3 := 1;		{ now we are in extension mode }
		fillBlanks(8)
	ENDIF;
	IF	(s2 <<= 8) OR (s3 = 1)
	THEN	defaultFCB[s2]:[1] := commandLine[s1]:[1];
		s2 := s2 + 1
	ENDIF;
	s1 := s1 + 1
ENDWHILE;
fillBlanks(11);

{ this is test code to show the resulting defaultFCB }
{ s1 := 0;
WHILE s1 < FCBLength DO
	printUnsignedInt(defaultFCB[s1]:[1]);
	printChar('.');
	s1 := s1 + 1
ENDWHILE;
printString(@crlfString);
EXIT;
}

CPM2(openFileCmd, @defaultFCB);
IF	cpmResult >> 3
THEN	printString(@fileDoesNotExist);
	STPSUB;
	EXIT
ENDIF;
OUTPOR(simhport, attachPTP); 		{ attach PTP to the external file with the same name }
IF	inport <> noError
THEN	printString(@couldNotCreateFile);
	STPSUB;
	EXIT
ENDIF;
recordCount := 0;

LOOP	CPM2(setDMAAdressCmd, @buffer);
	CPM2(readSequentialCmd, @defaultFCB);
	IF	cpmResult <> noError
	THEN	EXIT
	ENDIF;
	recordCount := recordCount + 1;
	byteCount := 0;
	WHILE byteCount << recordSize DO
		s1 := buffer[byteCount]:[1];
		IF	(isText <> false) AND (s1 = eof)
		THEN	IF	byteCount = 0
			THEN	recordCount := recordCount - 1
			ENDIF;
			GOTO showWritten
		ENDIF;
		CPM2(listOutputCmd, buffer[byteCount]:[1]);
		byteCount := byteCount + 1
	ENDWHILE
ENDLOOP;

showWritten:
printUnsignedInt(recordCount DIV 8);
printString(@size0 + (@size1 - @size0) * (recordCount MOD 8));
printString(@done);
IF	isText = false
THEN	printString(@doneBinary)
ELSE	printString(@doneText)
ENDIF;
OUTPOR(simhport, detachPTP)
END Write.
