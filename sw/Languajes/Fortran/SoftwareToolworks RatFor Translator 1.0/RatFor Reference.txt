
Index
=====

What is RATFOR?
RATFOR statements
IF-ELSE statement
WHILE statement
FOR statement
REPEAT-UNTIL statement
BREAK and NEXT statements
SWITCH construct
Statement Grouping and Null Statments
FREE-FORM input
Comments
Character Translation
STRING Data Type
Quoted Character Strings
DEFINE macro
Other macros
INCLUDE statement
Implementation
Conclusions
Other Reference Literature

What is RATFOR?
===============

RATFOR  is  a preprocessor for FORTRAN. Its primary purpose is 
to  encourage  readable and well-structured code while  taking 
advantage    of   the    universality,     portability,    and  
efficiency   of  FORTRAN.  This  is done  by   providing   the  
control  structures  not  available  in  bare FORTRAN,  and by 
improving the "cosmetics" of the language. 

RATFOR   allows for all the features of normal  FORTRAN,  plus 
makes available these control structures: 
          
     "if"-"else"
     "while", "for", and "repeat"-"until" for looping
     "break" and "next" for controlling loop exits
     "switch" construct for allowing selection of alternatives
      statement grouping with braces
          

The cosmetic aspects of RATFOR have  been  designed  to   make  
it concise and reasonably pleasing to the eye: 
          
          free form input
          unobtrusive comment convention
          translation of >, <=, etc. into .GT., .LE., etc.
          string data type
          quoted character strings
          "define" statement for symbolic constants
          "include" statement for including source files

RATFOR   is  implemented  as  a  preprocessor which translates 
the above features into FORTRAN,  which can then be  fed  into  
almost  any FORTRAN compiler. 

RATFOR statements
=================

Each   of  the RATFOR features will now be discussed  in  more 
detail.  In  the  following,  a  "statement"  is   any   legal  
statement  in  FORTRAN:  assignment,  declaration,  subroutine  
call,   I/O, etc., or any of the RATFOR statements themselves.  
Any   FORTRAN  or  RATFOR  statement  or group  of  these  can 
be  enclosed  in braces ({}) or brackets ([]) -- to make it  a 
compound statement,  which is then  equivalent  to  a   single 
statement and usable anywhere a single statement can be used. 

IF-ELSE statement 
=================

RATFOR    provides    an   "else"  statement  to  handle   the 
construction "if a condition is true, do this thing, otherwise 
do that thing".  The syntax is 
          
          if (legal FORTRAN condition)
               statement(s)
          else
               statement(s)
          
where   the   else  part  is   optional.  The  "legal  FORTRAN 
condition"  is  anything  that can legally go into  a  FORTRAN  
logical   IF.   The  RATFOR statements  may  be  one  or  more 
valid  RATFOR or FORTRAN statements of any kind.  If more than 
one statement is desired, the  statements  must be enclosed by 
braces.

See the example on the next screen.
  
IF-ELSE example, 

          if (a > b)
               {
               k = 1
               call remark (...)
               }
          else if (a < b)
               {
               k = 2
               call remark (...)
               }
          else
               return
          

WHILE statment 
==============

The  while statement is  simply a loop:  "while some condition 
is true, repeat this group of  statements".  The syntax is 

          while (legal FORTRAN condition)
                 statement(s)
          
As   with   the  if,   "legal FORTRAN condition" is  something 
that  can  go  into a FORTRAN logical  IF.  The  condition  is  
tested   before  execution of  any  of the RATFOR  statements, 
so if the condition is not met, the loop will be executed zero 
times.  Also,  as with  the  IF,   the  RATFOR statements  can  
be  any  valid  RATFOR or FORTRAN constructs. If more than one 
statement is desired,  the  statements  must  be  enclosed  by 
braces. For example, 

          while (getc(c) != EOF)
               {
               c = cnvt (c)
               call putc (c)
               }
FOR statment 
============

The  "for"  statement  is  similar  to the "while" except that 
it  allows  explicit initialization and increment   steps   as  
part  of  the statement. The syntax is 

          for (init; condition; increment)
               statement(s)
          
where   "init"  is  any  single  FORTRAN statement which  gets 
done once before the loop begins.  "Increment" is any   single  
FORTRAN   statement which  gets  done at the end of each  pass 
through  the  loop,  before  the test.  "Condition"  is  again 
anything  that is legal  in  a  logical  IF.  Any   of   init,  
condition,    and  increment  may  be  omitted,  although  the 
semicolons must remain. A non-existent condition is treated as  
always true,   so "for( ;  ;  )" is an indefinite repeat.  The 
"for"  statement  is particularly useful for  backward  loops, 
chaining   along   lists,   loops that  might  be   done  zero 
times,  and similar things which are hard to express with a DO 
statement.

See the next screen for examples.

Here are two examples of "for" loops: 

          for (i=1; getarg(i, file, MAXLINE) != EOF; i=i+1)
               {
               int = open (file, READ)
               while (getlin (line, int) != EOF)
                    {
                    for (j=80; j>0; j=j-1)
                       call putc (line(j))
                    }
               call close (int)
               }
          
The  above  code  simply  reads cards from a  list  of  files,  
reverses  the order  of  the characters,  and writes the cards 
onto a standard output file. (The "!=" means .NE.) 


REPEAT-UNTIL statement
======================

The  "repeat-until" statements allow  for  repetition   of   a  
group   of statements until a specified condition is met.  The 
syntax is: 
          repeat
               statement(s)
          until
               condition
          
The  "until"  is  optional.  Once  again,  if  more  than  one  
RATFOR statement is desired,  the statements must be  enclosed 
by brackets.   If the  "until"  part  is  omitted,  the result 
is  an  infinite loop which must be broken with a  "break"  or  
"next"  statement  (see  below).  E.g.: 

          repeat
               {
               call putc (BLANK)
               col = col + 1
               }
               until (tabpos(col,tabs) == YES)

BREAK and NEXT 
==============

RATFOR   provides  statements  for  leaving  a  loop early and 
for beginning the next iteration. 

"Break" causes  an  immediate  exit  from  whatever  loop   it  
is  contained   in   (which  may   be  a  "while",  "for",  or 
"repeat").  Control resumes with the next statement after  the  
loop.   Only  one  loop  is terminated  by  a  "break",   even  
if  the "break" is contained inside several nested loops.  For 
example: 

          repeat
               {
               if (getc(c) == EOF)  break
               ...
               }
          

"Next"  is a branch to the bottom of the loop,  so  it  causes  
the  next   iteration   to  be   done.   "Next"  goes  to  the 
condition  part  of  a "while" or "until",  to the top  of  an 
infinite "repeat"  loop,   and  to the reinitialize part of  a 
"for". For example: 

          for (i=1; i<10; i=i+1)
               {
               if (array(i) == BLANK)  next
               ...
               }
          

SWITCH Construct 
================

An   assortment   of  alternatives  may  be  specified   using 
the switch construct. The syntax is: 

     switch (expr):
        {
        case a: statement
        case b: statement
        case c: statement
        ....
        default: statement
        }

The  "default" case is optional.  

     switch (i):
        {
        case 25: do_this_stuff
        case -2: do_this_stuff
        default: otherwise do_this
        }

Statement Grouping and Null Statements
======================================
     
RATFOR allows a group of statements to be treated as a unit by 
enclosing them in braces -- { and }.  This is true  throughout 
the language:  wherever a single RATFOR statement can be used, 
there could also be several enclosed in braces.

For example:
     
               if (x > 100)
               {
               call error (...)
               err = 1
               return
               }
     
If   braces   are   not   valid  characters   in   the   local 
operating  system,  the characters "$(" and "$)" may  be  used 
instead  of  "{" and "}" respectively. 
          
RATFOR   also  allows  for null statements,  most useful after 
"for"  and "while" statements.  A semicolon alone indicates  a  
null statement. For instance, 
     
               while (getlin(line, int) != EOF) ; 
               
would   read   lines  from a file until  the  end-of-file  was 
reached and 
     
               for (i=1; line(i) == BLANK; i=i+1) ; 
               
positions after leading blanks in a line. 


FREE-FORM input 
===============
     
Statements  may be placed anywhere on a line and several   may 
appear  on  one  line  if  they  are  separated by semicolons. 
No  semicolon is needed at  the  end  of  each  line   because  
RATFOR assumes  there  is  one statement per line unless  told 
otherwise.  RATFOR will, however, continue lines when it seems  
obvious  that they are not yet done. 
     
Any   statement  that  begins  with  an  all-numeric field  is 
assumed  to  be a FORTRAN label and is placed in columns   1-5  
upon output. 
     
Statements   may   be   passed  through  the  RATFOR  compiler 
unaltered  by  inserting  a percent sign  (%)  as  the   first  
character   on  the line.   The  percent will be removed,  the 
rest  of the line shifted one position to the left,  and   the  
line    sent   out   without   any  changes.    This   is    a  
convenient   way  to  pass regular FORTRAN  or  assembly  code 
through the RATFOR compiler. 


Comments 
========
     
A  sharp character "#" in a line marks  the  beginning  of   a 
comment   and  the  rest  of  the  line  is  considered to  be 
that  comment.  Comments and code can co-exist on   the   same  
line.  For example, 
     
        function dummy (x)
        # I made up this function to show some comments
        dummy = x         #I am simply returning the parameter
        return
        end
               

Character Translation
=====================
     
Sometimes  the  characters >,  <=,  etc. are easier to read in 
FORTRAN  condition  statements  than  the   standard   FORTRAN  
.EQ.,  .LT.,   etc..   RATFOR  allows  either  convention.  If 
the special characters  are  used,   they  are  translated  in  
the  following manner: 
     
               ==          .EQ.
               != ^= ~=    .NE.
               <           .LT.
               >           .GT.
               <=          .LE.
               >=          .GE.
               |           .OR.
               &           .AND.
               
For example: 
               for (i=1; i<= 5; i=i+1)
               ...
               if (j != 100)
               ...


STRING Data Type 
================

All    character    arrays   in   RATFOR  are   sequences   of  
ASCII  characters,   stored  right-adjusted,  one  per   array  
element,   with  the  string  terminated  with  an EOS marker. 
An  automatic  way to initialize string characters  arrays  is 
provided. The syntax is: 

     string name "characters" 
     or 
     string name(n) "characters" 

RATFOR  will  define name to  be   a   character   (or,   more  
likely,  integer)   array long enough to accomodate the  ASCII 
codes  for the given character string,  one per  element.  The 
last   word  of  name is  initialized  to  EOS.  If a size  is 
given,  name  is declared to be an integer array of size  'n'.  
If   several  string  statements appear   consecutively,   the  
generated  declarations  for the array will precede  the  data 
statements that initialize them. 

See the next screen for examples.

For example, the declarations: 

          string errmsg "error" 
          string done "bye" 

would be converted by RATFOR into the FORTRAN: 

          integer error(6)
          integer done(4)
          data error(1), error(2), error(3), error(4),
          error(5), error(6) /LETE, LETR, LETR, LETO, LETR, EOS/
          data done(1), done(2), done(3), done(4) /LETD, LETO,
          LETN, LETE, EOS/


Quoted Character Strings
========================

Text enclosed in matching double or single quotes is converted 
to nH... format, but is otherwise unaltered.  For instance,

          call remark ("Error detected")
          
would translate to
          
          call remark (14hError detected)
          
and
          data string /"Can't find answer"/
          
would become

          data string /17hCan't find answer/
          
If  the  local operating system does not support  both   upper  
and   lower case  hollerith  strings,  an escape mechanism  is 
generally provided to allow the user to indicate case. 

Some operating systems are not capable of finding the  end  of  
a  FORTRAN   hollerith   string.   In   this case  it  may  be 
necessary  for the user to mark the end of her  quoted  string 
with a  specific  character, such as a period. 


DEFINE 
======

Any   string   of alphanumeric characters can be defined as  a 
name:  thereafter,  whenever that name  occurs  in  the  input  
(delimited  by non-alphanumerics)  it is replaced by the  rest 
of the definition line. The syntax is: 

define(name, replacement string) 

which    define   "name"   as   a   macro   which   will    be   
replaced    with "replacement  string"  when  encountered   in  
the  source  files. As a simple example: 

          define(ROW,10)
          define(COLUMN,25)
          
          dimension array (ROW, COLUMN)
and
          
          define(EOF,-1)
          if (getlin(line, fd) == EOF) ....

          
Definitions may be included anywhere in  the  code,   as  long  
as  they  appear  before  the  defined name occurs.  The names 
of macro may contain letters,  digits,  periods, and underline 
characters,   but  must start  with  a letter. Upper and lower 
cases ARE significant (thus EOF is not the same as eof). 

Any  occurrences of the strings '$n' in the replacement  text,  
where  1 <=  n  <=  9,  will be replaced with the nth argument 
when the macro is actually invoked. For example: 

               define(bump, $1 = $1 + 1) 

will cause the source line 

               bump(i) 

to be expanded into 

               i = i + 1 


Other macros
============

In addition to define, four other built-in macros are provided: 

arith(x,op,y) performs  the  "integer"  arithmetic   specified  
              by  op (+,-,*,/)  on  the  two  numeric operands 
              and returns the result as its replacement. 

incr(x)       converts the string x to  a  number,   adds  one  
              to    it,    and  returns   the  value  as   its 
              replacement (as a character string). 

ifelse(a,b,c,d)  compares  a and b as character  strings;   if  
              they  are the  same,  c is pushed back onto  the 
              input, else d is pushed back. 

substr(s,m,n) produces  the  substring  of s which  starts  at 
              position  m (with  origin  one),   of length  n. 
              If  n  is omitted or too big,  the rest  of  the 
              string is used,  while  if m is out of range the 
              result is a null string. 
:INCLUDE 

Files   may   be   inserted   into the input  stream  via  the 
"include" command. The statement 

          include filename 
or 
          include "filename" 

inserts  the  file  found on input file  "filename"  into  the 
RATFOR   input in  place  of  the  include   statement.   This  
is especially useful in inserting common blocks.

See the example on the next screen.

Include example:

          function exampl (x)
          include comblk
          exampl = x + z
          return
          end
          
might translate into
          
          function exampl (x)
          common /comblk/ q, r, z
          exampl = x + z
          return
          end


Implementation 
==============

RATFOR was originally written in C,   a  high-level  language,  
on  the  Unix  operating  system.  Our version is  written  in 
RATFOR itself, originally brought up by a bootstrap written in 
FORTRAN. 

RATFOR  generates code by reading input files and  translating  
any RATFOR  keywords  into  standard  FORTRAN.  Thus,  if  the 
first  token  (word) on a source line is not a  keyword  (like 
"for",   "while",   etc.)  the   entire  statement  is  simply 
copied  to the output with appropriate character   translation  
and   formatting.   RATFOR  knows  very   little FORTRAN   and  
thus  does not handle any FORTRAN error detection.  Errors  in 
RATFOR keyword syntax are generally  noted  by  a  message  to  
the user's  terminal  along  with  an indication of the source 
line number which caused the problem. 


Conclusions
===========

RATFOR   demonstrates  that  with  modest   effort    FORTRAN-
based programmers  can  increase their productivity by using a 
language  that  provides them  with  the  control   structures  
and  cosmetic  features essential  for structured  programming 
design.  Debugging  and subsequent revision  times  are   much  
faster   than  the  equivalent  efforts  in  FORTRAN,   mainly  
because  the code can be easily read.  Thus it becomes  easier  
to  write  code  that  is   readable,   reliable,   and   even 
esthetically    pleasing,    as   well   as   being   portable  
to  other environments. 


Other Reference Literature 
==========================

1)  Kernighan,   Brian  W.,   "RATFOR--a  Preprocessor  for  a  
    Rational  FORTRAN".   Software - Practice and  Experience, 
    Vol. 5, 4 (Oct-Dec 75), pp. 395-406. 

2)  Kernighan,   Brian  W.   and  P.  J.  Plauger,   "Software   
    Tools". Addison-Wesley Publishing Company, Reading, Mass., 
    1976. 

3)  The RATFOR user document 

4)  The Unix command "rc" in the Unix Manual (RC(I)) 

5)  This HELP file was built from the RATFOR.PRM file from the 
    "Software Tools" CP/M disks. Volume 24, file 28 in the BDS 
    "C" online catalogue, BDSCAT.ALL.

The  only one of these which is likely to be readily available 
to most microcomputer users is the "Software Tools" book. This 
is  highly recommended as a general text even if you  are  not 
particularly interested in RATFOR.

