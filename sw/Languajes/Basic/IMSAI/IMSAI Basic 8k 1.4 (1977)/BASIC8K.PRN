	MACRO-80 3.44	09-Dec-81	PAGE	1


                                ;EDITS:
                                ;    30-JUN-08 KJL
                                ;       - CREATED FROM IMSAI 8K BASIC VERSION 1.4 MANUAL
                                ;
                                ;    07-FEB-14 UM
                                ;	- FIXED TYPOS, MATCHES MANUAL NOW
                                ;
                                ;    31-NOV-19 RSV
                                ;       - ASSEMBLE FOR CPM. BYE COMMAND RETURNS TO CP/M
                                ;       - CONVERTED TO MICROSOFT M80 CONDITIONAL COMPILE SYNTAX 
                                ;       - REMOVE SENDING $FF TO CONSOLE AFTER EACH CRLR
                                ;       - ORIGINAL CODE USES BIOS FUNCTION 2 TO SENSE KEY PRESSED ON CHECK
                                ;         FOR ^C WHILE BASIC PROG IS RUNNING. REPLACED CODE IN TSTCC FUNC TO USE
                                ;         BDOS CALL 6 (DIRECT CONSOLE I/O READ NONBLOCKING)
                                ;       - REMOVE PUCH OFF (PCHOF) ASCII SEQUENCE PRINT ON FATAL ERROR
                                ;       - NEW IO ERROR (OPEN FILE NOT FOUND, INVALID FILENAME, LOAD/SAVE ERROR)
                                ;       - SAVE FILENAME.EXT, TAPE FILENAME.EXT COMMANDS: SAVE/LOAD TEXT FILE AS BASIC 
                                ;         SOURCE (AS IT WAS PUNCGES/READ TO/FROM PAPER TAPE)
                                ;
                                ;---------------------------------------------------------
                                ; BASIC30.ASM   1.4     05/19/77        JRB     8K BASIC
                                ; BASICS2.ASM   1.401   05/11/77        DK      8K BASIC
                                ; BASIC19.ASM   1.401   05/11/77        DH
                                ; BASIC18.ASM   1.401   05/10/77        JRB
                                ; BASIC16.ASM   1.401   05/09/77        DH
                                ; BASIC11.ASM   1.401   05/04/77        DH
                                ; BASIC10.ASM   1.401   05/03/77        DH
                                ; BASIC8.ASM    1.401   05/02/77        DH
                                ;
                                ; IMSAI 8K-9K BASIC
                                ;
                                ; COPYRIGHT (C) 1977
                                ; IMSAI MANUFACTURING CORPORATION
                                ; 14860 WICKS BLVD, SAN LEANDRO CALIFORNIA  94577
                                ;
                                ; CORRECTION HISTORY:
                                ;
                                ;  02/25/77  - FIXED BEGPR POINTERS
                                ;            - FIXED LOG(X) FOR 0.5 < X < 1.0
                                ;            - FIXED SQR(X) FOR 0.0 < X < 0.5
                                ;            - FIXED SCI NOTATION INPUT ROUTINE
                                ;            - FIXED EDIT ROUTINE WHEN PROGRAM ENDS ON
                                ;              00 BOUNDARY (SYSTEM USED TO GO AWAY)
                                ;            - ADDED XEQ COMMAND (LIKE RUN BUT KEEPS DATA)
                                ;            - SOFTWARE MEMORY PROTECT OF 1ST 9K IMPLIMENTED
                                ;            - FIXED TAB FOR BACKWARDS MOVEMENT
                                ;            - FIXED OV ERROR FOR SMALL X IN TRIG,LOG & EXP
                                ;            - ADDED PROGRAM CHAINING CAPABILITY.
                                ;            - FIXED EXP(X) ROUTINE FOR LARGE X.
                                ;            - ADDED PEEK(X) COMMAND
                                ;            - ADDED POKE A,X COMMAND
                                ;            - ADDED CALL A COMMAND
                                ;  04/02/77  - ADDED TARBEL CASSETTE SAVE AND LOAD
                                ;            - ADDED FIX LINE EDITOR
                                ;            - RENAMED NATURAL LOG TO LN(X)
                                ;            - ADDED BASE 10 LOG AS LOG(X)
	MACRO-80 3.44	09-Dec-81	PAGE	1-1


                                ;            - ALLOWED FOR DAZZLER IN OUTPUT ROUTINE
                                ;            - ADDED LINE # SEARCH UTILITY (LOCAT EQU $)
                                ;            - ADDED TABLE SEARCH UTILITY (SEEK EQU $)
                                ;            - ARRAYS CAN NOW HAVE > 256 ELEMENTS PER DIM
                                ;  04/09/77  - ADDED CONDITIONAL ASSY PARAMS FOR 8 AND 9K
                                ;            - FIXED POWER ERROR. (X^B WHEN B=0 GAVE X^2.)
                                ;            - ADDED CONTROL H AS PHYSICAL RUBOUT OF CHAR
                                ;  04/27/77  - CHANGE RST'S TO RUN UNDER CP/M
                                ;            - ADDED EXPRESSION EVALUATER FIX
                                ;            - LOAD UNDER CP/M
                                ;  05/02/77  - ADD DDT, BYE COMMANDS, BIOS I/O
                                ;  05/03/77  - OPTIMIZE FUNCTION ITERATION LOOP (SIN5)
                                ;            - SO UNDERFLOW CAN BE MADE NON-FATAL
                                ;  05/04/77  - OPTIMIZE SIN(X) ROUTINE
                                ;            - ADD NON-FATAL ERRORS
                                ;  05/09/77  - SQUISH TO INCLUDE PEEK,POKE,CALL IN 8K
                                ;  05/11/77  - MAKE RND(X) USE X AS RANGE; X^0->1,0^X->0
                                ;            - TAB(N) GO TO NEXT LINE IF PAST POSITION
                                ;  05/12/77  - BUG IN NESTED FOR'S AND REENTERED FOR'S FIXED
                                ;
                                ; ASSEMBLY PARAMETERS:
  0001                                  LARGE   EQU     1       ;-1=9K ASSEMBLY, 0=8K
  0001                                  CPM     EQU     1       ;-1=RUN UNDER CPM
  0000                                  HUNTER  EQU     0       ;-1= INCLUDE BAUD COMMAND
                                ;
                                ; CPM EQUATES
                                ;
  0000                                  BOOT    EQU     0       ;WARM BOOT
  0005                                  BDOS    EQU     5       ;BDOS ENTRY
  0100                                  TBASE   EQU     0100H   ;PROGRAM LOAD UNDER CPM
  0003                                  CSTAT   EQU     3       ;OFFSET OF CONSOLE STATUS
                                                                ;...QUERY IN BIOS TABLE
                                ;
                                ; BASIC EQUATES
                                ;
  00F7                                  FATAL   EQU     0F7H    ;CODE FOR FATAL IS RST 6
                                        
  0000'                                 ASEG
                                        .8080
                                        
                                ;       RSV: Original 		IF      NOT         
                                ;            is converted to    IFF          that is the M80.COM syntax (IF False)
                                ;
  0000                          BASIC:  IFF     CPM
                                        ORG     0
                                        LXI     H,RAM+1024
                                        MVI     A,0AEH  ;START OF INIT SEQUENCE
                                        JMP     INIT1   ;FINISH INIT
                                        ENDIF
                                ;
                                        IF      CPM
                                        ORG     TBASE
  0100    C3 25DC                       JMP     INITC   ;USE TEMPORARY CODE AT END
                                        ENDIF
                                ;
                                ;       ORG     8
	MACRO-80 3.44	09-Dec-81	PAGE	1-2


                                ;
                                ; SKIP CHARS POINTED BY H,L UNTIL NON-BLANK,
                                ; LEAVE IN REG A
                                ;
  0103    7E                    RST1:   MOV     A,M     ;LOAD THE BYTE AT (H,L)
  0104    FE 20                         CPI     ' '     ;TEST IF BLANK
  0106    C0                            RNZ             ;RETURN IF NOT
  0107    23                            INX     H       ;POINT NEXT
  0108    C3 0103                       JMP     RST1    ;LOOP
                                ;
                                ;
                                ;       ORG     16
                                ;
                                ; COMPARE STRING AT (H,L) TO STRING AT (D,E)
                                ; RETURN IF EQUAL (THRU X'00' IN D,E) OR ON FIRST NOT EQUAL
                                ; ONLY THE FIRST THREE CHARS NEED BE EQUAL
                                ; IGNORE ALL SPACES
                                ;
  010B    C5                    RST2:   PUSH    B       ;SAVE B,C
  010C    06 00                         MVI     B,0     ;INIT COUNT
  010E    CF                    COMP1:  RST     1       ;SKIP SPACES
  010F    1A                            LDAX    D       ;GET CHAR TO MATCH WITH
  0110    C3 1BAD                       JMP     COMP2   ;CONTINUE ELSEWHERE
                                ;
                                ;
                                ;       ORG     24
                                ;
                                ; STORE THE FLOATING POINT ACCUMULATOR AT (H,L)
                                ;
  0113    11 259F               RST3:   LXI     D,FACC  ;POINT FLOAT ACC
  0116    06 04                         MVI     B,4     ;BYTE COUNT
  0118    C3 1D85                       JMP     COPYD   ;GO MOVE IT
                                ;
                                ;
                                ;       ORG     32
                                ;
                                ; INCREMENT H,L BY BYTE AT (SP), RETURN TO (SP)+1
                                ;
  011B    E3                    RST4:   XTHL            ;GET RETURN ADDRESS IN H,L
  011C    7E                            MOV     A,M     ;GET THE INCREMENT
  011D    23                            INX     H       ;POINT TRUE RETURN
  011E    E3                            XTHL            ;PUT BACK TO STACK
  011F    D5                            PUSH    D       ;SAVE D,E
  0120    C3 0132                       JMP     RST4A   ;CONTINUE
                                ;
                                ;
                                ;       ORG     40
                                ;
                                ; LOAD THE FLOATING POINT ACCUM WITH THE 4 BYTES AT (H,L)
                                ;
  0123    11 259F               RST5:   LXI     D,FACC  ;POINT FLOAT ACC
  0126    06 04                         MVI     B,4     ;BYTE COUNT
  0128    C3 1D90                       JMP     COPYH   ;GO MOVE IT
                                ;
                                ;
                                ;       ORG     48
	MACRO-80 3.44	09-Dec-81	PAGE	1-3


                                ;
                                ; PRINT:  'XX ERR & NNN'
                                ; **** IF ERROR MESSAGE CHANGES TO A DIFFERENT RST,
                                ; **** ...CHANGE "FATAL" EQUATE
                                ;
  012B    E3                    RST6:   XTHL            ;SAVE HL, GET ERROR CODE PTR
  012C    F5                            PUSH    PSW     ;SAVE REGS
  012D    D5                            PUSH    D
  012E    C5                            PUSH    B
  012F    C3 1D69                       JMP     ERROR   ;CONTINUE
                                ;
                                        IFF     CPM
                                        ORG     59      ;LEAVE 3 BYTES FOR DDT
                                        ENDIF
                                ;
  0132    5F                    RST4A:  MOV     E,A     ;PUT IN LOW
  0133    B7                            ORA     A       ;TEST SIGN
  0134    16 00                         MVI     D,0     ;DEFAULT POSITIVE
  0136    F2 013B                       JP      RST4B   ;BRIF +
  0139    16 FF                         MVI     D,0FFH  ;ELSE, NEG
  013B    19                    RST4B:  DAD     D       ;BUMP H,L
  013C    D1                            POP     D       ;RESTORE D,E
  013D    C9                            RET             ;RETURN
                                ;PAGE
  013E    43 4F 50 59                   DB      'COPYRIGHT (C) 1977 '
  0142    52 49 47 48           
  0146    54 20 28 43           
  014A    29 20 31 39           
  014E    37 37 20              
  0151    49 4D 53 41                   DB      'IMSAI MFG CORP '
  0155    49 20 4D 46           
  0159    47 20 43 4F           
  015D    52 50 20              
  0160    53 41 4E 20                   DB      'SAN LEANDRO CA 94577 USA'
  0164    4C 45 41 4E           
  0168    44 52 4F 20           
  016C    43 41 20 39           
  0170    34 35 37 37           
  0174    20 55 53 41           
                                ;
                                ; INITIALIZATION ROUTINE
                                ; DETERMINE MEMORY SIZE.
                                ;    (START AT 9K AND TRY 1K INCREMENTS TILL END)
                                ; SETUP POINTERS FOR STACK, DATA, AND PROGRAM
                                ; INIT SIO BOARD
                                ;
  0178                          INIT1:  IFF     CPM
                                        OUT     TTY+1   ;INIT TERMINAL
                                        MVI     A,40H
                                        OUT     TTY+1
                                        MVI     A,0BAH
                                        OUT     TTY+1
                                        MVI     A,37H
                                        OUT     TTY+1
                                        LXI     B,1024  ;1K INCR
                                INIT2:  MOV     A,M     ;GET A BYTE FROM MEMORY
	MACRO-80 3.44	09-Dec-81	PAGE	1-4


                                        CMA             ;COMPLEMENT
                                        MOV     M,A     ;REPLACE
                                        CMP     M       ;TEST IF RAM/ROM/END
                                        JNZ     INIT3   ;BRIF OUT OF RAM
                                        CMA             ;RE-COMPLEMENT
                                        MOV     M,A     ;PUT ORIG BACK
                                        DAD     B       ;POINT NEXT BLOCK
                                        JNC     INIT2   ;LOOP
                                        ENDIF
                                ;
  0178    F9                    INIT3:  SPHL            ;SET STACK POINTER TO END OF MEMORY
  0179    01 FF00                       LXI     B,-256 ;ALLOW 256 BYTES FOR STACK
  017C    09                            DAD     B       ;ADD TO ADDRESS
  017D    22 25D8                       SHLD    DATAB   ;SAVE ADDR OF START OF DATA
                                ;
                                ; SOFTWARE WRITE PROTECT OF FIRST 9K OF RAM.
                                ;
                                ; BUT NO PROTECT UNDER CPM OR FOR 8K (EPROM) VERSION
                                        IF      LARGE 
                                        IFF     CPM
                                        MVI     A,2     ;SET PROTECT OF FIRST 1K BLOCK
                                PROTC:  OUT     0FEH    ;SEND IT
                                        ADI     4       ;ADDRESS NEXT 1K BLOCK
                                        CPI     26H     ;STOP AFTER 9 BLOCKS
                                        JNZ     PROTC   ;CONTINUE TO PROTECT
                                        ENDIF
                                        ENDIF
                                        
  0180    AF                            XRA     A       ;GET A ZERO IN A
  0181    F5                            PUSH    PSW     ;SET STACK 1 LEVEL DEEP WITHOUT A GOSUB
  0182    21 0000                       LXI     H,0     ;CLEAR H,L
  0185    39                            DAD     SP      ;SP TO H,L
  0186    22 25D2                       SHLD    STACK   ;SAVE BEG OF STACK
  0189    CD 022D                       CALL    IRAM    ;INIT RAM
  018C    11 1EAB                       LXI     D,NRNDX ;POINT TO RANDOM # SERIES
  018F    06 08                         MVI     B,8     ;LOAD COUNT
  0191    CD 1D85                       CALL    COPYD   ;COPY TO TRND<X> IN RAM TABLE
  0194    36 02                         MVI     M,2     ;SET RANDOM SWITCH
                                        IF      CPM
  0196    CD 026F                       CALL    NEW0    ;AUTOMATIC "NEW"
                                        ENDIF       
  0199    21 1EB8                       LXI     H,VERS  ;POINT VERSION MESSAGE
  019C    CD 1AD0               RDYM:   CALL    TERMM   ;WRITE IT
                                ;
  019F                          RDY     EQU     $
                                ;
                                ; PRINT 'READY'
                                ;
  019F    21 1F6A                       LXI     H,READY ;POINT READY MSG
  01A2    CD 1AD0                       CALL    TERMM   ;GO PRINT IT
                                ;
  01A5                          GETCM   EQU     $
                                ;
                                ;
                                ; COMMAND INPUT ROUTINE
                                ;
	MACRO-80 3.44	09-Dec-81	PAGE	1-5


                                ; READ A LINE FROM THE TTY
                                ; IF STARTS WITH NUMERIC CH, ASSUME IT'S A BASIC STATEMENT
                                ; IF NOT, IT IS EITHER AN IMMEDIATE STATMENT, OR A COMMAND
                                ;
  01A5    3E 3A                         MVI     A,':'   ;PROMPT & ON SET FOR SW
  01A7    32 23BD                       STA     EDSW    ;SET MODE=EDIT
  01AA    2A 25D2                       LHLD    STACK   ;GET STACK ADDRESS
  01AD    F9                            SPHL            ;SET REG SP
  01AE    CD 19F5                       CALL    TERMI   ;GET A LINE
  01B1    CD 1BE9                       CALL    PACK    ;GO PACK THE NUMBER INTO B,C
  01B4    78                            MOV     A,B     ;GET HI BYTE OF LINE NUMBER
  01B5    B1                            ORA     C       ;PLUS LOW BYTE
  01B6    CA 0240                       JZ      EXEC    ;BRIF EXEC STATEMENT
  01B9    C5                            PUSH    B       ;SAVE LINE NUMBER
  01BA    11 23C4                       LXI     D,IMMED+1       ;POINT SAVE AREA
  01BD    EB                            XCHG            ;FLIP/FLOP
  01BE    70                            MOV     M,B     ;PUT LO LINE
  01BF    23                            INX     H       ;POINT NEXT
  01C0    71                            MOV     M,C     ;PUT LO LINE
  01C1    23                            INX     H       ;POINT NEXT
  01C2    06 03                         MVI     B,3     ;INIT COUNT
  01C4    1A                    EDIT1:  LDAX    D       ;GET A BYTE
  01C5    77                            MOV     M,A     ;PUT IT DOWN
  01C6    04                            INR     B       ;COUNT IT
  01C7    23                            INX     H       ;POINT NEXT
  01C8    13                            INX     D       ;DITTO
  01C9    B7                            ORA     A       ;TEST BYTE JUST MOVED
  01CA    C2 01C4                       JNZ     EDIT1   ;LOOP
  01CD    78                            MOV     A,B     ;GET COUNT
  01CE    32 23C3                       STA     IMMED   ;STORE THE COUNT
  01D1    C1                            POP     B       ;GET LINE NUM
  01D2    CD 20C9                       CALL    LOCAT   ;GO FIND REQUESTED LINE NUMBER
  01D5    E5                            PUSH    H       ;SAVE H,L
  01D6    DA 01F0                       JC      EDIT5   ;BRIF IF LINE NOT FOUND
  01D9    54                    EDIT2:  MOV     D,H     ;COPY ADDR
  01DA    5D                            MOV     E,L     ;TO D,E
  01DB    06 00                         MVI     B,0     ;GET A ZERO
  01DD    4E                            MOV     C,M     ;GET LEN
  01DE    09                            DAD     B       ;POINT NEXT STMT
  01DF    7E                    EDIT3:  MOV     A,M     ;GET LEN NEXT STMT
  01E0    B7                            ORA     A       ;TEST IT
  01E1    CA 01EB                       JZ      EDIT8   ;BRIF END
  01E4    47                            MOV     B,A     ;SET LENGTH
  01E5    CD 1D90                       CALL    COPYH   ;ELSE MOVE LINE
  01E8    C3 01DF                       JMP     EDIT3   ;LOOP
  01EB    EB                    EDIT8:  XCHG            ;PUT NEW ADDR TO H,L
  01EC    77                            MOV     M,A     ;MARK END
  01ED    22 25DA                       SHLD    PROGE   ;AND UPDATE ADDRESS
  01F0    3A 23C3               EDIT5:  LDA     IMMED   ;GET LEN OF INSERT
  01F3    FE 04                         CPI     4       ;TEST IF DELETE
  01F5    CA 01A5                       JZ      GETCM   ;BRIF IS
  01F8    4F                            MOV     C,A     ;SET LO LEN
  01F9    06 00                         MVI     B,0     ;ZERO HI LEN
  01FB    2A 25DA                       LHLD    PROGE   ;GET END OF PROG
  01FE    54                            MOV     D,H     ;COPY TO
  01FF    5D                            MOV     E,L     ;D,E
	MACRO-80 3.44	09-Dec-81	PAGE	1-6


  0200    09                            DAD     B       ;DISP LEN OF INSERT
  0201    22 25DA                       SHLD    PROGE   ;UPDATE END POINT
  0204    C1                            POP     B       ;GET ADDR
  0205    1A                    EDIT6:  LDAX    D       ;GET A BYTE
  0206    77                            MOV     M,A     ;COPY IT
  0207    1B                            DCX     D       ;POINT PRIOR
  0208    2B                            DCX     H       ;DITTO
  0209    7A                            MOV     A,D     ;GET HI ADDR
  020A    B8                            CMP     B       ;COMPARE
  020B    CA 0211                       JZ      EDIT7   ;BRIF HI EQUAL
  020E    D2 0205                       JNC     EDIT6   ;BRIF NOT LESS
  0211    7B                    EDIT7:  MOV     A,E     ;GET LO ADDR
  0212    B9                            CMP     C       ;COMPARE
  0213    D2 0219                       JNC     ED7A    ;MUST TEST FOR 00 BOUNDARY
  0216    C3 0222                       JMP     ED7B    ;GO AROUND BOUNDARY TEST CODE
  0219    2F                    ED7A:   CMA             ;COMPLIMENT LOW LINE NUMBER
  021A    B9                            CMP     C       ;AND COMPARE TO START
  021B    C2 0205                       JNZ     EDIT6   ;BRIF NOT =
  021E    B7                            ORA     A       ;NOT TEST FOR 00
  021F    C2 0205                       JNZ     EDIT6   ;THIS IS USUAL CASE
  0222    13                    ED7B:   INX     D       ;POINT FORWARD
  0223    21 23C3                       LXI     H,IMMED ;POINT INSERT
  0226    46                            MOV     B,M     ;GET LENGTH
  0227    CD 1D90                       CALL    COPYH   ;GO MOVE IT
  022A    C3 01A5                       JMP     GETCM   ;GO GET ANOTHER COMMAND
                                ;
                                ; IRAM          INITIALIZE RAM
                                ;       ZEROES RAM FROM BZERO TO EZERO
                                ;       INITS RANDOM # CONSTANTS
                                ;       RETURNS H=PTR TO TRND
                                ;
  022D    21 2347               IRAM:   LXI     H,BZERO ;CLEAR BZERO->EZERO
  0230    06 77                         MVI     B,EZERO-BZERO
  0232    CD 1D96                       CALL    ZEROM
  0235    11 1EAB                       LXI     D,NRNDX ;MOVE RANDOM # SERIES TO RNDX
  0238    21 25BE                       LXI     H,RNDX
  023B    06 08                         MVI     B,8     ;COUNT
  023D    C3 1D85                       JMP     COPYD   ;MOVE IT & RETURN
                                ;PAGE
  0240                          EXEC    EQU     $
                                ;
                                ;
                                ; DECODE COMMAND IN IOBUFF
                                ; EXECUTE IF POSSIBLE
                                ; THEN GOTO GET NEXT COMMAND
                                ;
                                ;
  0240    32 25BB                       STA     MULTI   ;RESET MULTI SW
  0243    32 25CF                       STA     FNMOD   ;RESET FN TYPE
  0246    3C                            INR     A       ;GET A ONE
  0247    32 23BC                       STA     RUNSW   ;SET IMMEDIATE MODE
  024A    21 2416                       LXI     H,IOBUF+1       ;POINT SMT
  024D    11 23C3                       LXI     D,IMMED ;POINT NEW AREA
  0250    7E                    EXEC1:  MOV     A,M     ;GET A BYTE
  0251    12                            STAX    D       ;PUT TO (D,L)
  0252    13                            INX     D       ;POINT NEXT
	MACRO-80 3.44	09-Dec-81	PAGE	1-7


  0253    23                            INX     H       ;DITTO
  0254    B7                            ORA     A       ;TEST BYTE
  0255    C2 0250                       JNZ     EXEC1   ;CONTINUE
  0258    21 1F30                       LXI     H,NULLI ;POINT NO LINE NUM
  025B    22 25D0                       SHLD    LINE    ;SAVE ADDR
  025E    21 23C3                       LXI     H,IMMED ;POINT START OF CMMD
  0261    C3 0318                       JMP     RUN3    ;GO INTO RUN PROCESSOR
                                ;
  0264                          NEW     EQU     $
                                ;
                                ; NEW COMMAND
                                ; 'NEW'==>CLEAR PROGRAM AND DATA
                                ; 'NEW*'==>CLEAR PROGRAM ONLY
                                ;
  0264    E5                            PUSH    H       ;SAE PTR
  0265    21 01A5                       LXI     H,GETCM ;MAKE SUBROUTINE
  0268    E3                            XTHL            ;RESTORE H
  0269    CF                            RST     1       ;GET 1ST NON-BLANK CHAR AFTER 'NEW'
  026A    DE 2A                         SBI     '*'     ;TEST
  026C    CA 0274                       JZ      NEW1    ;BRIF PROGRAM CLEAR ONLY
  026F    AF                    NEW0:   XRA     A       ;GET A ZERO
  0270    2A 25D8                       LHLD    DATAB   ;POINT DATA AREA
  0273    77                            MOV     M,A     ;CLEAR IT
  0274    21 280C               NEW1:   LXI     H,BEGPR ;POINT START
  0277    22 25DA                       SHLD    PROGE   ;RESET PROGRAM END
  027A    77                            MOV     M,A     ;CLEAR IT
  027B    C9                            RET
                                ;
  027C                          FREE    EQU     $
                                ;
                                ; FREE COMMAND
                                ; COMPUTE AMOUNT OF AVAILABLE STORAGE (EXCLUDING DATA AREA)
                                ;
  027C    2A 25D8                       LHLD    DATAB   ;GET DATA BEG ADDRESS
  027F    EB                            XCHG            ;PUT IN D,E
  0280    2A 25DA                       LHLD    PROGE   ;GET PROGRAM END ADDRESS
  0283    7B                            MOV     A,E     ;LO ADDR TO REG A
  0284    95                            SUB     L       ;SUBTRACT
  0285    5F                            MOV     E,A     ;SAVE IT
  0286    7A                            MOV     A,D     ;HI ADDR TO REG A
  0287    9C                            SBB     H       ;SUBTRACT
  0288    57                            MOV     D,A     ;SAVE IT
  0289    CD 1DC1                       CALL    BINFL   ;GO FLOAT D,E
  028C    21 2415                       LXI     H,IOBUF ;POINT BUFFER
  028F    CD 15E1                       CALL    FOUT    ;GO CONVERT TO OUTPUT
  0292    36 00                         MVI     M,0     ;MARK END
  0294    CD 1AC8                       CALL    TERMO   ;GO WRITE IT
  0297    C3 01A5                       JMP     GETCM   ;CONTINUE
                                ;
  029A                          TAPE    EQU     $
                                ;
                                ; TAPE COMMAND. DON'T ECHO INPUT. CONTINUE UNTIL KEY
                                ; COMMAND.
                                ;
                                ; RSV-GET FILENAME, OPEN IT AND SET TAPE INPUT FLAG
                                ;     FILE IS NOW READED AS IT WAS THE PAPER TAPE INPUT
	MACRO-80 3.44	09-Dec-81	PAGE	1-8


                                ;
  029A    CF                    	RST     1       ;SKIP ANY SPACES
  029B    EB                    	XCHG
  029C    CD 2660                       CALL    OPENFR  ;RSV-OPEN FILE TO READ 
  029F    FE 00                         CPI     0
  02A1    C2 1D5B                       JNZ     IOERR
  02A4    3E 01                         MVI     A,1     ;RSV-SET TAPE INPUT SWITCH
  02A6    32 23B8                       STA     TAPES   ;RSV-STORE IT
                                ;       MVI     A,11H   ;GET DC1 (=READER ON)
                                ;       CALL    TESTO   ;WRITE IT
  02A9    C3 01A5                       JMP     GETCM   ;GO PROCESS INPUT
                                ;
  02AC                          ENDIT   EQU     $
                                ;
                                ; END COMMAND. IF TAPE PUNCH SWITCH IS ON, PUNCH 'KEY' THEN
                                ; CONTINUE
                                ;
                                ; RSV-END OF SAVE. DO NOT NEED TO PUT TRAILER
                                ;
  02AC    3A 23B8                       LDA     TAPES   ;GET PAPER TAPE SWITCH
  02AF    FE 02                         CPI     2       ;TEST FOR SAVE
  02B1    C2 019F                       JNZ     RDY     ;BRIF NOT
  02B4    3E 1A                         MVI	A,CNTRLZ;ADD ^Z AS EOF CHAR ON TEXT FILES
  02B6    CD 27C8                       CALL    SAV1
  02B9    B7                            ORA     A
  02BA    C2 1D5B                       JNZ     IOERR              
  02BD    CD 27EF                       CALL    SAV2    ;CLOSE SAVE FILE
  02C0    B7                            ORA     A
  02C1    C2 1D5B                       JNZ     IOERR              
                                ;       LXI     H,KEYL  ;POINT 'KEY'
                                ;       CALL    TERMM   ;WRITE IT
                                ;       CALL    HDRTL   ;GO PUT TRAILER
                                ;
                                ; KEY COMMAND. RESET TAPE SWITCH. TURN READER OFF
                                ;
  02C4    3A 23B8               KEY:    LDA     TAPES   ;RSV-IF TAPE IS 0 (NOT LOAD NOR SAVE DONE)
  02C7    B7                            ORA     A       ;
  02C8    CA 019F                       JZ      RDY     ;RSV-   THEN REGULAR EXIT TO PRINT READY
  02CB    CD 2651                       CALL    CLOSEF  ;RSV-   ELSE CLOSE THE FILE
  02CE    AF                            XRA     A       ;RESET TAPE SWITCH
  02CF    32 23B8                       STA     TAPES
  02D2    C3 019F                       JMP     RDY     ;RSV-DO NOT NEED TO PRINT POFF. JUST PRINT READY 
                                ;       LXI     H,PCHOF ;POINT READER/PUNCH OFF
                                ;       JMP     RDYM    ;PRINT POFF+READY MESSAGE
                                ;
                                ;HDRTL   EQU     $
                                ;
                                ; PUNCH HEADER OR TRAILER ON PAPER TAPE.
                                ;
                                ;       MVI     B,25    ;LOAD COUNT
                                ;HDR1:  MVI     A,0FFH  ;LOAD RUBOUT
                                ;       CALL    TESTO   ;WRITE IT
                                ;       DCR     B       ;DECREMENT COUNT
                                ;       XRA     A       ;ZERO A
                                ;       CMP     B       ;TEST COUNT
                                ;       RZ              ;RETURN ON ZERO
	MACRO-80 3.44	09-Dec-81	PAGE	1-9


                                ;       JMP     HDR1    ;CONTINUE
                                ;PAGE
                                ;
                                ; RUN PROCESSOR, GET NEXT STATMENT, AND EXECUTE IT
                                ; IF IN IMMEDIATE MODE, THEN RETURN TO GETCMMD
                                ;
  02D5    AF                    RUNCM:  XRA     A       ;PUT A ZERO TO A
  02D6    2A 25D8                       LHLD    DATAB   ;GET ADDRESS OF DATA POOL
  02D9    77                            MOV     M,A     ;INITIALIZE TO 0
  02DA                          XEQ     EQU     $       ;START FOR EXECUTION WITH OLD DATA
  02DA    CD 022D                       CALL    IRAM    ;INITALIZE START OF RAM
  02DD    21 280B                       LXI     H,BEGPR-1       ;POINT 1 PRIOR TO BEGIN
  02E0    22 25D6                       SHLD    DATAP   ;RESTORE DATA STMT POINTER
  02E3    36 00                         MVI     M,0     ;RESET DATA STMT POINTER
  02E5    23                            INX     H       ;POINT TO START
  02E6    22 25B7                       SHLD    STMT    ;SAVE IT
  02E9    C3 0306                       JMP     RUN2    ;GO PROCESS IT
                                ;
                                ; STATEMENTS RETURN HERE TO CONTINUE PROCESSING
  02EC    21 25BB               RUN:    LXI     H,MULTI ;POINT MULTIPLE SWITCH
  02EF    7E                            MOV     A,M     ;GET SW
  02F0    B7                            ORA     A       ;TEST IT
  02F1    CA 02FC                       JZ      RUN1    ;BRIF NOT ON
  02F4    36 00                         MVI     M,0     ;ELSE, RESET IT
  02F6    2A 25B9                       LHLD    ENDLI   ;GET ADDRESS
  02F9    C3 0318                       JMP     RUN3    ;GO PROCESS REMAIN
  02FC    2A 25B7               RUN1:   LHLD    STMT    ;ELSE, GET ADDR OF PREV STMT
  02FF    5E                            MOV     E,M     ;GET LEN CODE
  0300    16 00                         MVI     D,0     ;CLEAR HIGH BYTE OF ADDR
  0302    19                            DAD     D       ;INCR STMT POINTER
  0303    22 25B7                       SHLD    STMT    ;SAVE IT
  0306    3A 23BC               RUN2:   LDA     RUNSW   ;GET RUN TYPE
  0309    B7                            ORA     A       ;TEST IT
  030A    C2 01A5                       JNZ     GETCM   ;BRIF IMMEDIATE MODE
  030D    7E                            MOV     A,M     ;GET LEN CODE
  030E    B7                            ORA     A       ;TEST IF END
  030F    CA 02AC                       JZ      ENDIT   ;BRIF IS
  0312    23                            INX     H       ;POINT LINE NUMBER
  0313    22 25D0                       SHLD    LINE    ;SAVE ADDR
  0316    23                            INX     H       ;POINT 2ND BYTE
  0317    23                            INX     H       ;POINT 1ST PGM BYTE
                                ;
                                ; ENTER HERE TO DO IMMEDIATE COMMAND
  0318    CF                    RUN3:   RST     1       ;SKIP BLANKS
  0319    22 2599               RUN4:   SHLD    ADDR1   ;SAVE ADDR
  031C    CD 1B4D                       CALL    TSTCC   ;GO SEE IF CONTROL-C OR O
  031F    11 1F90                       LXI     D,JMPTB ;POINT TO TABLE
  0322    CD 20F1                       CALL    SEEK1   ;GO SEARCH COMMAND TABLE
  0325    CA 0330                       JZ      RUN7    ;BRIF COMMAND NOT FOUND
  0328    E5                            PUSH    H       ;SAVE H,L
  0329    1A                            LDAX    D       ;LOAD LOW BYTE
  032A    6F                            MOV     L,A     ;LOW BYTE TO L
  032B    13                            INX     D       ;POINT NEXT
  032C    1A                            LDAX    D       ;LOAD HIGH BYTE
  032D    67                            MOV     H,A     ;HIGH BYTE TO H
  032E    E3                            XTHL            ;COMMAND ADDRESS TO STACK
	MACRO-80 3.44	09-Dec-81	PAGE	1-10


  032F    C9                            RET             ;JUMP TO ROUTINE
  0330    2A 2599               RUN7:   LHLD    ADDR1   ;RESTORE H,L POINTER
  0333    C3 06E2                       JMP     LET     ;ASSUME IT'S LET STMT
                                ;PAGE
                                ;
                                ; SAVE COMMAND. TURN THE PUNCH ON THEN LIST PROGRAM
                                ;
  0336    CF                    SAVE:   RST     1       ;SKIP ANY SPACES
  0337    EB                    	XCHG
  0338    CD 27AF                       CALL    OPENFW  ;RSV-OPEN FILE TO WRITE
  033B    B7                            ORA     A
  033C    C2 1D5B                       JNZ     IOERR
  033F    3E 02                 	MVI     A,2     ;SET PUNCH MODE
  0341    32 23B8                       STA     TAPES
  0344    21 0000                       LXI     H,0     
  0347    22 2592                       SHLD    LINEL   ;LOW LINE NUMBER IN H,L=0 TO SAVE
  034A    21 9999                       LXI     H,9999H 
  034D    22 2594                       SHLD    LINEH   ;HIGH LINE NUMBER IN H,L=9999 TO SAVE
  0350    C3 0383                       JMP     LIST1        
                                ;       MVI     A,12H   ;GET DC2 (=PUNCH ON)
                                ;       CALL    TESTO   ;WRITE IT
                                ;       CALL    HDRTL   ;GP PUT HEADER
                                ;
  0353                          LIST    EQU     $
                                ;
                                ;
                                ; LIST PROCESSOR
                                ; DUMP THE SOURCE PROGRAM TO TTY OR PAPER TAPE
                                ;
  0353    CF                            RST     1       ;SKIP TO NON BLANK
  0354    11 0000                       LXI     D,0     ;GET A ZERO IN D
  0357    EB                            XCHG            ;FLIP TO H,L
  0358    22 2592                       SHLD    LINEL   ;SAVE IT
  035B    21 9999                       LXI     H,9999H ;GET HIGH NUMBER IN H,L
  035E    22 2594                       SHLD    LINEH   ;SAVE IT
  0361    EB                            XCHG            ;FLIP BACK
  0362    B7                            ORA     A       ;TEST IF EOL
  0363    CA 0383                       JZ      LIST1   ;BRIF IT IS
  0366    CD 1BE9                       CALL    PACK    ;GO PACK THE NUMBER, IF ANY
  0369    50                            MOV     D,B     ;COPY NUMBER TO D,L
  036A    59                            MOV     E,C     ;SAME
  036B    EB                            XCHG            ;FLIP TO H,L
  036C    22 2592                       SHLD    LINEL   ;SAVE IT
  036F    22 2594                       SHLD    LINEH   ;SAME
  0372    EB                            XCHG            ;RESTORE H,L
  0373    CF                            RST     1       ;SKIP TO NON BLANK
  0374    FE 2C                         CPI     ','     ;TEST IF COMMA
  0376    C2 0383                       JNZ     LIST1   ;BRIF NOT
  0379    23                            INX     H       ;POINT NEXT
  037A    CF                            RST     1       ;SKIP TO NON-BLANK
  037B    CD 1BE9                       CALL    PACK    ;ELSE, GO GET THE NUMBER
  037E    60                            MOV     H,B     ;COPY TO
  037F    69                            MOV     L,C     ;D,L
  0380    22 2594                       SHLD    LINEH   ;SAVE IT
  0383    21 280C               LIST1:  LXI     H,BEGPR ;POINT BEGINNING OF PROGRAM
  0386    CD 1B4D               LIST2:  CALL    TSTCC   ;GO SEE IF CONTROL-C OR CONTROL-O
	MACRO-80 3.44	09-Dec-81	PAGE	1-11


  0389    7E                            MOV     A,M     ;GET LEN CODE
  038A    B7                            ORA     A       ;TEST IF END OF PROGRAM
  038B    CA 02AC                       JZ      ENDIT   ;BRIF END OF PGM
  038E    D6 03                         SUI     3       ;SUBTRACT THREE
  0390    47                            MOV     B,A     ;SAVE LEN
  0391    23                            INX     H       ;POINT HIGH BYTE OF LINE#
  0392    EB                            XCHG            ;FLIP H,L TO D,E
  0393    2A 2592                       LHLD    LINEL   ;GET LOW LINE TO TEST
  0396    EB                            XCHG            ;RESTORE H,L
  0397    7E                            MOV     A,M     ;GET LOW BYTE OF LINE NUMBER
  0398    BA                            CMP     D       ;COMP WITH LINEL
  0399    DA 03D6                       JC      LIST8   ;BRIF LESS
  039C    C2 03A6                       JNZ     LIST4   ;BRIF NOT EQUAL
  039F    23                            INX     H       ;POINT NEXT
  03A0    7E                            MOV     A,M     ;GET NEXT BYTE OF LINE#
  03A1    2B                            DCX     H       ;POINT BACK
  03A2    BB                            CMP     E       ;COMP LOW BYTES
  03A3    DA 03D6                       JC      LIST8   ;BRIF LESS
  03A6    EB                    LIST4:  XCHG            ;SAVE H,L IN D,E
  03A7    2A 2594                       LHLD    LINEH   ;GET HIGH LINE FOR TEST
  03AA    EB                            XCHG            ;RESTORE H,L
  03AB    7E                            MOV     A,M     ;GET LINE BYTE
  03AC    BA                            CMP     D       ;COMPARE HIGH BYTES
  03AD    CA 03B6                       JZ      LIST5   ;BRIF EQUAL
  03B0    D2 02AC                       JNC     ENDIT   ;BRIF HIGHER
  03B3    C3 03C0                       JMP     LIST6   ;GO AROUND
  03B6    23                    LIST5:  INX     H       ;POINT NEXT
  03B7    7E                            MOV     A,M     ;GET NEXT BYTE
  03B8    2B                            DCX     H       ;POINT BACK
  03B9    BB                            CMP     E       ;COMPARE LOW BYTES
  03BA    CA 03C0                       JZ      LIST6   ;BRIF EQUAL
  03BD    D2 02AC                       JNC     ENDIT   ;BRIF HIGHER
  03C0    11 2415               LIST6:  LXI     D,IOBUF ;POINT BUFFER AREA
  03C3    CD 1B1C                       CALL    LINEO   ;CONVERT LINE NUMBER
  03C6    7E                    LIST7:  MOV     A,M     ;GET A BYTE
  03C7    12                            STAX    D       ;PUT IT TO BUFFER
  03C8    13                            INX     D       ;POINT NEXT BUFF
  03C9    23                            INX     H       ;POINT NEXT PROG
  03CA    05                            DCR     B       ;DECR CTR
  03CB    C2 03C6                       JNZ     LIST7   ;LOOP
  03CE    E5                            PUSH    H       ;SAVE HL ADDR
  03CF    CD 1AC8                       CALL    TERMO   ;GO TYPE IT
  03D2    E1                            POP     H       ;RETRIEVE H ADDR
  03D3    C3 0386                       JMP     LIST2   ;CONTINUE
  03D6    58                    LIST8:  MOV     E,B     ;PUT LEN  IN E
  03D7    16 00                         MVI     D,0     ;CLEAR D
  03D9    19                            DAD     D       ;POINT NEXT STMT
  03DA    23                            INX     H       ;POINT NEXT
  03DB    23                            INX     H       ;POINT LEN CODE
  03DC    C3 0386                       JMP     LIST2   ;GO LIST IT
                                ;
                                ;
  03DF                          CONTI   EQU     $
                                ;
                                ; CONTINUE EXECUTION AT STATEMENT FOLLOWING STOP OR AT
                                ; STATEMENT THAT WAS INTERRUPTED WHEN CONTROL-C WAS TYPED
	MACRO-80 3.44	09-Dec-81	PAGE	1-12


                                ;
                                ;
  03DF    21 23BE                       LXI     H,LINEN ;POINT LINE NUMBER OF LAST STOP/ERROR/
  03E2    7E                            MOV     A,M     ;GET 1ST CHAR
  03E3    B7                            ORA     A       ;TEST IF IMMED CMMD
  03E4    CA 06E2                       JZ      LET     ;BRIF IF IMMED CMMD
                                ;PAGE
                                ;
                                ;
                                ; STMT:  GOTO NNNN
                                ;
                                ;
  03E7    AF                    GOTO:   XRA     A       ;CLEAR REG A
  03E8    32 23BD                       STA     EDSW    ;RESET IMMED MODE (IF IT WAS SET)
  03EB    32 23BC                       STA     RUNSW   ;AND RUN TYPE
  03EE    CD 1BE1                       CALL    NOTEO   ;ERROR IF END-OF-LINE
  03F1    CD 1BE9                       CALL    PACK    ;GO GET LINE NUMBER IN B,C
  03F4    CD 1BC8                       CALL    EOL     ;ERROR IF NOT END-OF-LINE
  03F7    CD 20C9               GOTO2:  CALL    LOCAT   ;GO SEARCH FOR REQUESTED LINE #
  03FA    DA 1D37                       JC      ULERR   ;BRIF NOT FOUND
  03FD    22 25B7                       SHLD    STMT    ;SAVE ADDR
  0400    AF                            XRA     A       ;GET A ZERO
  0401    32 25BB                       STA     MULTI   ;TURN OFF MULTIPLE STMTS
  0404    C3 0306                       JMP     RUN2    ;GO PROCESS THE STATEMENT
                                ;
                                ;
                                ; STMT: RESTORE
                                ;
  0407    CD 1BC8               RESTO:  CALL    EOL     ;ERROR IF NOT END-OF-LINE
  040A    21 280B                       LXI     H,BEGPR-1       ;POINT 1 BEFORE START OF PROGRAM
  040D    22 25D6                       SHLD    DATAP   ;FORCE NEXT DATA TO BE AT START
  0410    C3 02EC                       JMP     RUN     ;GO NEXT STMT
                                ;
                                ;
                                ; STMT:  RETURN
                                ;
  0413    CD 1BC8               RETUR:  CALL    EOL     ;ERROR IF NOT END-OF-LINE
  0416    F1                            POP     PSW     ;POP THE STACK
  0417    FE FF                         CPI     0FFH    ;TEST IF GOSUB IN EFFECT
  0419    C2 1D47                       JNZ     RTERR   ;BRIF ERROR
  041C    E1                            POP     H       ;GET RETURNED STATMENT ADDRESS
  041D    22 25B7                       SHLD    STMT    ;RESTORE
  0420    E1                            POP     H       ;GET ENDLINE VALUE
  0421    22 25B9                       SHLD    ENDLI   ;RESTORE
  0424    F1                            POP     PSW     ;GET MULTI SW VALUE
  0425    32 25BB                       STA     MULTI   ;RESTORE
  0428    C3 02EC                       JMP     RUN     ;CONTINUE (AT STMT FOLLOWING GOSUB)
                                ;
                                ;
                                ; STMT:  GOSUB NNNN
                                ;
  042B    CD 1BE1               GOSUB:  CALL    NOTEO   ;ERROR IF END-OF-LINE
  042E    CD 1BE9                       CALL    PACK    ;GET LINE NUMBER
  0431    CD 1BC8                       CALL    EOL     ;ERROR IF NOT END-OF-LINE
  0434    3A 25BB               GOSU1:  LDA     MULTI   ;GET SW SETTING
  0437    F5                            PUSH    PSW     ;SAVE ON STACK
	MACRO-80 3.44	09-Dec-81	PAGE	1-13


  0438    2A 25B9                       LHLD    ENDLI   ;GET ADDR OF END OF STMT
  043B    E5                            PUSH    H       ;SAVE ONE STACK
  043C    2A 25B7                       LHLD    STMT    ;GET STATEMENT ADDRESS
  043F    E5                            PUSH    H       ;SAVE RETURN ADDRESS IN STACK
  0440    3E FF                         MVI     A,0FFH  ;MARK AS GOSUB
  0442    F5                            PUSH    PSW     ;SAVE STATUS
  0443    C3 03F7                       JMP     GOTO2   ;GO LOOKUP LINE AND BRANCH
                                ;PAGE
                                ;
  0446                          PRINT   EQU     $
                                ;
                                ;
                                ; STMT: PRINT ....
                                ;
                                ;
  0446    AF                            XRA     A       ;CLEAR REG A
  0447    32 25D4               PRIN4:  STA     PRSW    ;SET SW TO SAY CRLF AT END OF LINE
  044A    11 2415                       LXI     D,IOBUF ;POINT BUFFER
  044D    CF                            RST     1       ;SKIP TO NEXT FIELD
                                ;
  044E    CD 1BDC                       CALL    TSTEL   ;TEST IF END OF STMT
  0451    CA 04C4                       JZ      PRINC   ;BRIF IT IS
  0454    FE 2C                         CPI     ','     ;TEST IF COMMA
  0456    CA 049B                       JZ      PRIN8   ;BRIF IT IS
  0459    FE 3B                         CPI     ';'     ;TEST IF SEMI-COLON
  045B    CA 049E                       JZ      PRIN9   ;BRIF IT IS
  045E    D5                            PUSH    D       ;SAVE D,E
  045F    E5                            PUSH    H       ;SAVE H,L
  0460    11 1ECD                       LXI     D,TABLI ;POINT LITERAL
  0463    D7                            RST     2       ;GO SEE IF TAB(XX)
  0464    CA 04A4                       JZ      PRINA   ;BRIF IS
  0467    E1                            POP     H       ;ELSE, RESTORE H,L
  0468    CD 1071                       CALL    EXPR    ;GO EVALUATE EXPRESSION
  046B    D1                            POP     D       ;RESTORE D,E
  046C    E5                            PUSH    H       ;SAVE H,L
  046D    EB                            XCHG            ;FLIP/FLOP
  046E    3A 25D5                       LDA     NS      ;GET TYPE OF RESULT
  0471    FE E7                         CPI     0E7H    ;TEST IF STRING
  0473    CA 0487                       JZ      PRIN5   ;BRIF IS
  0476    CD 15E1                       CALL    FOUT    ;GO CONVERT OUTPUT
  0479    23                            INX     H       ;POINT NEXT
  047A    EB                    PRIN7:  XCHG            ;FLIP/FLOP: END ADDR TO DE
  047B    E1                            POP     H       ;RESTORE H,L
                                ;HERE AFTER SETTING UP VALUE TO PRINT IN BUFFER
  047C    3E FE                 PRIN2:  MVI A,0FEH      ;SET END CODE=NO CRLF
  047E    12                            STAX D          ;PUT TO BUFFER
  047F    E5                            PUSH H          ;SAVE H,L
  0480    CD 1AC8                       CALL TERMO      ;GO PRINT BUFFER
  0483    E1                            POP H           ;RESTORE HL
  0484    C3 0446                       JMP PRINT       ;REPEAT FOR NEXT FIELD
                                ;
  0487    11 2467               PRIN5:  LXI     D,STRIN ;POINT STRING
  048A    1A                            LDAX    D       ;GET LEN
  048B    B7                            ORA     A       ;TEST IT
  048C    CA 047A                       JZ      PRIN7   ;BRIF NULL
  048F    47                            MOV     B,A     ;SAVE LEN
	MACRO-80 3.44	09-Dec-81	PAGE	1-14


  0490    13                    PRIN6:  INX     D       ;POINT NEXT
  0491    1A                            LDAX    D       ;GET A BYTE
  0492    77                            MOV     M,A     ;STORE IT
  0493    23                            INX     H       ;POINT NEXT
  0494    05                            DCR     B       ;DECR CTR
  0495    C2 0490                       JNZ     PRIN6   ;LOOP
  0498    C3 047A                       JMP PRIN7       ;DIDDLE DE, HL AND CONTINUE
                                ;
  049B    CD 1AF2               PRIN8:  CALL    TABST   ;GO POSITION NEXT TAB
  049E    23                    PRIN9:  INX     H       ;PRINT NEXT
  049F    3E 01                         MVI     A,1     ;GET SETTTING FOR SW
  04A1    C3 0447                       JMP     PRIN4   ;GO STORE A IN PRSW & DO NEXT FIELD
  04A4    D1                    PRINA:  POP     D       ;GET RID OF STACK ENTRY
  04A5    CD 1071                       CALL    EXPR    ;GO EVALUATE
  04A8    E5                            PUSH    H       ;SAVE H,L
  04A9    CD 1D9E                       CALL    FBIN    ;CONVERT TO BINARY
  04AC    F5                            PUSH    PSW     ;SAVE SPECIFIED COLUMN
  04AD    21 25BD                       LXI     H,COLUM ;POINT CURRENT POSITION
  04B0    96                            SUB     M       ;SUBTRACT (LEAVES NUMBER OF FILLS)
  04B1    FC 1A63                       CM      CRLF    ;NEXT LINE IF ALREADY PAST
  04B4    F1                            POP     PSW     ;RESTORE COL
  04B5    96                            SUB     M       ;GET NUMBER FILLS
  04B6    E1                            POP     H
  04B7    D1                            POP     D
  04B8    47                            MOV     B,A     ;SAVE COUNT
  04B9    3E 20                         MVI     A,' '   ;GET FILL
  04BB    CA 047C               PRINB:  JZ      PRIN2   ;BRIF COUNT ZERO
  04BE    12                            STAX    D       ;PUT ONE SPACE
  04BF    13                            INX     D       ;POINT NEXT
  04C0    05                            DCR     B       ;DECR CTR
  04C1    C3 04BB                       JMP     PRINB   ;LOOP
                                ;
  04C4    CD 1BC8               PRINC:  CALL EOL        ;SAVE EOL POSITION
                                ;HERE TO PRINT FINAL CR/LF (OR NOT) AND GO TO NEXT STATEMENT
  04C7    3A 25D4                       LDA     PRSW    ;GET SWITCH
  04CA    47                            MOV     B,A     ;SAVE ,; SWITCH
  04CB    3A 23BA                       LDA     OUTSW   ;GET CONTROL-O SWITCH
  04CE    B7                            ORA     A       ;TEST IF ^O IN EFFECT
  04CF    B0                            ORA     B       ;AND IF STATEMENT ENDED IN , OR ;
  04D0    CC 1A63                       CZ      CRLF    ;CRLF IF NEITHER
  04D3    C3 02EC                       JMP     RUN     ;CONTINUE NEXT STATEMENT
                                ;PAGE
                                ;
  04D6                          FOR     EQU     $
                                ;
                                ;
                                ;  STMT:  FOR VAR = EXPR TO EXPR [STEP EXPR]
                                ;
                                ;
                                ;  FIRST EVALUATE ARGUMENTS AND STORE POINTERS AND VALUES,
                                ;  BUT DO NOT MAKE TABLE ENTRY YET
  04D6    CD 1CFD                       CALL    VAR     ;NEXT WORD MUST BE VARIABLE
  04D9    EB                            XCHG            ;FLIP/FLOP
  04DA    22 256A                       SHLD    INDX    ;SAVE VARIABLE NAME
  04DD    EB                            XCHG            ;FLIP/FLOP AGAIN
  04DE    FE 3D                         CPI     '='     ;TEST FOR EQUAL SIGN
	MACRO-80 3.44	09-Dec-81	PAGE	1-15


  04E0    C2 1D43                       JNZ     SNERR   ;BRIF NO EQUAL
  04E3    23                            INX     H       ;POINT NEXT
  04E4    CD 1071                       CALL    EXPR    ;GO EVALUATE EXPR, IF ANY
  04E7    EB                            XCHG            ;FLIP/FLOP AGAIN
  04E8    2A 256A                       LHLD    INDX    ;GET INDEX NAME
  04EB    EB                            XCHG            ;FLIP/FLOP
  04EC    E5                            PUSH    H       ;SAVE H,L
  04ED    CD 1C68                       CALL    SEARC   ;GO LOCATE NAME
  04F0    EB                            XCHG            ;PUT ADDR IN H,L
  04F1    22 2599                       SHLD    ADDR1   ;SAVE ADDR
  04F4    DF                            RST     3       ;GO STORE THE VALUE
  04F5    E1                            POP     H       ;RESTORE POINTER TO STMT
  04F6    11 2016                       LXI     D,TOLIT ;GET LIT ADDR
  04F9    D7                            RST     2       ;GO COMPARE
  04FA    C2 1D43                       JNZ     SNERR   ;BRIF ERROR
  04FD    CD 1071                       CALL    EXPR    ;GO EVALUATE TO-EXPR
  0500    E5                            PUSH    H       ;SAVE H,L
  0501    21 256E                       LXI     H,TVAR1 ;POINT 'TO' VALUE
  0504    DF                            RST     3       ;SAVE IT
  0505    21 1F2E                       LXI     H,ONE   ;POINT CONSTANT: 1
  0508    EF                            RST     5       ;LOAD IT
  0509    E1                            POP     H       ;GET H,L
  050A    7E                            MOV     A,M     ;GET THE CHAR
  050B    B7                            ORA     A       ;TEST FOR END OF STATEMENT
  050C    CA 051F                       JZ      FOR2    ;BRIF NO STEP
  050F    E5                            PUSH    H       ;RE-SAVE
  0510    11 1ED1                       LXI     D,STEPL ;TEST FOR LIT 'STEP'
  0513    D7                            RST     2       ;GO COMPARE
  0514    CA 051B                       JZ      FOR1    ;BRIF STEP
  0517    E1                            POP     H       ;RESTORE H,L
  0518    C3 051F                       JMP     FOR2    ;GO NO STEP VALUE
  051B    D1                    FOR1:   POP     D       ;POP OFF THE STACK
  051C    CD 1071                       CALL    EXPR    ;GO EVALUATE EXPRESSION
  051F    E5                    FOR2:   PUSH    H       ;SAVE H,L TO END OF STATEMENT
  0520    21 2572                       LXI     H,TVAR2 ;POINT STEP VALUE
  0523    DF                            RST     3       ;SAVE IT
  0524    E1                            POP     H       ;RESTORE H,L
  0525    CD 1BC8                       CALL    EOL     ;ERROR IF NOT END-OF-LINE
                                ; DETERMINE WHETHER LOOP IS TO BE EXECUTED AT ALL
                                ; (IF VALUE > "TO" VALUE AND STEP POSITIVE,
                                ;    JUST SKIP TO NEXT, ETC)
  0528    CD 19BF                       CALL    FTEST   ;GET STATUS OF FACC
  052B    F5                            PUSH    PSW     ;SAVE A,STATUS
  052C    21 256E                       LXI     H,TVAR1 ;GET END VALUE
  052F    EF                            RST     5       ;LOAD IT
  0530    F1                            POP     PSW     ;RESTORE STATUS
  0531    F2 0543                       JP      FOR4    ;BRIF FOR IS POSITIVE
  0534    2A 2599                       LHLD    ADDR1   ;GET ADDRESS OF INDEX
  0537    CD 17FD                       CALL    FSUB    ;COMPARE THIS AGAINST END VALUE
  053A    CA 054F                       JZ      FOR5    ;BRIF START = END
  053D    FA 054F                       JM      FOR5    ;BRIF START > END
  0540    C3 05A3                       JMP     FOR9    ;GO LOCATE MATCHING NEXT
  0543    2A 2599               FOR4:   LHLD    ADDR1   ;GET ADDRESS OF INDEX
  0546    CD 17FD                       CALL    FSUB    ;COMPARE
  0549    CA 054F                       JZ      FOR5    ;BRIF START = END
  054C    FA 05A3                       JM      FOR9    ;BRIF START > END: SKIP TO "NEXT"
	MACRO-80 3.44	09-Dec-81	PAGE	1-16


                                ; LOOP IS TO BE EXECUTED AT LEAST ONCE:
                                ; NEED AN ENTRY IN FOR-NEXT TABLE.
                                ; SEE IF THERE IS ALREADY ENTRY FOR THIS VARIABLE
                                ; (IE PROGRAM JUMPED OUT OF LOOP EARLIER)
  054F    11 2347               FOR5:   LXI     D,FORNE ;POINT TABLE
  0552    2A 256A                       LHLD    INDX    ;GET INDEX VARIABLE NAME
  0555    EB                            XCHG            ;FLIP/FLOP
  0556    7E                            MOV     A,M     ;GET COUNT OF ENTRIES NOW IN TABLE
  0557    47                            MOV     B,A     ;STORE IT
  0558    0E 01                         MVI     C,1     ;NEW CTR
  055A    B7                            ORA     A       ;TEST IF ZERO
  055B    23                            INX     H       ;POINT
  055C    CA 0572                       JZ      FOR8    ;BRIF TABLE EMPTY
  055F    7E                    FOR6:   MOV     A,M     ;GET 1ST BYTE OF TABLE VARIABLE
  0560    BA                            CMP     D       ;TEST IF EQUAL TO THIS FOR'S INDEX
  0561    C2 056B                       JNZ     FOR7    ;BRIF NOT
  0564    23                            INX     H       ;POINT NEXT
  0565    7E                            MOV     A,M     ;GET NEXT BYTE
  0566    2B                            DCX     H       ;POINT BACK
  0567    BB                            CMP     E       ;TEST IF EQUAL
  0568    CA 0572                       JZ      FOR8    ;BRIF EQUAL
  056B    E7                    FOR7:   RST     4       ;ADJUST H,L
  056C    0E                            DB      14
  056D    0C                            INR     C       ;COUNT IT
  056E    05                            DCR     B       ;DECR CTR
  056F    C2 055F                       JNZ     FOR6    ;LOOP
                                ; ENTER THIS FOR IN TABLE (WHERE HL POINTS)
  0572    79                    FOR8:   MOV     A,C     ;GET UDPATE COUNT
  0573    FE 09                         CPI     9       ;TEST IF TBL EXCEEDED
  0575    D2 1D4F                       JNC     NXERR   ;ERROR IF MORE THAN 8 OPEN FOR/NEXT
  0578    32 2347                       STA     FORNE   ;PUT IN TABLE
  057B    72                            MOV     M,D     ;HI BYTE INDEX VARIABLE NAME
  057C    23                            INX     H       ;POINT NEXT
  057D    73                            MOV     M,E     ;STORE LO BYTE
  057E    23                            INX     H       ;POINT NEXT
  057F    E5                            PUSH    H       ;SAVE H,L
  0580    21 2572                       LXI     H,TVAR2 ;POINT STEP VALUE
  0583    EF                            RST     5       ;LOAD IT
  0584    E1                            POP     H       ;RESTORE H,L
  0585    DF                            RST     3       ;STORE IN STACK
  0586    E5                            PUSH    H       ;SAVE H,L
  0587    21 256E                       LXI     H,TVAR1 ;POINT 'TO' VALUE
  058A    EF                            RST     5       ;LOAD IT
  058B    E1                            POP     H       ;RESTORE H,L
  058C    DF                            RST     3       ;STORE IN STACK
  058D    EB                            XCHG            ;FLIP/FLOP
  058E    2A 25B9                       LHLD    ENDLI   ;GET END ADDR
  0591    2B                            DCX     H       ;POINT ONE PRIOR
  0592    EB                            XCHG            ;FLIP BACK
  0593    72                            MOV     M,D     ;STORE IT
  0594    23                            INX     H       ;POINT NEXT
  0595    73                            MOV     M,E     ;STORE IT
  0596    23                            INX     H       ;POINT NEXT
  0597    3A 25B8                       LDA     STMT+1  ;GET HIGH STMT ADDR
  059A    77                            MOV     M,A     ;PUT IT
  059B    23                            INX     H       ;POINT NEXT
	MACRO-80 3.44	09-Dec-81	PAGE	1-17


  059C    3A 25B7                       LDA     STMT    ;GET LOW STMT ADDR
  059F    77                            MOV     M,A     ;PUT IT
  05A0    C3 02EC                       JMP     RUN     ;CONTINUE
                                ;
                                ; IF HERE, THIS LOOP IS TO BE EXECUTED ZERO TIMES:
                                ; SCAN THRU PROGRAM TO FIND MATCHING "NEXT".
                                ; THIS CODE WILL FAIL IF USER'S PROGRAM IS TOO
                                ; COMPLEX SINCE IT WON'T FOLLOW GOTO'S, IF'S, ETC.
  05A3    2A 25B7               FOR9:   LHLD    STMT    ;GET ADDRESS OF STATMENT
  05A6    5E                            MOV     E,M     ;GET LENGTH CODE
  05A7    16 00                         MVI     D,0     ;INIT INCREMENT
  05A9    19                            DAD     D       ;COMPUTE ADDR OF NEXT STATEMENT
  05AA    7E                            MOV     A,M     ;GET NEW LEN CODE
  05AB    B7                            ORA     A       ;SEE IF END OF PGM
  05AC    CA 1D4F                       JZ      NXERR   ;BRIF IT IS
  05AF    22 25B7                       SHLD    STMT    ;SAVE ADDRESS
  05B2    E7                            RST     4       ;ADJUST H,L
  05B3    03                            DB      3
  05B4    CF                            RST     1       ;SKIP SPACES
  05B5    11 1FEC                       LXI     D,NEXTL ;POINT 'NEXT'
  05B8    D7                            RST     2       ;SEE IF IT IS A NEXT STMT
  05B9    C2 05A3                       JNZ     FOR9    ;LOOP IF NOT
  05BC    CF                            RST     1       ;SKIP SPACES
  05BD    3A 256B                       LDA     INDX+1  ;GET FIRST CHAR
  05C0    BE                            CMP     M       ;COMPARE
  05C1    C2 05A3                       JNZ     FOR9    ;BRIF NOT MATCH NEXT
  05C4    3A 256A                       LDA     INDX    ;GET 2ND CHAR
  05C7    23                            INX     H       ;DITTO
  05C8    FE 20                         CPI     ' '     ;SEE IF SINGLE CHAR
  05CA    CA 05D1                       JZ      FORA    ;BRIF IT IS
  05CD    BE                            CMP     M       ;COMPARE THE TWO
  05CE    C2 05A3                       JNZ     FOR9    ;BRIF NOT EQUAL
  05D1    CF                    FORA:   RST     1       ;SKIP TO END (HOPEFULLY)
  05D2    7E                            MOV     A,M     ;GET THE NON BLANK
  05D3    B7                            ORA     A       ;SEE IF END
  05D4    C2 05A3                       JNZ     FOR9    ;BRIF END
  05D7    C3 02EC                       JMP     RUN     ;ELSE, GO NEXT STMT
                                ;PAGE
                                ;
  05DA                          IFSTM   EQU     $
                                ;
                                ;
                                ; STMT: IF EXPR RELATION EXPR THEN STMT#
                                ;
                                ;
  05DA    CD 1071                       CALL    EXPR    ;GO EVALUATE LEFT EXPR
  05DD    E5                            PUSH    H       ;SAVE H,L
  05DE    3A 25D5                       LDA     NS      ;GET TYPE CODE
  05E1    32 256D                       STA     IFTYP   ;SAVE IT
  05E4    FE E7                         CPI     0E7H    ;TEST IF STRING
  05E6    C2 05F8                       JNZ     IF1     ;BRIF NOT
  05E9    21 2415                       LXI     H,IOBUF ;POINT BUFFER
  05EC    11 2467                       LXI     D,STRIN ;POINT RESULT
  05EF    1A                            LDAX    D       ;GET LEN
  05F0    3C                            INR     A       ;PLUS ONE
  05F1    47                            MOV     B,A     ;SAVE IT
	MACRO-80 3.44	09-Dec-81	PAGE	1-18


  05F2    CD 1D85                       CALL    COPYD   ;GO MOVE IT
  05F5    C3 05FC                       JMP     IF2     ;GO AROUND
  05F8    21 256E               IF1:    LXI     H,TVAR1 ;GET ADDR OF TEMP STORAGE
  05FB    DF                            RST     3       ;SAVE IT
  05FC    E1                    IF2:    POP     H       ;RESTORE H,L
  05FD    AF                            XRA     A       ;CLEAR A
  05FE    4F                            MOV     C,A     ;SAVE IN REG C
  05FF    47                            MOV     B,A     ;INIT REG
  0600    7E                    IF3:    MOV     A,M     ;GET OPERATOR
  0601    04                            INR     B       ;COUNT
  0602    FE 3D                         CPI     '='     ;TEST FOR EQUAL
  0604    C2 0609                       JNZ     IF4     ;BRIF IT IS
  0607    0C                            INR     C       ;ADD 1 TO C
  0608    23                            INX     H       ;POINT NEXT
  0609    FE 3E                 IF4:    CPI     '>'     ;TEST FOR GREATER THAN
  060B    C2 0611                       JNZ     IF5     ;BRIF IT IS
  060E    0C                            INR     C       ;ADD TWO
  060F    0C                            INR     C       ;TO REL CODE
  0610    23                            INX     H       ;POINT NEXT
  0611    FE 3C                 IF5:    CPI     '<'     ;TEST FOR LESS THAN
  0613    C2 061B                       JNZ     IF6     ;BRIF IT IS
  0616    79                            MOV     A,C     ;GET REL CODE
  0617    C6 04                         ADI     4       ;PLUS FOUR
  0619    4F                            MOV     C,A     ;PUT BACK
  061A    23                            INX     H       ;POINT NEXT
  061B    79                    IF6:    MOV     A,C     ;GET REL CODE
  061C    B7                            ORA     A       ;TEST IT
  061D    C5                            PUSH    B       ;SAVE B,C
  061E    CA 1D43                       JZ      SNERR   ;BRIF SOME ERROR
  0621    C1                            POP     B       ;RESTORE B,C
  0622    32 256C                       STA     REL     ;SAVE CODE
  0625    78                            MOV     A,B     ;GET COUNT
  0626    FE 02                         CPI     2       ;TEST FOR TWO
  0628    C2 0600                       JNZ     IF3     ;SEE IF MULTIPLE RELATION
  062B    CD 1071                       CALL    EXPR    ;GO EVALUATE RIGHT SIDE
  062E    22 2599                       SHLD    ADDR1   ;SAVE LOCATION OF THEN (IF ANY)
  0631    3A 25D5                       LDA     NS      ;GET TYPE CODE
  0634    21 256D                       LXI     H,IFTYP ;POINT LEFT TYPE
  0637    BE                            CMP     M       ;COMPARE
  0638    C2 1D43                       JNZ     SNERR   ;BRIF MIXED
  063B    FE E7                         CPI     0E7H    ;TEST IF STRING
  063D    CA 0699                       JZ      IFF     ;BRIF IS
  0640    21 256E                       LXI     H,TVAR1 ;POINT LEFT
  0643    CD 17FD                       CALL    FSUB    ;SUBTRACT LEFT FROM RIGHT
  0646    3A 256C                       LDA     REL     ;GET RELATION
  0649    1F                            RAR             ;TEST BIT D0
  064A    D2 0653                       JNC     IF8     ;BRIF NO EQUAL TEST
  064D    CD 19BF                       CALL    FTEST   ;GET STATUS OF FACC
  0650    CA 0672                       JZ      TRUE    ;BRIF LEFT=RIGHT
  0653    3A 256C               IF8:    LDA     REL     ;LOAD RELATION
  0656    E6 02                         ANI     02H     ;MASK IT
  0658    CA 0661                       JZ      IF9     ;BRIF NO >
  065B    CD 19BF                       CALL    FTEST   ;GET STATUS OF FACC
  065E    FA 0672                       JM      TRUE    ;BRIF GT
  0661    3A 256C               IF9:    LDA     REL     ;LOAD RELATION
  0664    E6 04                         ANI     04H     ;MASK IT
	MACRO-80 3.44	09-Dec-81	PAGE	1-19


  0666    CA 02EC                       JZ      FALSE   ;BRIF NO <
  0669    CD 19BF                       CALL    FTEST   ;GET STATUS OF FACC
  066C    FA 02EC                       JM      FALSE   ;BRIF GT
  066F    CA 02EC                       JZ      FALSE   ;BRIF ZERO (NOT EQUAL)
  0672    2A 2599               TRUE:   LHLD    ADDR1   ;GET POINTER TO STATEMENT
  0675    11 2014                       LXI     D,GOTOL ;POINT 'GO TO'
  0678    D7                            RST     2       ;GO COMPARE
  0679    CA 03E7                       JZ      GOTO    ;BRIF IF ... GOTO NN
  067C    2A 2599                       LHLD    ADDR1   ;GET POINTER TO STATEMENT
  067F    11 1FF3                       LXI     D,GOSBL ;POINT LITERAL
  0682    D7                            RST     2       ;GO COMAPRE
  0683    CA 042B                       JZ      GOSUB   ;BRIF IF ... GOSUB NN
  0686    2A 2599                       LHLD    ADDR1   ;GET POINTER TO STATEMENT
  0689    11 1ED6                       LXI     D,THENL ;GET ADDR 'THEN'
  068C    D7                            RST     2       ;GO COMPARE
  068D    C2 1D43                       JNZ     SNERR   ;BRIF ERROR
  0690    CD 1C5E                       CALL    NUMER   ;TEST IF NUMERIC
  0693    CA 03E7                       JZ      GOTO    ;BRIF IT IS
  0696    C3 0319                       JMP     RUN4    ;ELSE, MAY BE ANY STMT
  02EC                          FALSE   EQU     RUN
  0699    21 2415               IFF:    LXI     H,IOBUF ;POINT PRIOR
  069C    46                            MOV     B,M     ;GET LEN
  069D    11 2467                       LXI     D,STRIN ;POINT THIS
  06A0    1A                            LDAX    D       ;GET LEN
  06A1    4F                            MOV     C,A     ;SAVE IT
  06A2    13                    IFG:    INX     D       ;POINT NEXT
  06A3    23                            INX     H       ;DITTO
  06A4    78                            MOV     A,B     ;GET LEFT LEN
  06A5    B7                            ORA     A       ;TEST IT
  06A6    C2 06AB                       JNZ     IFH     ;BRIF NOT ZERO
  06A9    36 20                         MVI     M,' '   ;EXTEND WITH SPACE
  06AB    79                    IFH:    MOV     A,C     ;GET RIGHT LEN
  06AC    B7                            ORA     A       ;TEST IT
  06AD    C2 06B3                       JNZ     IFI     ;BRIF NOT ZERO
  06B0    3E 20                         MVI     A,' '   ;GET SPACE
  06B2    12                            STAX    D       ;EXTEND
  06B3    1A                    IFI:    LDAX    D       ;GET RIGHT CHAR
  06B4    BE                            CMP     M       ;TEST WITH LEFT
  06B5    DA 06D8                       JC      IFM     ;BRIF LEFT>RIGHT
  06B8    C2 06DD                       JNZ     IFN     ;BRIF LEFT<RIGHT
  06BB    78                            MOV     A,B     ;GET LEFT COUNT
  06BC    3D                            DCR     A       ;SUBT ONE
  06BD    FA 06C1                       JM      IFJ     ;BRIF WAS ZERO
  06C0    47                            MOV     B,A     ;UPDATE CTR
  06C1    79                    IFJ:    MOV     A,C     ;GET RIGHT LEN
  06C2    3D                            DCR     A       ;SUBT ONE
  06C3    FA 06C7                       JM      IFK     ;BRIF WAS ZERO
  06C6    4F                            MOV     C,A     ;UPDT CTR
  06C7    78                    IFK:    MOV     A,B     ;GET LEFT LEN
  06C8    B1                            ORA     C       ;COMPARE TO RIGHT
  06C9    C2 06A2                       JNZ     IFG     ;BRIF BOTH NOT ZERO
  06CC    06 01                         MVI     B,1     ;SET SW= EQUAL
  06CE    3A 256C               IFL:    LDA     REL     ;GET RELATION
  06D1    A0                            ANA     B       ;AND WITH RESULT
  06D2    CA 02EC                       JZ      FALSE   ;BRIF FALSE
  06D5    C3 0672                       JMP     TRUE    ;ELSE, TRUE
	MACRO-80 3.44	09-Dec-81	PAGE	1-20


  06D8    06 02                 IFM:    MVI     B,2     ;SET CODE
  06DA    C3 06CE                       JMP     IFL     ;JUMP
  06DD    06 04                 IFN:    MVI     B,4     ;SET CODE
  06DF    C3 06CE                       JMP     IFL     ;JUMP
                                ;PAGE
                                ;
  06E2                          LET     EQU     $
                                ;
                                ;
                                ; STMT: [LET] VAR = EXPR
                                ;
                                ;
  06E2    CD 1940                       CALL    GETS8   ;GO GET ADDRESS OF VARIABLE
  06E5    C5                            PUSH    B       ;SAVE NAME
  06E6    D5                            PUSH    D       ;SAVE ADDRESS
  06E7    CF                            RST     1       ;GET NEXT CHAR
  06E8    FE 3D                         CPI     '='     ;TEST FOR EQUAL SIGN
  06EA    CA 06FD                       JZ      LET1    ;BRIF IS
  06ED    3A 23BD                       LDA     EDSW    ;GET MODE SW
  06F0    B7                            ORA     A       ;TEST IT
  06F1    CA 1D43                       JZ      SNERR   ;BRIF LET ERROR
  06F4    21 1EB3                       LXI     H,WHATL ;POINT LITERAL
  06F7    CD 1AD0                       CALL    TERMM   ;GO PRINT IT
  06FA    C3 01A5                       JMP     GETCM   ;GO TO COMMAND
  06FD    23                    LET1:   INX     H       ;POINT NEXT
  06FE    CD 1071                       CALL    EXPR    ;GO EVALUATE EXPRESSION
  0701    CD 1BC8                       CALL    EOL     ;ERROR IF NOT END-OF-LINE
  0704    E1                            POP     H       ;RESTORE ADDRESSS
  0705    D1                            POP     D       ;RESTORE NAME
  0706    7B                            MOV     A,E     ;GET TYPE
  0707    B7                            ORA     A       ;TEST IT
  0708    3A 25D5                       LDA     NS      ;GET RESULT TYPE
  070B    FA 0717                       JM      LET2    ;BRIF STRING
  070E    FE E3                         CPI     0E3H    ;TEST IF NUMERIC
  0710    C2 1D43                       JNZ     SNERR   ;BRIF MIXED MODE
  0713    DF                            RST     3       ;GO STORE VARIABLE
  0714    C3 02EC                       JMP     RUN     ;CONTINUE
  0717    FE E7                 LET2:   CPI     0E7H    ;TEST IF STRING
  0719    C2 1D43                       JNZ     SNERR   ;BRIF MIXED MODE
  071C    CD 0722                       CALL    LET2A   ;GO STORE IT
  071F    C3 02EC                       JMP     RUN     ;CONTINUE
                                ;
  0722    11 2467               LET2A:  LXI     D,STRIN ;POINT STRING BUFFER
  0725    1A                            LDAX    D       ;GET NEW LEN
  0726    96                            SUB     M       ;MINUS OLD LEN
  0727    CA 0777                       JZ      LET8    ;BRIF SAME LENGTH
  072A    54                            MOV     D,H     ;COPY H,L
  072B    5D                            MOV     E,L     ;TO D,E
  072C    7E                            MOV     A,M     ;GET LEN
  072D    3C                            INR     A       ;TRUE LEN
  072E    13                    LET3:   INX     D       ;POINT NEXT
  072F    3D                            DCR     A       ;DECR CTR
  0730    C2 072E                       JNZ     LET3    ;LOOP
  0733    13                            INX     D       ;SKIP
  0734    13                            INX     D       ;AGAIN
  0735    1A                            LDAX    D       ;GET LO NAM
	MACRO-80 3.44	09-Dec-81	PAGE	1-21


  0736    4F                            MOV     C,A     ;SAVE
  0737    13                            INX     D       ;GET HI NAME
  0738    1A                            LDAX    D       ;LOAD IT
  0739    47                            MOV     B,A     ;SAVE
  073A    C5                            PUSH    B       ;SAVE NAME
  073B    2B                            DCX     H       ;POINT NEXT ENTRY
  073C    7E                    LET4:   MOV     A,M     ;GET NEXT
  073D    B7                            ORA     A       ;TEST IF END
  073E    CA 0755                       JZ      LET6    ;BRIF IS
  0741    E5                            PUSH    H       ;SAVE H,L
  0742    2B                            DCX     H       ;SKIP NEXT
  0743    2B                            DCX     H       ;POINT LEN
  0744    46                            MOV     B,M     ;GET HI LEN
  0745    2B                            DCX     H       ;POINT LO
  0746    4E                            MOV     C,M     ;GET LO LEN
  0747    E1                            POP     H       ;RESTORE H,L
  0748    7E                    LET5:   MOV     A,M     ;GET A BYTE
  0749    12                            STAX    D       ;COPY
  074A    2B                            DCX     H       ;POINT NEXT
  074B    1B                            DCX     D       ;DITTO
  074C    03                            INX     B       ;ADD TO CTR
  074D    78                            MOV     A,B     ;GET HI
  074E    B1                            ORA     C       ;TEST IF ZERO
  074F    C2 0748                       JNZ     LET5    ;LOOP
  0752    C3 073C                       JMP     LET4    ;CONTINUE
  0755    EB                    LET6:   XCHG            ;PUT NEW ADDR TO H,L
  0756    C1                            POP     B       ;GET NAME
  0757    70                            MOV     M,B     ;STORE HI BYTE
  0758    2B                            DCX     H       ;POINT NEXT
  0759    71                            MOV     M,C     ;STORE LO
  075A    11 2467                       LXI     D,STRIN ;GET NEW LEN
  075D    1A                            LDAX    D       ;LOAD IT
  075E    06 FF                         MVI     B,0FFH  ;INIT HI COMPLEMENT
  0760    C6 05                         ADI     5       ;COMPUTE ENTRY LENGTH
  0762    CA 076A                       JZ      LET7    ;BRIF 256 BYTES
  0765    D2 076A                       JNC     LET7    ;BRIF LESS 256
  0768    06 FE                         MVI     B,0FEH  ;SET BIT OFF
  076A    2F                    LET7:   CMA             ;1'S COMPLEMENT
  076B    3C                            INR     A       ;THEN 2'S
  076C    4F                            MOV     C,A     ;SAVE LO LEN
  076D    2B                            DCX     H       ;POINT NEXT
  076E    70                            MOV     M,B     ;STORE HI LEN
  076F    2B                            DCX     H       ;POINT NEXT
  0770    71                            MOV     M,C     ;STORE LO LEN
  0771    E7                            RST     4       ;ADJUST H,L
  0772    03                            DB      3
  0773    09                            DAD     B       ;COMPUTE END OF ENTRY
  0774    36 00                         MVI     M,0     ;MARK NEW END
  0776    23                            INX     H       ;POINT 1ST BYTE
  0777    1A                    LET8:   LDAX    D       ;GET LEN
  0778    3C                            INR     A       ;TRUE LEN
  0779    47                            MOV     B,A     ;SAVE LEN
  077A    1A                    LET9:   LDAX    D       ;GET A BYTE
  077B    77                            MOV     M,A     ;COPY IT
  077C    23                            INX     H       ;POINT NEXT
  077D    13                            INX     D       ;DITTO
	MACRO-80 3.44	09-Dec-81	PAGE	1-22


  077E    05                            DCR     B       ;SUBT CTR
  077F    C2 077A                       JNZ     LET9    ;LOOP
  0782    C9                            RET             ;RETURN
                                ;PAGE
                                ;
                                ;NEXT   EQQU    $
                                ;
                                ;
                                ; STMT:  NEXT VAR
                                ;
                                ;
  0783    CD 1CFD               NEXT:   CALL    VAR     ;GET VARIABLE NAME
  0786    CD 1BC8                       CALL    EOL     ;ERROR IF NOT END-OF-LNE
  0789    EB                            XCHG            ;FLIP/FLOP
  078A    22 256A                       SHLD    INDX    ;SAVE VAR NAME
  078D    E5                            PUSH    H       ;SAVE VAR NAME
  078E    21 2347                       LXI     H,FORNE ;POINT FOR/NEXT TABLE
  0791    46                            MOV     B,M     ;GET SIZE
  0792    78                            MOV     A,B     ;LOAD IT
  0793    B7                            ORA     A       ;TEST IT
  0794    CA 1D4F                       JZ      NXERR   ;BRIF TABLE EMPTY
  0797    23                            INX     H       ;POINT NEXT
  0798    D1                            POP     D       ;RESTORE VAR NAME
  0799    7E                    NEXT1:  MOV     A,M     ;GET 1ST BYTE
  079A    23                            INX     H       ;POINT NEXT
  079B    BA                            CMP     D       ;COMPARE
  079C    C2 07A4                       JNZ     NEXT2   ;BRIF NOT EQUAL
  079F    7E                            MOV     A,M     ;GET 2ND BYTE
  07A0    BB                            CMP     E       ;COMPARE
  07A1    CA 07AD                       JZ      NEXT3   ;BRIF EQUAL
  07A4    E7                    NEXT2:  RST     4       ;ADJUST H,L
  07A5    0D                            DB      13
  07A6    05                            DCR     B       ;DECR COUNT
  07A7    C2 0799                       JNZ     NEXT1   ;LOOP
  07AA    C3 1D4F                       JMP     NXERR   ;GO PUT ERROR MSG
  07AD    3A 2347               NEXT3:  LDA     FORNE   ;GET ORIG COUNT
  07B0    90                            SUB     B       ;MINUS REMAIN
  07B1    3C                            INR     A       ;PLUS ONE
  07B2    32 2347                       STA     FORNE   ;STORE NEW COUNT
  07B5    23                            INX     H       ;POINT ADDR
  07B6    E5                            PUSH    H       ;SAVE H,L ADDR
  07B7    CD 1C68                       CALL    SEARC   ;GO GET ADDR OF INDEX
  07BA    EB                            XCHG            ;PUT TO H,L
  07BB    22 2599                       SHLD    ADDR1   ;SAVR IT
  07BE    EF                            RST     5       ;LOAD INDEX
  07BF    E1                            POP     H       ;GET H,L (TBL)
  07C0    E5                            PUSH    H       ;RE-SAVE
  07C1    CD 1728                       CALL    FADD    ;ADD STEP VALUE
  07C4    21 256E                       LXI     H,TVAR1 ;POINT TEMP AREA
  07C7    DF                            RST     3       ;SAVE NEW INDEX
  07C8    E1                            POP     H       ;GET H,L (TBL)
  07C9    E5                            PUSH    H       ;RE-SAVE
  07CA    E7                            RST     4       ;GET LEN TO NEXT
  07CB    04                            DB      4
  07CC    CD 17FD                       CALL    FSUB    ;SUBTRACT TO VALUE
  07CF    CA 07EC                       JZ      NEXT6   ;BRIF ZERO
	MACRO-80 3.44	09-Dec-81	PAGE	1-23


  07D2    E1                            POP     H       ;GET H,L (PTR TO STEP)
  07D3    E5                            PUSH    H       ;RE-SAVE
  07D4    7E                            MOV     A,M     ;GET SIGN&EXPONENT OF STEP
  07D5    B7                            ORA     A       ;TEST IT
  07D6    3A 259F                       LDA     FACC    ;GET SIGN & EXPON OF DIFF
  07D9    FA 07E8                       JM      NEXT5   ;BRIF NEGATIVE
  07DC    B7                            ORA     A       ;TEST SIGN OF DIFF
  07DD    FA 07EC                       JM      NEXT6   ;BRIF LESS THAN TO-EXPR
  07E0    21 2347               NEXT7:  LXI     H,FORNE ;GET ADDR TABLE
  07E3    35                            DCR     M       ;SUBTRACT ONE FROM COUNT
  07E4    D1                            POP     D       ;ADJUST STACK
  07E5    C3 02EC                       JMP     RUN     ;GO STMT AFTER NEXT
  07E8    B7                    NEXT5:  ORA     A       ;TEST SIGN OF DIFFERENCE
  07E9    FA 07E0                       JM      NEXT7   ;BRIF END OF LOOP
  07EC    E1                    NEXT6:  POP     H       ;GET PTR TO TBL
  07ED    E7                            RST     4       ;ADJUST H,L
  07EE    08                            DB      8
  07EF    56                            MOV     D,M     ;GET HI BYTE
  07F0    23                            INX     H       ;POINT NEXT
  07F1    5E                            MOV     E,M     ;GET LOW BYTE
  07F2    23                            INX     H       ;POINT NEXT
  07F3    7E                            MOV     A,M     ;GET HI BYTE
  07F4    32 25B8                       STA     STMT+1  ;SAVE
  07F7    23                            INX     H       ;POINT NEXT
  07F8    7E                            MOV     A,M     ;GET LOW BYTE
  07F9    32 25B7                       STA     STMT    ;SAVE
  07FC    EB                            XCHG            ;H,L = ADDR OF STMT AFTR FOR
  07FD    CD 1BC8                       CALL    EOL     ;SETUP MULTI PTP
  0800    2A 25B7                       LHLD    STMT    ;GET ADDR OF FOR STMT
  0803    23                            INX     H       ;POINT LINE NUM
  0804    22 25D0                       SHLD    LINE    ;SAVE ADDR LINE
  0807    21 256E                       LXI     H,TVAR1 ;POINT UPDTED VALUE
  080A    EF                            RST     5       ;GO LOAD IT
  080B    2A 2599                       LHLD    ADDR1   ;GET ADDR OF INDEX
  080E    DF                            RST     3       ;GO STORE IT
  080F    C3 02EC                       JMP     RUN     ;CONTINUE WITH STMT AFTER FOR
                                ;PAGE
  0812                          INPUT   EQU     $
                                ;
                                ;
                                ; STMT:  INPUT VAR [, VAR, VAR]
                                ;
                                ;
  0812    11 1EC8                       LXI     D,LLINE ;POINT 'LINE'
  0815    E5                            PUSH    H       ;SAVE H,L ADDR
  0816    D7                            RST     2       ;GO COMPARE
  0817    CA 0896                       JZ      INPL    ;BRIF EQUAL
  081A    D1                            POP     D       ;ELSE, RESTORE H,L ADDR
  081B    21 2415                       LXI     H,IOBUF ;GET ADDR OF BUFFER
  081E    22 2599                       SHLD    ADDR1   ;SAVE ADDR
  0821    36 00                         MVI     M,0     ;MARK BUFFER EMPTY
  0823    EB                            XCHG            ;FLIP/BACK
  0824    CF                    INPU1:  RST     1       ;SKIP SPACES
  0825    FE 27                         CPI     27H     ;TEST IF QUOTE
  0827    CA 082F                       JZ      INPU2   ;BRIF IS
  082A    FE 22                         CPI     '"'     ;TEST IF INPUT LITERAL
	MACRO-80 3.44	09-Dec-81	PAGE	1-24


  082C    C2 0852                       JNZ     INPU6   ;BRIF NOT
  082F    4F                    INPU2:  MOV     C,A     ;SAVE DELIM
  0830    11 2415                       LXI     D,IOBUF ;POINT BUFFER
  0833    23                    INPU3:  INX     H       ;POINT NEXT
  0834    7E                            MOV     A,M     ;LOAD IT
  0835    B9                            CMP     C       ;TEST IF END
  0836    CA 083E                       JZ      INPU4   ;BRIF IS
  0839    12                            STAX    D       ;PUT TO BUFF
  083A    13                            INX     D       ;POINT NEXT
  083B    C3 0833                       JMP     INPU3   ;LOOP
  083E    23                    INPU4:  INX     H       ;SKIP TRAILING QUOTE
  083F    EB                            XCHG            ;PUT ADDR TO H,L
  0840    36 FE                         MVI     M,0FEH  ;MARK END
  0842    CD 1AC8                       CALL    TERMO   ;GO PRINT PROMPT
  0845    EB                            XCHG            ;GET H,L
  0846    CF                            RST     1       ;SKIP TO NON BLANK
  0847    FE 2C                         CPI     ','     ;TEST IF COMMA
  0849    CA 0851                       JZ      INPU5   ;BRIF IS
  084C    FE 3B                         CPI     ';'     ;TEST IF COMMA
  084E    C2 0852                       JNZ     INPU6   ;BRIF NOT
  0851    23                    INPU5:  INX     H       ;SKIP IT
  0852    CD 1940               INPU6:  CALL    GETS8   ;GO GET VAR ADDR
  0855    E5                            PUSH    H       ;SAVE H ADDR
  0856    D5                            PUSH    D       ;SAVE VAR ADDR
  0857    2A 2599                       LHLD    ADDR1   ;GET ADDR PREV BUFFER
  085A    7E                            MOV     A,M     ;LOAD CHAR
  085B    FE 2C                         CPI     ','     ;TEST IF COMMA
  085D    23                            INX     H       ;POINT NEXT
  085E    CA 0866                       JZ      INPU7   ;BRIF CONTINUE FROM PREV
  0861    3E 3F                         MVI     A,'?'   ;LOAD PROMPT
  0863    CD 19F5                       CALL    TERMI   ;GO READ FROM TTY
  0866    CF                    INPU7:  RST     1       ;SKIP SPACES
  0867    79                            MOV     A,C     ;GET LO NAME
  0868    B7                            ORA     A       ;TEST IT
  0869    FA 088D                       JM      INPUA   ;BRIF STRING
  086C    CD 151F                       CALL    FIN     ;GO CONVERT TO FLOATING
  086F    CF                            RST     1       ;SKIP SPACES
  0870    FE 2C                         CPI     ','     ;TEST IF COMMA
  0872    CA 0879                       JZ      INPU8   ;BRIF IS
  0875    B7                            ORA     A       ;TEST IF END OF LINE
  0876    C2 1D53                       JNZ     CVERR   ;BRIF ERROR
  0879    22 2599               INPU8:  SHLD    ADDR1   ;SAVE ADDRESS
  087C    E1                            POP     H       ;GET VAR ADDR
  087D    DF                            RST     3       ;GO STORE THE NUMBER
  087E    E1                    INPU9:  POP     H       ;RESTORE STMT POINTER
  087F    7E                            MOV     A,M     ;GET CHAR
  0880    FE 2C                         CPI     ','     ;TEST FOR COMMA
  0882    23                            INX     H       ;POINT NEXT
  0883    CA 0824                       JZ      INPU1   ;RECDURSIVE IF COMMA
  0886    2B                            DCX     H       ;POINT BACK
  0887    CD 1BC8               INPUB:  CALL    EOL     ;ERROR IF NOT END OF LINE
  088A    C3 02EC                       JMP     RUN     ;CONTINUE NEXT STMT
  088D    CD 18FE               INPUA:  CALL    GETST   ;GO GET THE STRING
  0890    22 2599                       SHLD    ADDR1   ;SAVE ADDRESS
  0893    C3 087E                       JMP     INPU9   ;CONTINUE
                                ;
	MACRO-80 3.44	09-Dec-81	PAGE	1-25


  0896                          INPL    EQU     $
                                ;
                                ;
                                ; STMT: INPUT LINE A$
                                ;
                                ;
  0896    D1                            POP     D       ;DUMMY POP TO ADJUST STACK
  0897    CD 1CFD                       CALL    VAR     ;GET STRING NAME
  089A    7B                            MOV     A,E     ;LOAD LO BYTE
  089B    B7                            ORA     A       ;TEST IT
  089C    F2 1D43                       JP      SNERR   ;BRIF NOT STRING VARIABLE
  089F    CD 1C68                       CALL    SEARC   ;ELSE, GET ADDRESS
  08A2    D5                            PUSH    D       ;SAVE ON STACK
  08A3    CD 1BC8                       CALL    EOL     ;ERROR IF NOT END-OF-LINE
  08A6    3E 01                         MVI     A,1     ;GET ON SETTING
  08A8    32 23BB                       STA     ILSW    ;SET INPUT LINE SWITCH
  08AB    3E 3F                         MVI     A,'?'   ;LOAD PROMPT
  08AD    CD 19F5                       CALL    TERMI   ;GO READ A LINE
  08B0    06 00                         MVI     B,0     ;INIT COUNT
  08B2    11 2468                       LXI     D,STRIN+1       ;POINT STRING BUFFER
  08B5    21 2416                       LXI     H,IOBUF+1       ;POINT INPUT BUFFER
  08B8    7E                    INPL1:  MOV     A,M     ;GET NEXT BYTE
  08B9    B7                            ORA     A       ;TEST IT
  08BA    CA 08C4                       JZ      INPL2   ;BRIF END
  08BD    04                            INR     B       ;ADD TO COUNT
  08BE    12                            STAX    D       ;PUT TO STRING BUFF
  08BF    13                            INX     D       ;POINT NEXT
  08C0    23                            INX     H       ;DITTO
  08C1    C3 08B8                       JMP     INPL1   ;LOOP
  08C4    32 23BB               INPL2:  STA     ILSW    ;RESET SWITCH
  08C7    78                            MOV     A,B     ;GET COUNT
  08C8    32 2467                       STA     STRIN   ;SET STRING LENGTH
  08CB    E1                            POP     H       ;GET ADDRESS OF VARIABLE
  08CC    CD 0722                       CALL    LET2A   ;GO STORE THE STRING
  08CF    C3 02EC                       JMP     RUN     ;GO NEXT STMT
                                ;PAGE
                                ;
  08D2                          READ    EQU     $
                                ;
                                ; STMT: READ VAR [,VAR ...]
                                ;
  08D2    CF                            RST     1       ;SKIP BLANKS
  08D3    CD 1940                       CALL    GETS8   ;GET VAR ADDR
  08D6    E5                            PUSH    H       ;SAVE H,L
  08D7    D5                            PUSH    D       ;SAVE D,E
  08D8    2A 25D6                       LHLD    DATAP   ;GET DATA STMT POINTER
  08DB    7E                            MOV     A,M     ;LOAD THE CHAR
  08DC    B7                            ORA     A       ;TEST IF END OF STMT
  08DD    C2 08FC                       JNZ     READ2   ;BRIF NOT END OF STMT
  08E0    23                            INX     H       ;POINT START NEXT STMT
  08E1    7E                    READ1:  MOV     A,M     ;LOAD LEN
  08E2    22 25D6                       SHLD    DATAP   ;SAVE ADDR
  08E5    B7                            ORA     A       ;TEST IF END OF PGM
  08E6    CA 1D4B                       JZ      DAERR   ;BRIF OUT OF DATA
  08E9    E7                            RST     4       ;ADJUST H,L
  08EA    03                            DB      3
	MACRO-80 3.44	09-Dec-81	PAGE	1-26


  08EB    11 1FDF                       LXI     D,DATAL ;POINT 'DATA'
  08EE    D7                            RST     2       ;COMPARE
  08EF    CA 08FC                       JZ      READ2   ;BRIF IT IS DATA STMT
  08F2    2A 25D6                       LHLD    DATAP   ;GET ADDR START
  08F5    5E                            MOV     E,M     ;GET LEN CODE
  08F6    16 00                         MVI     D,0     ;CLEAR D
  08F8    19                            DAD     D       ;POINT NEXT STMT
  08F9    C3 08E1                       JMP     READ1   ;LOOP NEXT STMT
  08FC    CF                    READ2:  RST     1       ;SKIP SPACES
  08FD    79                            MOV     A,C     ;LOAD LO NAME
  08FE    B7                            ORA     A       ;TEST IT
  08FF    FA 0924                       JM      READ6   ;BRIF STRING
  0902    CD 151F                       CALL    FIN     ;GO CONVERT VALUE
  0905    7E                            MOV     A,M     ;GET CHAR WHICH STOPPED US
  0906    FE 2C                         CPI     ','     ;TEST IF COMMA
  0908    C2 091D                       JNZ     READ5   ;BRIF NOT
  090B    23                            INX     H       ;POINT NEXT
  090C    22 25D6               READ3:  SHLD    DATAP   ;SAVE ADDRESS
  090F    E1                            POP     H       ;RESTORE ADDR OF VAR
  0910    DF                            RST     3       ;STORE THE VALUE
  0911    E1                    READ4:  POP     H       ;RESTORE POINTER TO STM
  0912    7E                            MOV     A,M     ;GET THE CHAR
  0913    FE 2C                         CPI     ','     ;TEST IF COMMA
  0915    23                            INX     H       ;POINT NEXT
  0916    CA 08D2                       JZ      READ    ;RECURSIVE IF IT IS
  0919    2B                            DCX     H       ;RESET
  091A    C3 0887                       JMP     INPUB   ;CONTINUE
  091D    B7                    READ5:  ORA     A       ;TEST IF END OF STMT
  091E    CA 090C                       JZ      READ3   ;BRIF OK
  0921    C3 1D53                       JMP     CVERR   ;GO PROCESS ERROR
  0924    CD 18FE               READ6:  CALL    GETST   ;GO GET STRING
  0927    7E                            MOV     A,M     ;GET CHAR
  0928    FE 2C                         CPI     ','     ;TEST IF COMMA
  092A    CA 0934                       JZ      READ7   ;BRIF IS
  092D    B7                            ORA     A       ;TEST IF END
  092E    C2 091D                       JNZ     READ5   ;BRIF NOT
  0931    C3 0935                       JMP     READ8   ;GO AROUND
  0934    23                    READ7:  INX     H       ;POINT PAST
  0935    22 25D6               READ8:  SHLD    DATAP   ;SAVE ADDRESS
  0938    C3 0911                       JMP     READ4   ;CONTINUE
                                ;
  093B                          OUTP    EQU     $
                                ;
                                ; STMT; OUT ADDR,VALUE
                                ;
                                ;
  093B    CD 1071                       CALL    EXPR    ;GO EVALUATE ADDRESS
  093E    7E                            MOV     A,M     ;GET DELIM
  093F    FE 2C                         CPI     ','     ;TEST IF COMMA
  0941    C2 1D43                       JNZ     SNERR   ;BRIF NOT
  0944    23                            INX     H       ;SKIP OVER COMMA
  0945    CD 1D9E                       CALL    FBIN    ;CONVERT TO BINARY IN A-REG
  0948    11 2567                       LXI     D,OUTA  ;POINT INSTR
  094B    EB                            XCHG            ;PUT TO H,L
  094C    36 D3                         MVI     M,0D3H  ;OUT INSTR
  094E    23                            INX     H       ;POINT NEXT
	MACRO-80 3.44	09-Dec-81	PAGE	1-27


  094F    77                            MOV     M,A     ;PUT ADDR
  0950    23                            INX     H       ;POINT NEXT
  0951    36 C9                         MVI     M,0C9H  ;RET INSTR
  0953    EB                            XCHG            ;RESTORE ORIG H,L
  0954    CD 1071                       CALL    EXPR    ;GO EVAL DATA BYTE
  0957    CD 1BC8                       CALL    EOL     ;ERROR IF NOT END OF STATEMENT
  095A    CD 1D9E                       CALL    FBIN    ;CONVERT TO BINARY
  095D    CD 2567                       CALL    OUTA    ;GO PUT THE BYTE
  0960    C3 02EC                       JMP     RUN     ;GO NEXT STMT
                                ;PAGE
                                ;
  0963                          STOP    EQU     $
                                ;
                                ; STMT: STOP
                                ;
                                ;
  0963    CD 1BC8                       CALL    EOL     ;POINT END OF LINE
  0966    21 1F71                       LXI     H,STOPM ;POINT MESSAGE: "STOP AT LINE "
  0969    CD 1AD0                       CALL    TERMM   ;GO WRITE IT
  096C    CD 1D25                       CALL    PRLIN   ;GO PRINT LINE NUMBER
  096F    3A 23BC                       LDA     RUNSW   ;GET RUN TYPE
  0972    B7                            ORA     A       ;TEST IT
  0973    C2 019F                       JNZ     RDY     ;BRIF IMMED
  0976    32 25BB                       STA     MULTI   ;CLEAR MULTI SW
  0979    2A 25B7                       LHLD    STMT    ;GET ADDR OF PREV STMT
  097C    5E                            MOV     E,M     ;GET LEN
  097D    16 00                         MVI     D,0     ;CLEAR HI BYTE
  097F    19                            DAD     D       ;POINT NEXT
  0980    23                            INX     H       ;POINT LINE NUMBER
  0981    22 25D0                       SHLD    LINE    ;SAVE ADDR
  0984    11 23BE                       LXI     D,LINEN ;POINT AREA
  0987    CD 1B1C                       CALL    LINEO   ;GO CONVERT LINE NUMBER
  098A    EB                            XCHG            ;FLIP TO H,L
  098B    36 00                         MVI     M,0     ;MARK END
  098D    C3 019F                       JMP     RDY     ;GO TO READY MSG
                                ;
  0990                          RANDO   EQU     $
                                ;
                                ;
                                ; STMT: RANDOMIZE
                                ;
                                ;
  0990    CD 1BC8                       CALL    EOL     ;ERROR IF NOT END-OF-LINE
  0993    3E 01                         MVI     A,1     ;LOAD A ONE
  0995    32 25CE                       STA     RNDSW   ;SET SWITCH = TRUE RANDOM
  0998    11 25C6                       LXI     D,TRNDX ;POINT 'TRUE' RANDOM NUMBERS
  099B    21 25BE                       LXI     H,RNDX  ;POINT RECEIVE
  099E    06 08                         MVI     B,8     ;LOOP CTR
  09A0    CD 1D85                       CALL    COPYD   ;GO MOVE IT
  09A3    C3 02EC                       JMP     RUN     ;CONTINUE
                                ;
  09A6                          ON      EQU     $
                                ;
                                ;
                                ; STMT: ON EXPR GOTO NNN NNNN NNNN
                                ;               GOSUB
	MACRO-80 3.44	09-Dec-81	PAGE	1-28


                                ;
                                ;
  09A6    CD 1071                       CALL    EXPR    ;GO EVALUATE EXPRESSION
  09A9    CD 1D9E                       CALL    FBIN    ;GET BINARY NUMBER IN ACC
  09AC    B7                            ORA     A       ;TEST RESULT
  09AD    CA 1D43                       JZ      SNERR   ;BRIF ZERO (ERROR)
  09B0    4F                            MOV     C,A     ;SAVE VALUE
  09B1    0D                            DCR     C       ;LESS ONE
  09B2    AF                            XRA     A       ;GET A ZERO
  09B3    32 256C                       STA     REL     ;TURN OFF SWITCH
  09B6    11 2014                       LXI     D,GOTOL ;POINT LITERAL
  09B9    E5                            PUSH    H       ;SAVE H,L ADDRESS
  09BA    D7                            RST     2       ;GO COMPARE
  09BB    CA 09CC                       JZ      ON3     ;BRIF ON...GOTO
  09BE    E1                            POP     H       ;ELSE, RESTORE H,L
  09BF    11 1FF3                       LXI     D,GOSBL ;POINT LITERAL
  09C2    D7                            RST     2       ;GO COMPARE
  09C3    C2 1D43                       JNZ     SNERR   ;BRIF ERROR
  09C6    3E 01                         MVI     A,1     ;GET ON SETTING
  09C8    32 256C                       STA     REL     ;SET SWITCH
  09CB    E5                            PUSH    H       ;DUMMY PUSH
  09CC    D1                    ON3:    POP     D       ;ADJUST STACK
  09CD    79                    ON3A:   MOV     A,C     ;GET COUNT
  09CE    B7                            ORA     A       ;TEST IT
  09CF    CA 09EE                       JZ      ON6     ;BRIF VALUE 1
  09D2    CF                            RST     1       ;ELSE, SKIP BLANKS
  09D3    B7                            ORA     A       ;TEST IF END OF LINE
  09D4    CA 1D43                       JZ      SNERR   ;BRIF IS
  09D7    FE 2C                         CPI     ','     ;TEST IS COMMA
  09D9    C2 09E0                       JNZ     ON4     ;BRIF NOT
  09DC    23                            INX     H       ;SKIP COMMA
  09DD    C3 09CD                       JMP     ON3A    ;CONTINUE
  09E0    CD 1C5E               ON4:    CALL    NUMER   ;GO TEST IF NUMERIC
  09E3    C2 09EA                       JNZ     ON5     ;BRIF NOT
  09E6    23                            INX     H       ;POINT NEXT
  09E7    C3 09E0                       JMP     ON4     ;LOOP
  09EA    0D                    ON5:    DCR     C       ;SUB ONE FROM COUNT
  09EB    C2 09CD                       JNZ     ON3A    ;LOOP TILL JUST BEFORE STMT#
  09EE    CD 1BE1               ON6:    CALL    NOTEO   ;ERROR IF NOT END-OF-LINE
  09F1    FE 2C                         CPI     ','     ;TEST IF COMMA
  09F3    C2 09FA                       JNZ     ON7     ;BRIF NOT
  09F6    23                            INX     H       ;POINT NEXT
  09F7    C3 09EE                       JMP     ON6     ;LOOP
  09FA    CD 1C5E               ON7:    CALL    NUMER   ;TEST IF NUMERIC
  09FD    C2 1D43                       JNZ     SNERR   ;BRIF NOT
  0A00    CD 1BE9                       CALL    PACK    ;GET THE LINE NUMBER
  0A03    7E                    ON8:    MOV     A,M     ;GET NEXT CHAR
  0A04    CD 1BDC                       CALL    TSTEL   ;TEST IF END STMT
  0A07    CA 0A0E                       JZ      ON9     ;BRIF END
  0A0A    23                            INX     H       ;POINT NEXT
  0A0B    C3 0A03                       JMP     ON8     ;LOOP
  0A0E    CD 1BC8               ON9:    CALL    EOL     ;SET END OF LINE POINTERS
  0A11    3A 256C                       LDA     REL     ;GET TYPE (GOTO OR GOSUB)
  0A14    B7                            ORA     A       ;TEST IT
  0A15    C2 0434                       JNZ     GOSU1   ;BRIF GOSUB
  0A18    C3 03F7                       JMP     GOTO2   ;BR TO GOTO LOOKUP
	MACRO-80 3.44	09-Dec-81	PAGE	1-29


                                ;PAGE
                                ;
  0A1B                          CHANG   EQU     $
                                ;
                                ; STATEMENT: CHANGE A$ TO X     - OR -
                                ;
                                ;            CHANGE X TO A$
                                ;
  0A1B    CD 1CFD                       CALL    VAR     ;NEXT WORD MUST BE VAR
  0A1E    7B                            MOV     A,E     ;TEST TYPE
  0A1F    B7                            ORA     A       ;SET FLAGS
  0A20    F2 0A59                       JP      CHA2    ;BRIF NOT-STRING
  0A23    CD 1C68                       CALL    SEARC   ;GET ADDR
  0A26    D5                            PUSH    D       ;SAVE IT
  0A27    11 2016                       LXI     D,TOLIT ;POINT 'TO'
  0A2A    D7                            RST     2       ;COMPARE
  0A2B    C2 1D43                       JNZ     SNERR   ;BRIF ERROR
  0A2E    CD 1CFD                       CALL    VAR     ;GET NEXT VARIABLE
  0A31    7A                            MOV     A,D     ;GET HI NAME
  0A32    F6 80                         ORI     80H     ;SET MASK FOR ARRAY
  0A34    57                            MOV     D,A     ;REPLACE
  0A35    CD 1C68                       CALL    SEARC   ;GET ADDRESS
  0A38    E7                            RST     4       ;POINT START OF ELEMENT 0,0
  0A39    F5                            DB      -11 AND 0FFH
  0A3A    D1                            POP     D       ;GET PTR TO STMT
  0A3B    EB                            XCHG            ;FLIP
  0A3C    CD 1BC8                       CALL    EOL     ;NEXT MUST BE E-O-L
  0A3F    EB                            XCHG            ;FLIP AGAIN
  0A40    D1                            POP     D       ;GET ADDR STRING
  0A41    1A                            LDAX    D       ;GET COUNT
  0A42    47                            MOV     B,A     ;SAVE IT
  0A43    04                            INR     B       ;BUMP
  0A44    C5                    CHA1:   PUSH    B       ;SAVE CTR
  0A45    D5                            PUSH    D       ;SAVE ADDR STRING
  0A46    E5                            PUSH    H       ;SAVE ADDR NUM
  0A47    CD 0E0B                       CALL    FDEC    ;CONVERT TO F.P.
  0A4A    E1                            POP     H       ;GET ADDR
  0A4B    DF                            RST     3       ;STORE IT
  0A4C    E7                            RST     4       ;POINT TO NEXT
  0A4D    F8                            DB      -8 AND 0FFH
  0A4E    D1                            POP     D       ;RESTORE STRING
  0A4F    C1                            POP     B       ;AND CTR
  0A50    13                            INX     D       ;POINT NEXT CHAR
  0A51    1A                            LDAX    D       ;LOAD IT
  0A52    05                            DCR     B       ;DECR CTR
  0A53    C2 0A44                       JNZ     CHA1    ;LOOP
  0A56    C3 02EC                       JMP     RUN
                                ;
                                ;
  0A59    7A                    CHA2:   MOV     A,D     ;GET HI NAME
  0A5A    F6 80                         ORI     80H     ;MAKE ARRAY NAME
  0A5C    57                            MOV     D,A     ;SAVE
  0A5D    CD 1C68                       CALL    SEARC   ;GET ADDR
  0A60    E7                            RST     4       ;POINT ELEMENT 0,0
  0A61    F5                            DB      -11 AND 0FFH
  0A62    E3                            XTHL            ;SAVE ON STACK
	MACRO-80 3.44	09-Dec-81	PAGE	1-30


  0A63    11 2016                       LXI     D,TOLIT ;POINT 'TO'
  0A66    D7                            RST     2       ;COMPARE
  0A67    C2 1D43                       JNZ     SNERR   ;BRIF ERROR
  0A6A    CD 1CFD                       CALL    VAR     ;GET NAME
  0A6D    7B                            MOV     A,E     ;GET TYPE
  0A6E    B7                            ORA     A       ;SET FLAGS
  0A6F    F2 1D43                       JP      SNERR   ;BRIF NOT STRING
  0A72    CD 1BC8                       CALL    EOL     ;BRIF NOT E-O-L
  0A75    CD 1C68                       CALL    SEARC   ;GET ADDR
  0A78    E1                            POP     H       ;GET ADDR VAR
  0A79    D5                            PUSH    D       ;SAVE D,E
  0A7A    11 2467                       LXI     D,STRIN ;POINT STRING BUFFER
  0A7D    D5                            PUSH    D       ;SAVE IT
  0A7E    EF                            RST     5       ;LOAD IT
  0A7F    E7                            RST     4       ;POINT NEXT
  0A80    F8                            DB      -8 AND 0FFH
  0A81    E5                            PUSH    H       ;SAVE H,L
  0A82    CD 1D9E                       CALL    FBIN    ;CONVERT
  0A85    E1                            POP     H       ;RESTORE
  0A86    D1                            POP     D       ;DITTO
  0A87    47                            MOV     B,A     ;SAVE COUNT
  0A88    04                            INR     B       ;BUMP IT
  0A89    12                    CHA3:   STAX    D       ;PUT TO STRING
  0A8A    13                            INX     D       ;POINT NEXT STR LOC.
  0A8B    C5                            PUSH    B       ;SAVE CTRS
  0A8C    D5                            PUSH    D       ;AND AD^DR
  0A8D    EF                            RST     5       ;LOAD NEXT
  0A8E    E7                            RST     4       ;POINT NEXT
  0A8F    F8                            DB      -8 AND 0FFH
  0A90    E5                            PUSH    H       ;AND H ADDR
  0A91    CD 1D9E                       CALL    FBIN    ;CONVERT
  0A94    E1                            POP     H       ;RESTORE H,L
  0A95    D1                            POP     D       ;AND D,E
  0A96    C1                            POP     B       ;AND CTRS
  0A97    05                            DCR     B       ;DECR CTR
  0A98    C2 0A89                       JNZ     CHA3    ;LOOP
  0A9B    E1                            POP     H       ;GET ADDR OF VAR (STRING)
  0A9C    CD 0722                       CALL    LET2A   ;GO STORE IT
  0A9F    C3 02EC                       JMP     RUN     ;CONTINUE
                                ;PAGE
                                ;
  0AA2                          DIM     EQU     $
                                ;
                                ; STMT: DIM VAR(A,B),...
                                ;
                                ;
  0AA2    CD 1CFD                       CALL    VAR     ;GO GET VAR NAME
  0AA5    F2 1D43                       JP      SNERR   ;BRIF NO (
  0AA8    CD 1C68                       CALL    SEARC   ;GO LOCATE THE VAR
  0AAB    E3                            XTHL            ;PUT ADDR IN STACK, GET PTR TO (
  0AAC    F5                            PUSH    PSW     ;SAVE STATUS
  0AAD    3E FF                         MVI     A,0FFH  ;TURN ON SW
  0AAF    32 23B9                       STA     DIMSW   ;SET IT
  0AB2    CD 1071                       CALL    EXPR    ;GO EVALUATE
  0AB5    F1                            POP     PSW     ;GET STATUS
  0AB6    E3                            XTHL            ;SWAP PTRS
	MACRO-80 3.44	09-Dec-81	PAGE	1-31


  0AB7    D5                            PUSH    D       ;SAVE ROW NUMBER
  0AB8    C5                            PUSH    B       ;SAVE COL NUMBER
  0AB9    03                            INX     B       ;INCREMENT COLUMNS
  0ABA    13                            INX     D       ;AND ROWS
  0ABB    E5                            PUSH    H       ;SAVE H,L
  0ABC    F5                            PUSH    PSW     ;RESAVE STATUS
  0ABD    21 0000                       LXI     H,0     ;GET A ZERO
  0AC0    19                    DIM1:   DAD     D       ;TIMES ONE
  0AC1    0B                            DCX     B       ;DCR COLS
  0AC2    78                            MOV     A,B     ;GET HI
  0AC3    B1                            ORA     C       ;PLUS LO
  0AC4    C2 0AC0                       JNZ     DIM1    ;LOOP
  0AC7    F1                            POP     PSW     ;GET STATUS
  0AC8    D1                            POP     D       ;GET ADDRESS
  0AC9    29                            DAD     H       ;TIMES TWO
  0ACA    29                            DAD     H       ;TIMES FOUR
  0ACB    01 0008                       LXI     B,8     ;PLUS 2 (NAME AND DISP)
  0ACE    FA 0B0E                       JM      REDIM   ;GO RE-DIMENSION
  0AD1    E5                            PUSH    H       ;SAVE PRODUCT
  0AD2    09                            DAD     B       ;ADD IT
  0AD3    EB                            XCHG            ;FLIP/FLOP
  0AD4    2B                            DCX     H       ;POINT LO NAME
  0AD5    2B                            DCX     H       ;POINT HI DISP
  0AD6    7B                            MOV     A,E     ;GET LO
  0AD7    2F                            CMA             ;COMPLEMENT
  0AD8    C6 01                         ADI     1       ;PLUS ONE
  0ADA    5F                            MOV     E,A     ;RESTORE
  0ADB    7A                            MOV     A,D     ;GET HI
  0ADC    2F                            CMA             ;COMPLEMENT
  0ADD    CE 00                         ACI     0       ;PLUS CARRY
  0ADF    77                            MOV     M,A     ;STORE IT
  0AE0    2B                            DCX     H       ;POINT NEXT
  0AE1    73                            MOV     M,E     ;STORE LO
  0AE2    EB                            XCHG            ;SAVE IN D,E
  0AE3    E1                            POP     H       ;GET PRODUCT
  0AE4    44                            MOV     B,H     ;COPY H,L
  0AE5    4D                            MOV     C,L     ;TO B,C
  0AE6    EB                            XCHG            ;GET LOCAT
  0AE7    D1                            POP     D       ;GET COLUMNS
  0AE8    2B                            DCX     H       ;POINT NEXT
  0AE9    72                            MOV     M,D     ;MOVE LO COL
  0AEA    2B                            DCX     H       ;POINT NEXT
  0AEB    73                            MOV     M,E     ;MOVE HI COL
  0AEC    D1                            POP     D       ;GET ROWS
  0AED    2B                            DCX     H       ;POINT NEXT
  0AEE    72                            MOV     M,D     ;MOVE HI ROW
  0AEF    2B                            DCX     H       ;POINT NEXT
  0AF0    73                            MOV     M,E     ;MOVE LO ROW
  0AF1    2B                            DCX     H       ;POINT NEXT
  0AF2    36 00                 DIM2:   MVI     M,0     ;CLEAR ONE BYTE
  0AF4    2B                            DCX     H       ;POINT NEXT
  0AF5    0B                            DCX     B       ;DECR CTR
  0AF6    78                            MOV     A,B     ;GET HI
  0AF7    B1                            ORA     C       ;PLUS LO
  0AF8    C2 0AF2                       JNZ     DIM2    ;LOOP
  0AFB    36 00                         MVI     M,0     ;MARK END
	MACRO-80 3.44	09-Dec-81	PAGE	1-32


  0AFD    E1                    DIM3:   POP     H       ;GET PTR TO STMT
  0AFE    7E                            MOV     A,M     ;LOAD CHAR
  0AFF    FE 2C                         CPI     ','     ;TEST IF COMMA
  0B01    C2 0B08                       JNZ     DIM4    ;BRIF NOT
  0B04    23                            INX     H       ;SKIP IT
  0B05    C3 0AA2                       JMP     DIM     ;CONTINUE
  0B08    CD 1BC8               DIM4:   CALL    EOL     ;TEST END OF LINE
  0B0B    C3 02EC                       JMP     RUN     ;CONTINUE WITH PROGRAM
  0B0E    09                    REDIM:  DAD     B       ;COMPUTE LEN TO NEXT
  0B0F    1B                            DCX     D       ;POINT LO NAME
  0B10    1B                            DCX     D       ;POINT HI DISP
  0B11    1A                            LDAX    D       ;GET IT
  0B12    47                            MOV     B,A     ;SAVE
  0B13    1B                            DCX     D       ;POINT LO DISP
  0B14    1A                            LDAX    D       ;GET IT
  0B15    4F                            MOV     C,A     ;SAVE
  0B16    09                            DAD     B       ;COMPUTE DIFF OR PRIOR DIM AND THIS
  0B17    7C                            MOV     A,H     ;GET HI DIFF
  0B18    B7                            ORA     A       ;TEST IT
  0B19    FA 0B24                       JM      REDM1   ;BRIF PREV > NEW
  0B1C    C2 1D43                       JNZ     SNERR   ;BRIF PREV < NEW
  0B1F    7D                            MOV     A,L     ;GET LO DIFF
  0B20    B7                            ORA     A       ;TEST IT
  0B21    C2 1D43                       JNZ     SNERR   ;BRIF PREV < NEW
  0B24    EB                    REDM1:  XCHG            ;PUT ADDR IN H,L
  0B25    2B                            DCX     H       ;POINT HI COL
  0B26    D1                            POP     D       ;GET COL
  0B27    72                            MOV     M,D     ;MOVE HI
  0B28    2B                            DCX     H       ;POINT LO COL
  0B29    73                            MOV     M,E     ;MOVE LO
  0B2A    D1                            POP     D       ;GET ROW
  0B2B    2B                            DCX     H       ;POINT HI ROW
  0B2C    72                            MOV     M,D     ;MOVE HI
  0B2D    2B                            DCX     H       ;POINT LO ROW
  0B2E    73                            MOV     M,E     ;MOVE LO
  0B2F    C3 0AFD                       JMP     DIM3    ;CONTINUE
                                ;PAGE
                                ;
  0B32                          SIN     EQU     $
                                ;
                                ; COMPUTE SINE OF X, (X IN RADIANS)
                                ;
                                ; USES 4TH DEGREE POLYNOMIAL APPROXIMATION
                                ;
                                ;
                                ; FIRST, REDUCE ANGLE TO RANGE: (-PI/2,PI/2)
                                ;
  0B32    CD 19BF                       CALL    FTEST   ;GET STATUS OF ANGLE
  0B35    C8                            RZ              ;SIN(0)=0
  0B36    F5                            PUSH    PSW     ;SAVE SIGN OF ANGLE
  0B37    CD 0CB8                       CALL    ABS
  0B3A    F1                    SIN1:   POP     PSW     ;COMPLEMENT SIGN FOR EACH PI SUB'D
  0B3B    2F                            CMA             ;..
  0B3C    F5                            PUSH    PSW     ;..
  0B3D    21 1EE6                       LXI     H,PI    ;REDUCE TO -PI<X<0
  0B40    CD 17FD                       CALL    FSUB
	MACRO-80 3.44	09-Dec-81	PAGE	1-33


  0B43    F2 0B3A                       JP      SIN1
  0B46    21 1F1A                       LXI     H,HALFP ;NOW ADD PI FOR -PI<X<-PI/2
  0B49    E5                            PUSH    H
  0B4A    CD 1728                       CALL    FADD
  0B4D    F4 0D6B                       CP      NEG     ;AND JUST NEGATE FOR -PI/2<X<0
  0B50    E1                            POP     H
  0B51    CD 1728                       CALL    FADD
  0B54    F1                            POP     PSW     ;RESTORE SIGN
  0B55    B7                            ORA     A
  0B56    F4 0D6B                       CP      NEG
                                ;
                                ; INIT REGISTERS
                                ;
  0B59    21 2576                       LXI     H,TEMP1 ;POINT IT
  0B5C    DF                            RST     3       ;SAVE IT
  0B5D    3A 259F                       LDA     FACC    ;GET SIGN&EXPONENT
  0B60    CD 19CD                       CALL    FEXP    ;EXPAND EXPON.
  0B63    F2 0B69                       JP      SIN3A   ;BRIF POSITIVE
  0B66    FE FD                         CPI     0FDH    ;TEST EXPONENT
  0B68    D8                            RC              ;RETURN IF VERY SMALL RADIAN
                                ;
                                ; ABOVE ROUTINE WILL APPROX SIN(X) == X FOR X: (-.06,.06)
                                ;
  0B69    21 1F1A               SIN3A:  LXI     H,HALFP ;POINT PI/2
  0B6C    CD 188C                       CALL    FDIV    ;COMPUTE X/PI/2
  0B6F    21 257A                       LXI     H,TEMP2 ;POINT T2
  0B72    DF                            RST     3       ;STORE IT
  0B73    21 257A                       LXI     H,TEMP2 ;POINT BACK
  0B76    CD 1809                       CALL    FMUL    ;COMPUTE SQUARE
  0B79    21 1F2A                       LXI     H,SINCO ;POINT CONSTANTS
                                ;
                                ; EVALUATE POWER SERIES
                                ;
                                ; EVALUATE STARTING FROM HIGH ORDER COEFFICIENT:
                                ;  F(X)=(...(CN*FACC+C(N-1))*FACC+...+C1)*FACC*TEMP2+TEMP1
                                ;
                                ;ON ENTRY:
                                ;       TEMP1=CONSTANT TERM
                                ;       TEMP2=X OR 1
                                ;       FACC=X^2 OR X
                                ;       (HL)=COEFFICIENT OF LAST TERM
                                ;
  0B7C    E5                    EVPS:   PUSH    H       ;SAVE POINTER TO COEFFICIENTS
  0B7D    21 257E                       LXI     H,TEMP3 ;SAVE FACC
  0B80    DF                            RST     3
  0B81    E1                            POP     H       ;RESTORE H
  0B82    E5                            PUSH    H
  0B83    C3 0B8D                       JMP     EVPS2
  0B86    E5                    EVPS1:  PUSH    H       ;SAVE PTR TO NEXT COEFFICIENT
  0B87    CD 1728                       CALL    FADD    ;FACC+CN->FACC
  0B8A    21 257E                       LXI     H,TEMP3 ;POINTER TO X^N
  0B8D    CD 1809               EVPS2:  CALL    FMUL    ;FACC*X^N->FACC
  0B90    E1                            POP     H       ;COEFFICENT PTR
  0B91    E7                            RST     4       ;MOVE TO NEXT COEFFICIENT
  0B92    FC                            DB      -4 AND 0FFH
  0B93    7E                            MOV     A,M     ;GET EXPONENT
	MACRO-80 3.44	09-Dec-81	PAGE	1-34


  0B94    3D                            DCR     A       ;TEST FOR 1
  0B95    C2 0B86                       JNZ     EVPS1   ;BRIF NOT 1
  0B98    21 257A                       LXI     H,TEMP2 ;MUL BY TEMP2
  0B9B    CD 1809                       CALL    FMUL
  0B9E    21 2576                       LXI     H,TEMP1 ;POINT TO CONSTANT TERM
  0BA1    C3 1728                       JMP     FADD    ;ADD IT AND RETURN TO CALLER
                                ;
  0BA4                          COS     EQU     $
                                ;
                                ;
                                ; COMPUTE COSINE OF ANGLE, X EXPRESSED IN RADIANS
                                ; USES THE TRANSFORMATION: Y = PI/2 +- X
                                ;     AND THEN COMPUTES SIN(Y).
                                ;
                                ;
  0BA4    21 1F1A                       LXI     H,HALFP ;COMPUTE PI/2 + X
  0BA7    CD 1728                       CALL    FADD    ;GO ADD
  0BAA    C3 0B32                       JMP     SIN     ;GO COMPUTE SINE
                                ;
  0BAD                          TAN     EQU     $
                                ;
                                ; COMPUTE TANGENT OF X, IN RADIANS
                                ; USES THE RELATION:
                                ;
                                ;          SIN(X)
                                ; TAN(X) = ------
                                ;          COS(X)
                                ;
  0BAD    21 2582                       LXI     H,TEMP4 ;POINT SAVE AREA
  0BB0    DF                            RST     3       ;SAVE ANGLE
  0BB1    CD 0BA4                       CALL    COS     ;COMPUTE COS(X)
  0BB4    21 258E                       LXI     H,TEMP7 ;SAVE COS(X)->TEMP7
  0BB7    DF                            RST     3
  0BB8    21 2582                       LXI     H,TEMP4 ;MOVE X->FACC
  0BBB    EF                            RST     5
  0BBC    CD 0B32                       CALL    SIN     ;COMPUTE SINE
  0BBF    21 258E                       LXI     H,TEMP7 ;POINT COS
  0BC2    C3 188C                       JMP     FDIV    ;DIVIDE AND RETURN TO CALLER
                                ;
  0BC5                          ATN     EQU     $
                                ;
                                ; COMPUTES THE ARCTANGENT OF X
                                ; USES A SEVENTH DEGREE POLYNOMIAL APPROXIMATION
                                ;
  0BC5    CD 19BF                       CALL    FTEST   ;CHECK SIGN OF ARGUMENT
  0BC8    F2 0BD4                       JP      ATN1    ;BRIF POSITIVE
  0BCB    CD 0D6B                       CALL    NEG     ;REVERSE SIGN
  0BCE    CD 0BD4                       CALL    ATN1    ;GET POSITIVE ATN
  0BD1    C3 0D6B                       JMP     NEG     ;MAKE NEG & RETURN
                                ;
  0BD4    21 1F2E               ATN1:   LXI     H,ONE   ;POINT: 1
  0BD7    CD 1728                       CALL    FADD    ;GO ADD
  0BDA    21 2576                       LXI     H,TEMP1 ;POINT SAVE
  0BDD    DF                            RST     3       ;STORE
  0BDE    21 1EDE                       LXI     H,TWO   ;POINT: 2
  0BE1    CD 17FD                       CALL    FSUB    ;GO SUBTRACT
	MACRO-80 3.44	09-Dec-81	PAGE	1-35


  0BE4    21 2576                       LXI     H,TEMP1 ;POINT SAVED
  0BE7    CD 188C                       CALL    FDIV    ;DIVIDE
  0BEA    21 257A                       LXI     H,TEMP2 ;POINT SAVE
  0BED    DF                            RST     3       ;SAVE X'=(X-1)/(X+1)
  0BEE    21 1EEA                       LXI     H,QTRPI ;X'+PI/4 -> TEMP1
  0BF1    CD 1728                       CALL    FADD
  0BF4    21 2576                       LXI     H,TEMP1
  0BF7    DF                            RST     3
  0BF8    E5                            PUSH    H       ;SAVE PTR TO TEMP2
  0BF9    EF                            RST     5       ;LOAD IT
  0BFA    E1                            POP     H
  0BFB    CD 1809                       CALL    FMUL    ;FACC=X'*X'
  0BFE    21 1F16                       LXI     H,ATNCO ;POINT LIST COEFFICIENTS
  0C01    C3 0B7C                       JMP     EVPS    ;GO COMPUTE & RETURN
                                ;
  0C04                          LN      EQU     $
                                ;
                                ;
                                ; COMPUTES THE NATRUAL LOGRITHM, LN(X)
                                ; USES A 7TH DEGREE POLYNOMIAL APPROXIMATION
                                ;
  0C04    CD 19BF                       CALL    FTEST   ;TEST THE ARGUMENT
  0C07    FA 1D3B                       JM      ZMERR   ;LN(-X)=NO NO
  0C0A    CA 1D3B                       JZ      ZMERR   ;LN(0)=NO NO ALSO
  0C0D    21 257A                       LXI     H,TEMP2 ;POINT SAVE AREA
  0C10    DF                            RST     3       ;STORE IT
  0C11    3A 259F                       LDA     FACC    ;GET EXPON
  0C14    CD 19CD                       CALL    FEXP    ;EXPAND TO 8 BITS
  0C17    CA 0C1D                       JZ      LN0     ;BRIF 0.5 < X < 1.0
  0C1A    F2 0C29                       JP      LN1     ;BRIF POSITIVE EXPONENT
  0C1D    2F                    LN0:    CMA             ;ELSE COMPLIMENT
  0C1E    C6 02                         ADI     2       ;PLUS TWO
  0C20    CD 0E0B                       CALL    FDEC    ;CONVERT TO FLOAT POINT
  0C23    CD 0D6B                       CALL    NEG     ;THEN NEGATE
  0C26    C3 0C2E                       JMP     LN2     ;GO AROUND
  0C29    DE 01                 LN1:    SBI     1       ;MINUS ONE
  0C2B    CD 0E0B                       CALL    FDEC    ;CONVERT TO FLOATING POINT
  0C2E    21 1EF2               LN2:    LXI     H,LN2C  ;POINT LN(2)
  0C31    CD 1809                       CALL    FMUL    ;MULTIPLY
  0C34    21 2576                       LXI     H,TEMP1 ;POINT SAVE AREA
  0C37    DF                            RST     3       ;STORE IT
  0C38    EF                            RST     5       ;GET ORIG X
  0C39    3E 01                         MVI     A,1     ;GET EXPONENT: 1
  0C3B    32 259F                       STA     FACC    ;ADJUST TO RANGE (1,2)
  0C3E    21 1F2E                       LXI     H,ONE   ;POINT 1
  0C41    E5                            PUSH    H       ;SAVE PTR TO ONE
  0C42    CD 17FD                       CALL    FSUB    ;SUBTRACT ONE
  0C45    D1                            POP     D       ;SET TEMP2=1
  0C46    21 257A                       LXI     H,TEMP2
  0C49    CD 1D83                       CALL    CPY4D
  0C4C    21 1F4A                       LXI     H,LNCO  ;POINT COEFFICIENTS
  0C4F    C3 0B7C                       JMP     EVPS    ;APPROXIMATE & RETURN
                                ;
                                ; X=LOG(X) --- THIS IS LOG BASE 10.
                                ;
  0C52                          LOG     EQU     $
	MACRO-80 3.44	09-Dec-81	PAGE	1-36


  0C52    CD 0C04                       CALL    LN      ;COMPUTE NATURAL LOG
  0C55    21 1F66                       LXI     H,LNC   ;POINT LOG(E)
  0C58    C3 1809                       JMP     FMUL    ;MULTIPLY AND RETURN
                                ;
  0C5B                          EXP     EQU     $
                                ;
                                ;  COMPUTES EXP(X) USING ALGORITHM EXP(X)=(2^I)*(2^FP) WHERE
                                ;  2^I=INT(X*LN BASE 2 OF E) AND,
                                ;  2^FP=5TH DEGREE POLY. APPROXIMATION
                                ;  FP=FRACTIONAL PART OF INT(X*LN2E)
                                ;
  0C5B    CD 19BF                       CALL    FTEST   ;CHECK SIGN
  0C5E    F2 0C75                       JP      EXP1    ;BRIF POSITIVE
  0C61    CD 0D6B                       CALL    NEG     ;ELSE, REVERSE SIGN
  0C64    CD 0C75                       CALL    EXP1    ;COMPUTE POSITIVE EXP
  0C67    21 2576                       LXI     H,TEMP1 ;POINT SAVE AREA
  0C6A    DF                            RST     3       ;STORE IT
  0C6B    21 1F2E                       LXI     H,ONE   ;POINT 1
  0C6E    EF                            RST     5       ;LOAD IT
  0C6F    21 2576                       LXI     H,TEMP1 ;POINT PREV
  0C72    C3 188C                       JMP     FDIV    ;RECIPRICAL AND RETURN
                                ;
  0C75    21 1F4E               EXP1:   LXI     H,LN2E  ;POINT LN BASE 2 OF E
  0C78    CD 1809                       CALL    FMUL    ;FACC=X*(LN2E)
  0C7B    21 257E                       LXI     H,TEMP3 ;POINT SAVE AREA
  0C7E    DF                            RST     3       ;TEMP3=X*LN2E
  0C7F    CD 0CD3                       CALL    INT     ;FACC=INT(X*LN2E)
  0C82    21 2582                       LXI     H,TEMP4 ;POINT SAVE AREA
  0C85    DF                            RST     3       ;TEMP4=INT(X*LN2E)
  0C86    DF                            RST     3       ;DITTO FOR TEMP5
  0C87    3A 259F                       LDA     FACC    ;GET THE EXPONENT COUNT
  0C8A    47                            MOV     B,A     ;SAVE COUNT IN B
  0C8B    3A 25A0                       LDA     FACC+1  ;GET MANTISSA
  0C8E    07                    ELOOP:  RLC             ;ROTATE LEFT
  0C8F    05                            DCR     B       ;REDUCE COUNT
  0C90    C2 0C8E                       JNZ     ELOOP   ;CONTINUE SHIFTING
  0C93    3C                            INR     A       ;ADJUST EXPONENT
  0C94    32 2582                       STA     TEMP4   ;STORE EXPONENT
  0C97    3E 80                         MVI     A,80H   ;LOAD CONSTANT
  0C99    32 2583                       STA     TEMP4+1 ;STORE AS MANTISSA
  0C9C    21 1F2E                       LXI     H,ONE   ;1 -> TEMP1, TEMP2
  0C9F    EF                            RST     5
  0CA0    21 2576                       LXI     H,TEMP1
  0CA3    DF                            RST     3
  0CA4    DF                            RST     3
  0CA5    EF                            RST     5       ;LOAD TEMP3=INT(X*LN2E)
  0CA6    21 2586                       LXI     H,TEMP5 ;GET FACC=FP(X*LN2E)
  0CA9    CD 17FD                       CALL    FSUB
  0CAC    21 1F62                       LXI     H,EXPCO ;POINT CONSTANTS
  0CAF    CD 0B7C                       CALL    EVPS    ;COMPUTE POLYNOMIAL
  0CB2    21 2582                       LXI     H,TEMP4 ;POINT 2^(INT(X*LN2E))
  0CB5    C3 1809                       JMP     FMUL    ;MULTIPLY,NORMALIZE AND RETURN
                                ;
                                ;
  0CB8                          ABS     EQU     $
                                ;
	MACRO-80 3.44	09-Dec-81	PAGE	1-37


                                ;
                                ; RETURN THE ABSOLUTE VALUE OF THE FLOATING ACCUMULATOR
                                ;
                                ;
  0CB8    3A 259F                       LDA     FACC    ;GET EXPONENT
  0CBB    E6 7F                         ANI     7FH     ;STRIP NEGATIVE SIGN
  0CBD    32 259F                       STA     FACC    ;REPLACE
  0CC0    C9                            RET             ;RETURN
                                ;
  0CC1                          SGN     EQU     $
                                ;
                                ;
                                ; RETURNS THE SIGN OF THE FLOATING ACCUMULATOR
                                ; THAT IS:
                                ;  1 IF FACC > 0
                                ;  0 IF FACC = 0
                                ; -1 IF FACC < 0
                                ;
  0CC1    CD 19BF                       CALL    FTEST   ;GET STATUS OF FACC
  0CC4    C8                            RZ              ;RETURN IF ZERO
  0CC5    E6 80                         ANI     80H     ;ISOLATE SIGN
  0CC7    F6 01                 SGN1:   ORI     1       ;CREATE EXPONENT
  0CC9    F5                            PUSH    PSW     ;SAVE IT
  0CCA    21 1F2E                       LXI     H,ONE   ;GET ADDRESS OF CONSTANT 1
  0CCD    EF                            RST     5       ;GO LOAD IT
  0CCE    F1                            POP     PSW     ;RESTORE SIGN
  0CCF    32 259F                       STA     FACC    ;SET THE SIGN
  0CD2    C9                            RET             ;RETURN
                                ;
  0CD3                          INT     EQU     $
                                ;
                                ;
                                ; RETURNS THE GREATEST INTEGER NOT LARGER THAN VALUE IN FACC
                                ; E.G.:
                                ;    INT(3.14159) =  3
                                ;    INT(0)       =  0
                                ;    INT(-3.1415) = -4
                                ;
                                ;
  0CD3    21 259F                       LXI     H,FACC  ;POINT FLOAT ACC
  0CD6    7E                            MOV     A,M     ;GET EXPONENT
  0CD7    E6 40                         ANI     40H     ;GET SIGN OF CHARACTERISTIC
  0CD9    CA 0CE1                       JZ      INT2    ;BRIF GE ZERO
  0CDC    06 04                         MVI     B,4     ;LOOP CTR
  0CDE    C3 1D96                       JMP     ZEROM   ;GO ZERO THE FACC
  0CE1    7E                    INT2:   MOV     A,M     ;GET EXPONENT AGAIN
  0CE2    B7                            ORA     A       ;TEST SIGN
  0CE3    F2 0CF0                       JP      INT3    ;BRIF POSITIVE OR ZERO
  0CE6    21 1EEE                       LXI     H,NEGON ;POINT CONSTANT: -.9999999
  0CE9    CD 1728                       CALL    FADD    ;ADD TO FACC
  0CEC    21 259F                       LXI     H,FACC  ;POINT EXPONTENT AGAIN
  0CEF    7E                            MOV     A,M     ;LOAD IT
  0CF0    E6 3F                 INT3:   ANI     3FH     ;ISOLATE CHARACTERISTIC
  0CF2    FE 18                         CPI     24      ;TEST IF ANY FRACTION
  0CF4    F0                            RP              ;RETURN IF NOT
  0CF5    47                            MOV     B,A     ;SAVE EXPONENT
	MACRO-80 3.44	09-Dec-81	PAGE	1-38


  0CF6    3E 18                         MVI     A,24    ;GET CONSTANT
  0CF8    90                            SUB     B       ;MINUS EXPONENT = LOOP CTR
  0CF9    4F                            MOV     C,A     ;SAVE IT
  0CFA    21 25A0               INT4:   LXI     H,FACC+1        ;POINT MSB
  0CFD    AF                            XRA     A       ;CLEAR CY FLAG
  0CFE    06 03                         MVI     B,3     ;BYTE COUNT
  0D00    7E                    INT5:   MOV     A,M     ;LOAD A BYTE
  0D01    1F                            RAR             ;SHIFT RIGHT
  0D02    77                            MOV     M,A     ;REPLACE
  0D03    23                            INX     H       ;POINT NEXT
  0D04    05                            DCR     B       ;DECR BYTE CTR
  0D05    C2 0D00                       JNZ     INT5    ;LOOP
  0D08    0D                            DCR     C       ;DECR BIT CTR
  0D09    C2 0CFA                       JNZ     INT4    ;LOOP
  0D0C    21 259F                       LXI     H,FACC  ;POINT SIGN & EXP
  0D0F    7E                            MOV     A,M     ;LOAD IT
  0D10    E6 80                         ANI     80H     ;ISOLATE SIGN
  0D12    C6 18                         ADI     24      ;PLUS INTEGER
  0D14    77                            MOV     M,A     ;REPLACE IT
  0D15    C3 17CE                       JMP     FNORM   ;GO NORMALIZE & RETURN
                                ;
  0D18                          SQR     EQU     $
                                ;
                                ; COMPUTE SQAURE ROOT OF ARG IN FACC, PUT RESULT IN FACC
                                ;
                                ; USE HERON'S ITERATIVE PROCESS
                                ;
  0D18    CD 19BF                       CALL    FTEST   ;TEST THE ARGUMENT
  0D1B    C8                            RZ              ;RETURN IF ZERO
  0D1C    FA 1D3B                       JM      ZMERR   ;ERROR IF NEGATIVE
  0D1F    32 25BC                       STA     DEXP    ;SAVE ORIG EXPONENT
  0D22    AF                            XRA     A       ;GET A ZERO
  0D23    32 259F                       STA     FACC    ;PUT ARG IN RANGE [.5, 1]
  0D26    21 257A                       LXI     H,TEMP2 ;POINT SAVE AREA
  0D29    DF                            RST     3       ;STORE IT
                                ;
                                ; INITIAL APPROXIMATION 0.41730759 + 0.59016206 * MANTISSA
                                ;
  0D2A    21 1EF6                       LXI     H,SQC1  ;POINT .59016
  0D2D    CD 1809                       CALL    FMUL    ;GO MULTIPLY
  0D30    21 1EFA                       LXI     H,SQC2  ;PINT .4173
  0D33    CD 1728                       CALL    FADD    ;GO ADD
  0D36    21 2576                       LXI     H,TEMP1 ;POINT SAVE AREA
  0D39    DF                            RST     3       ;GO STORE IT
                                ;
                                ; NEWTON'S METHOD OF ITERATION TO THE APPROXIMATE
                                ; VALUE OF THE SQR OF MANTISSA
                                ;
  0D3A    CD 0D55                       CALL    SQR1    ;FIRST ITERATION
  0D3D    21 2576                       LXI     H,TEMP1 ;POINT SAVE AREA
  0D40    DF                            RST     3       ;STORE IT
  0D41    CD 0D55                       CALL    SQR1    ;SECOND ITERATION
                                ;
                                ; RESTORE RANGE TO OBTAIN THE FINAL RESULT
                                ;
  0D44    3A 25BC                       LDA     DEXP    ;GET SAVE EXPONENT
	MACRO-80 3.44	09-Dec-81	PAGE	1-39


  0D47    CD 19CD                       CALL    FEXP    ;EXPAND IT
  0D4A    1F                            RAR             ;DIVIDE BY 2
  0D4B    32 259F                       STA     FACC    ;STORE IT
  0D4E    D0                            RNC             ;RETURN IF EXPON EVEN
  0D4F    21 1EFE                       LXI     H,SQC3  ;ELSE, POINT SQR(2)
  0D52    C3 1809                       JMP     FMUL    ;GO MULTIPLY AND RETURN
                                ;
                                ; THIS ROUTINE PERFORMS ONE NEWTON ITERATION
                                ; TO THE SQUARE ROOT FUNCTION
                                ;
  0D55    21 257A               SQR1:   LXI     H,TEMP2 ;POINT MANTISSA
  0D58    EF                            RST     5       ;LOAD IT
  0D59    21 2576                       LXI     H,TEMP1 ;POINT PREV GUESS
  0D5C    CD 188C                       CALL    FDIV    ;FORM MANT/TEMP1
  0D5F    21 2576                       LXI     H,TEMP1 ;POINT PREV
  0D62    CD 1728                       CALL    FADD    ;FORM TEMP1 + MANT/TEMP1
  0D65    D6 01                         SUI     1       ;DIVIDE BY 2
  0D67    32 259F                       STA     FACC    ;FORM (TEMP1 + MANT/TEMP1)/2
  0D6A    C9                            RET             ;RETURN
                                ;
  0D6B                          NEG     EQU     $
                                ;
                                ;
                                ; REVERSES THE SIGN OF THE FLOATING ACC
                                ;
                                ;
  0D6B    CD 19BF                       CALL    FTEST   ;GET STATUS OF FACC
  0D6E    C8                            RZ              ;RETURN IF ZERO
  0D6F    EE 80                         XRI     80H     ;REVERSE SIGN
  0D71    32 259F                       STA     FACC    ;RESTORE EXPONENT
  0D74    C9                            RET             ;CONTINUE EVALUATION
                                ;
  0D75                          RND     EQU     $
                                ;
                                ;
                                ; PSEUDO RANDOM NUMBER GENERATOR
                                ;
                                ;
  0D75    21 258E                       LXI     H,TEMP7 ;SAVE ARG
  0D78    DF                            RST     3
  0D79    06 04                         MVI     B,4     ;LOOP CTR
  0D7B    21 259F                       LXI     H,FACC  ;POINT FLOAT ACCUM
  0D7E    CD 1D96                       CALL    ZEROM   ;GO ZERO THE FACC
  0D81    0E 03                         MVI     C,3     ;OUTTER LOP CTR
  0D83    21 25A0                       LXI     H,FACC+1        ;POINT MSB
  0D86    E5                            PUSH    H       ;SAVE H,L
  0D87    21 25C3               RND1:   LXI     H,RNDZ+1        ;POINT X,Y,Z
  0D8A    06 06                         MVI     B,6     ;LOOP CTR
  0D8C    B7                            ORA     A       ;TURN OFF CY
  0D8D    7E                    RND2:   MOV     A,M     ;GET A BYTE
  0D8E    17                            RAL             ;SHIFT LEFT (MULT BY 2)
  0D8F    77                            MOV     M,A     ;REPLACE THE BYTE
  0D90    2B                            DCX     H       ;POINT NEXT
  0D91    05                            DCR     B       ;DECR CTR
  0D92    C2 0D8D                       JNZ     RND2    ;LOOP
  0D95    23                            INX     H       ;POINT MSD X,Y,Z
	MACRO-80 3.44	09-Dec-81	PAGE	1-40


  0D96    11 1EA5                       LXI     D,RNDP  ;POINT TO MODULO
  0D99    06 03                         MVI     B,3     ;LOOP CTR
  0D9B    1A                    FND3:   LDAX    D       ;GET BYTE OF P,Q,R
  0D9C    BE                            CMP     M       ;COMPARE WITH X,Y,Z
  0D9D    13                            INX     D       ;POINT NEXT
  0D9E    23                            INX     H       ;DITTO
  0D9F    DA 0DAA                       JC      RND4    ;BRIF P<X
  0DA2    C2 0DB6                       JNZ     RND5    ;BRIF P>X
  0DA5    1A                            LDAX    D       ;GET LOW BYTE
  0DA6    BE                            CMP     M       ;CMPARE
  0DA7    D2 0DB6                       JNC     RND5    ;BRIF P>=X
  0DAA    EB                    RND4:   XCHG            ;FLIP D,E TO H,L
  0DAB    1A                            LDAX    D       ;GET LOW X BYTE
  0DAC    96                            SUB     M       ;SUBTRACT LOW P BYTE
  0DAD    12                            STAX    D       ;STORE IT
  0DAE    1B                            DCX     D       ;POINT HIGH
  0DAF    2B                            DCX     H       ;DITTO
  0DB0    1A                            LDAX    D       ;GET HIGH X BYTE
  0DB1    9E                            SBB     M       ;SUB HIGH P BYTE
  0DB2    12                            STAX    D       ;STORE IT
  0DB3    13                            INX     D       ;POINT LOW
  0DB4    23                            INX     H       ;DITTO
  0DB5    EB                            XCHG            ;RESTORE ADDRS
  0DB6    13                    RND5:   INX     D       ;POINT NEXT
  0DB7    23                            INX     H       ;DITTO
  0DB8    05                            DCR     B       ;DECR CTR
  0DB9    C2 0D9B                       JNZ     FND3    ;LOOP
  0DBC    06 03                         MVI     B,3     ;LOOP CTR
  0DBE    11 25C5               RND6:   LXI     D,RNDS+1        ;POINT LOW S
  0DC1    1A                            LDAX    D       ;GET LOW S
  0DC2    86                            ADD     M       ;ADD LOW X,Y,Z
  0DC3    12                            STAX    D       ;PUT S
  0DC4    1B                            DCX     D       ;POINT HIGH
  0DC5    2B                            DCX     H       ;DITTO
  0DC6    1A                            LDAX    D       ;GET HIGH S
  0DC7    8E                            ADC     M       ;ADD HIGH X,Y,Z
  0DC8    E6 3F                         ANI     3FH     ;TURN OFF HIGH BITS
  0DCA    12                            STAX    D       ;STORE IT
  0DCB    2B                            DCX     H       ;POINT NEXT X,Y,Z
  0DCC    05                            DCR     B       ;DECR CTR
  0DCD    C2 0DBE                       JNZ     RND6    ;LOOP
  0DD0    3E 08                         MVI     A,8     ;CONSTANT
  0DD2    91                            SUB     C       ;LESS CTR
  0DD3    1F                            RAR             ;DIVIDE BY TWO
  0DD4    E1                            POP     H       ;GET H,L ADDR
  0DD5    3A 25C5                       LDA     RNDS+1  ;GET LSB OF S
  0DD8    77                            MOV     M,A     ;STORE IT
  0DD9    23                            INX     H       ;POINT NEXT
  0DDA    E5                            PUSH    H       ;SAVE H,L
  0DDB    0D                            DCR     C       ;DECR CTR
  0DDC    C2 0D87                       JNZ     RND1    ;LOOP
  0DDF    E1                            POP     H       ;RESTORE SP PTR
  0DE0    3A 25CE                       LDA     RNDSW   ;GET SWITCH
  0DE3    B7                            ORA     A       ;TEST IT
  0DE4    CA 0DF2                       JZ      RND7    ;BRIF NO RANDOMIZE
  0DE7    11 25C6                       LXI     D,TRNDX ;POINT SAVED VALUES
	MACRO-80 3.44	09-Dec-81	PAGE	1-41


  0DEA    21 25BE                       LXI     H,RNDX  ;POINT NEXT VALUES
  0DED    06 08                         MVI     B,8     ;LOOP CTR
  0DEF    CD 1D90                       CALL    COPYH   ;GO COPY
  0DF2    CD 17CE               RND7:   CALL    FNORM
  0DF5    21 258E                       LXI     H,TEMP7 ;MULTIPLY BY RANGE
  0DF8    C3 1809                       JMP     FMUL
                                ;
  0DFB                          INP     EQU     $
                                ;
                                ;
                                ; INPUT A BYTE FROM THE DEVICE IN FACC
                                ;
                                ; PUT THE RESULT IN THE FACC
                                ;
  0DFB    CD 1D9E                       CALL    FBIN    ;CONVERT FACC TO BINARY
  0DFE    21 2567                       LXI     H,OUTA  ;POINT INSTR BUFFER
  0E01    36 DB                         MVI     M,0DBH  ;IN INSTR
  0E03    23                            INX     H       ;POINT NEXT
  0E04    77                            MOV     M,A     ;MOVE ADDR
  0E05    23                            INX     H       ;POINT NEXT
  0E06    36 C9                         MVI     M,0C9H  ;RET INSTR
  0E08    CD 2567                       CALL    OUTA    ;GO INPUT A BYTE
  0E0B    5F                    FDEC:   MOV     E,A     ;MOVE BYTE TO LO D,E
  0E0C    16 00                         MVI     D,0     ;ZERO HI D,E
  0E0E    C3 1DC1                       JMP     BINFL   ;GO CONVERT TO DEC & RET
                                ;
  0E11                          POS     EQU     $
                                ;
                                ;
                                ; RETURNS THE CURRENT POSITION OF THE TTY CURSOR
                                ;
                                ;
  0E11    3A 25BD                       LDA     COLUM   ;GET POSITION
  0E14    C3 0E0B                       JMP     FDEC    ;CONVERT TO FLOAT AND RETURN
                                ;
  0E17                          CONCA   EQU     $
                                ;
                                ;
                                ; CONCATONATE TWO STRING TOGETHER
                                ; COMBINE LENGTH <= 255
                                ;
  0E17    D1                            POP     D       ;ADJUST STACK
  0E18    11 2467                       LXI     D,STRIN ;POINT STRING BUFFER
  0E1B    1A                            LDAX    D       ;GET CURRENT LENGTH
  0E1C    4F                            MOV     C,A     ;STORE IT
  0E1D    06 00                         MVI     B,0     ;CLEAR HI
  0E1F    EB                            XCHG            ;FLIP FLOP
  0E20    09                            DAD     B       ;COMPUTE NEXT
  0E21    EB                            XCHG            ;FLIP BACK
  0E22    86                            ADD     M       ;COMPUTE COMBINE LENGTH
  0E23    46                            MOV     B,M     ;SAVE LEN2
  0E24    D2 0E2D                       JNC     CONC2   ;BRIF NO OVFLW
  0E27    3E FF                         MVI     A,255   ;MAX LEN
  0E29    91                            SUB     C       ;MINUS 1ST PART
  0E2A    47                            MOV     B,A     ;SAVE LEN
  0E2B    3E FF                         MVI     A,255   ;UPDATED LENGTH
	MACRO-80 3.44	09-Dec-81	PAGE	1-42


  0E2D    32 2467               CONC2:  STA     STRIN   ;STORE IT
  0E30    78                            MOV     A,B     ;GET LEN TO MOVE
  0E31    B7                            ORA     A       ;TEST IT
  0E32    CA 0E3D                       JZ      CONC4   ;BRIF NULL
  0E35    23                    CONC3:  INX     H       ;POINT NEXT
  0E36    13                            INX     D       ;DITTO
  0E37    7E                            MOV     A,M     ;GET NEXT CHAR
  0E38    12                            STAX    D       ;PUT IT
  0E39    05                            DCR     B       ;DECR COUNT
  0E3A    C2 0E35                       JNZ     CONC3   ;LOOP
  0E3D    E1                    CONC4:  POP     H       ;GET H,L
  0E3E    2B                            DCX     H       ;POINT BACK
  0E3F    3A 2467                       LDA     STRIN   ;GET LEN
  0E42    1F                            RAR             ;DIVIDE BY TWO
  0E43    3C                            INR     A       ;PLUS ONE
  0E44    EB                            XCHG            ;SAVE H,L
  0E45    2A 25B0                       LHLD    SPCTR   ;GET CTR
  0E48    4F                            MOV     C,A     ;SAVE CTR
  0E49    06 00                         MVI     B,0     ;ZERO HI BYTE
  0E4B    09                            DAD     B       ;ADD LEN THIS STRING
  0E4C    22 25B0                       SHLD    SPCTR   ;SAVE CTR
  0E4F    C1                            POP     B
  0E50    21 0000                       LXI     H,0     ;GET ADDR ZERO
  0E53    E5                    CONC5:  PUSH    H       ;2 BYTE WORD
  0E54    3D                            DCR     A       ;DECR CTR
  0E55    C2 0E53                       JNZ     CONC5   ;CONTINUE
  0E58    39                            DAD     SP      ;GET ADDRESS IN H,L
  0E59    EB                            XCHG            ;PUT STACK PTR IN D,E
  0E5A    72                            MOV     M,D     ;MOVE HI ADDR
  0E5B    23                            INX     H       ;POINT NEXT
  0E5C    73                            MOV     M,E     ;MOVE LO ADDR
  0E5D    23                            INX     H       ;POINT NEXT
  0E5E    36 E7                         MVI     M,0E7H  ;TYPE=STRING
  0E60    E5                            PUSH    H       ;SAVE H,L
  0E61    21 2467                       LXI     H,STRIN ;GET TEMP STR
  0E64    7E                            MOV     A,M     ;GET LENGTH
  0E65    3C                            INR     A       ;PLUS ONE
  0E66    4F                            MOV     C,A     ;SAVE IT
  0E67    7E                    CONC6:  MOV     A,M     ;GET A BYTE
  0E68    12                            STAX    D       ;PUT IT DOWN
  0E69    13                            INX     D       ;POINT NEXT
  0E6A    23                            INX     H       ;DITTO
  0E6B    0D                            DCR     C       ;SUBT CTR
  0E6C    C2 0E67                       JNZ     CONC6   ;LOOP
  0E6F    E1                            POP     H       ;RESTORE H,L
  0E70    E7                            RST     4       ;ADJUST H,L
  0E71    F9                            DB      -7 AND 0FFH
  0E72    3E 04                         MVI     A,4     ;DELETE 4 BYTES
  0E74    CD 1C16                       CALL    SQUIS   ;GO COMPRESS
  0E77    C3 12AB                       JMP     EVAL    ;CONTINUE EVALUATION
                                ;
  0E7A                          LENFN   EQU     $
                                ;
                                ; X=LEN(A$)
                                ;
                                ; RETURN THE LENGTH OF THE STRING
	MACRO-80 3.44	09-Dec-81	PAGE	1-43


                                ;
  0E7A    3A 2467                       LDA     STRIN   ;GET LEN IN ACC
  0E7D    C3 0E0B                       JMP     FDEC    ;GO CONVERT TO DECIMAL & RETURN
                                ;
  0E80                          CHRFN   EQU     $
                                ;
                                ; A$=CHR$(X)
                                ;
                                ; RETURNS A ONE CHAR STRING HAVING THE ASCII VALUE - X
                                ;
  0E80    CD 1D9E                       CALL    FBIN    ;CONVERT FACC TO BINARY
  0E83    21 2467                       LXI     H,STRIN ;POINT OUT AREA
  0E86    36 01                         MVI     M,1     ;LEN=1
  0E88    23                            INX     H       ;POINT NEXT
  0E89    77                            MOV     M,A     ;STORE THE CHAR
  0E8A    C9                            RET             ;RETURN
                                ;
  0E8B                          ASCII   EQU     $
                                ;
                                ; X=ASCII(A$)
                                ;
                                ; RETURNS THE ASCII VALUE OF THE FIRST CHAR IN STRING
                                ;
  0E8B    21 2467                       LXI     H,STRIN ;POINT STRING
  0E8E    7E                            MOV     A,M     ;GET LENGTH
  0E8F    B7                            ORA     A       ;TEST IF > ZERO
  0E90    CA 0E0B                       JZ      FDEC    ;BRIF ZERO & RETURN A ZERO
  0E93    23                            INX     H       ;POINT 1ST CHAR
  0E94    7E                            MOV     A,M     ;LOAD IT
  0E95    C3 0E0B                       JMP     FDEC    ;GO CONVERT TO DECIMAL & RETURN
                                ;
  0E98                          NUMFN   EQU     $
                                ;
                                ; A$=NUM$(X)
                                ;
                                ; RETURNS A STRING REPRESENTING X AS IT WOULD HAVE
                                ; BEEN PRINTED (INCLUDING TRAILING SPACE)
                                ;
  0E98    21 2467                       LXI     H,STRIN ;POINT STRING AREA
  0E9B    36 00                         MVI     M,0     ;INIT COUNT
  0E9D    23                            INX     H       ;SKIP TO 1ST POSITION
  0E9E    CD 15E1                       CALL    FOUT    ;GO CONVERT TO EXTRN DEC
  0EA1    AF                            XRA     A       ;GET A ZERO
  0EA2    47                            MOV     B,A     ;INIT CTR
  0EA3    2B                    NUM1:   DCX     H       ;POINT PRIOR
  0EA4    04                            INR     B       ;COUNT IT
  0EA5    BE                            CMP     M       ;TEST IF ZERO
  0EA6    C2 0EA3                       JNZ     NUM1    ;LOOP TILL AT START
  0EA9    70                            MOV     M,B     ;SET LEN CODE
  0EAA    C9                            RET             ;THEN RETURN
                                ;
  0EAB                          VAL     EQU     $
                                ;
                                ; X = VAL(A$)
                                ;
                                ; RETURNS THE VALUE OF THE STRING OF NUMERIC CHARACTERS
	MACRO-80 3.44	09-Dec-81	PAGE	1-44


                                ;
  0EAB    21 2467                       LXI     H,STRIN ;POINT STRING AREA
  0EAE    7E                            MOV     A,M     ;GET LEN
  0EAF    B7                            ORA     A       ;TEST FOR NULL STRING
  0EB0    47                            MOV     B,A     ;SAVE LEN
  0EB1    CA 0E0B                       JZ      FDEC    ;BRIF IS (RETURNS A 0.00)
  0EB4    11 2467                       LXI     D,STRIN ;POINT BUFFER
  0EB7    23                    VAL1:   INX     H       ;POINT NEXT
  0EB8    7E                            MOV     A,M     ;GET A CHAR
  0EB9    FE 20                         CPI     ' '     ;TEST IF SPACE
  0EBB    CA 0EC0                       JZ      VAL2    ;BRIF IS
  0EBE    12                            STAX    D       ;PUT THE CHAR
  0EBF    13                            INX     D       ;INCR ADDR
  0EC0    05                    VAL2:   DCR     B       ;DECR CTR
  0EC1    C2 0EB7                       JNZ     VAL1    ;LOOP
  0EC4    AF                            XRA     A       ;GET A ZERO
  0EC5    12                            STAX    D       ;PUT IN BUFF
  0EC6    21 2467                       LXI     H,STRIN ;POINT START OF BUFFER
  0EC9    CD 151F                       CALL    FIN     ;GO CONVERT
  0ECC    7E                            MOV     A,M     ;GET NON-NUMERIC
  0ECD    B7                            ORA     A       ;TEST IT
  0ECE    C2 1D53                       JNZ     CVERR   ;BRIF ERROR
  0ED1    C9                            RET             ;ELSE, RETURN
                                ;
  0ED2                          SPACE   EQU     $
                                ;
                                ; A$=SPACE$(X)
                                ;
                                ; CREATES A STRING FO SPACES LENGTH = X
                                ;
  0ED2    CD 1D9E                       CALL    FBIN    ;GET BINARY LENGTH
  0ED5    21 2467                       LXI     H,STRIN ;POINT TEMP STRING
  0ED8    77                            MOV     M,A     ;PUT LEN
  0ED9    B7                            ORA     A       ;TEST IT
  0EDA    C8                    SPAC1:  RZ              ;RETURN IF ZERO
  0EDB    23                            INX     H       ;ELSE, POINT NEXT
  0EDC    36 20                         MVI     M,' '   ;MOVE 1 SPACE
  0EDE    3D                            DCR     A       ;DECR CTR
  0EDF    C3 0EDA                       JMP     SPAC1   ;LOOP
                                ;
  0EE2                          STRFN   EQU     $
                                ;
                                ; A$=STRING$(X,Y)
                                ;
                                ; CREATES STRING OF LNGTH X CONTAINING REPETITION OF CHR$(Y)
                                ;
  0EE2    CD 1D9E                       CALL    FBIN    ;GET BINARY LENGTH
  0EE5    32 2467                       STA     STRIN   ;PUT TO STRING
  0EE8    CD 1DBB                       CALL    ARGNU   ;GET NEXT ARGUMENT
  0EEB    21 2467                       LXI     H,STRIN ;POINT STRING
  0EEE    46                            MOV     B,M     ;GET COUNT
  0EEF    23                    STR11:  INX     H       ;POINT NEXT
  0EF0    77                            MOV     M,A     ;STORE THE CHAR
  0EF1    05                            DCR     B       ;DECR CTR
  0EF2    C2 0EEF                       JNZ     STR11   ;LOOP
  0EF5    C9                            RET             ;RETURN
	MACRO-80 3.44	09-Dec-81	PAGE	1-45


                                ;
  0EF6                          LEFT    EQU     $
                                ;
                                ; B$=LEFT$(A$,X)
                                ;
                                ; SUBSTRING FROM THE LEFTMOST X CHARACTERS OF A$
                                ;
  0EF6    CD 1DBB                       CALL    ARGNU   ;GET 2ND ARGUMENT
  0EF9    4F                            MOV     C,A     ;SAVE LEN
  0EFA    06 01                         MVI     B,1     ;INIT START
  0EFC    C3 0F12                       JMP     MID0    ;CONTINUE
                                ;
  0EFF                          RIGHT   EQU     $
                                ;
                                ; B$=RIGHT$(A$,X)
                                ;
                                ; SUBSTRING STARTING AT POSITION X TO END OF STRING
                                ;
  0EFF    CD 1DBB                       CALL    ARGNU   ;GET 2ND ARGUMENT
  0F02    47                            MOV     B,A     ;SAVE START
  0F03    0E FF                         MVI     C,255   ;MAX LEN
  0F05    C3 0F12                       JMP     MID0    ;CONTINUE
                                ;
  0F08                          MIDFN   EQU     $
                                ;
                                ; B$=MID$(A$,X,Y)
                                ;
                                ; SUBSTRING OF THE STRING A$ STARTING WITH CHARACTER @ X
                                ; AND Y CHARACTERS LONG
                                ;
  0F08    CD 1DBB                       CALL    ARGNU   ;LOAD X
  0F0B    47                            MOV     B,A     ;SAVE START
  0F0C    C5                            PUSH    B       ;PUT ON STACK
  0F0D    CD 1DBB                       CALL    ARGNU   ;GET 3RD ARG
  0F10    C1                            POP     B       ;RETREIVE
  0F11    4F                            MOV     C,A     ;SAVE LEN
  0F12    78                    MID0:   MOV     A,B     ;LOAD START
  0F13    21 2467                       LXI     H,STRIN ;POINT STRING
  0F16    BE                            CMP     M       ;TEST IF X>L
  0F17    DA 0F20                       JC      MID1    ;BRIF X>L
  0F1A    CA 0F20                       JZ      MID1    ;OR EQUAL
  0F1D    36 00                         MVI     M,0     ;ELSE, RESULT IS NULL
  0F1F    C9                            RET             ;RETURN
  0F20    81                    MID1:   ADD     C       ;COMPUTE END POSITION
  0F21    DA 0F2D                       JC      MID2    ;BRIF OVERFLOW
  0F24    DE 01                         SBI     1       ;COMPUTE X+Y-1
  0F26    DA 0F2D                       JC      MID2    ;BRIF OVERFLOW
  0F29    BE                            CMP     M       ;COMPARE TO EXISTING LEN
  0F2A    DA 0F31                       JC      MID3    ;BRIF X+Y-1<LEN(A$)
  0F2D    7E                    MID2:   MOV     A,M     ;ELSE GET ORIG LEN
  0F2E    90                            SUB     B       ;MINUS X
  0F2F    3C                            INR     A       ;PLUS ONE
  0F30    4F                            MOV     C,A     ;SAVE (REPLACE Y)
  0F31    71                    MID3:   MOV     M,C     ;PUT NEW LEN
  0F32    58                            MOV     E,B     ;PUT START IN LO
  0F33    16 00                         MVI     D,0     ;ZERO IN HI
	MACRO-80 3.44	09-Dec-81	PAGE	1-46


  0F35    19                            DAD     D       ;COMPUTE START
  0F36    11 2467                       LXI     D,STRIN ;GET BEGIN
  0F39    7E                    MID4:   MOV     A,M     ;GET A CHAR
  0F3A    13                            INX     D       ;POINT NEXT
  0F3B    23                            INX     H       ;DITTO
  0F3C    12                            STAX    D       ;PUT DOWN
  0F3D    0D                            DCR     C       ;DECR CTR
  0F3E    C2 0F39                       JNZ     MID4    ;LOOP
  0F41    C9                            RET             ;THEN RETURN
                                ;
  0F42                          INSTR   EQU     $
                                ;
                                ; X = INSTR(Y,A$,B$)
                                ;
                                ; SEARCH FOR SUBSTRING B$ IN STRING A$ STARTING AT POS Y.
                                ; RETURN 0 IF B$ IS NOT IN A$
                                ; RETURN 1 IF B$ IS NULL
                                ; ELSE RETURN THE CHARACTER POSITION
                                ;
  0F42    CD 1DBB                       CALL    ARGNU   ;GET A$
  0F45    21 2467                       LXI     H,STRIN ;POINT A$
  0F48    B7                            ORA     A       ;TEST Y
  0F49    C2 0F51                       JNZ     INST2   ;BRIF Y NOT ZERO
  0F4C    36 00                 INST1:  MVI     M,0     ;ELSE A$ IS NULL
  0F4E    C3 0F58                       JMP     INST3   ;GO AROUND
  0F51    BE                    INST2:  CMP     M       ;TEST Y TO LEN(A$)
  0F52    CA 0F58                       JZ      INST3   ;BRIF EQUAL
  0F55    D2 0F4C                       JNC     INST1   ;BRIF Y > LEN(A$)
  0F58    4F                    INST3:  MOV     C,A     ;SAVE Y
  0F59    06 00                         MVI     B,0     ;ZERO HI INCR
  0F5B    7E                            MOV     A,M     ;GET LEN(A$)
  0F5C    91                            SUB     C       ;MINUS Y
  0F5D    3C                            INR     A       ;PLUS ONE
  0F5E    09                            DAD     B       ;COMPUTE START ADDR
  0F5F    47                            MOV     B,A     ;# CHARS REMAIN IN A$
  0F60    E5                            PUSH    H       ;SAVE ADDR
  0F61    2A 2599                       LHLD    ADDR1   ;GET ADDR OF ARG
  0F64    23                            INX     H       ;POINT NEXT
  0F65    56                            MOV     D,M     ;GET HI ADDR
  0F66    23                            INX     H       ;POINT NEXT
  0F67    5E                            MOV     E,M     ;GET LO ADDR
  0F68    23                            INX     H       ;POINT NEXT
  0F69    22 2599                       SHLD    ADDR1   ;UPDATED PTR
  0F6C    E1                            POP     H       ;RESTORE ADDR
  0F6D    1A                            LDAX    D       ;GET LEN(B$)
  0F6E    B7                            ORA     A       ;TEST IF NULL
  0F6F    C2 0F78                       JNZ     INST6   ;BRIF NOT
  0F72    0E 01                         MVI     C,1     ;SET POSIT = 1
  0F74    79                    INST5:  MOV     A,C     ;GET POSIT
  0F75    C3 0E0B                       JMP     FDEC    ;CONVERT TO DECIMAL & RETURN
  0F78    EB                    INST6:  XCHG            ;FLIP/FLOP
  0F79    78                            MOV     A,B     ;GET LEN OF A$
  0F7A    BE                            CMP     M       ;COMPARE TO LEN B$
  0F7B    DA 0F9D                       JC      INSTA   ;BRIF LEN(B$)< LEN(REM A$)
  0F7E    C5                            PUSH    B       ;SAVE CTR, POSIT
  0F7F    D5                            PUSH    D       ;SAVE ADDR A$
	MACRO-80 3.44	09-Dec-81	PAGE	1-47


  0F80    E5                            PUSH    H       ;SAVE ADDR B$
  0F81    4E                            MOV     C,M     ;GET LEN B$
  0F82    EB                            XCHG            ;FLIP/FLOP
  0F83    13                    INST8:  INX     D       ;POINT NEXT B$
  0F84    1A                            LDAX    D       ;GET B$ CHAR
  0F85    BE                            CMP     M       ;COMPARE A$ CHAR
  0F86    C2 0F94                       JNZ     INST9   ;BRIF NOT EQUAL
  0F89    23                            INX     H       ;POINT NEXT A$
  0F8A    0D                            DCR     C       ;DECR CTR (LEN(B$))
  0F8B    C2 0F83                       JNZ     INST8   ;LOOP
  0F8E    E1                            POP     H       ;DUMMY POP
  0F8F    E1                            POP     H       ;GET DUMMY STACK
  0F90    C1                            POP     B       ;GET POSITION
  0F91    C3 0F74                       JMP     INST5   ;WE FOUND A MATCH
  0F94    D1                    INST9:  POP     D       ;GET PTR B$
  0F95    E1                            POP     H       ;GET PTR A$
  0F96    C1                            POP     B       ;GET CTRS, POSIT
  0F97    0C                            INR     C       ;UP PTR NUM
  0F98    23                            INX     H       ;POINT NEXT A$
  0F99    05                            DCR     B       ;DECR B
  0F9A    C2 0F78                       JNZ     INST6   ;LOOP
  0F9D    0E 00                 INSTA:  MVI     C,0     ;ELSE B$ NOT IN A$
  0F9F    C3 0F74                       JMP     INST5   ;RETURN
                                ;
  0FA2                          FN      EQU     $
                                ;
                                ; STMT: DEF FNX(A)=EXPR
                                ;
                                ; NOTE: ENTRY FROM EXPR ANALYZER (RECURSIVE)
                                ;
  0FA2    C5                            PUSH    B       ;SAVE B,C
  0FA3    D5                            PUSH    D       ;SAVE D,E
  0FA4    E5                            PUSH    H       ;SAVE H,L
  0FA5    EB                            XCHG            ;PUT H,L TO D,E
  0FA6    2A 259D                       LHLD    ADDR3   ;GET ADDR
  0FA9    E5                            PUSH    H       ;SAVE IT
  0FAA    EB                            XCHG            ;PUT D,E BACK TO H,L
  0FAB    22 259D                       SHLD    ADDR3   ;UPDATE PTR
  0FAE    2A 25B0                       LHLD    SPCTR   ;GET SP COUNT
  0FB1    E5                            PUSH    H       ;SAVE IT
  0FB2    3A 25AF                       LDA     PARCT   ;GET PAREN COUNT
  0FB5    47                            MOV     B,A     ;PUT TO B
  0FB6    3A 25CF                       LDA     FNMOD   ;GET FN MODE
  0FB9    4F                            MOV     C,A     ;PUT TO C
  0FBA    C5                            PUSH    B       ;SAVE B,C
  0FBB    3A 23B9                       LDA     DIMSW   ;GET DIM SW
  0FBE    F5                            PUSH    PSW     ;SAVE IT
  0FBF    AF                            XRA     A       ;CLEAR A
  0FC0    32 23B9                       STA     DIMSW   ;RESET DIM SW
  0FC3    2A 25B3                       LHLD    FNARG   ;GET OLD ARG NAME
  0FC6    E5                            PUSH    H       ;SAVE
  0FC7    2A 25B5                       LHLD    FNARG+2 ;GET OLD ARG ADDRESS
  0FCA    E5                            PUSH    H       ;SAVE
  0FCB    2A 25DA                       LHLD    PROGE   ;GET END OF PROGRAM
  0FCE    E5                            PUSH    H       ;SAVE IT
  0FCF    2A 2597                       LHLD    EXPRS   ;GET END OF EXPR
	MACRO-80 3.44	09-Dec-81	PAGE	1-48


  0FD2    E5                            PUSH    H       ;SAVE IT
  0FD3    22 25DA                       SHLD    PROGE   ;SAVE NEW 'END' OF PROGRAM
  0FD6    3E 01                         MVI     A,1     ;GET ON SETTING
  0FD8    32 25CF                       STA     FNMOD   ;SET IN FUNCTION
  0FDB    2A 259D                       LHLD    ADDR3   ;POINT TO EXPR
  0FDE    4E                            MOV     C,M     ;GET FN CHAR
  0FDF    2B                            DCX     H       ;POINT BACK
  0FE0    46                            MOV     B,M     ;GET HI NAME
  0FE1    21 280C                       LXI     H,BEGPR ;POINT START OF PROGRAM
  0FE4    7E                    FN2:    MOV     A,M     ;LOAD LEN TO NEXT STMT
  0FE5    B7                            ORA     A       ;TEST IF AT END
  0FE6    CA 1D43                       JZ      SNERR   ;BRIF FN NOT FOUND
  0FE9    E5                            PUSH    H       ;SAVE PTR
  0FEA    E7                            RST     4       ;ADJUST H,L
  0FEB    03                            DB      3
  0FEC    11 2062                       LXI     D,DEFLI ;LITERAL
  0FEF    D7                            RST     2       ;GO COMPARE
  0FF0    C2 1002                       JNZ     FN3     ;BRIF NOT EQUAL
  0FF3    C5                            PUSH    B       ;SAVE TEST NAME
  0FF4    CD 1CFD                       CALL    VAR     ;GO GET NAME
  0FF7    C1                            POP     B       ;RESTORE NAME
  0FF8    7A                            MOV     A,D     ;GET HI NAME
  0FF9    B8                            CMP     B       ;COMPARE
  0FFA    C2 1002                       JNZ     FN3     ;BRIF NOT EQUAL
  0FFD    7B                            MOV     A,E     ;GET LO
  0FFE    B9                            CMP     C       ;COMPARE
  0FFF    CA 100A                       JZ      FN4     ;BRIF EQUAL
  1002    E1                    FN3:    POP     H       ;GET OLD PTR
  1003    5E                            MOV     E,M     ;GET LO LEN
  1004    16 00                         MVI     D,0     ;ZERO HI LEN
  1006    19                            DAD     D       ;POINT NEXT STMT
  1007    C3 0FE4                       JMP     FN2     ;LOOP
  100A    D1                    FN4:    POP     D       ;ADJUST STACK
  100B    CF                            RST     1       ;SKIP BLANKS
  100C    FE 28                         CPI     '('     ;TEST IF OPEN PAREN
  100E    C2 1D43                       JNZ     SNERR   ;BRIF NOT
  1011    23                            INX     H       ;SKIP IT
  1012    CD 1CFD                       CALL    VAR     ;GO GET VAR NAME
  1015    E5                            PUSH    H       ;SAVE HL ADDR
  1016    21 25B3                       LXI     H,FNARG ;POINT DUMMY ARG TBL
  1019    72                            MOV     M,D     ;STORE LETTER
  101A    23                            INX     H       ;POINT NEXT
  101B    73                            MOV     M,E     ;STORE DIGIT
  101C    23                            INX     H       ;POINT NEXT
  101D    EB                            XCHG            ;PUT H,L TO D,E
  101E    2A 259D                       LHLD    ADDR3   ;POINT TO EXPR STACK
  1021    23                            INX     H       ;POINT CODE
  1022    23                            INX     H       ;POINT HI ADR
  1023    7E                            MOV     A,M     ;GET HI
  1024    12                            STAX    D       ;PUT TO TABLE
  1025    13                            INX     D       ;POINT NEXT
  1026    23                            INX     H       ;DITTO
  1027    7E                            MOV     A,M     ;GET LO ADDR
  1028    12                            STAX    D       ;PUT TO TABLE
  1029    E1                            POP     H       ;RESTORE PTR TO STMT
  102A    CF                            RST     1       ;SKIP BLANKS
	MACRO-80 3.44	09-Dec-81	PAGE	1-49


  102B    FE 29                         CPI     ')'     ;TEST IF CLOSE PAREN
  102D    C2 1D43                       JNZ     SNERR   ;BRIF NOT
  1030    23                            INX     H       ;SKIP IT
  1031    CF                            RST     1       ;SKIP BLANKS
  1032    FE 3D                         CPI     '='     ;TEST IF EQUAL SIGN
  1034    C2 1D43                       JNZ     SNERR   ;BRIF NOT
  1037    23                            INX     H       ;SKIP IT
  1038    CD 1071                       CALL    EXPR    ;GO EVAL FUNCTION
  103B    CD 1BC8                       CALL    EOL     ;MUST BE END OF LINE
  103E    E1                            POP     H       ;GET H,L
  103F    22 2597                       SHLD    EXPRS   ;RESTORE START OF EXPR
  1042    E1                            POP     H       ;GET H,L
  1043    22 25DA                       SHLD    PROGE   ;RESTORE 'END' OF PROGRAM
  1046    E1                            POP     H       ;GET H,L
  1047    22 25B5                       SHLD    FNARG+2 ;STORE ADDR
  104A    E1                            POP     H       ;GET H,L
  104B    22 25B3                       SHLD    FNARG   ;STORE DUMMY ARG
  104E    F1                            POP     PSW     ;GET A,STATUS
  104F    32 23B9                       STA     DIMSW   ;RESTORE DIM SW
  1052    C1                            POP     B       ;GET B,C
  1053    79                            MOV     A,C     ;LOAD C
  1054    32 25CF                       STA     FNMOD   ;RESTORE MOE
  1057    78                            MOV     A,B     ;LOAD B
  1058    32 25AF                       STA     PARCT   ;RESTORE PAREN COUNT
  105B    E1                            POP     H       ;GET H,L
  105C    22 25B0                       SHLD    SPCTR   ;RESTORE SP COUNTER
  105F    E1                            POP     H       ;GET H,L
  1060    22 259D                       SHLD    ADDR3   ;RESTORE ADDR OF EVAL
  1063    E1                            POP     H       ;GET H,L
  1064    D1                            POP     D       ;GET D,E
  1065    2B                            DCX     H       ;POINT 2ND BYTE FOLLOWING OP
  1066    22 259B                       SHLD    ADDR2   ;SAVE IT
  1069    E7                            RST     4       ;POINT TO ARG TYPE
  106A    05                            DB      5
  106B    22 2599                       SHLD    ADDR1   ;SAVE ADDR
  106E    C3 12F8                       JMP     EV3     ;GO WRAPUP
                                ;PAGE
                                ;
  1071                          EXPR    EQU     $
                                ;
                                ;
                                ; EVALUATE EXPRESSION ROUTINE
                                ; LEAVE RESULT IN FACC
                                ; RETURN WHEN EXPRESSION ENDS (TYPICALLY AT END OF LINE)
                                ;
                                ;
  1071    AF                            XRA     A       ;CLEAR REG A
  1072    32 25AF                       STA     PARCT   ;SET PAREN CTR
  1075    EB                            XCHG            ;SAVE H,L
  1076    21 0000                       LXI     H,0     ;GET A ZERO
  1079    22 25B0                       SHLD    SPCTR   ;INIT CTR
  107C    2A 25DA                       LHLD    PROGE   ;POINT END OF PROGRAM AREA
  107F    23                            INX     H       ;POINT ONE MORE
  1080    36 00                         MVI     M,0     ;INIT START OF STACK
  1082    22 2597                       SHLD    EXPRS   ;SAVE IT
  1085    EB                            XCHG            ;RESTORE H,L
	MACRO-80 3.44	09-Dec-81	PAGE	1-50


                                ;
  1086                          LOOKD   EQU     $       ;LOOK FOR CON, VAR, OR FUNCTION
  1086    CF                            RST     1       ;SKIP TO NON-BLANK
  1087    CD 1C5E                       CALL    NUMER   ;GO TEST IF NUMERIC
  108A    C2 10A0                       JNZ     LDALP   ;BRIF NOT
  108D    CD 151F               LDNUM:  CALL    FIN     ;GO CONVERT NUMERIC (PUT TO FACC)
  1090    44                    LDF:    MOV     B,H     ;COPY H,L TO B,C
  1091    4D                            MOV     C,L     ;SAME
  1092    2A 2597                       LHLD    EXPRS   ;GET ADDR OF EXPR AREA
  1095    CD 1C34                       CALL    GTEMP   ;GO STORE THE FACC IN TEMP AREA
  1098    22 2597                       SHLD    EXPRS   ;SAVE UPDATED ADDRESS
  109B    60                            MOV     H,B     ;RESTORE H
  109C    69                            MOV     L,C     ;RESTORE L
  109D    C3 120E                       JMP     LOOKO   ;GO GET AN OPERATION CODE
  10A0    FE 2E                 LDALP:  CPI     '.'     ;SEE IF LEADING DECIMAL POINT
  10A2    CA 108D                       JZ      LDNUM   ;BRIF IS
  10A5    CD 1C55                       CALL    ALPHA   ;GO SEE IF ALPHA
  10A8    C2 1182                       JNZ     LDDTN   ;BRIF NOT
  10AB    46                            MOV     B,M     ;SAVE 1ST CHAR
  10AC    23                            INX     H       ;POINT NEXT
  10AD    0E 20                         MVI     C,' '   ;DEFAULT FOR 1 CHAR VAR
  10AF    CD 1C5E                       CALL    NUMER   ;GO SEE IF 2ND IS NUMERIC
  10B2    C2 10E5                       JNZ     LDFN    ;BRIF NOT
  10B5    23                            INX     H       ;POINT NEXT
  10B6    4F                            MOV     C,A     ;SAVE THE CHAR
  10B7    CF                    LDV1:   RST     1       ;GET NEXT CHAR
  10B8    FE 24                         CPI     '$'     ;TEST IF STRING
  10BA    F5                            PUSH    PSW     ;SAVE STATUS
  10BB    C2 10C4                       JNZ     LDV2    ;BRIF NOT
  10BE    79                            MOV     A,C     ;GET LOW CHAR
  10BF    F6 80                         ORI     80H     ;SET STRING
  10C1    4F                            MOV     C,A     ;SAVE IT
  10C2    23                            INX     H       ;SKIP $
  10C3    CF                            RST     1       ;SKIP SPACES
  10C4    FE 28                 LDV2:   CPI     '('     ;TEST IF PAREN
  10C6    CA 14C8                       JZ      LDV2A   ;BRIF IS
  10C9    E5                            PUSH    H       ;SAVE H,L
  10CA    50                            MOV     D,B     ;COPY B,C
  10CB    59                            MOV     E,C     ;TO D,E
  10CC    CD 1C68                       CALL    SEARC   ;GO GET VAR ADDR IN D,E
  10CF    2A 2597               LDV:    LHLD    EXPRS   ;GET EXPR ADDR
  10D2    CD 1C4D                       CALL    SADR    ;GO STORE ADDRESS
  10D5    22 2597                       SHLD    EXPRS   ;SAVE ADDRESS
  10D8    EB                            XCHG            ;H,L TO D,E
  10D9    E1                            POP     H       ;GET OLD H,L
  10DA    F1                            POP     PSW     ;GET STATUS
  10DB    C2 120E                       JNZ     LOOKO   ;BRIF NOT STRING
  10DE    EB                            XCHG            ;GET OLD H,L
  10DF    36 E7                         MVI     M,0E7H  ;MARK AS STRING ADDRESS
  10E1    EB                            XCHG            ;RESTORE H,L
  10E2    C3 120E                       JMP     LOOKO   ;GO LOOK FOR OPCODE
  10E5    CD 1C55               LDFN:   CALL    ALPHA   ;GO SEE IF FUNCTION
  10E8    C2 10B7                       JNZ     LDV1    ;BRIF IT'S NOT
  10EB    2B                    LDFN1:  DCX     H       ;POINT BACK TO 1ST
  10EC    7E                            MOV     A,M     ;GET THAT CHAR
  10ED    FE 20                         CPI     ' '     ;TEST IF SPACE
	MACRO-80 3.44	09-Dec-81	PAGE	1-51


  10EF    CA 10EB                       JZ      LDFN1   ;LOOP IF TRUE
  10F2    E5                            PUSH    H       ;SAVE H,L
  10F3    11 1DEC                       LXI     D,RNDLI ;POINT LITERAL
  10F6    D7                            RST     2       ;GO COMPARE
  10F7    CA 1154                       JZ      LDRND   ;BRIF FND
  10FA    E1                            POP     H       ;GET H,L
  10FB    E5                            PUSH    H       ;RESAVE
  10FC    11 2065                       LXI     D,FNLIT ;POINT LITERAL
  10FF    D7                            RST     2       ;GO SEE IF FN X
  1100    CA 112F                       JZ      FNL     ;BRIF IS
  1103    E1                            POP     H       ;GET H,L
  1104    E5                            PUSH    H       ;RESAVE
  1105    11 1EDB                       LXI     D,PILIT ;POINT LIT
  1108    D7                            RST     2       ;GO COMPARE
  1109    CA 1166                       JZ      LDPI    ;BRIF PI
  110C    E1                    FUNC0:  POP     H       ;GET H,L
  110D    11 1DD0                       LXI     D,FUNCT ;POINT FUNCTION TABLE
  1110    E5                            PUSH    H       ;SAVE POINTER
  1111    CD 20F1                       CALL    SEEK1   ;GO SEARCH FUNCTION TABLE
  1114    CA 1127                       JZ      FUNC4   ;BRIF FUNCTION NOT FOUND
  1117    1A                            LDAX    D       ;GET A BYTE LOW
  1118    4F                            MOV     C,A     ;SAVE IT
  1119    13                            INX     D       ;POINT NEXT
  111A    1A                            LDAX    D       ;GET HI BYTE
  111B    47                            MOV     B,A     ;SAVE IT (B,C = ADDR OF FUNC)
  111C    CF                            RST     1       ;SKIP BLANKS
  111D    FE 28                         CPI     '('     ;TEST FOR OPEN PAREN
  111F    C2 1D43                       JNZ     SNERR   ;BRIF MISSING PAREN
  1122    13                            INX     D       ;POINT TYPE CODE
  1123    1A                            LDAX    D       ;LOAD IT
  1124    C3 1170                       JMP     LDFNC   ;CONTINUE
  1127    E1                    FUNC4:  POP     H       ;GET H,L
  1128    46                            MOV     B,M     ;GET 1ST CHAR
  1129    0E 20                         MVI     C,' '   ;SPACE 2ND CHAR
  112B    23                            INX     H       ;POINT TO NEXT
  112C    C3 10B7                       JMP     LDV1    ;BRIF VARIABLE
  112F    D1                    FNL:    POP     D       ;DUMMY RESET STACK POINTER
  1130    CD 1CFD                       CALL    VAR     ;GO GET FN NAME
  1133    42                            MOV     B,D     ;COPY TO B,C
  1134    4B                            MOV     C,E     ;SAME
  1135    EB                            XCHG            ;SAVE H,L
  1136    2A 2597                       LHLD    EXPRS   ;POINT EXPR STACK
  1139    23                            INX     H       ;POINT NEXT
  113A    70                            MOV     M,B     ;MOVE THE LETTER
  113B    23                            INX     H       ;POINT NEXT
  113C    71                            MOV     M,C     ;MOVE DIGIT ($??)
  113D    23                            INX     H       ;POINT NEXT
  113E    36 AF                         MVI     M,0AFH  ;MOVE CODE
  1140    79                            MOV     A,C     ;GET LO NAME
  1141    B7                            ORA     A       ;TEST IT
  1142    F2 1147                       JP      FNL3    ;BRIF NOT STRING
  1145    36 CF                         MVI     M,0CFH  ;MOVE CODE
  1147    22 2597               FNL3:   SHLD    EXPRS   ;SAVE POINTER
  114A    EB                            XCHG            ;GET H,L
  114B    CF                            RST     1       ;GET NEXT CHAR
  114C    FE 28                         CPI     '('     ;TEST IF OPEN PAREN
	MACRO-80 3.44	09-Dec-81	PAGE	1-52


  114E    C2 1D43                       JNZ     SNERR   ;BRIF NOT
  1151    C3 1086                       JMP     LOOKD   ;CONTINUE
  1154    FE 28                 LDRND:  CPI     '('     ;TEST IF RND(X)
  1156    CA 110C                       JZ      FUNC0   ;BRIF IS
  1159    E5                            PUSH    H       ;ELSE, SAVE H,L
  115A    21 1F2E                       LXI     H,ONE   ;USE RANGE (0,1)
  115D    EF                            RST     5       ;LOAD FACC
  115E    CD 0D75                       CALL    RND     ;GO GET RANDOM NUMBER
  1161    E1                            POP     H       ;RESTORE H,L
  1162    D1                            POP     D       ;RESTORE STACK POINTER
  1163    C3 1090                       JMP     LDF     ;ACT AS IF CONSTANT
  1166    3C                    LDPI:   INR     A       ;SET NON ZERO
  1167    D1                            POP     D       ;DUMMY STACK POP
  1168    F5                            PUSH    PSW     ;SAVE STATUS
  1169    E5                            PUSH    H       ;SAVE H,L
  116A    11 1EE6                       LXI     D,PI    ;GET ADDRESS OF 3.1415
  116D    C3 10CF                       JMP     LDV     ;GO ACT LIKE VARIABLE
  1170    D1                    LDFNC:  POP     D       ;POP THE STACK
  1171    EB                            XCHG            ;FLIP/FLOP
  1172    2A 2597                       LHLD    EXPRS   ;GET ADDR
  1175    23                            INX     H       ;POINT NEXT
  1176    70                            MOV     M,B     ;HIGH ADDR
  1177    23                            INX     H       ;POINT NEXT
  1178    71                            MOV     M,C     ;LOW ADDR
  1179    23                            INX     H       ;POINT NEXT
  117A    77                            MOV     M,A     ;CODE
  117B    22 2597                       SHLD    EXPRS   ;SAVE ADDR
  117E    EB                            XCHG            ;RESTORE H,L
  117F    C3 1086                       JMP     LOOKD   ;NEXT MUST BE DATA TOO
  1182    FE 2D                 LDDTN:  CPI     '-'     ;TEST IF UNARY MINUS
  1184    C2 1196                       JNZ     LDDTP   ;BRIF NOT
  1187    EB                            XCHG            ;SAVE H,L
  1188    2A 2597                       LHLD    EXPRS   ;GET EXPR END
  118B    23                            INX     H       ;POINT ONE MORE
  118C    36 61                         MVI     M,61H   ;CODE FOR NEG
  118E    22 2597                       SHLD    EXPRS   ;RESTORE PTR
  1191    EB                            XCHG            ;RESTORE H,L
  1192    23                    SKPP:   INX     H       ;POINT PAST THIS BYTE
  1193    C3 1086                       JMP     LOOKD   ;NEXT MUST BE DATA
  1196    FE 2B                 LDDTP:  CPI     '+'     ;TEST IF UNARY PLUS
  1198    CA 1192                       JZ      SKPP    ;IGNORE IF IS
  119B    FE 28                         CPI     '('     ;ELSE, TEST IF OPEN PAREN
  119D    CA 11FC                       JZ      CERCE   ;BRIF IS
  11A0    FE 27                         CPI     27H     ;TEST IF LITERAL (SINGLE QUOTE)
  11A2    CA 11AA                       JZ      LITST   ;BRIF IS
  11A5    FE 22                         CPI     '"'     ;TEST IF LITERAL
  11A7    C2 1D43                       JNZ     SNERR   ;BRIF NOT CON, FUNCTION, OR VAR
  11AA    4F                    LITST:  MOV     C,A     ;SAVE DELIMITER
  11AB    11 2467                       LXI     D,STRIN ;POINT BUFFER
  11AE    06 FF                         MVI     B,0FFH  ;INIT CTR
  11B0    23                    LIT1:   INX     H       ;POINT NEXT
  11B1    7E                            MOV     A,M     ;LOAD NEXT
  11B2    13                            INX     D       ;POINT NEXT
  11B3    12                            STAX    D       ;STORE IT
  11B4    B7                            ORA     A       ;TEST IF END
  11B5    CA 1D43                       JZ      SNERR   ;BRIF ERROR
	MACRO-80 3.44	09-Dec-81	PAGE	1-53


  11B8    04                            INR     B       ;COUNT IT
  11B9    B9                            CMP     C       ;TEST IF END OF STRING
  11BA    C2 11B0                       JNZ     LIT1    ;BRIF NOT
  11BD    23                            INX     H       ;POINT NEXT
  11BE    11 2467                       LXI     D,STRIN ;POINT BEGIN
  11C1    78                            MOV     A,B     ;GET COUNT
  11C2    12                            STAX    D       ;PUT COUNT
  11C3    1F                            RAR             ;DIVIDE BY TWO
  11C4    3C                            INR     A       ;PLUS ONE
  11C5    4F                            MOV     C,A     ;SAVE IT
  11C6    06 00                         MVI     B,0     ;ZERO HIGH
  11C8    E5                            PUSH    H       ;SAVE PTR
  11C9    2A 25B0                       LHLD    SPCTR   ;GET CTR
  11CC    09                            DAD     B       ;PLUS OLD
  11CD    22 25B0                       SHLD    SPCTR   ;UPDATE IT
  11D0    D1                            POP     D       ;GET OLD H,L
  11D1    21 0000                       LXI     H,0     ;GET A ZERO
  11D4    E5                    LIT2:   PUSH    H       ;GET 2 WORK BYTES
  11D5    0D                            DCR     C       ;SUB 1 FROM COUNT
  11D6    C2 11D4                       JNZ     LIT2    ;CONTINUE
  11D9    39                            DAD     SP      ;GET ADDR OF STACK
  11DA    D5                            PUSH    D       ;SAVE PTR TO STMT
  11DB    EB                            XCHG            ;SAVE H,L IN D,E
  11DC    2A 2597                       LHLD    EXPRS   ;GET START OF EXPR
  11DF    23                            INX     H       ;PLUS ONE
  11E0    72                            MOV     M,D     ;HI BYTE
  11E1    23                            INX     H       ;POINT NEXT
  11E2    73                            MOV     M,E     ;LO BYTE
  11E3    23                            INX     H       ;POINT NEXT
  11E4    36 E7                         MVI     M,0E7H  ;TYPE CODE
  11E6    22 2597                       SHLD    EXPRS   ;SAVE ADDR
  11E9    EB                            XCHG            ;D,E BACK TO H,L
  11EA    11 2467                       LXI     D,STRIN ;POINT STRING AREA
  11ED    1A                            LDAX    D       ;GET COUNT
  11EE    3C                            INR     A       ;ADD ONE TO COUNT
  11EF    47                            MOV     B,A     ;SAVE CTR
  11F0    1A                    LIT3:   LDAX    D       ;GET A BYTE
  11F1    77                            MOV     M,A     ;STORE IT
  11F2    23                            INX     H       ;POINT NEXT
  11F3    13                            INX     D       ;DITTO
  11F4    05                            DCR     B       ;DECR CTR
  11F5    C2 11F0                       JNZ     LIT3    ;LOOP
  11F8    E1                            POP     H       ;RESTORE H,L
  11F9    C3 120E                       JMP     LOOKO   ;NEXT IS OP
  11FC    EB                    CERCE:  XCHG            ;SAVE H,L
  11FD    21 25AF                       LXI     H,PARCT ;POINT PAREN COUNT
  1200    34                            INR     M       ;ADD 1
  1201    2A 2597                       LHLD    EXPRS   ;GET ADDR
  1204    23                            INX     H       ;POINT NEXT
  1205    36 05                         MVI     M,5     ;PUT CODE
  1207    22 2597                       SHLD    EXPRS   ;SAVE ADDR
  120A    EB                            XCHG            ;RESTORE H,L
  120B    C3 1192                       JMP     SKPP    ;GO SKIP CHAR
  120E    CF                    LOOKO:  RST     1       ;SKIP BLANKS
  120F    FE 2B                         CPI     '+'     ;TEST IF PLUS
  1211    06 21                         MVI     B,21H   ;CODE
	MACRO-80 3.44	09-Dec-81	PAGE	1-54


  1213    CA 1249                       JZ      OP1     ;BRIF IS
  1216    FE 2D                         CPI     '-'     ;TEST IF MINUS
  1218    06 25                         MVI     B,25H
  121A    CA 1249                       JZ      OP1     ;BRIF IS
  121D    FE 2F                         CPI     '/'     ;TEST IF DIVIDE
  121F    06 45                         MVI     B,45H   ;CODE
  1221    CA 1249                       JZ      OP1     ;BRIF IS
  1224    FE 5E                         CPI     '^'     ;TEST IF EXPON
  1226    06 81                         MVI     B,81H   ;CODE
  1228    CA 1249                       JZ      OP1     ;BRIF IS
  122B    FE 29                         CPI     ')'     ;TEST IF CLOSE PAREN
  122D    CA 129D                       JZ      OP3     ;BRIF IS
  1230    FE 2C                         CPI     ','     ;TEST IF COMMA
  1232    CA 1288                       JZ      OP2     ;BRIF IS
  1235    FE 2A                         CPI     '*'     ;TEST IF MULTIPLY
  1237    06 41                         MVI     B,41H   ;CODE
  1239    CA 1249                       JZ      OP1     ;BRIF IS
                                ; ELSE MUST BE END OF EXPRESSION
  123C    3A 25AF               ENDXP:  LDA     PARCT   ;GET OPEN PAREN COUNT
  123F    B7                            ORA     A       ;TEST IT
  1240    C2 1D43                       JNZ     SNERR   ;BRIF # OF ('S NOT = # OF )'S
  1243    22 259D                       SHLD    ADDR3   ;SAVE ADDR OF STMT
  1246    C3 12AB                       JMP     EVAL    ;GO EVALUATE
  1249    E5                    OP1:    PUSH    H       ;SAVE PLACE IN ASCII EXPRESSION
  124A    11 0105                       LXI     D,0105H ;D=BYTE COUNT, E=CODE FOR "("
  124D    2A 2597                       LHLD    EXPRS   ;POINT TO LAST BYTE
  1250    78                            MOV     A,B     ;B&E3 -> C
  1251    E6 E3                         ANI     0E3H
  1253    4F                            MOV     C,A
                                ; INSERT ( AND EVALUATE IF PRECEDENCE REDUCTION,
                                ;   ELSE INNSERT OP CODE
  1254    7E                    OPLP1:  MOV     A,M     ;GET TYPE CODE FROM EXPRESSION
  1255    F5                            PUSH    PSW     ;SAVE
  1256    E6 03                         ANI     3       ;GET LENGTH
  1258    14                    OPLP2:  INR     D       ;BUMP BYTE COUNT
  1259    2B                            DCX     H       ;EXPRESSION POINTER
  125A    3D                            DCR     A       ;LOOP MOVES TO NEXT ELEMENT
  125B    C2 1258                       JNZ     OPLP2
  125E    F1                            POP     PSW     ;RESTORE TYPE CODE
  125F    E6 E3                         ANI     0E3H    ;MASK FOR VARIABLE
  1261    FE E3                         CPI     0E3H    ;WE SKIP OVER VARIABLES
  1263    CA 1254                       JZ      OPLP1   ;BR IF TYPE = E3 OR E7
  1266    B9                            CMP     C       ;PRECEDENCE REDUCTION?
  1267    D2 1272                       JNC     INS     ;IF NC, YES, INSERT 05
  126A    2A 2597                       LHLD    EXPRS   ;NO, INSERT OPCODE BEFORE VAR AT END
  126D    E7                            RST     4       ;SKIP OVER VARIABLE
  126E    FD                            DB      -3 AND 0FFH
  126F    16 04                         MVI     D,4     ;BYTE COUNT
  1271    58                            MOV     E,B     ;INSERT THIS OP CODE
  1272    43                    INS:    MOV     B,E     ;SAVE FOR BRANCH AFTER INSERTION
  1273    23                    INS1:   INX     H       ;BUMP POINTER
  1274    4E                            MOV     C,M     ;PICK UP BYTE
  1275    70                            MOV     M,B     ;PUT DOWN REPLACEMENT
  1276    41                            MOV     B,C     ;SAVE FOR NEXT LOOP
  1277    15                            DCR     D       ;DONE?
  1278    C2 1273                       JNZ     INS1    ;IF NZ, NO
	MACRO-80 3.44	09-Dec-81	PAGE	1-55


  127B    22 2597                       SHLD    EXPRS   ;STORE POINTER
  127E    E1                            POP     H       ;RESTORE ASCII EXPRESSION POINTER
  127F    7B                            MOV     A,E     ;GET FLAG SAVED IN E
  1280    FE 05                         CPI     5       ;STORED A "("?
  1282    C2 1192                       JNZ     SKPP    ;IF NZ, NO, PROCESS NEXT ELEMENT
  1285    C3 12A8                       JMP     OP4     ;YES, GO EVALUATE
  1288    3A 25AF               OP2:    LDA     PARCT   ;GET OPEN PAREN COUNT
  128B    B7                            ORA     A       ;TEST IT
  128C    CA 123C                       JZ      ENDXP   ;BRIF END OF EXPR
  128F    EB                            XCHG            ;ELSE SAVE H,L
  1290    2A 2597                       LHLD    EXPRS   ;GET EXPR BEGIN
  1293    23                            INX     H       ;POINT NEXT
  1294    36 01                         MVI     M,1     ;MOVE A COMMA
  1296    22 2597                       SHLD    EXPRS   ;UPDATE POINTER
  1299    EB                            XCHG            ;FLIP BACK
  129A    C3 1192                       JMP     SKPP
  129D    3A 25AF               OP3:    LDA     PARCT   ;GET OPEN PAREN COUNT
  12A0    3D                            DCR     A       ;SUBTRACT ONE
  12A1    32 25AF                       STA     PARCT   ;SAVE IT
  12A4    FA 1D43                       JM      SNERR   ;BRIF TOO MANY )'S
  12A7    23                            INX     H       ;POINT NEXT SOURCE
  12A8    22 259D               OP4:    SHLD    ADDR3   ;SAVE ADDR
  12AB    2A 2597               EVAL:   LHLD    EXPRS   ;GET END OF EXPR
  12AE    01 0000                       LXI     B,0     ;INIT B,C TO ZERO
  12B1    04                    EV1:    INR     B       ;COUNT EACH BYTE
  12B2    7E                            MOV     A,M     ;GET CODE IN REG A
  12B3    2B                            DCX     H       ;POINT NEXT
  12B4    FE E3                         CPI     0E3H    ;TEST IF DATA
  12B6    C2 12C1                       JNZ     EV2     ;BRIF NOT DATA
  12B9    2B                    EV1A:   DCX     H       ;POINT NEXT
  12BA    2B                            DCX     H       ;DITTO
  12BB    04                            INR     B       ;BUMP CTR
  12BC    04                            INR     B       ;BY TWO
  12BD    0C                            INR     C       ;COUNT THE TERM
  12BE    C3 12B1                       JMP     EV1     ;LOOP
  12C1    FE AF                 EV2:    CPI     0AFH    ;TEST IF NUMERIC USER FN
  12C3    CA 0FA2                       JZ      FN      ;BRIF IS
  12C6    FE CF                         CPI     0CFH    ;TEST IF STRING USER FN
  12C8    CA 0FA2                       JZ      FN      ;BRIF IS
  12CB    F5                            PUSH    PSW     ;ELSE, SAVE STATUS
  12CC    E6 E3                         ANI     0E3H    ;MASK IT
  12CE    FE A3                         CPI     0A3H    ;TEST IF NUMERIC FUNCTION
  12D0    CA 12E1                       JZ      EV2A    ;BRIF IS
  12D3    FE C3                         CPI     0C3H    ;TEST IF STRING FUNCTION
  12D5    CA 12E1                       JZ      EV2A    ;BRIF IS
  12D8    F1                            POP     PSW     ;RESTORE CODE
  12D9    FE E7                         CPI     0E7H    ;TEST IF STRING ADDR
  12DB    CA 12B9                       JZ      EV1A    ;BRIF IS
  12DE    C3 1369                       JMP     EV5     ;BR AROUND
  12E1    23                    EV2A:   INX     H       ;RESET TO TYPE CODE
  12E2    22 2599                       SHLD    ADDR1   ;SAVE ADDR
  12E5    D1                            POP     D       ;DUMMY POP
  12E6    C5                            PUSH    B       ;SAVE CTRS
  12E7    2B                            DCX     H       ;POINT TO LOW JMP ADDR
  12E8    5E                            MOV     E,M     ;LOW BYTE
  12E9    2B                            DCX     H       ;POINT BACK
	MACRO-80 3.44	09-Dec-81	PAGE	1-56


  12EA    56                            MOV     D,M     ;HIGH BACK
  12EB    22 259B                       SHLD    ADDR2   ;SAVE LOCATION
  12EE    21 12F8                       LXI     H,EV3   ;GET RETURN ADDRESS
  12F1    E5                            PUSH    H       ;SAVE ON STACK
  12F2    D5                            PUSH    D       ;SAVE ADDRESS
  12F3    CD 1DAC                       CALL    ARG     ;GO GET 1ST ARG
  12F6    E1                            POP     H       ;GET H,L ADDRESS
  12F7    E9                            PCHL            ;GO EXECUTE THE FUNCTION
  12F8                          EV3     EQU     $       ;FUNCTIONS RETURN HERE
  12F8    2A 259B                       LHLD    ADDR2   ;GET ADDR FUNC
  12FB    23                            INX     H       ;POINT LO
  12FC    23                            INX     H       ;POINT TYPE
  12FD    7E                            MOV     A,M     ;LOAD IT
  12FE    E6 E0                         ANI     0E0H    ;MASK IT
  1300    FE C0                         CPI     0C0H    ;TEST IF STRING
  1302    CA 133D                       JZ      EV4     ;BRIF IS
  1305    C1                            POP     B       ;GET CTRS
  1306    2A 25B0                       LHLD    SPCTR   ;GET COUNTER
  1309    23                            INX     H       ;PLUS
  130A    23                            INX     H       ;TWO WORDS
  130B    22 25B0                       SHLD    SPCTR   ;STORE IT
  130E    21 0000                       LXI     H,0     ;LOAD ZERO TO H,L
  1311    E5                            PUSH    H       ;GET BLOCK OF
  1312    E5                            PUSH    H       ;BYTES
  1313    39                            DAD     SP      ;GET STACK ADDR
  1314    C5                            PUSH    B       ;SAVE CTRS
  1315    E5                            PUSH    H       ;SAVE ADDR
  1316    DF                            RST     3       ;GO STORE THE VARIABLE
  1317    3E E3                         MVI     A,0E3H  ;TYPE=NUM
  1319    D1                    EV3A:   POP     D       ;GET ADDR IN STACK
  131A    2A 2599                       LHLD    ADDR1   ;GET ADDR LST ARG
  131D    77                            MOV     M,A     ;STORE TYPE CODE
  131E    2B                            DCX     H       ;POINT ONE BACK
  131F    73                            MOV     M,E     ;STORE LO ADDR
  1320    2B                            DCX     H       ;POINT BACK
  1321    72                            MOV     M,D     ;STORE HI ADDR
  1322    2A 259B                       LHLD    ADDR2   ;GET LOCATION FUNCTION
  1325    23                            INX     H       ;POINT LO
  1326    23                            INX     H       ;POINT TYPE
  1327    7E                            MOV     A,M     ;LOAD TYPE
  1328    46                            MOV     B,M     ;GET TYPE
  1329    E7                            RST     4       ;ADJUST H,L
  132A    FD                            DB      -3 AND 0FFH
  132B    78                            MOV     A,B     ;LOAD TYPE
  132C    C1                            POP     B       ;RESTORE CTRS
  132D    E6 18                         ANI     18H     ;ISOLATE #ARGS
  132F    1F                            RAR             ;SHIFT RIGHT
  1330    1F                            RAR             ;AGAIN
  1331    1F                            RAR             ;ONCE MORE
  1332    57                            MOV     D,A     ;SAVE IT
  1333    82                            ADD     D       ;TIMES 2
  1334    82                            ADD     D       ;TIMES 3
  1335    04                            INR     B       ;POINT
  1336    04                            INR     B       ;LST POSIT IN LOC
  1337    CD 1C16                       CALL    SQUIS   ;GO COMPRESS STACK
  133A    C3 12AB                       JMP     EVAL    ;START AT BEGINNING
	MACRO-80 3.44	09-Dec-81	PAGE	1-57


  133D    11 2467               EV4:    LXI     D,STRIN ;POINT STRING BUFFER
  1340    1A                            LDAX    D       ;LOAD IT
  1341    1F                            RAR             ;DIVIDE BY TWO
  1342    3C                            INR     A       ;ADD 1
  1343    2A 25B0                       LHLD    SPCTR   ;GET SP COUNT
  1346    4F                            MOV     C,A     ;SAVE LO
  1347    06 00                         MVI     B,0     ;SET HI
  1349    09                            DAD     B       ;ADD NUMBER WORDS
  134A    22 25B0                       SHLD    SPCTR   ;SAVE SP COUNT
  134D    21 0000                       LXI     H,0     ;GET SOME ZEROS
  1350    C1                            POP     B       ;GET CTRS
  1351    E5                    EV4A:   PUSH    H       ;GET 1 WORD
  1352    3D                            DCR     A       ;DECR CTR
  1353    C2 1351                       JNZ     EV4A    ;LOOP
  1356    39                            DAD     SP      ;GET ADDRESS IN H,L
  1357    C5                            PUSH    B       ;RE-SAVE CTRS
  1358    E5                            PUSH    H       ;SAVE ADDR
  1359    1A                            LDAX    D       ;GET COUNT
  135A    3C                            INR     A       ;PLUS ONE
  135B    47                            MOV     B,A     ;SAVE IT
  135C    1A                    EV4B:   LDAX    D       ;GET A BYTE
  135D    77                            MOV     M,A     ;STORE IT
  135E    13                            INX     D       ;POINT NEXT
  135F    23                            INX     H       ;DITTO
  1360    05                            DCR     B       ;DECR CTR
  1361    C2 135C                       JNZ     EV4B    ;LOOP
  1364    3E E7                         MVI     A,0E7H  ;TYPE CODE
  1366    C3 1319                       JMP     EV3A    ;CONTINUE
  1369    FE 05                 EV5:    CPI     5       ;TEST IF OPEN PAREN
  136B    C2 1387                       JNZ     EV6     ;BRIF NOT
  136E    3E 01                         MVI     A,1     ;DELETE 1 BYTE
  1370    CD 1C16                       CALL    SQUIS   ;GO COMPRESS IT
  1373    2A 259D                       LHLD    ADDR3   ;RESTORE STMT POINTER
  1376    3A 23B9                       LDA     DIMSW   ;GET SUBSR SWITCH
  1379    B7                            ORA     A       ;TEST IT
  137A    CA 120E                       JZ      LOOKO   ;BRIF NOT IN SUBS^CRIPT
  137D    3A 25AF                       LDA     PARCT   ;GET OPEN PAREN COUNT
  1380    B7                            ORA     A       ;TEST
  1381    C2 120E                       JNZ     LOOKO   ;BRIF NOT ZERO
  1384    C3 12AB                       JMP     EVAL    ;ELSE EVALUATE COMPLETE SUBSCR
  1387    B7                    EV6:    ORA     A       ;TEST IF END OF EXPRESSION
  1388    C2 13B8                       JNZ     EV9     ;BRIF NOT
  138B    3A 23B9                       LDA     DIMSW   ;GET DIM SW
  138E    B7                            ORA     A       ;TEST IT
  138F    C4 148E                       CNZ     EDM1    ;BRIF NOT OFF
  1392    79                            MOV     A,C     ;GET TERM COUNT
  1393    FE 01                         CPI     1       ;TEST IF ONE
  1395    C2 1D3F                       JNZ     STERR   ;ERROR IF NOT ONE
  1398    23                            INX     H       ;POINT HIGH ADDR
  1399    23                            INX     H       ;SAME
  139A    56                            MOV     D,M     ;HIGH TO D
  139B    23                            INX     H       ;POINT LOW
  139C    5E                            MOV     E,M     ;LOW TO E
  139D    CD 1474                       CALL    EVLD    ;GO LOAD VALUE
  13A0    2A 25B0                       LHLD    SPCTR   ;GET STACK CTR
  13A3    7D                    EV7:    MOV     A,L     ;GET LO BYTE
	MACRO-80 3.44	09-Dec-81	PAGE	1-58


  13A4    B4                            ORA     H       ;PLUS HI
  13A5    CA 13AD                       JZ      DV8     ;BRIF ZERO
  13A8    D1                            POP     D       ;RETURN 2 BYTES
  13A9    2B                            DCX     H       ;DECR CTR
  13AA    C3 13A3                       JMP     EV7     ;LOOP
  13AD    3A 23B9               DV8:    LDA     DIMSW   ;GET DIM SW
  13B0    B7                            ORA     A       ;TEST IT
  13B1    C4 14B5                       CNZ     EDM4    ;BRIF ON
  13B4    2A 259D                       LHLD    ADDR3   ;RESTORE STMT PTR
  13B7    C9                            RET             ;RETURN TO STMT PROCESSOR
  13B8    FE 21                 EV9:    CPI     21H     ;TEST IF PLUS
  13BA    11 140C                       LXI     D,FADDJ ;ADDR
  13BD    CA 13EA                       JZ      EV10    ;BRIF IS
  13C0    FE 25                         CPI     25H     ;TEST IF MINUS
  13C2    11 17FD                       LXI     D,FSUB  ;ADDR
  13C5    CA 13EA                       JZ      EV10    ;BRIF IS
  13C8    FE 41                         CPI     41H     ;TEST IF MUL
  13CA    11 1809                       LXI     D,FMUL  ;ADDR
  13CD    CA 13EA                       JZ      EV10    ;BRIF IS
  13D0    FE 45                         CPI     45H     ;TEST IF DIV
  13D2    11 188C                       LXI     D,FDIV  ;ADDR
  13D5    CA 13EA                       JZ      EV10    ;BRIF IS
  13D8    FE 01                         CPI     1       ;TEST IF COMMA
  13DA    CA 1468                       JZ      EVCOM   ;BRIF IS
  13DD    FE 61                         CPI     61H     ;TEST IF UNARY MINUS
  13DF    CA 1454                       JZ      EVNEG   ;BRIF IS
  13E2    FE 81                         CPI     81H     ;TEST IF EXPONENTIAL
  13E4    11 1414                       LXI     D,POWER ;ADDR
  13E7    C2 1D3F                       JNZ     STERR   ;ERROR IF NOT
  13EA    23                    EV10:   INX     H       ;POINT TO
  13EB    23                            INX     H       ;1ST DATA
  13EC    C5                            PUSH    B       ;SAVE CTRS
  13ED    D5                            PUSH    D       ;SAVE ROUTINE ADDR
  13EE    56                            MOV     D,M     ;HIGH TO D
  13EF    23                            INX     H       ;POINT NEXT
  13F0    5E                            MOV     E,M     ;LOW TO E
  13F1    E5                            PUSH    H       ;SAVE POINTER
  13F2    CD 1474                       CALL    EVLD    ;GO LOAD VALUE
  13F5    E1                            POP     H       ;RESTORE H,L
  13F6    23                            INX     H       ;POINT 2ND DATA
  13F7    23                            INX     H       ;SAME
  13F8    56                            MOV     D,M     ;HIGH TO D
  13F9    23                            INX     H       ;POINT NEXT
  13FA    5E                            MOV     E,M     ;LOW TO E
  13FB    23                            INX     H       ;POINT NEXT
  13FC    3A 25D5                       LDA     NS      ;GET PREV TYPE
  13FF    BE                            CMP     M       ;TEST THIS TYPE
  1400    C2 1D43                       JNZ     SNERR   ;BRIF MIXED MODE
  1403    2B                            DCX     H       ;POINT BACK
  1404    E3                            XTHL            ;POP ADDR FROM STACK, PUSH H ONTO
  1405    01 1443                       LXI     B,EV11  ;RETURN ADDRESS
  1408    C5                            PUSH    B       ;SAVE ON STACK
  1409    E5                            PUSH    H       ;SAVE JUMP ADDR
  140A    EB                            XCHG            ;PUT VAR ADDR TO H,L
  140B    C9                            RET             ;FAKE CALL TO ROUTINE
  140C    FE E7                 FADDJ:  CPI     0E7H    ;TEST IF STRINGS
	MACRO-80 3.44	09-Dec-81	PAGE	1-59


  140E    CA 0E17                       JZ      CONCA   ;BRIF IS
  1411    C3 1728                       JMP     FADD    ;ELSE, GO ADD
  1414    E5                    POWER:  PUSH    H       ;SAVE ADDR OF VAR
  1415    21 2576                       LXI     H,TEMP1 ;POINT SAVE AREA
  1418    DF                            RST     3       ;SAVE X
  1419    E1                            POP     H       ;RESTORE H,L
  141A    EF                            RST     5       ;LOAD IT
  141B    CD 19BF                       CALL    FTEST   ;TEST FOR ZERO
  141E    CA 0CC7                       JZ      SGN1    ;GIVE RESULT = 1 IF POWER = 0
  1421    21 258E                       LXI     H,TEMP7 ;POINT SAVE AREA
  1424    DF                            RST     3       ;SAVE B
  1425    21 2576                       LXI     H,TEMP1 ;POINT X
  1428    EF                            RST     5       ;GO LOAD IT
  1429    CD 19BF                       CALL    FTEST   ;TEST FOR ZERO
  142C    C8                            RZ              ;0^X = 0
  142D    CD 0C04                       CALL    LN      ;GET NATURAL LNRITHM
  1430    21 258E                       LXI     H,TEMP7 ;POINT B
  1433    CD 1809                       CALL    FMUL    ;GO MULTIPLY
  1436    C3 0C5B                       JMP     EXP     ;GET EXP FUNC
                                ; X^B = EXP(B*LN(X))
  1439    21 2576               XSQR:   LXI     H,TEMP1 ;POINT X
  143C    EF                            RST     5       ;LOAD X
  143D    21 2576                       LXI     H,TEMP1 ;POINT X
  1440    C3 1809                       JMP     FMUL    ;TIMES X
  1443    E1                    EV11:   POP     H       ;GET H,L
  1444    C1                            POP     B       ;GET CTRS
  1445    2B                            DCX     H       ;POINT BACK
  1446    2B                            DCX     H       ;AND AGAIN
  1447    CD 1C34                       CALL    GTEMP   ;GO SAVE FACC
  144A    E7                            RST     4       ;ADJUST H,L
  144B    F9                            DB      -7 AND 0FFH
  144C    3E 04                         MVI     A,4     ;DELETE 4 BYTES
  144E    CD 1C16                       CALL    SQUIS   ;GO COMPRESS
  1451    C3 12AB                       JMP     EVAL    ;CONTINUE
  1454    23                    EVNEG:  INX     H       ;POINT BACK TO OP
  1455    C5                            PUSH    B       ;SAVE CTRS
  1456    E5                            PUSH    H       ;SAVE H,L
  1457    23                            INX     H       ;DITTO
  1458    56                            MOV     D,M     ;GET HI BYTE
  1459    23                            INX     H       ;POINT NEXT
  145A    5E                            MOV     E,M     ;GET LO BYTE
  145B    CD 1474                       CALL    EVLD    ;GO LOAD VAR
  145E    CD 0D6B                       CALL    NEG     ;GO NEGATE IT
  1461    E1                            POP     H       ;GET LOCATINO
  1462    C1                            POP     B       ;GET CTRS
  1463    CD 1C34                       CALL    GTEMP   ;GO STORE FACC IN STACK
  1466    E7                            RST     4       ;ADJUST H,L
  1467    FC                            DB      -4 AND 0FFH
  1468    3E 01                 EVCOM:  MVI     A,1     ;DELETE 1 BYTE
  146A    CD 1C16                       CALL    SQUIS   ;COMPRESS
  146D    21 25B2                       LXI     H,CMACT ;GET COUNT
  1470    34                            INR     M       ;INCR
  1471    C3 12AB                       JMP     EVAL    ;CONTINUE
  1474    23                    EVLD:   INX     H       ;POINT TYPE
  1475    7E                            MOV     A,M     ;LOAD IT
  1476    32 25D5                       STA     NS      ;SAVE IT
	MACRO-80 3.44	09-Dec-81	PAGE	1-60


  1479    EB                            XCHG            ;SAVE H,L IN D,E
  147A    FE E7                         CPI     0E7H    ;TEST IF STRING
  147C    C2 0123                       JNZ     RST5    ;LOAD FLOATING POINT
  147F    11 2467                       LXI     D,STRIN ;POINT BUFFER
  1482    7E                            MOV     A,M     ;GET COUNT
  1483    3C                            INR     A       ;ADD ONE
  1484    47                            MOV     B,A     ;SAVE COUNT
  1485    7E                    EVLD1:  MOV     A,M     ;GET NEXT
  1486    12                            STAX    D       ;STORE IT
  1487    23                            INX     H       ;POINT NEXT
  1488    13                            INX     D       ;DITTO
  1489    05                            DCR     B       ;DECR COUNT
  148A    C2 1485                       JNZ     EVLD1   ;LOOP
  148D    C9                            RET             ;RETURN
                                ;
  148E    79                    EDM1:   MOV     A,C     ;GET ITEM COUNT
  148F    E5                            PUSH    H       ;SAVE H,L
  1490    FE 01                         CPI     1       ;TEST IF 1
  1492    C2 14A1                       JNZ     EDM3    ;BRIF NOT
  1495    06 04                         MVI     B,4     ;GET COUNT
  1497    21 2576                       LXI     H,TEMP1 ;POINT AREA
  149A    CD 1D96                       CALL    ZEROM   ;GO ZERO IT
  149D    E1                    EDM2A:  POP     H       ;RESTORE H,L
  149E    0E 01                         MVI     C,1     ;SET COUNT
  14A0    C9                            RET             ;RETURN
  14A1    FE 02                 EDM3:   CPI     2       ;TEST IF 2
  14A3    C2 1D43                       JNZ     SNERR   ;ELSE, ERROR
  14A6    E7                            RST     4       ;POINT 2ND ARG
  14A7    05                            DB      5
  14A8    56                            MOV     D,M     ;GET HI ADDR
  14A9    23                            INX     H       ;POINT NEXT
  14AA    5E                            MOV     E,M     ;GET LO ADDR
  14AB    CD 1474                       CALL    EVLD    ;LOAD THE ARG
  14AE    21 2576                       LXI     H,TEMP1 ;POINT AREA
  14B1    DF                            RST     3       ;SAVE THE ARG
  14B2    C3 149D                       JMP     EDM2A   ;CONTINUE
  14B5    CD 20A0               EDM4:   CALL    FACDE   ;CONVERT FACC TO D,E
  14B8    D5                            PUSH    D       ;PUT D,E TO B,C
  14B9    C1                            POP     B
  14BA    C5                            PUSH    B       ;SAVE COL
  14BB    21 2576                       LXI     H,TEMP1 ;POINT 2ND ARGUMENT
  14BE    EF                            RST     5       ;LOAD IT IN FACC
  14BF    CD 20A0                       CALL    FACDE   ;CONVERT TO D,E
  14C2    C1                            POP     B       ;GET COL
  14C3    AF                            XRA     A       ;GET A ZERO
  14C4    32 23B9                       STA     DIMSW   ;RESET SW
  14C7    C9                            RET             ;RETURN
  14C8    78                    LDV2A:  MOV     A,B     ;GET HI NAME
  14C9    F6 80                         ORI     80H     ;SET BIT
  14CB    47                            MOV     B,A     ;RESTORE
  14CC    C5                            PUSH    B       ;SAVE NAME
  14CD    EB                            XCHG            ;SAVE H,L IN D,E
  14CE    3A 25AF                       LDA     PARCT   ;GET PAREN COUNT
  14D1    F5                            PUSH    PSW     ;SAVE
  14D2    AF                            XRA     A       ;CLEAR REG A
  14D3    32 25AF                       STA     PARCT   ;RESET COUNT
	MACRO-80 3.44	09-Dec-81	PAGE	1-61


  14D6    2A 25B0                       LHLD    SPCTR   ;GET STACK COUNTER
  14D9    E5                            PUSH    H       ;SAVE IT
  14DA    21 0000                       LXI     H,0     ;GET A ZERO
  14DD    22 25B0                       SHLD    SPCTR   ;RESET CTR
  14E0    2A 2597                       LHLD    EXPRS   ;GET EXPRST
  14E3    E5                            PUSH    H       ;SAVE IT
  14E4    23                            INX     H       ;POINT NEXT
  14E5    36 00                         MVI     M,0     ;SET NEW START
  14E7    22 2597                       SHLD    EXPRS   ;SAVE IT
  14EA    3A 23B9                       LDA     DIMSW   ;GET PREV SE
  14ED    F5                            PUSH    PSW     ;SAVE IT
  14EE    EB                            XCHG            ;RESTORE H,L
  14EF    3E FF                         MVI     A,0FFH  ;GET ON VALUE
  14F1    32 23B9                       STA     DIMSW   ;SET SW
  14F4    CD 1086                       CALL    LOOKD   ;RECURSIVE CALL
  14F7    F1                            POP     PSW     ;GET DIM SW
  14F8    32 23B9                       STA     DIMSW   ;REPLACE IT
  14FB    22 259D                       SHLD    ADDR3   ;SAVE H,L
  14FE    E1                            POP     H       ;GET EXPRST
  14FF    22 2597                       SHLD    EXPRS   ;SAVE IT
  1502    E1                            POP     H       ;GET STACK COUNTER
  1503    22 25B0                       SHLD    SPCTR   ;RESTORE IT
  1506    F1                            POP     PSW     ;GET PAREN COUNT
  1507    32 25AF                       STA     PARCT   ;RESTORE IT
  150A    E1                            POP     H       ;GET NAME
  150B    D5                            PUSH    D       ;SAVE ROW
  150C    C5                            PUSH    B       ;SAVE COL
  150D    EB                            XCHG            ;PUT NAME IN D,E
  150E    CD 1C68                       CALL    SEARC   ;GO FIND ADDRESS (PUT IN D,E)
  1511    D1                            POP     D       ;GET ADDR
  1512    C1                            POP     B       ;RESTORE COL
  1513    D1                            POP     D       ;RESTORE ROW
  1514    CD 1976                       CALL    SUBSC   ;GET SUBSCRIPT (RETURNS ADDR IN H,L)
  1517    EB                            XCHG            ;SAVE IN D,E
  1518    2A 259D                       LHLD    ADDR3   ;GET H,L
  151B    E5                            PUSH    H       ;SAVE ON STACK
  151C    C3 10CF                       JMP     LDV     ;CONTINUE
                                ;       PAGE
                                ;
  151F                          FIN     EQU     $
                                ;
                                ; FLOATING POINT INPUT CONVERSION ROUTINE
                                ;
                                ; THIS SUBROUTINE CONVERTS AN ASCII STRING OF CHARACTERS
                                ; TO THE FLOATING POINT ACCUMULATOR.  THE INPUT FIELD
                                ; MAY CONTAIN ANY VALID NUMBER, INCLUDING SCIENTIFIC
                                ; NOTATION (NNN.NNNNE+NN).
                                ; THE INPUT STRING IS TERMINATED BY ANY NON-NUMERIC CHAR
                                ;
                                ;
  151F    EB                            XCHG            ;PUT ADDR TO D,E
  1520    0E 00                         MVI     C,0     ;INITIAL VALUE EXCESS DIGIT COUNT
  1522    CD 1579                       CALL    FIN8    ;GET INTEGER PORTION
  1525    06 00                         MVI     B,0     ;CLEAR DIGIT COUNT
  1527    FE 2E                         CPI     '.'     ;TEST IF DEC-POINT
  1529    C2 152F                       JNZ     FIN2    ;BRIF NOT
	MACRO-80 3.44	09-Dec-81	PAGE	1-62


  152C    CD 1593                       CALL    FIN9    ;GET FRACTION
  152F    F1                    FIN2:   POP     PSW     ;GET SIGN
  1530    F6 18                         ORI     24      ;SET UP FOR FLOAT
  1532    32 259F                       STA     FACC
  1535    78                            MOV     A,B     ;GET # FRACTION DIGITS
  1536    81                            ADD     C       ;+ EXCESS DIGITS
  1537    F5                            PUSH    PSW     ;SAVE POWER OF TEN
  1538    D5                            PUSH    D       ;SAVE PTR
  1539    CD 17CE                       CALL    FNORM   ;NORMALIZE NUMBER
  153C    1A                            LDAX    D       ;GET NEXT CHARACTER
  153D    FE 45                         CPI     'E'     ;TEST IF EXPONENT
  153F    C2 155D                       JNZ     FIN4    ;BRIF NOT
  1542    21 25A3                       LXI     H,FTEMP ;POINT SAVE AREA
  1545    DF                            RST     3       ;SAVE ACC
  1546    D1                            POP     D       ;RESTORE PTR
  1547    13                            INX     D       ;SKIP 'E'
  1548    CD 1579                       CALL    FIN8    ;GET NUMERIC EXP
  154B    3A 25A2                       LDA     FACC+3  ;GET EXPONENT
  154E    C1                            POP     B       ;EXPONENT SIGN
  154F    04                            INR     B       ;TEST
  1550    F2 1555                       JP      FIN3    ;BRIF NOT NEG
  1553    2F                            CMA             ;NEGATE EXPONENT
  1554    3C                            INR     A
  1555    C1                    FIN3:   POP     B       ;POWER OF TEN
  1556    80                            ADD     B       ;ADD EXPONENT
  1557    F5                            PUSH    PSW     ;SAVE COUNT
  1558    21 25A3                       LXI     H,FTEMP ;RESTORE NUMBER
  155B    D5                            PUSH    D       ;SAVE PTR
  155C    EF                            RST     5       ;LOAD IT
  155D    E1                    FIN4:   POP     H       ;RESTORE PTR
  155E    F1                            POP     PSW     ;RESTORE COUNT
  155F    C8                    FIN5:   RZ              ;RETURN IF ZERO
  1560    E5                            PUSH    H       ;SAVE H,L
  1561    21 1EE2                       LXI     H,TEN   ;POINT CONSTANT: 10
  1564    FA 1571                       JM      FIN7    ;BRIF DIVIDE NEEDED
  1567    3D                            DCR     A       ;DECR COUNT
  1568    F5                            PUSH    PSW     ;SAVE COUNT
  1569    CD 1809                       CALL    FMUL    ;GO MULTIPLY BY 10
  156C    F1                    FIN6:   POP     PSW     ;RESTORE COUNT
  156D    E1                            POP     H       ;RESTORE H,L
  156E    C3 155F                       JMP     FIN5    ;CONTINUE
  1571    3C                    FIN7:   INR     A       ;INCR COUNT
  1572    F5                            PUSH    PSW     ;SAVE COUNT
  1573    CD 188C                       CALL    FDIV    ;GO DIVIDE BY 10
  1576    C3 156C                       JMP     FIN6    ;LOOP
                                ;
                                ; FIN8  CONVERT NUMBER STRING TO FACC
                                ; ON ENTRY, C=INIT VALUE EXCESS DIGIT COUNT
                                ;             DE=INPUT STRING
                                ; ON EXIT, SIGN IS ON STACK
                                ;       B=DIGIT COUNT
                                ;       C=EXCESS DIGIT COUNT
                                ;
  1579    21 259F               FIN8:   LXI     H,FACC  ;CLEAR FACC
  157C    06 04                         MVI     B,4
  157E    CD 1D96                       CALL    ZEROM
	MACRO-80 3.44	09-Dec-81	PAGE	1-63


  1581    21 8000                       LXI     H,8000H ;ASSUME MINUS
  1584    1A                            LDAX    D       ;GET CHAR
  1585    FE 2D                         CPI     '-'
  1587    CA 1591                       JZ      FIN8A
  158A    65                            MOV     H,L     ;NOPE, MUST BE PLUS
                                                        ;(B IS CLEARED BY ZEROM)
  158B    FE 2B                         CPI     '+'
  158D    CA 1591                       JZ      FIN8A
  1590    1B                            DCX     D       ;NEITHER, BACK UP POINTER
  1591    E3                    FIN8A:  XTHL            ;GET RETURN, PUSH SIGN
  1592    E5                            PUSH    H       ;RESTORE RETURN
  1593    13                    FIN9:   INX     D       ;POINT NEXT
  1594    1A                            LDAX    D       ;GET CHAR
  1595    FE 30                         CPI     '0'     ;TEST IF LESS ZERO
  1597    D8                            RC              ;RETURN IF IS
  1598    FE 3A                         CPI     '9'+1   ;TEST IF GT NINE
  159A    D0                            RNC             ;RETURN IF IS
  159B    05                            DCR     B       ;DIGIT COUNT
  159C    D5                            PUSH    D       ;SAVE PTR
  159D    C5                            PUSH    B       ;SAVE COUNTERS
  159E    CD 15C6                       CALL    FMTEN   ;MULTIPLY FACC*TEN
  15A1    B7                            ORA     A       ;TEST FOR OVERFLOW
  15A2    CA 15AF                       JZ      FINB    ;BRIF NO OVERFLOW
  15A5    21 25A7                       LXI     H,FTEMP+4
  15A8    EF                            RST     5       ;RESTORE OLD FACC
  15A9    C1                            POP     B       ;RESTORE COUNTERS
  15AA    0C                            INR     C       ;EXCESS DIGIT
  15AB    D1                            POP     D
  15AC    C3 1593                       JMP     FIN9
  15AF    C1                    FINB:   POP     B       ;RSTORE COUNTERS
  15B0    D1                            POP     D       ;& PTR
  15B1    1A                            LDAX    D       ;GET THE DIGIT
  15B2    E6 0F                         ANI     0FH     ;MASK OFF ZONE
  15B4    21 25A2                       LXI     H,FACC+3        ;POINT ACC
  15B7    86                            ADD     M       ;ADD
  15B8    77                            MOV     M,A     ;STORE
  15B9    2B                            DCX     H       ;POINT NEXT
  15BA    7E                            MOV     A,M     ;LOAD
  15BB    CE 00                         ACI     0       ;PLUS CARRY
  15BD    77                            MOV     M,A     ;STORE
  15BE    2B                            DCX     H       ;POINT NEXT
  15BF    7E                            MOV     A,M     ;LOAD
  15C0    CE 00                         ACI     0       ;PLUS CARRY
  15C2    77                            MOV     M,A     ;STORE
  15C3    C3 1593                       JMP     FIN9    ;LOOP
                                ;
                                ; MULTIPLY FACC BY TEN
                                ;
  15C6    21 25A7               FMTEN:  LXI     H,FTEMP+4
  15C9    DF                            RST     3       ;SAVE FACC
  15CA    CD 15D6                       CALL    FIND    ;*2
  15CD    CD 15D6                       CALL    FIND    ;*4
  15D0    21 25AA                       LXI     H,FTEMP+7
  15D3    CD 15D9                       CALL    FIND0   ;*5
  15D6    21 25A2               FIND:   LXI     H,FACC+3        ;DOUBLE FACC
  15D9    11 25A2               FIND0:  LXI     D,FACC+3
	MACRO-80 3.44	09-Dec-81	PAGE	1-64


  15DC    06 04                         MVI     B,4     ;BYTE COUNT
  15DE    C3 19E1                       JMP     FADDT   ;ADD & RETURN
                                ;PAGE
                                ;
  15E1                          FOUT    EQU     $
                                ;
                                ; FLOATING POINT OUTPUT FORMAT ROUTINE
                                ;
                                ; THIS SUBROUTINE CONVERTS A NUMBER IN FACC TO A
                                ; FORMAT SUITABLE FOR PRINTING.  THAT IS, THE
                                ; NUMBER WILL BE IN SCIENTIFIC NOTATION IF EXPONENT
                                ; IS > 5 OR < -2, OTHERWISE IT WILL BE ZERO SUPRESSED
                                ; ON BOTH SIDES.
                                ;
  15E1    11 25A2                       LXI     D,FACC+3        ;POINT LSB
  15E4    1A                            LDAX    D       ;LOAD IT
  15E5    F6 07                         ORI     7       ;MASK FOR OUTPUT
  15E7    12                            STAX    D       ;REPLACE
  15E8    CD 19BF                       CALL    FTEST   ;GET SIGN OF NUMBER
  15EB    36 20                         MVI     M,' '   ;DEFAULT SPACE
  15ED    F2 15F2                       JP      FOUT0   ;BRIF NOT MINUS
  15F0    36 2D                         MVI     M,'-'   ;MOVE DASH
  15F2    23                    FOUT0:  INX     H       ;POINT NEXT
  15F3    C2 15FC                       JNZ     FOUT2   ;BRIF NOT ZERO
  15F6    36 30                         MVI     M,'0'   ;MOVE THE ZERO
  15F8    23                            INX     H       ;POINT NEXT
  15F9    36 20                         MVI     M,' '   ;MOVE SPACE FOLLOWING
  15FB    C9                            RET             ;RETURN
  15FC    3A 259F               FOUT2:  LDA     FACC    ;GET SIGN & EXP
  15FF    CD 19CD                       CALL    FEXP    ;EXPAND EXPONENT
  1602    C2 1607                       JNZ     FOUTV   ;BRIF NOT ZERO
  1605    3E 80                         MVI     A,80H   ;SET NEG
  1607    E6 80                 FOUTV:  ANI     80H     ;ISOLATE
  1609    32 25BC                       STA     DEXP    ;SAVE SIGN
  160C    E5                            PUSH    H       ;SAVE H,L
  160D    3A 259F               FOUT3:  LDA     FACC    ;GET SIGN & EXP
  1610    CD 19CD                       CALL    FEXP    ;EXPAND EXP
  1613    FE 01                         CPI     1       ;TEST RANGE
  1615    F2 162E                       JP      FOUT6   ;BRIF IN RANGE
  1618    21 25BC               FOUT4:  LXI     H,DEXP  ;POINT DEC.EXP
  161B    34                            INR     M       ;INCR IT
  161C    21 1EE2                       LXI     H,TEN   ;POINT CONST: 10
  161F    F2 1628                       JP      FOUT5   ;BRIF POS.
  1622    CD 1809                       CALL    FMUL    ;MULTIPLY
  1625    C3 160D                       JMP     FOUT3   ;LOOP
  1628    CD 188C               FOUT5:  CALL    FDIV    ;DIVIDE
  162B    C3 160D                       JMP     FOUT3   ;LOOP
  162E    FE 05                 FOUT6:  CPI     5       ;TEST HIGH RANGE
  1630    F2 1618                       JP      FOUT4   ;BRIF 5 OR GREATER
  1633    21 25A3                       LXI     H,FTEMP ;POINT SAVE AREA
  1636    DF                            RST     3       ;STORE IT
  1637    3A 259F                       LDA     FACC    ;GET EXPONENT
  163A    CD 19CD                       CALL    FEXP    ;EXPAND
  163D    0E 06                         MVI     C,6     ;DIGIT COUNT
  163F    CD 1673                       CALL    FOUTB   ;SHIFT LEFT
  1642    FE 0A                         CPI     10      ;TEST IF DECIMAL POINT
	MACRO-80 3.44	09-Dec-81	PAGE	1-65


  1644    FA 164E                       JM      FOUTU   ;BRIF LT
  1647    21 25A3                       LXI     H,FTEMP ;POINT SAVE AREA
  164A    EF                            RST     5       ;LOAD IT
  164B    C3 1618                       JMP     FOUT4   ;ONCE MORE
  164E    CD 1661               FOUTU:  CALL    FOUT9   ;PUT DIGIT
  1651    AF                    FOUT7:  XRA     A       ;CLEAR STATUS
  1652    32 259F                       STA     FACC    ;AND OVERFLOW
  1655    CD 15C6                       CALL    FMTEN   ;MULTIPLY BY TEN
  1658    CD 1661                       CALL    FOUT9   ;PUT DIGIT
  165B    C2 1651                       JNZ     FOUT7   ;LOOP
  165E    C3 168A                       JMP     FOUTH   ;GO AROUND
  1661    F6 30                 FOUT9:  ORI     30H     ;DEC. ZONE
  1663    E1                            POP     H       ;GET RETURN ADDR
  1664    E3                            XTHL            ;EXCH WITH TOP (PTR)
  1665    77                            MOV     M,A     ;PUT DIGIT
  1666    23                            INX     H       ;POINT NEXT
  1667    79                            MOV     A,C     ;GET COUNT
  1668    FE 06                         CPI     6       ;TEST IF 1ST
  166A    C2 1670                       JNZ     FOUTA   ;BRIF NOT
  166D    36 2E                         MVI     M,'.'   ;MOVE DEC. PT.
  166F    23                            INX     H       ;POINT NEXT
  1670    E3                    FOUTA:  XTHL            ;EXCH WITH RTN
  1671    0D                            DCR     C       ;DECR COUNT
  1672    E9                            PCHL            ;RETURN
  1673    5F                    FOUTB:  MOV     E,A     ;SAVE BIT COUNT
  1674    AF                            XRA     A       ;CLEAR ACC FLAGS
  1675    32 259F                       STA     FACC    ;AND OVERFLOW
  1678    21 25A2               FOUTC:  LXI     H,FACC+3        ;POINT LSB
  167B    06 04                         MVI     B,4     ;BYTE COUNT
  167D    7E                    FOUTD:  MOV     A,M     ;GET A BYTE
  167E    17                            RAL             ;SHIFT LEFT
  167F    77                            MOV     M,A     ;STORE
  1680    2B                            DCX     H       ;POINT NEXT
  1681    05                            DCR     B       ;DECR CTR
  1682    C2 167D                       JNZ     FOUTD   ;LOOP
  1685    1D                            DCR     E       ;DECR BIT CTR
  1686    C2 1678                       JNZ     FOUTC   ;LOOP
  1689    C9                            RET             ;RETURN
  168A    E1                    FOUTH:  POP     H       ;GET PTR
  168B    36 45                         MVI     M,'E'   ;EXPONENT
  168D    23                            INX     H       ;POINT NEXT
  168E    3A 25BC                       LDA     DEXP    ;GET EXPONENT
  1691    36 2B                         MVI     M,'+'   ;DEFAULT
  1693    57                            MOV     D,A     ;SAVE NUMBER
  1694    B7                            ORA     A       ;TEST IT
  1695    F2 16A1                       JP      FOUTI   ;BRIF POS
  1698    36 2D                         MVI     M,'-'   ;ELSE, DASH
  169A    E6 7F                         ANI     7FH     ;STRIP DUMB SIGN
  169C    2F                            CMA             ;COMPLEMENT
  169D    3C                            INR     A       ;PLUS ONE (TWOS COMP)
  169E    57                            MOV     D,A     ;SAVE IT
  169F    2F                            CMA             ;RE-COMPLEMENT
  16A0    3C                            INR     A       ;PLUS ONE
  16A1    23                    FOUTI:  INX     H       ;POINT NEXT
  16A2    E5                            PUSH    H       ;SAVE PTR
  16A3    1E FF                         MVI     E,-1 AND 0FFH   ;INIT CTR (TENS)
	MACRO-80 3.44	09-Dec-81	PAGE	1-66


  16A5    1C                    FOUTJ:  INR     E       ;ADD ONE
  16A6    D6 0A                         SUI     10      ;LESS 10
  16A8    F2 16A5                       JP      FOUTJ   ;LOOP
  16AB    C6 0A                         ADI     10      ;CORRECT UNITS
  16AD    47                            MOV     B,A     ;SAVE UNITS
  16AE    7B                            MOV     A,E     ;GET TENS
  16AF    CD 1661                       CALL    FOUT9   ;OUTPUT
  16B2    78                            MOV     A,B     ;GET UNITS
  16B3    CD 1661                       CALL    FOUT9   ;OUTPUT
  16B6    E1                            POP     H       ;GET PTR
  16B7    36 20                         MVI     M,' '   ;SPACE AFTER
  16B9    7A                            MOV     A,D     ;GET DEC EXPON
  16BA    B7                            ORA     A       ;SET FLAGS
  16BB    F2 16C4                       JP      FOUTK   ;BRIF POS.
  16BE    FE FE                         CPI     -2 AND 0FFH     ;TEST FOR MIN
  16C0    D8                            RC              ;RETURN IF LESS THAN -2
  16C1    C3 16C7                       JMP     FOUTL   ;GO AROUND
  16C4    FE 06                 FOUTK:  CPI     6       ;TEST IF TOO BIG
  16C6    D0                            RNC             ;RETURN IF 6 OR GREATER
  16C7    4F                    FOUTL:  MOV     C,A     ;SAVE EXPONENT
  16C8    06 05                         MVI     B,5     ;CTR
  16CA    36 20                 FOUTM:  MVI     M,' '   ;SPACE OUT EXPONENT
  16CC    2B                            DCX     H       ;POINT PRIOR
  16CD    05                            DCR     B       ;DECR CTR
  16CE    C2 16CA                       JNZ     FOUTM   ;LOOP
  16D1    EB                            XCHG            ;FLIP/FLOP
  16D2    7B                            MOV     A,E     ;GET LOW BYTE
  16D3    D6 05                         SUI     5       ;POINT TO DOT
  16D5    6F                            MOV     L,A     ;PUT DOWN
  16D6    7A                            MOV     A,D     ;GET HIGH
  16D7    DE 00                         SBI     0       ;IN CASE OF BORROW
  16D9    67                            MOV     H,A     ;PUT DOWN
  16DA    79                            MOV     A,C     ;GET EXPONENT
  16DB    B7                            ORA     A       ;TEST SIGN
  16DC    CA 16ED                       JZ      FOUTO   ;BRIF ZERO
  16DF    FA 1702                       JM      FOUTR   ;BRIF NEGATIVE
  16E2    46                    FOUTN:  MOV     B,M     ;GET HIGH BYTE
  16E3    23                            INX     H       ;POINT NEXT
  16E4    7E                            MOV     A,M     ;GET LOW BYTE
  16E5    70                            MOV     M,B     ;SHIFT DOT TO RIGHT
  16E6    2B                            DCX     H       ;POINT BACK
  16E7    77                            MOV     M,A     ;MOVE THE DIGIT LEFT
  16E8    23                            INX     H       ;POINT NEXT
  16E9    0D                            DCR     C       ;DECR CTR
  16EA    C2 16E2                       JNZ     FOUTN   ;LOOP
  16ED    EB                    FOUTO:  XCHG            ;POINT END
  16EE    7E                    FOUTP:  MOV     A,M     ;GET A DIGIT/DOT
  16EF    FE 30                         CPI     '0'     ;TEST FOR TRAILING ZERO
  16F1    C2 16FA                       JNZ     FOUTQ   ;BRIF NOT
  16F4    36 20                         MVI     M,' '   ;SPACE FILL
  16F6    2B                            DCX     H       ;POINT PRIOR
  16F7    C3 16EE                       JMP     FOUTP   ;LOOP
  16FA    FE 2E                 FOUTQ:  CPI     '.'     ;TEST FOR TRAILING DOT
  16FC    23                            INX     H       ;JUST IN CASE NOT
  16FD    C0                            RNZ             ;RETURN IF NOT
  16FE    2B                            DCX     H       ;RESET PTR
	MACRO-80 3.44	09-Dec-81	PAGE	1-67


  16FF    36 20                         MVI     M,' '   ;SPACE IT OUT
  1701    C9                            RET             ;RETURN
  1702    FE FF                 FOUTR:  CPI     0FFH    ;TEST IF -1
  1704    C2 1710                       JNZ     FOUTS   ;ELSE -2
  1707    2B                            DCX     H       ;POINT SIGNIFICANT
  1708    7E                            MOV     A,M     ;GET THE CHAR
  1709    36 2E                         MVI     M,'.'   ;MOVE THE DOT
  170B    23                            INX     H       ;POINT NEXT
  170C    77                            MOV     M,A     ;SHIFT THE DIGIT
  170D    C3 16ED                       JMP     FOUTO   ;GO ZERO SUPPRESS
  1710    2B                    FOUTS:  DCX     H       ;POINT ONE TO LEFT
  1711    7E                            MOV     A,M     ;PICK UP DIGIT
  1712    36 30                         MVI     M,'0'   ;REPLACE
  1714    23                            INX     H       ;POINT RIGHT
  1715    77                            MOV     M,A     ;PUT THE DIGIT
  1716    62                            MOV     H,D     ;GET LOW ADDR
  1717    6B                            MOV     L,E     ;POINT LAST DIGIT
  1718    06 06                         MVI     B,6     ;CTR
  171A    2B                    FOUTT:  DCX     H       ;POINT PRITO
  171B    7E                            MOV     A,M     ;GET A DIGIT
  171C    23                            INX     H       ;POINT
  171D    77                            MOV     M,A     ;PUT IT ONE TO RIGHT
  171E    2B                            DCX     H       ;POINT
  171F    05                            DCR     B       ;DECR CTR
  1720    C2 171A                       JNZ     FOUTT   ;LOOP
  1723    36 2E                         MVI     M,'.'   ;MOVE THE DOT
  1725    C3 16ED                       JMP     FOUTO   ;CONTINUE
                                ;
  1728                          FADD    EQU     $
                                ;
                                ;
                                ; FLOATING POINT ADD THE NUMBER AT (H,L) TO THE FACC
                                ;
                                ;
  1728    23                            INX     H       ;POINT FIRST DIGIT
  1729    7E                            MOV     A,M     ;LOAD IT
  172A    B7                            ORA     A       ;TEST IT
  172B    CA 19BF                       JZ      FTEST   ;BRIF ZERO
  172E    2B                            DCX     H       ;POINT BACK
  172F    CD 19BF                       CALL    FTEST   ;GO TEST SIGN OF FACC
  1732    CA 0123                       JZ      RST5    ;JUST LOAD IF FACC = 0
  1735    CD 19CD                       CALL    FEXP    ;GO GET EXPONENT
  1738    47                            MOV     B,A     ;SAVE EXPONENT
  1739    7E                            MOV     A,M     ;GET EXPONENT OF ADDR
  173A    CD 19CD                       CALL    FEXP    ;GO GET EXPONENT
  173D    4F                            MOV     C,A     ;SAVE THE EXPONENT
  173E    90                            SUB     B       ;GET DIFFERENCE OF TWO EXPONENTS
  173F    CA 1754                       JZ      FADD4   ;BRIF THEY'RE EQ
  1742    F2 1747                       JP      FADD3   ;BRIF DIFFERENCE IS POSITIVE
  1745    2F                            CMA             ;COMPLEMENT ACC
  1746    3C                            INR     A       ;PLUS ONE (TWO'S COMPLEMENT)
  1747    FE 18                 FADD3:  CPI     24      ;COMPARE DIFFERENCE TO MAX
  1749    DA 1754                       JC      FADD4   ;BRIF LESS
  174C    78                            MOV     A,B     ;GET EXPON OF ADDUEND
  174D    91                            SUB     C       ;GET TRUE DIFFERENCE AGAIN
  174E    F2 19BF                       JP      FTEST   ;BRIF FACC > ADDER
	MACRO-80 3.44	09-Dec-81	PAGE	1-68


  1751    C3 0123                       JMP     RST5    ;ELSE, ADDER > FACC
  1754    F5                    FADD4:  PUSH    PSW     ;SAVE DIFFERENCE
  1755    C5                            PUSH    B       ;SAVE EXPONENTS
  1756    11 25A3                       LXI     D,FTEMP ;GET ADDR OF TEMP ACC
  1759    CD 1D8E                       CALL    CPY4H
  175C    C1                            POP     B       ;GET EXPONENTS
  175D    F1                            POP     PSW     ;GET DIFFERENCE
  175E    CA 1785                       JZ      FADD9   ;JUST ADD IF ZERO
  1761    21 25A4                       LXI     H,FTEMP+1       ;DEFAULT
  1764    F5                            PUSH    PSW     ;SAVE DIFFERENCE
  1765    78                            MOV     A,B     ;GET FACC EXPON
  1766    91                            SUB     C       ;MINUS FTEMP EXPON
  1767    F2 1777                       JP      FADD6   ;BRIF TEMP MUST BE SHIFTED
  176A    21 259F                       LXI     H,FACC  ;POINT FLOAT ACC
  176D    79                            MOV     A,C     ;GET EXPONENT, SIGN
  176E    E6 7F                         ANI     7FH     ;STRIP EXP SIGN
  1770    4F                            MOV     C,A     ;PUT BACK
  1771    7E                            MOV     A,M     ;GET THE EXP
  1772    E6 80                         ANI     80H     ;STRIP OFF OLD EXPON
  1774    B1                            ORA     C       ;MOVE ADDR EXPON TO IT
  1775    77                            MOV     M,A     ;REPLACE
  1776    23                            INX     H       ;POINT FIRST DATA BYTE
  1777    F1                    FADD6:  POP     PSW     ;GET DIFFER
  1778    4F                            MOV     C,A     ;SAVE IT
  1779    06 03                 FADD7:  MVI     B,3     ;LOOP CTR (INNER)
  177B    AF                            XRA     A       ;INIT CARRY TO Z
  177C    E5                            PUSH    H       ;SAVE ADDR
  177D    CD 19EC                       CALL    FSHFT   ;GO SHIFT
  1780    E1                            POP     H       ;GET ADDR
  1781    0D                            DCR     C       ;DECR CTR
  1782    C2 1779                       JNZ     FADD7   ;LOOP
  1785                          FADD9   EQU     $
  1785    21 25A3                       LXI     H,FTEMP
  1788    3A 259F                       LDA     FACC    ;GET EXPONENT
  178B    AE                            XRA     M       ;SEE IF SIGNS THE SAME
  178C    11 25A2                       LXI     D,FACC+3        ;POINT LEAST SIGN BYTE
  178F    21 25A6                       LXI     H,FTEMP+3
  1792    FA 17AD                       JM      FADDA   ;BRIF SIGNS DIFFERENT
  1795    CD 19DF                       CALL    FADT3   ;ADD 3 BYTES
  1798    D2 19BF                       JNC     FTEST   ;BRIF NO OVERFLOW
  179B    EB                            XCHG            ;POINT HL TO FACC
  179C    CD 187A                       CALL    SVSGN   ;SAVE SIGN, RETURN EXPONENT
  179F    3C                            INR     A       ;INCREMENT EXPONENT
  17A0    CD 1882                       CALL    RSSGN   ;RESTORE SIGN TO EXPONENT
  17A3    23                            INX     H       ;POINT DATA
  17A4    37                            STC             ;SET CY
  17A5    06 03                         MVI     B,3     ;CTR
  17A7    CD 19EC                       CALL    FSHFT   ;GO SHIFT IT
  17AA    C3 19BF                       JMP     FTEST   ;RETURN
  17AD                          FADDA   EQU     $
  17AD    06 03                         MVI     B,3
  17AF    CD 19D4                       CALL    FSUBT   ;SUBTRACT
  17B2    D2 17CE                       JNC     FNORM   ;BRIF NO BORROW
  17B5    21 25A2                       LXI     H,FACC+3        ;MUST NEGATE
  17B8    06 03                         MVI     B,3
  17BA    37                            STC
	MACRO-80 3.44	09-Dec-81	PAGE	1-69


  17BB    7E                    FNEG1:  MOV     A,M     ;GET BYTE
  17BC    2F                            CMA
  17BD    D2 17C2                       JNC     FNEG2
  17C0    C6 01                         ADI     1       ;INCREMENT + COMPLEMENT=NEGATE
  17C2    77                    FNEG2:  MOV     M,A
  17C3    2B                            DCX     H
  17C4    05                            DCR     B
  17C5    C2 17BB                       JNZ     FNEG1
  17C8    CD 17CE                       CALL    FNORM
  17CB    C3 0D6B                       JMP     NEG     ;REVERSE SIGN
                                ;PAGE
                                ;
  17CE                          FNORM   EQU     $
                                ;
                                ;
                                ; NORMALIZE THE FLOATING ACCUMULATOR
                                ; THAT IS, THE FIRST BIT MUST BE SIGNIFICANT
                                ;
                                ;
  17CE    21 25A2                       LXI     H,FACC+3        ;POINT LSB
  17D1    7E                            MOV     A,M     ;LOAD IT
  17D2    2B                            DCX     H       ;POINT PRIOR
  17D3    B6                            ORA     M       ;MERGE
  17D4    2B                            DCX     H       ;POINT PRIOR
  17D5    B6                            ORA     M       ;MERGE
  17D6    2B                            DCX     H
  17D7    46                            MOV     B,M     ;SAVE EXPONENT
  17D8    77                            MOV     M,A     ;CLEAR
  17D9    C8                            RZ              ;RETURN ON NOTHING TO NORMALIZE
  17DA    70                            MOV     M,B     ;RESTORE EXP
  17DB    C5                            PUSH    B       ;SAVE C FOR CALLER
  17DC    CD 187A                       CALL    SVSGN   ;SAVE SIGN
  17DF    77                            MOV     M,A     ;STORE EXPANDED EXPONENT
  17E0    23                    FNRM1:  INX     H       ;POINT TO MOST SIGN BYTE
  17E1    7E                            MOV     A,M     ;GET MSB
  17E2    B7                            ORA     A       ;TEST IT
  17E3    FA 17F6                       JM      FNRM3   ;BRIF NORMALIZED
  17E6    23                            INX     H       ;POINT LSB
  17E7    23                            INX     H
  17E8    06 03                         MVI     B,3     ;SHIFT COUNT
  17EA    7E                    FNRM2:  MOV     A,M     ;SHIFT LEFT
  17EB    17                            RAL
  17EC    77                            MOV     M,A
  17ED    2B                            DCX     H
  17EE    05                            DCR     B
  17EF    C2 17EA                       JNZ     FNRM2
  17F2    35                            DCR     M       ;ADJUST EXPONENT
  17F3    C3 17E0                       JMP     FNRM1   ;LOOP
  17F6    2B                    FNRM3:  DCX     H       ;POINT BACK TO EXPONENT
  17F7    7E                            MOV     A,M
  17F8    CD 1882                       CALL    RSSGN   ;RESTORE SIGN
  17FB    C1                            POP     B       ;RESTORE C
  17FC    C9                            RET
                                ;
  17FD                          FSUB    EQU     $
                                ;
	MACRO-80 3.44	09-Dec-81	PAGE	1-70


                                ;
                                ; FLOATING POINT SUBTRACT THE NUMBER AT (H,L) FROM THE FACC
                                ;
                                ;
  17FD    CD 0D6B                       CALL    NEG     ;NEGATE FACC
  1800    CD 1728                       CALL    FADD    ;ADD
  1803    CD 0D6B                       CALL    NEG     ;NEGATE RESULT
  1806    C3 19BF                       JMP     FTEST
                                ;PAGE
                                ;
  1809                          FMUL    EQU     $
                                ;
                                ;
                                ; FLOATING POINT MULTIPLY THE NUMBER AT (H,L) TO THE FACC
                                ;
                                ;
  1809    CD 19BF                       CALL    FTEST   ;TEST FACC
  180C    C8                            RZ              ;RETURN IF ZERO
  180D    23                            INX     H       ;POINT 1ST DIGIT OF MULTIPLIER
  180E    7E                            MOV     A,M     ;LOAD IT
  180F    2B                            DCX     H       ;RESTORE
  1810    B7                            ORA     A       ;TEST IF ZERO
  1811    CA 0123                       JZ      RST5    ;GO LOAD TO FACC IF IT IS
  1814    E5                            PUSH    H       ;SAVE MULTIPLIER ADDRESS
  1815    CD 1870                       CALL    MDSGN   ;GET SIGN PRODUCT, & BOTH EXPONENTS
  1818    80                            ADD     B       ;ADD EXPONENTS
  1819    CD 1882                       CALL    RSSGN   ;RESTORE SIGN
  181C    E1                            POP     H       ;RESTORE
  181D    11 25AC                       LXI     D,FTEMP+9       ;POINT TEMP STORAGE
  1820    06 03                         MVI     B,3     ;BYTE COUNT
  1822    23                            INX     H       ;POINT MSD
  1823    CD 1D90                       CALL    COPYH   ;MOVE MULTIPLIER
  1826    21 25A3                       LXI     H,FTEMP ;POINT DIGIT 7 OF RESULT
  1829    06 06                         MVI     B,6     ;LOOP CTR
  182B    CD 1D96                       CALL    ZEROM   ;GO ZERO EIGHT BYTES
  182E    11 25A0                       LXI     D,FACC+1        ;POINT 1ST DIGIT OF ACC
  1831    06 03                         MVI     B,3     ;LOOP CTR
  1833    1A                    FMUL5:  LDAX    D       ;GET AN ACC DIGIT PAIR
  1834    77                            MOV     M,A     ;PUT TO TEMP STORAGE
  1835    AF                            XRA     A       ;ZERO A
  1836    12                            STAX    D       ;CLEAR ACC
  1837    13                            INX     D       ;POINT NEXT
  1838    23                            INX     H       ;DITTO
  1839    05                            DCR     B       ;DECR CTR
  183A    C2 1833                       JNZ     FMUL5   ;LOOP
  183D    0E 18                         MVI     C,24    ;OUTTER LOOP CTR
  183F    06 03                 FMUL6:  MVI     B,3     ;CTR
  1841    21 25AC                       LXI     H,FTEMP+9       ;POINT MULTIPLIER
  1844    AF                            XRA     A       ;CLEAR CY
  1845    7E                    FMUL7:  MOV     A,M     ;GET BYTE
  1846    1F                            RAR             ;SHIFT RIGHT
  1847    77                            MOV     M,A     ;PUT DOWN
  1848    23                            INX     H       ;POINT NEXT
  1849    05                            DCR     B       ;DECR CTR
  184A    C2 1845                       JNZ     FMUL7   ;LOOP
  184D    D2 185B                       JNC     FMUL8   ;BRIF ZERO BIT
	MACRO-80 3.44	09-Dec-81	PAGE	1-71


  1850    11 25A5                       LXI     D,FTEMP+2       ;POINT RESULT
  1853    21 25AB                       LXI     H,FTEMP+8       ;POINT MULTIPLICAND
  1856    06 06                         MVI     B,6     ;SIX BYTE ADD
  1858    CD 19E1                       CALL    FADDT   ;GO ADD
  185B    06 06                 FMUL8:  MVI     B,6     ;SIZ BYTE SHIFT
  185D    21 25AB                       LXI     H,FTEMP+8       ;POINT MULTIPLICAND
  1860    AF                            XRA     A       ;CLEAR CY
  1861    7E                    FMUL9:  MOV     A,M     ;GET BYTE
  1862    17                            RAL             ;SHIFT LEFT
  1863    77                            MOV     M,A     ;PUT BACT
  1864    2B                            DCX     H       ;POINT NEXT BYTE
  1865    05                            DCR     B       ;DECR CTR
  1866    C2 1861                       JNZ     FMUL9   ;LOOP
  1869    0D                            DCR     C       ;DEC BIT COUNT
  186A    C2 183F                       JNZ     FMUL6   ;CONTINUE
  186D    C3 17CE                       JMP     FNORM   ;GO NORMALIZE
                                ;
                                ; MDSGN   GET SIGN PRODUCT AND EXPONENTS FOR MULT & DIV
                                ; ON ENTRY:
                                ;       (HL) = ONE NUMBER
                                ;       (FACC)=THE OTHER
                                ; ON RETURN:
                                ;       A = EXPONENT OF FACC(EXPANDED)
                                ;       B = OTHER EXPONENT
                                ;       C = SIGN PRODUCT
                                ;       HL DESTROYED
                                ;
  1870    CD 187A               MDSGN:  CALL    SVSGN   ;GET SIGN IN C, EXP IN A
  1873    47                            MOV     B,A     ;SAVE EXPONENT
  1874    21 259F                       LXI     H,FACC
  1877    79                            MOV     A,C     ;GET SIGN
  1878    86                            ADD     M       ;MULTIPLY SIGNS
  1879    77                            MOV     M,A     ;PUT DOWN
                                ;
                                ; SVSGN         GET SIGN AND EXP
                                ; ON ENTRY:
                                ;       (HL) = EXPONENT
                                ; ON RETURN:
                                ;       A = EXPANDED EXPONENT
                                ;       C = SIGN IN HI ORDER BIT
                                ;
  187A    7E                    SVSGN:  MOV     A,M     ;GET EXPONENT
  187B    E6 80                         ANI     80H     ;ISOLATE SIGN
  187D    4F                            MOV     C,A
  187E    7E                            MOV     A,M
  187F    C3 19CD                       JMP     FEXP    ;EXPAND EXP AND RETURN
                                ;
                                ; RSSGN         RESTORE SIGN TO EXPONENT
                                ; ON ENTRY:
                                ;       (HL)=EXPONENT
                                ;       A = EXPANDED EXPONENT
                                ;       C = SIGN
                                ; ON RETURN:
                                ;       A = EXPONENT
                                ;       (HL) = EXPONENT WITH SIGN
                                ;       Z,M BITS SET FOR EXPONENT
	MACRO-80 3.44	09-Dec-81	PAGE	1-72


                                ;
  1882    CD 1962               RSSGN:  CALL    FOVUN   ;CHECK FOR OVER/UNDERFLOW
  1885    E6 7F                         ANI     7FH     ;REMOVE EXPONENT SIGN
  1887    B1                            ORA     C       ;ADD SIGN
  1888    77                            MOV     M,A     ;SET DOWN
  1889    C3 19BF                       JMP     FTEST   ;SET Z,M BITS
                                ;PAGE
                                ;
  188C                          FDIV    EQU     $
                                ;
                                ;
                                ; FLOATING POINT DIVIDE THE NUMBER AT (H,L) INTO THE FACC
                                ;
                                ;
  188C    CD 19BF                       CALL    FTEST   ;TEST IF FACC ZERO
  188F    C8                            RZ              ;RETURN IF IT IS
  1890    23                            INX     H       ;POINT 1ST DIGIT OF DIVISOR
  1891    7E                            MOV     A,M     ;LOAD IT
  1892    2B                            DCX     H       ;POINT BACK
  1893    B7                            ORA     A       ;TEST IF ZERO
  1894    CA 1D3B                       JZ      ZMERR   ;DIVISION BY ZERO = ERROR
  1897    E5                            PUSH    H       ;SAVE DIVISOR PTR
  1898    CD 1870                       CALL    MDSGN   ;GET SIGN ON STACK, EXPS INTO A,B
  189B    90                            SUB     B       ;SUBTRACT EXPONENTS
  189C    3C                            INR     A       ;PLUS ONE
  189D    CD 1882                       CALL    RSSGN   ;SET SIGN/EXPONENT IN FACC
  18A0    11 25A0                       LXI     D,FACC+1
  18A3    21 25A3                       LXI     H,FTEMP ;POINT TEMPORARY STORAGE
  18A6    36 00                         MVI     M,0     ;CLEAR MSB
  18A8    23                            INX     H       ;POINT NEXT
  18A9    06 03                         MVI     B,3     ;LOOP CTR
  18AB    1A                    FDIV3:  LDAX    D       ;GET BYTE FROM FACC
  18AC    77                            MOV     M,A     ;PUT TO FTEMP
  18AD    AF                            XRA     A       ;CLEAR A
  18AE    12                            STAX    D       ;ZERO FACC
  18AF    23                            INX     H       ;POINT NEXT
  18B0    13                            INX     D       ;DITTO
  18B1    05                            DCR     B       ;DECR CTR
  18B2    C2 18AB                       JNZ     FDIV3   ;LOOP
  18B5    D1                            POP     D       ;GET ADDR
  18B6    06 03                         MVI     B,3     ;LOOP CTR
  18B8    13                            INX     D       ;POINT MSD OF DIVISOR
  18B9    36 00                         MVI     M,0     ;CLEAR MSB
  18BB    23                            INX     H       ;POINT NEXT
  18BC    CD 1D85                       CALL    COPYD   ;GO MOVE IT
  18BF    0E 18                         MVI     C,24    ;OUTER LOOP CTR
  18C1    11 25A6               FDIV5:  LXI     D,FTEMP+3       ;POINT DIVIDEND
  18C4    21 25AA                       LXI     H,FTEMP+7       ;AND DIVISOR
  18C7    06 04                         MVI     B,4     ;CTR
  18C9    CD 19D4                       CALL    FSUBT   ;GO SUBTRACT
  18CC    D2 18DB                       JNC     FDIV6   ;BRIF NO GO
  18CF    11 25A6                       LXI     D,FTEMP+3       ;POINT DIVIDEND
  18D2    21 25AA                       LXI     H,FTEMP+7       ;AND DIVISOR
  18D5    06 04                         MVI     B,4     ;CTR
  18D7    CD 19E1                       CALL    FADDT   ;GO RE-ADD
  18DA    37                            STC             ;TURN ON CY
	MACRO-80 3.44	09-Dec-81	PAGE	1-73


  18DB    3F                    FDIV6:  CMC             ;REVERSE CY
  18DC    06 03                         MVI     B,3     ;CTR
  18DE    21 25A2                       LXI     H,FACC+3        ;POINT LSB
  18E1    7E                    FDIV7:  MOV     A,M     ;LOAD BYTE
  18E2    17                            RAL             ;SHIFT LEFT
  18E3    77                            MOV     M,A     ;REPLACE
  18E4    2B                            DCX     H       ;POINT NEXT
  18E5    05                            DCR     B       ;DECR CTR
  18E6    C2 18E1                       JNZ     FDIV7   ;LOOP
  18E9    AF                            XRA     A       ;CLEAR FLAGS
  18EA    06 04                         MVI     B,4     ;CTR
  18EC    21 25A6                       LXI     H,FTEMP+3       ;POINT-DIVIDEND
  18EF    7E                    FDIV8:  MOV     A,M     ;LOAD BYTE
  18F0    17                            RAL             ;SHIFT LEFT
  18F1    77                            MOV     M,A     ;REPLACE
  18F2    2B                            DCX     H       ;POINT ENXT
  18F3    05                            DCR     B       ;DECR CTR
  18F4    C2 18EF                       JNZ     FDIV8   ;LOOP
  18F7    0D                            DCR     C       ;DECR OTR CTR
  18F8    C2 18C1                       JNZ     FDIV5   ;LOOP
  18FB    C3 17CE                       JMP     FNORM   ;WRAPUP
                                ;
                                ; UTILITY ROUTINE TO GET A VARIABLE'S ADDRESS TO H,L
                                ;
  18FE    11 2467               GETST:  LXI     D,STRIN ;POINT BUFFER
  1901    06 00                         MVI     B,0     ;INIT CTR
  1903    7E                            MOV     A,M     ;GET THE CHAR
  1904    FE 22                         CPI     '"'     ;TEST IF LIT TYPE
  1906    CA 191F                       JZ      GETS2   ;BRIF IS
  1909    FE 27                         CPI     27H     ;TEST IF QUOTED LITERAL
  190B    CA 191F                       JZ      GETS2   ;BRIF IS
  190E    FE 2C                 GETS1:  CPI     ','     ;TEST IF COMMA
  1910    CA 1932                       JZ      GETS5   ;BRIF IS
  1913    B7                            ORA     A       ;TEST IF END
  1914    CA 1932                       JZ      GETS5   ;BRIF IS
  1917    04                            INR     B       ;COUNT IT
  1918    13                            INX     D       ;POINT NEXT
  1919    12                            STAX    D       ;PUT CHAR
  191A    23                            INX     H       ;POINT NEXT
  191B    CF                            RST     1       ;SKIP SPACES
  191C    C3 190E                       JMP     GETS1   ;LOOP
  191F    4F                    GETS2:  MOV     C,A     ;SAVE DELIM
  1920    23                    GETS3:  INX     H       ;SKIP THE QUOTE
  1921    7E                            MOV     A,M     ;GET NEXT CHAR
  1922    B9                            CMP     C       ;TEST IF END OF LITERAL
  1923    CA 1930                       JZ      GETS4   ;BRIF IS
  1926    B7                            ORA     A       ;TEST IF END OF LINE
  1927    CA 1D53                       JZ      CVERR   ;BRIF IS
  192A    04                            INR     B       ;COUNT IT
  192B    13                            INX     D       ;POINT NEXT
  192C    12                            STAX    D       ;PUT CHAR
  192D    C3 1920                       JMP     GETS3   ;LOOP
  1930    23                    GETS4:  INX     H       ;SKIP END QUOTE
  1931    CF                            RST     1       ;SKIP TRAILING SPACES
  1932    11 2467               GETS5:  LXI     D,STRIN ;POINT BEGIN BUFFER
  1935    78                            MOV     A,B     ;GET COUNT
	MACRO-80 3.44	09-Dec-81	PAGE	1-74


  1936    12                            STAX    D       ;PUT COUNT
  1937    D1                            POP     D       ;GET RETURN ADDR
  1938    EB                            XCHG            ;FLIP/FLOP
  1939    E3                            XTHL            ;PUT RET ON STACK, HL OF VAR IN HL
  193A    D5                            PUSH    D       ;SAVE H,L OF LOC
  193B    CD 0722                       CALL    LET2A   ;GO STORE STRING
  193E    E1                            POP     H       ;RESTORE LOCATION
  193F    C9                            RET             ;RETURN
  1940    CD 1CFD               GETS8:  CALL    VAR     ;GET VAR NAME
  1943    D5                            PUSH    D       ;SAVE ON STACK
  1944    7A                            MOV     A,D     ;GET HI BYTE
  1945    B7                            ORA     A       ;TEST IF ARRAY
  1946    F2 195D                       JP      GETS9   ;BRIF NOT
  1949    CD 1C68                       CALL    SEARC   ;GO GET ARRAY PARAMS
  194C    3E FF                         MVI     A,0FFH  ;TURN ON SW
  194E    32 23B9                       STA     DIMSW   ;SET IT
  1951    E3                            XTHL            ;SWAP ADDR ON STACK
  1952    CD 1071                       CALL    EXPR    ;GO GET ROW, COL PTRS
  1955    E3                            XTHL            ;SWAP ADDR ON STACK
  1956    CD 1976                       CALL    SUBSC   ;GO POINT TO ENTRY
  1959    EB                            XCHG            ;EXCHANGE
  195A    E1                            POP     H       ;GET ADDRESS OF STMT
  195B    C1                            POP     B       ;GET NAME
  195C    C9                            RET             ;RETURN
  195D    CD 1C68               GETS9:  CALL    SEARC   ;FIND ADDR
  1960    C1                            POP     B       ;RESTORE NAME
  1961    C9                            RET             ;RETURN
                                ;
  1962                          FOVUN   EQU     $
                                ;
                                ; TEST EXPONENT FOR OVERFLO OR UNDERFLOW
                                ;
  1962    B7                            ORA     A       ;TEST IT
  1963    F2 196E                       JP      FOV1    ;BRIF POS.
  1966    FE C1                         CPI     0C1H    ;TEST FOR MAX NEG
  1968    D0                            RNC             ;RETURN IF NO UNDER.
  1969    3E C1                         MVI     A,0C1H  ;SET EXPONENT AT MINIMUM
  196B    C3 1D64                       JMP     UNERR
  196E    FE 40                 FOV1:   CPI     40H     ;TEST MAX POS
  1970    D8                            RC              ;RETURN IF NO OVER.
  1971    3E 3F                         MVI     A,3FH   ;SET EXPONENT AT MAXIMUM
  1973    C3 1D5F                       JMP     OVERR
                                ;
  1976                          SUBSC   EQU     $
                                ;
                                ;
                                ; COMPUTES SUBSCR ADDR
                                ; INPUT: B HAS ROW NUMBER (1ST SUB)
                                ;        D HAS COL NUMBER (2ND SUB)
                                ;        H HAS ADDR NAME
                                ;
  1976    D5                            PUSH    D       ;SAVE COL
  1977    E7                            RST     4       ;ADJUST H,L
  1978    FC                            DB      -4 AND 0FFH     ;BY FOUR
  1979    56                            MOV     D,M     ;GET HI
  197A    2B                            DCX     H       ;POINT LO
	MACRO-80 3.44	09-Dec-81	PAGE	1-75


  197B    5E                            MOV     E,M     ;GET LO
  197C    7A                            MOV     A,D     ;GET HI
  197D    B8                            CMP     B       ;COMPARE
  197E    DA 1D43                       JC      SNERR   ;BRIF EXCESS
  1981    C2 1989                       JNZ     SUB1    ;BRIF NOT EQUAL
  1984    7B                            MOV     A,E     ;GET LO
  1985    B9                            CMP     C       ;COMPARE
  1986    DA 1D43                       JC      SNERR   ;BRIF EXCESS
  1989    2B                    SUB1:   DCX     H       ;POINT HI COLS
  198A    56                            MOV     D,M     ;LOAD IT
  198B    2B                            DCX     H       ;POINT LO COLS
  198C    5E                            MOV     E,M     ;LOAD IT
  198D    E3                            XTHL            ;SAVE ADDRESS
  198E    E5                            PUSH    H       ;SAVE SUB COL
  198F    D5                            PUSH    D       ;SAVE DIM COLS
  1990    13                            INX     D       ;MAKE COLS=MAX+1 (ACCOUNT FOR 0 B??KE
  1991    21 0000                       LXI     H,0     ;GET A ZERO
  1994    78                    SUB2:   MOV     A,B     ;GET HI
  1995    B1                            ORA     C       ;PLUS LO
  1996    CA 199E                       JZ      SUB3    ;BRIF ZERO
  1999    19                            DAD     D       ;ADD ONCE
  199A    0B                            DCX     B       ;SUB ONCE
  199B    C3 1994                       JMP     SUB2    ;LOOP
  199E    D1                    SUB3:   POP     D       ;GET DIM COL
  199F    C1                            POP     B       ;GET SUB COL
  19A0    7A                            MOV     A,D     ;GET HI
  19A1    B8                            CMP     B       ;COMPARE
  19A2    DA 1D43                       JC      SNERR   ;BRIF GT
  19A5    C2 19AD                       JNZ     SUB4    ;BRIF NOT ZERO
  19A8    7B                            MOV     A,E     ;GET LO
  19A9    B9                            CMP     C       ;COMPARE
  19AA    DA 1D43                       JC      SNERR   ;BRIF GT
  19AD    09                    SUB4:   DAD     B       ;ADD TO PROD
  19AE    29                            DAD     H       ;TIMES TWO
  19AF    29                            DAD     H       ;TIMES FOUR
  19B0    7D                            MOV     A,L     ;GET LOW
  19B1    2F                            CMA             ;COMPLEMENT
  19B2    C6 01                         ADI     1       ;PLUS ONE
  19B4    5F                            MOV     E,A     ;SAVE IT
  19B5    7C                            MOV     A,H     ;GET HI
  19B6    2F                            CMA             ;COMPLEMENT
  19B7    CE 00                         ACI     0       ;PLUS CARRY
  19B9    57                            MOV     D,A     ;SAVE
  19BA    E1                            POP     H       ;GET ADDR (0,0)
  19BB    19                            DAD     D       ;COMPUTE (I,J) RIGHT SIDE
  19BC    E7                            RST     4       ;ADJUST H,L
  19BD    FC                            DB      -4 AND 0FFH
  19BE    C9                            RET             ;RETURN
  19BF                          FTEST   EQU     $
                                ;
                                ; TEST THE SIGN OF THE NUMBER IN THE FACC
                                ; RETURN WITH S & Z SET TO SIGN
                                ;
  19BF    3A 25A0                       LDA     FACC+1  ;GET MSD
  19C2    B7                            ORA     A       ;TEST IT
  19C3    C8                            RZ              ;RETURN IF ZERO
	MACRO-80 3.44	09-Dec-81	PAGE	1-76


  19C4    3A 259F                       LDA     FACC    ;GET SIGN&EXPON BYTE
  19C7    F6 7F                         ORI     7FH     ;TEST SIGN BIT ONLY
  19C9    3A 259F                       LDA     FACC    ;RE-LOAD EXPON BYTE
  19CC    C9                            RET             ;THEN RETURN
  19CD                          FEXP    EQU     $
                                ;
                                ; EXPAND EXPONENT INTO 8 BINARY BITS
                                ;
  19CD    E6 7F                         ANI     7FH     ;MASK MANTISA SIGN
  19CF    C6 40                         ADI     40H     ;PROPAGATE CHAR SIGN TO LEFTMOST BIT
  19D1    EE 40                         XRI     40H     ;RESTORE ORIGINAL SIGN BIT
  19D3    C9                            RET             ;RETURN
                                ;
  19D4                          FSUBT   EQU     $
                                ;
                                ; SUBTRACT THE TWO MULTIPRECISION NUMBERS (D,E) & (H,L)
                                ;
  19D4    AF                            XRA     A       ;TURN OF CY
  19D5    1A                    FSB1:   LDAX    D       ;GET A BYTE
  19D6    9E                            SBB     M       ;SUB OTHER BYTE
  19D7    12                            STAX    D       ;PUT DOWN
  19D8    1B                            DCX     D       ;POINT NEXT
  19D9    2B                            DCX     H       ;DITTO
  19DA    05                            DCR     B       ;DECR CTR
  19DB    C2 19D5                       JNZ     FSB1    ;LOOP
  19DE    C9                            RET             ;RETURN
                                ;
                                ; ADD TWO MULTI-PRECISION NUMBERS (D,E) & (H,L)
                                ;
  19DF    06 03                 FADT3:  MVI     B,3
  19E1    AF                    FADDT:  XRA     A       ;CLEAR STATUS
  19E2    1A                    FAD1:   LDAX    D       ;GET BYTE
  19E3    8E                            ADC     M       ;ADD OTHER BYTE
  19E4    12                            STAX    D       ;PUT DOWN
  19E5    1B                            DCX     D       ;POINT NEXT
  19E6    2B                            DCX     H       ;DITTO
  19E7    05                            DCR     B       ;DECR LOOP CTR
  19E8    C2 19E2                       JNZ     FAD1    ;LOOP
  19EB    C9                            RET             ;RETURN
                                ;
  19EC                          FSHFT   EQU     $
                                ;
                                ; INCREMENTING SHIFT RIGHT
                                ;
  19EC    7E                            MOV     A,M     ;GET A BYTE
  19ED    1F                            RAR             ;SHIFT RIGHT
  19EE    77                            MOV     M,A     ;PUT DOWN
  19EF    23                            INX     H       ;POINT NEXT
  19F0    05                            DCR     B       ;DECR CTR
  19F1    C2 19EC                       JNZ     FSHFT   ;LOOP
  19F4    C9                            RET             ;RETURN
                                ;PAGE
                                ;
  19F5                          TERMI   EQU     $
                                ;
                                ; READ A LINE FROM THE TTY
	MACRO-80 3.44	09-Dec-81	PAGE	1-77


                                ; FIRST PROMPT WITH THE CHAR IN THE A REG
                                ; TERMINATE THE LINE WITH A X'00'
                                ; IGNORE EMPTY LINES
                                ; CONTROL C WILL CANCLE THE LINE
                                ; CONTROL O WILL TOGGLE THE OUTPUT SWITCH
                                ; RUBOUT WILL DELETE THE LAST CHAR INPUT
                                ;
                                ;
  19F5    32 2596                       STA     PROMP   ;SAVE THE PROMPT CHAR
  19F8    21 2415               REIN:   LXI     H,IOBUF ;POINT TO INPUT BUFFER
  19FB    36 00                         MVI     M,0     ;MARK BEGIN
  19FD    23                            INX     H       ;POINT START
  19FE    3A 2596                       LDA     PROMP   ;GET THE PROMPT AGAIN
  1A01    CD 1A39                       CALL    TESTO   ;WRITE TO TERMINAL
  1A04    FE 3F                         CPI     '?'     ;TEST IF Q.M.
  1A06    C2 1A0E                       JNZ     TREAD   ;BRIF NOT
  1A09    3E 20                         MVI     A,' '   ;GET SPACE
  1A0B    CD 1A39                       CALL    TESTO   ;WRITE TO TERMINAL
  1A0E                          TREAD   EQU     $
                                        IFF     CPM
                                        IN      TTY+1   ;GET TTY STATUS
                                        ANI     2       ;TEST IF RXRDY
                                        JZ      TREAD   ;LOOP TIL CHAR
                                        ENDIF
  1A0E    CD 1B60                       CALL    GETCH   ;GO READ THE CHAR
  1A11    77                            MOV     M,A     ;PUT IN BUFFER
  1A12    FE 0A                         CPI     0AH     ;TEST IF LINE FEED
  1A14    CA 1A0E                       JZ      TREAD   ;IGNORE IF IT IS
  1A17    FE 0D                         CPI     0DH     ;TEST IF CR
  1A19    C2 1A72                       JNZ     NOTCR   ;BRIF NOT
  1A1C    3A 23B8                       LDA     TAPES   ;GET PAPER TAPE SWITCH
  1A1F    1F                            RAR             ;TEST IF LOAD
  1A20    D4 1A63                       CNC     CRLF    ;CR/LF IF NOT
  1A23    36 00                 CR1:    MVI     M,0     ;MARK END
  1A25    3A 23BB                       LDA     ILSW    ;GET INPUT LINE SW
  1A28    B7                            ORA     A       ;TEST IT
  1A29    C0                            RNZ             ;RETURN IF ON
  1A2A    2B                            DCX     H       ;POINT PRIOR
  1A2B    7E                            MOV     A,M     ;LOAD IT
  1A2C    FE 20                         CPI     20H     ;TEST IF SPACE
  1A2E    CA 1A23                       JZ      CR1     ;BRIF SPACE
  1A31    B7                            ORA     A       ;TEST IF AT BEGINNING
  1A32    CA 19F8                       JZ      REIN    ;BRIF IS (NULL LINE)
  1A35    21 2416                       LXI     H,IOBUF+1       ;POINT BEGIN
  1A38    C9                            RET             ;ELSE, RETURN
  1A39                          TESTO   EQU     $
                                        IFF     CPM
                                        PUSH    PSW     ;SAVE CHAR
                                TEST1:  IN      TTY+1   ;GET STATUS
                                        RAR             ;TEST IF TXRDY
                                        JNC     TEST1   ;LOOP TILL READY
                                        POP     PSW     ;GET CHAR
                                        OUT     TTY     ;WRITE IT
                                        ENDIF
                                        IF      CPM
  1A39    C5                            PUSH    B       ;BIOS CALLS DESTROYS C,DE
	MACRO-80 3.44	09-Dec-81	PAGE	1-78


  1A3A    D5                            PUSH    D
  1A3B    E5                            PUSH    H
  1A3C    4F                            MOV     C,A     ;OUTPUT BYTE
  1A3D    3A 23B8                       LDA     TAPES
  1A40    FE 02                         CPI     2       ;IF WRITING TO FILE, SEND CHAR TO FILE
  1A42    C2 1A54                       JNZ     TEST2A
  1A45    79                            MOV     A,C
  1A46    CD 27C8                       CALL    SAV1
  1A49    B7                            ORA     A
  1A4A    CA 1A5C                       JZ      TEST2B
  1A4D    AF                            XRA     A
  1A4E    32 23B8                       STA	TAPES
  1A51    C3 1D5B                       JMP     IOERR       
  1A54    FE 01                 TEST2A: CPI     1       ;IF READING FROM FILE, DO NOT PRINT 
  1A56    CA 1A5C                       JZ      TEST2B  
  1A59    CD 2344                       CALL    BTOUT   ;PRINT CHAR ON CONSOLE
  1A5C    E1                    TEST2B: POP     H
  1A5D    D1                            POP     D       ;RESTORE
  1A5E    C1                            POP     B
                                        ENDIF
                                        IF      LARGE   ;SAVE ROOM ONLY IN 8+K VERSIONS
  1A5F    00 00 00                      DB      0,0,0   ;SAVE ROOM FOR CALL TO USER ROUTINE
                                        ENDIF
  1A62    C9                            RET             ;RETURN
  1A63    3E 0D                 CRLF:   MVI     A,0DH   ;LOAD A CR
  1A65    CD 1A39                       CALL    TESTO   ;WRITE IT
  1A68    3E 0A                         MVI     A,0AH   ;LF
  1A6A    CD 1A39                       CALL    TESTO   ;WRITE IT
                                        IFF     CPM	;RSV - remove sending rubouts
                                        MVI     A,255   ;GET RUBOUT CHAR
                                        MVI     B,0FAH  ;LOAD 255-RUBOUT COUNT
                                PAUZ:   CALL    TESTO   ;SEND RUBOUT
                                        INR     B       ;INCREMENT COUNT
                                        CMP     B       ;COMPARE TO 255
                                        JNZ     PAUZ    ;SET ANOTHER RUBOUT
                                        ENDIF
  1A6D    AF                            XRA     A       ;GET A ZERO
  1A6E    32 25BD                       STA     COLUM   ;RESET COLUMN POINTER
  1A71    C9                            RET             ;RETURN
  1A72    FE 15                 NOTCR:  CPI     15H     ;TEST IF CONTROL-U
  1A74    C2 1A80                       JNZ     NOTCO   ;BRIF NOT
  1A77    CD 1BA1                       CALL    PRCNT   ;GO PRINT ^U
  1A7A    CD 1A63                       CALL    CRLF    ;GET CR/LF
  1A7D    C3 19F8                       JMP     REIN    ;GO RE-ENTER
  1A80    FE 7F                 NOTCO:  CPI     7FH     ;TEST IF RUBOUT
  1A82    C2 1AA3                       JNZ     NOTBS   ;BRIF NOT
  1A85    3A 23B8                       LDA     TAPES   ;GET PAPER TAPE SW
  1A88    1F                            RAR             ;TEST IF LOAD
  1A89    DA 1A0E                       JC      TREAD   ;IGNORE IF LOAD
  1A8C    2B                            DCX     H       ;POINT PRIOR
  1A8D    7E                            MOV     A,M     ;LOAD PREV CHAR
  1A8E    B7                            ORA     A       ;TEST IF BEGIN
  1A8F    CA 1AC4                       JZ      ECHO    ;BRIF IS
  1A92    3E 5C                         MVI     A,'\'   ;BACK SLASH
  1A94    CD 1A39                       CALL    TESTO   ;WRITE IT
  1A97    7E                            MOV     A,M     ;FETCH CHARACTER TO BE DISCARDED
	MACRO-80 3.44	09-Dec-81	PAGE	1-79


  1A98    CD 1A39                       CALL    TESTO   ;WRITE IT
  1A9B    3E 5C                         MVI     A,'\'   ;BACK SLASH
  1A9D    CD 1A39                       CALL    TESTO   ;WRITE IT
  1AA0    C3 1A0E                       JMP     TREAD   ;GET REPLACEMENT CHARACTER
  1AA3                          NOTBS   EQU     $
                                        IF      LARGE   ;CONTROL H WORKS ONLY ON 9K VERSION
  1AA3    FE 08                         CPI     8       ;TEST FOR ASCII BACKSPACE
  1AA5    C2 1AB9                       JNZ     NOTCH   ;BRIF NOT CONTROL H
  1AA8    2B                            DCX     H       ;POINT PRIOR
  1AA9    7E                            MOV     A,M     ;FETCH CHARACTER
  1AAA    B7                            ORA     A       ;TEST FOR BEGINNING
  1AAB    CA 1AC4                       JZ      ECHO    ;BRIF IT IS
  1AAE    E5                            PUSH    H       ;SAVE POSITION
  1AAF    21 1EC4                       LXI     H,RBOUT ;POINT RUBOUT SEQUENCE
  1AB2    CD 1AD0                       CALL    TERMM   ;WRITE IT
  1AB5    E1                            POP     H       ;RESTORE H,L
  1AB6    C3 1A0E                       JMP     TREAD   ;GET REPLACEMENT CHARACTER
                                        ENDIF
  1AB9    3A 23B8               NOTCH:  LDA     TAPES   ;GET PAPER TAPE SWITCH
  1ABC    1F                            RAR             ;FLAG TO CARRY
  1ABD    DA 1AC4                       JC      ECHO    ;NO ECHO IF TAPE
  1AC0    7E                            MOV     A,M     ;ELSE, LOAD THE CHAR
  1AC1    CD 1A39                       CALL    TESTO   ;ECHO THE CHARCTER
  1AC4    23                    ECHO:   INX     H       ;POINT NEXT POSIT
  1AC5    C3 1A0E                       JMP     TREAD   ;LOOP FOR NEXT
                                ;
  1AC8                          TERMO   EQU     $
                                ;
                                ; TTY PRINT ROUTINE
                                ;
                                ; OUTPUT STRING OF CHARS
                                ; STARTING AT IOBUF +0 THRU END (FF OR FE OR 00)
                                ; FOLLOWING IMBEDDED CHARACTERS ARE INTERPRETED AS CONTROLS:
                                ; X'00' END OF BUFFER, TYPE CR/LF AND RETURN
                                ; X'FE' END OF BUFFER, RETURN (NO CR/LF)
                                ; X'FD' TYPE CR/LF, CONTINUE
                                ;
                                ; RETURN WITHOUT OUTPUT IF OUTPUT SW IS OFF
                                ;
  1AC8    3A 23BA                       LDA     OUTSW   ;GET OUTPUT SW
  1ACB    B7                            ORA     A       ;TEST IT
  1ACC    C0                            RNZ             ;RETURN IF NO PRINT
  1ACD    21 2415                       LXI     H,IOBUF ;POINT I/O BUFFER
  1AD0    7E                    OT1:    MOV     A,M     ;LOAD A BYTE
  1AD1    FE FE                         CPI     0FEH    ;SEE IF END OF LINE (NO CR/LF)
  1AD3    C8                            RZ              ;RETURN IF EQUAL
  1AD4    FE FD                         CPI     0FDH    ;SEE IF IMBEDDED CR/LF
  1AD6    C2 1ADF                       JNZ     OT2     ;BRIF NOT
  1AD9    CD 1A63                       CALL    CRLF    ;LINE FEED
  1ADC    C3 1AEE                       JMP     OT4     ;CONTINUE
  1ADF    B7                    OT2:    ORA     A       ;TEST IF END OF OUTPUT
  1AE0    CA 1A63                       JZ      CRLF    ;BRIF IS
  1AE3    7E                            MOV     A,M     ;LOAD THE BYTE
  1AE4    CD 1A39                       CALL    TESTO   ;TYPE IT
  1AE7    3A 25BD                       LDA     COLUM   ;GET COLUMN POINTER
  1AEA    3C                            INR     A       ;ADD ONE
	MACRO-80 3.44	09-Dec-81	PAGE	1-80


  1AEB    32 25BD                       STA     COLUM   ;RESTORE IT
  1AEE    23                    OT4:    INX     H       ;POINT NEXT
  1AEF    C3 1AD0                       JMP     OT1     ;LOOP
  1AD0                          TERMM   EQU     OT1
                                ;
  1AF2                          TABST   EQU     $
                                ;
                                ;
                                ; POSITION TTY AT NEXT TAB STOP
                                ;
                                ;
  1AF2    3A 23BA                       LDA     OUTSW   ;GET OUTPUT SWITCH
  1AF5    B7                            ORA     A       ;TEST IT
  1AF6    C0                            RNZ             ;RETURN IF SUPPRESSED
  1AF7    3A 25BD                       LDA     COLUM   ;GET COLUMN POINTER
  1AFA    FE 38                         CPI     56      ;COMPARE TO 56
  1AFC    D2 1A63                       JNC     CRLF    ;BRIF NO ROOM LEFT
  1AFF    47                            MOV     B,A     ;SAVE IT
  1B00    AF                            XRA     A       ;INIT POSITION
  1B01    B8                    TBLP:   CMP     B       ;COMPARE
  1B02    CA 1B08                       JZ      TBLP2
  1B05    D2 1B0D                       JNC     TBON    ;BRIF SHY OF TAB
  1B08    C6 0E                 TBLP2:  ADI     14      ;POINT NEXT STOP
  1B0A    C3 1B01                       JMP     TBLP    ;LOOP
  1B0D    32 25BD               TBON:   STA     COLUM   ;UPDATE CTR
  1B10    90                            SUB     B       ;COMPUTE NUMBER OF SPACES
  1B11    47                            MOV     B,A     ;SAVE IT
  1B12    3E 20                 TBSPA:  MVI     A,' '   ;SPACE TO REG A
  1B14    CD 1A39                       CALL    TESTO   ;OUTPUT IT
  1B17    05                            DCR     B       ;SUB 1 FROM CTR
  1B18    C8                            RZ              ;RETURN IF ZERO
  1B19    C3 1B12                       JMP     TBSPA   ;ELSE, LOOP
                                ;
  1B1C                          LINEO   EQU     $
                                ;
                                ; UNPACK LINE NUMBER FROM (H,L) TO (D,E)
                                ; ZERO SUPPRESS LEADING ZEROS
                                ;
                                ;
  1B1C    C5                            PUSH    B       ;PUSH B,C
  1B1D    06 01                         MVI     B,1     ;SET SWITCH
  1B1F    CD 1B27                       CALL    LOUT    ;GO FORMAT 2 BYTES
  1B22    CD 1B27                       CALL    LOUT    ;THEN THE NEXT 2
  1B25    C1                            POP     B       ;RESTORE B,C
  1B26    C9                            RET             ;RETURN
                                ;
  1B27                          LOUT    EQU     $
  1B27    7E                            MOV     A,M     ;GET BYTE
  1B28    E6 F0                         ANI     0F0H    ;ISOLATE LEFT HALF
  1B2A    1F                            RAR             ;SHIFT RIGHT 1 BIT
  1B2B    1F                            RAR             ;AGAIN
  1B2C    1F                            RAR             ;AGAIN
  1B2D    1F                            RAR             ;LAST TIME
  1B2E    C2 1B35                       JNZ     NOTZ1   ;BRIF NOT ZERO
  1B31    B0                            ORA     B       ;MERGE IN B
  1B32    C2 1B3B                       JNZ     Z1      ;BRIF ZERO
	MACRO-80 3.44	09-Dec-81	PAGE	1-81


  1B35    06 00                 NOTZ1:  MVI     B,0     ;RESET SWITCH
  1B37    F6 30                         ORI     30H     ;ZONE
  1B39    12                            STAX    D       ;PUT TO BUFFER
  1B3A    13                            INX     D       ;POINT NEXT
  1B3B    7E                    Z1:     MOV     A,M     ;LOAD BYTE
  1B3C    E6 0F                         ANI     0FH     ;MASK
  1B3E    C2 1B45                       JNZ     NOTZ2   ;BRIF NOT ZERO
  1B41    B0                            ORA     B       ;MERGE SWITCH
  1B42    C2 1B4B                       JNZ     Z2      ;BRIF ZERO
  1B45    06 00                 NOTZ2:  MVI     B,0     ;SET SWITCH OFF
  1B47    F6 30                         ORI     30H     ;ZONE
  1B49    12                            STAX    D       ;PUT TO BUFFER
  1B4A    13                            INX     D       ;POINT TO NEXT
  1B4B    23                    Z2:     INX     H       ;AND NEXT LINE BYTE
  1B4C    C9                            RET             ;RETURN
                                ;
  1B4D                          TSTCC   EQU     $
                                ;
                                ; TEST IF KEY WAS PRESSED DURING EXECUTION
                                ; CANCEL IF CONTROL-C
                                ; TOGGLE OUTPUT SUPPRESS SW IF CONTROL-O
                                ;
                                        IFF     CPM
                                        IN      TTY+1   ;GET TTY STATUS
                                        ANI     2       ;MASK FOR RXRDY
                                        RZ              ;RETURN IF NO CHAR
                                GETCH:  IN      TTY     ;READ THE CHAR
                                        ANI     7FH     ;TURN OFF PARITY
                                        ENDIF
                                        IF      CPM
                                        ;NOTE: FOLLOWING CLOBBERS REGISTERS,
                                        ; PUSH AND POP IF FOUND TO CREATE BUGS.
                                        ; RSV- REMOVE CALL TO BTSTAT
                                        ;      INSTEAD USE BDOS DIRECT CONSOLE I/O TO CHECK CONTROL-C
                                        ;      CALL    BTSTAT  ;CALL BIOS
                                        ;      RZ              ;RETURN ON NO CHAR
  1B4D    E5                            PUSH    H
  1B4E    D5                            PUSH    D
  1B4F    C5                            PUSH    B
  1B50    0E 06                         MVI     C,6
  1B52    1E FF                         MVI     E,255
  1B54    CD 0005                       CALL    BDOS
  1B57    C1                            POP     B
  1B58    D1                            POP     D
  1B59    E1                            POP     H
  1B5A    FE 03                         CPI     3
  1B5C    CA 1B7C                       JZ      CTRLC
  1B5F    C9                            RET
  1B60    C5                    GETCH:  PUSH    B       ;SAVE REGS - CPM CAN CLOBBER
  1B61    D5                            PUSH    D
  1B62    E5                            PUSH    H
  1B63    3A 23B8                       LDA     TAPES   
  1B66    FE 01                         CPI     1
  1B68    CA 1B71                       JZ      GETCH0  ;RSV-BR IF LOADING FROM TAPE 
  1B6B    CD 2341                       CALL    BTIN    ;RSV-ELSE CALL BIOS TO INPUT
  1B6E    C3 1B74               	JMP	GETCH1
	MACRO-80 3.44	09-Dec-81	PAGE	1-82


  1B71    CD 262C               GETCH0: CALL    TAPIN   ;RSV-GET CHAR FROM FILE
  1B74    E1                    GETCH1: POP     H
  1B75    D1                            POP     D
  1B76    C1                            POP     B
                                        ENDIF
  1B77    FE 03                         CPI     3       ;TEST IF CONTROL C
  1B79    C2 1B92                       JNZ     TSTC1   ;BRIF NOT
  1B7C    CD 1BA1               CTRLC:  CALL    PRCNT   ;GO PRINT ^C
  1B7F    3A 23BD                       LDA     EDSW    ;GET MODE SW
  1B82    B7                            ORA     A       ;TEST IT
  1B83    C2 02C4                       JNZ     KEY     ;**;BRIF COMMAND MODE
  1B86    21 1F71                       LXI     H,STOPM ;POINT MSG
  1B89    CD 1AD0                       CALL    TERMM   ;GO PRINT IT
  1B8C    CD 1D25                       CALL    PRLIN   ;GO PRINT LINE
  1B8F    C3 02C4                       JMP     KEY     ;GOTO READY
  1B92    FE 0F                 TSTC1:  CPI     0FH     ;TEST IF CONTROL O
  1B94    C0                            RNZ             ;RETURN IF NOT
  1B95    CD 1BA1                       CALL    PRCNT   ;GO PRINT ^O
  1B98    3A 23BA                       LDA     OUTSW   ;GET OUTPUT SWTICH
  1B9B    EE 01                         XRI     1       ;TOGGLE
  1B9D    32 23BA                       STA     OUTSW   ;PUT SW
  1BA0    C9                            RET             ;RETURN
                                ;
  1BA1                          PRCNT   EQU     $
                                ;
                                ;
                                ; PRINTS ^ AND CHAR
                                ;
  1BA1    F5                            PUSH    PSW     ;SAVE CHAR
  1BA2    3E 5E                         MVI     A,'^'   ;GET UP ARROW
  1BA4    CD 1A39                       CALL    TESTO   ;WRITE IT
  1BA7    F1                            POP     PSW     ;GET CHAR
  1BA8    C6 40                         ADI     64      ;TRNSLATE
  1BAA    C3 1A39                       JMP     TESTO   ;WRITE IT
                                ;PAGE
                                ;
  1BAD                          COMP2   EQU     $
                                ;
                                ; CONTINUATION OF COMPARE (RST 2) ROUTINE
                                ;
  1BAD    B7                            ORA     A       ;TEST IT
  1BAE    C2 1BB5                       JNZ     COMP5   ;BRIF NOT END
  1BB1    AF                    COMP3:  XRA     A       ;SET EQUAL STATUS
  1BB2    7E                    COMP4:  MOV     A,M     ;GET LAST CHAR
  1BB3    C1                            POP     B       ;RESTORE B,C
  1BB4    C9                            RET             ;RETURN
  1BB5    BE                    COMP5:  CMP     M       ;COMPARE THE TWO CHARS
  1BB6    CA 1BC2                       JZ      COMP6   ;BRIF EQUAL
  1BB9    78                            MOV     A,B     ;GET COUNT
  1BBA    FE 03                         CPI     3       ;GET IF >= 3
  1BBC    D2 1BB1                       JNC     COMP3   ;BRIF NOT LESS THAN 3
  1BBF    C3 1BB2                       JMP     COMP4   ;BRIF LESS THAN 3 AND NOT EQUAL
  1BC2    04                    COMP6:  INR     B       ;COUNT IT
  1BC3    13                            INX     D       ;POINT NEXT LIT
  1BC4    23                            INX     H       ;POINT NEXT VAR
  1BC5    C3 010E                       JMP     COMP1   ;CONTINUE
	MACRO-80 3.44	09-Dec-81	PAGE	1-83


                                ;
  1BC8                          EOL     EQU     $
                                ;
                                ; TESTS IF (H,L) IS END OF LINE
                                ; ERROR-DL IF NOT
                                ;
  1BC8    CF                            RST     1       ;SKIP TO NON-BLANK
  1BC9    CD 1BDC                       CALL    TSTEL   ;TEST IF END LINE
  1BCC    C2 1D43                       JNZ     SNERR   ;ERROR IF NOT
  1BCF    FE 3A                         CPI     ':'     ;TEST FOR MULTIPLE STATEMENT
  1BD1    C2 1BD7                       JNZ     EOL1    ;BRIF NOT
  1BD4    32 25BB                       STA     MULTI   ;SET SWITCH
  1BD7    23                    EOL1:   INX     H       ;POINT NEXT
  1BD8    22 25B9                       SHLD    ENDLI   ;SAVE POINTER
  1BDB    C9                            RET             ;RETURN
                                ;
  1BDC                          TSTEL   EQU     $
                                ;
                                ; TEST (H,L) FOR END OF STATEMENT (00H OR ':')
                                ; RETURN WITH Z SET IF IT IS
                                ;
  1BDC    B7                            ORA     A       ;TEST FOR ZERO
  1BDD    C8                            RZ              ;RETURN IF IS
  1BDE    FE 3A                         CPI     ':'     ;TEST FOR MULTIPLE STATEMENT
  1BE0    C9                            RET             ;RETURN
                                ;
  1BE1                          NOTEO   EQU     $
                                ;
                                ;
                                ; TEST IF (H,L) IS END OF LINE
                                ; RETURN IF NOT, ERROR-DL IF IS
                                ;
  1BE1    CF                            RST     1       ;SKIP TO NON-BLANK
  1BE2    CD 1BDC                       CALL    TSTEL   ;TEST IF END OF LINE
  1BE5    CA 1D43                       JZ      SNERR   ;ERROR IF IS
  1BE8    C9                            RET             ;ELSE, RETURN
                                ;
  1BE9                          PACK    EQU     $
                                ;
                                ; PACK LINE NUMBER FROM (H,L) TO B,C
                                ;
                                ;
  1BE9    01 0000                       LXI     B,0     ;CLEAR B AND C
  1BEC    3E 04                         MVI     A,4     ;INIT DIGIT COUNTER
  1BEE    32 25D4                       STA     PRSW    ;SAVE A
  1BF1    7E                    PK1:    MOV     A,M     ;GET CHAR
  1BF2    CD 1C5E                       CALL    NUMER   ;TEST FOR NUMERIC
  1BF5    C0                            RNZ             ;RETURN IF NOT NUMERIC
  1BF6    E6 0F                         ANI     0FH     ;STRIP OFF ZONE
  1BF8    57                            MOV     D,A     ;SAVE IT
  1BF9    3A 25D4                       LDA     PRSW    ;GET COUNT
  1BFC    3D                            DCR     A       ;SUBTRACT ONE
  1BFD    FA 1D43                       JM      SNERR   ;BRIF ERROR
  1C00    32 25D4                       STA     PRSW    ;SAVE CTR
  1C03    1E 04                         MVI     E,4     ;4 BIT SHIFT LOOP
  1C05    79                    PK3:    MOV     A,C     ;GET LOW BYTE
	MACRO-80 3.44	09-Dec-81	PAGE	1-84


  1C06    17                            RAL             ;ROTATE LEFT 1 BIT
  1C07    4F                            MOV     C,A     ;REPLACE
  1C08    78                            MOV     A,B     ;GET HIGH BYTE
  1C09    17                            RAL             ;ROTATE LEFT 1 BIT
  1C0A    47                            MOV     B,A     ;REPLACE
  1C0B    1D                            DCR     E       ;DECR CTR
  1C0C    C2 1C05                       JNZ     PK3     ;LOOP
  1C0F    79                            MOV     A,C     ;GET LOW
  1C10    B2                            ORA     D       ;PUT DIGIT IN RIGHT HALF OF BYTE
  1C11    4F                            MOV     C,A     ;REPLACE
  1C12    23                            INX     H       ;POINT NEXT BYTE
  1C13    C3 1BF1                       JMP     PK1     ;LOOP
                                ;
  1C16                          SQUIS   EQU     $
                                ;
                                ; COMPRESS THE EXPR STACK
                                ; REG A CONTAINS # OF BYTES TO REMOVE STARTING AT (H,L+1)
                                ; CONTAINS TOTAL NUMBER OF CHARACTERS IN STACK THUS FAR
                                ;
  1C16    E5                            PUSH    H       ;SAVE H,L
  1C17    5F                            MOV     E,A     ;COUNT TO E
  1C18    16 00                         MVI     D,0     ;ZERO HI BYTE
  1C1A    19                            DAD     D       ;COMPUTE START
  1C1B    EB                            XCHG            ;PUT TO D,E
  1C1C    E1                            POP     H       ;GET H,L
  1C1D    2F                            CMA             ;COMPLEMENT COUNT
  1C1E    3C                            INR     A       ;THEN 2'S COMPLEMENT
  1C1F    80                            ADD     B       ;COMPUTE B-A
  1C20    47                            MOV     B,A     ;PUT TO B
  1C21    13                    SQUI2:  INX     D       ;POINT NEXT SEND
  1C22    23                            INX     H       ;POINT NEXT RECEIVE
  1C23    1A                            LDAX    D       ;GET A CHAR
  1C24    77                            MOV     M,A     ;PUT IT DOWN
  1C25    05                            DCR     B       ;DECR CTR
  1C26    C2 1C21                       JNZ     SQUI2   ;LOOP
  1C29    22 2597                       SHLD    EXPRS   ;UPDATE NEW START OF EXPR
  1C2C    C9                            RET             ;RETURN
                                ;
  1C2D                          SKP2Z   EQU     $
                                ;
                                ; FIND END OF LITERAL IN (D,E)
                                ;
  1C2D    1A                            LDAX    D       ;GET BYTE OF LIT
  1C2E    B7                            ORA     A       ;TEST IT
  1C2F    C8                            RZ              ;RETURN IF ZERO (END)
  1C30    13                            INX     D       ;ELSE, POINT NEXT
  1C31    C3 1C2D                       JMP     SKP2Z   ;LOOP
                                ;
  1C34                          GTEMP   EQU     $
                                ;
                                ; GETS FOUR BYTE TEMPORARY STORAGE AREA,
                                ; STORES THE FACC THERE,
                                ; PUTS ADDR OF AREA IN EXPR STACK (H,L)
                                ;
  1C34    EB                            XCHG            ;SAVE H,L IN D,E
  1C35    E3                            XTHL            ;EXCHANGE 0 AND RET ADDR
	MACRO-80 3.44	09-Dec-81	PAGE	1-85


  1C36    E5                            PUSH    H       ;PUT NEW RET ADDR
  1C37    E5                            PUSH    H       ;DOIT IT AGAIN
  1C38    21 0000                       LXI     H,0     ;ZERO H,L
  1C3B    39                            DAD     SP      ;GET SP ADDR IN H,L
  1C3C    23                            INX     H       ;PLUS ONE
  1C3D    23                            INX     H       ;PLUS ONE MORE (POINT TO NEW AREA)
  1C3E    C5                            PUSH    B       ;SAVE CTRS
  1C3F    D5                            PUSH    D       ;SAVE EXPR ADDR
  1C40    E5                            PUSH    H       ;SAVE TEMP ADDR
  1C41    DF                            RST     3       ;GO STORE FACC
  1C42    D1                            POP     D       ;RESTORE TEMP ADDR
  1C43    2A 25B0                       LHLD    SPCTR   ;GET COUNT
  1C46    23                            INX     H       ;PLUS ONE
  1C47    23                            INX     H       ;ONE MORE
  1C48    22 25B0                       SHLD    SPCTR   ;PUT BACK
  1C4B    E1                            POP     H       ;RESTORE EXPR ADDR
  1C4C    C1                            POP     B       ;RESTORE CTRS
  1C4D    23                    SADR:   INX     H       ;POINT NEXT BYTE
  1C4E    72                            MOV     M,D     ;HIGH BYTE TO EXPRSTK
  1C4F    23                            INX     H       ;POINT NEXT
  1C50    73                            MOV     M,E     ;LOW BYTE TO EXPR STK
  1C51    23                            INX     H       ;POINT NEXT
  1C52    36 E3                         MVI     M,0E3H  ;CODE = NUMERIC DATA
  1C54    C9                            RET             ;RETURN
                                ;
  1C55                          ALPHA   EQU     $
                                ;
                                ; TESTS THE CHAR AT (H,L)
                                ; RETURNS WITH Z SET IF CHAR IS ALPHA (A-Z)
                                ; RETURNS WITH Z OFF IF NOT ALPHA
                                ; CHAR IS LEFT IN REG A
                                ;
  1C55    7E                            MOV     A,M     ;PUT CHAR TO REG A
  1C56    FE 41                         CPI     'A'     ;TEST IF A OR HIGHER
  1C58    D8                            RC              ;RETURN IF NOT ALPHA (Z IS OFF)
  1C59    FE 5A                         CPI     'Z'     ;TEST IF Z OR LESS
  1C5B    C3 1C64                       JMP     NUMEN   ;GO WRAPUP
                                ;
  1C5E                          NUMER   EQU     $
                                ;
                                ; TESTS THE CHAR AT (H,L)
                                ; RETURNS WITH Z SET IF NUMERIC (0-9)
                                ; ELSE Z IS OFF
                                ; CHAR IS LEFT IN THE A REG
                                ;
  1C5E    7E                            MOV     A,M     ;GET CHAR TO REG A
  1C5F    FE 30                         CPI     '0'     ;TEST IF ZERO OR GREATER
  1C61    D8                            RC              ;RETURN IF LESS THAN ZERO
  1C62    FE 39                         CPI     '9'     ;TEST IF 9 OR LESS
  1C64    C8                    NUMEN:  RZ              ;RETURN IF 9
  1C65    D0                            RNC             ;RETURN IF NOT NUMERIC
  1C66    BF                            CMP     A       ;SET Z
  1C67    C9                            RET             ;RETURN
                                ;
  1C68                          SEARC   EQU     $
                                ;
	MACRO-80 3.44	09-Dec-81	PAGE	1-86


                                ; SEARCHES FOR THE VARIABLE IN D,E
                                ; RETURNS WITH ADDR OF DATA AREA FOR VARIABLE
                                ;
  1C68    E5                            PUSH    H       ;SAVE H,L
  1C69    3A 25CF                       LDA     FNMOD   ;GET FUNCTION MODE
  1C6C    B7                            ORA     A       ;TEST IT
  1C6D    C2 1CC3                       JNZ     SCH6    ;BRIF IN A FUNCTION
  1C70    2A 25D8               SCH0:   LHLD    DATAB   ;GET ADDR OF DATA POOL
  1C73    7E                    SCH1:   MOV     A,M     ;GET THE BYTE
  1C74    B7                            ORA     A       ;TEST IF END
  1C75    CA 1C99                       JZ      SCH3    ;BRIF END
  1C78    2B                            DCX     H       ;POINT NEXT
  1C79    2B                            DCX     H       ;DITTO
  1C7A    46                            MOV     B,M     ;GET HI LEN
  1C7B    2B                            DCX     H       ;POINT NEXT
  1C7C    4E                            MOV     C,M     ;GET LO LEN
  1C7D    E7                            RST     4       ;ADJUST H,L
  1C7E    03                            DB      3
  1C7F    7E                            MOV     A,M     ;LOAD 1ST CHAR
  1C80    BA                            CMP     D       ;COMPARE 1ST CHAR
  1C81    C2 1C95                       JNZ     SCH2    ;BRIF NOT EQUAL
  1C84    2B                            DCX     H       ;POINT NEXT
  1C85    7E                            MOV     A,M     ;LOAD 2ND DIGIT
  1C86    23                            INX     H       ;POINT BACK
  1C87    BB                            CMP     E       ;COMPARE 2ND CHAR
  1C88    C2 1C95                       JNZ     SCH2    ;BRIF NOT EQUAL
  1C8B    7A                            MOV     A,D     ;GET HI NAME
  1C8C    B7                            ORA     A       ;TEST IT
  1C8D    FA 1CF8                       JM      SCH9    ;RETURN IF MATRIX
  1C90    09                            DAD     B       ;POINT NEXT ENTRY
  1C91    23                            INX     H       ;PLUS ONE
  1C92    EB                            XCHG            ;FLIP/FLOP
  1C93    E1                            POP     H       ;RESTORE H
  1C94    C9                            RET             ;RETURN
  1C95    09                    SCH2:   DAD     B       ;MINUS LEN
  1C96    C3 1C73                       JMP     SCH1    ;LOOP
  1C99    72                    SCH3:   MOV     M,D     ;PUT 1ST CHAR
  1C9A    2B                            DCX     H       ;POINT NEXT
  1C9B    73                            MOV     M,E     ;PUT 2ND CHAR
  1C9C    2B                            DCX     H       ;POINT NEXT
  1C9D    7A                            MOV     A,D     ;GET HI NAME
  1C9E    B7                            ORA     A       ;TEST IT
  1C9F    FA 1CD7                       JM      SCH7    ;BRIF ARRAY
  1CA2    36 FF                         MVI     M,0FFH  ;HI LEN
  1CA4    2B                            DCX     H       ;POINT NEXT
  1CA5    7B                            MOV     A,E     ;GET LO NAME
  1CA6    B7                            ORA     A       ;TEST TYPE
  1CA7    FA 1CB1                       JM      SCH4    ;BRIF CHAR
  1CAA    36 F8                         MVI     M,0F8H  ;LO LEN
  1CAC    06 04                         MVI     B,4     ;LOOP CTR
  1CAE    C3 1CB5                       JMP     SCH5    ;BRARND
  1CB1    36 FB                 SCH4:   MVI     M,0FBH  ;LO LEN
  1CB3    06 01                         MVI     B,1     ;LOOP CTR
  1CB5    2B                    SCH5:   DCX     H       ;POINT NEXT
  1CB6    36 00                         MVI     M,0     ;ZERO THE VALUE
  1CB8    05                            DCR     B       ;DECR CTR
	MACRO-80 3.44	09-Dec-81	PAGE	1-87


  1CB9    C2 1CB5                       JNZ     SCH5    ;LOOP
  1CBC    2B                            DCX     H       ;POINT NEXT
  1CBD    36 00                         MVI     M,0     ;MARK NEW END
  1CBF    23                            INX     H       ;POINT ADDR OF VARIABLE
  1CC0    EB                            XCHG            ;PUT LOCATION TO D,E
  1CC1    E1                            POP     H       ;RESTORE H,L
  1CC2    C9                            RET             ;RETURN
  1CC3    21 25B3               SCH6:   LXI     H,FNARG ;POINT DUMMY ARG
  1CC6    7E                            MOV     A,M     ;LOAD 1ST CHAR
  1CC7    BA                            CMP     D       ;COMPARE
  1CC8    C2 1C70                       JNZ     SCH0    ;BRIF NOT EQUAL
  1CCB    23                            INX     H       ;POINT NEXT
  1CCC    7E                            MOV     A,M     ;LOAD 2ND CHAR
  1CCD    BB                            CMP     E       ;COMPARE
  1CCE    C2 1C70                       JNZ     SCH0    ;BRIF NOT EQUAL
  1CD1    23                            INX     H       ;POINT NEXT
  1CD2    56                            MOV     D,M     ;GET HI ADDR
  1CD3    23                            INX     H       ;POINT NEXT
  1CD4    5E                            MOV     E,M     ;GET LO ADDR
  1CD5    E1                            POP     H       ;RESTORE H,L
  1CD6    C9                            RET             ;RETURN
  1CD7    E5                    SCH7:   PUSH    H       ;SAVE ADDRESS
  1CD8    36 FE                         MVI     M,0FEH  ;MOVE HI DISP
  1CDA    2B                            DCX     H       ;POINT NEXT
  1CDB    36 14                         MVI     M,14H   ;MOVE LO DISP
  1CDD    2B                            DCX     H
  1CDE    36 00                         MVI     M,0     ;MOVE A ZERO
  1CE0    2B                            DCX     H       ;POINT NEXT
  1CE1    36 0A                         MVI     M,10    ;MOVE 10
  1CE3    2B                            DCX     H       ;POINT NEXT
  1CE4    36 00                         MVI     M,0     ;MOVE A ZERO
  1CE6    2B                            DCX     H       ;POINT NEXT
  1CE7    36 0A                         MVI     M,10    ;MOVE A 10 (DEFAULT IS 10 X 10)
  1CE9    01 01E5                       LXI     B,485   ;TOTAL # OF BYTES TAKEN BY ARRAY
  1CEC    2B                    SCH8:   DCX     H       ;POINT NEXT
  1CED    36 00                         MVI     M,0     ;CLEAR ONE BYTE
  1CEF    0B                            DCX     B       ;DCR CTR
  1CF0    78                            MOV     A,B     ;GET HI
  1CF1    B1                            ORA     C       ;PLUS LO
  1CF2    C2 1CEC                       JNZ     SCH8    ;LOOP
  1CF5    E1                            POP     H       ;RESTORE PTR TO START
  1CF6    23                            INX     H       ;POINT LO NAME
  1CF7    23                            INX     H       ;POINT HI NAME
  1CF8    C1                    SCH9:   POP     B       ;NEED TO XCHANGE LAST 2 STACK ENTRIES
  1CF9    D1                            POP     D       ;SO DOIT
  1CFA    C5                            PUSH    B
  1CFB    D5                            PUSH    D
  1CFC    C9                            RET             ;RETURN
                                ;
  1CFD                          VAR     EQU     $
                                ;
                                ;
                                ; TEST (H,L) FOR A VARIABLE NAME
                                ; PUTS THE NAME IN D,E IF FOUND
                                ; ERROR SN IF NONE FOUND
                                ;
	MACRO-80 3.44	09-Dec-81	PAGE	1-88


  1CFD    CF                            RST     1       ;SKIP TO NON-BLANK
  1CFE    CD 1C55                       CALL    ALPHA   ;TEST IF ALPHA
  1D01    C2 1D43                       JNZ     SNERR   ;BRIF NOT ALPHA
  1D04    57                            MOV     D,A     ;FIRST CHAR
  1D05    1E 20                         MVI     E,' '   ;DEFAULT
  1D07    23                            INX     H       ;POINT NEXT
  1D08    CF                            RST     1       ;GET 2ND CHAR
  1D09    CD 1C5E                       CALL    NUMER   ;TEST IF NUMERIC
  1D0C    C2 1D12                       JNZ     VAR2    ;BRIF NOT NUMERIC
  1D0F    5F                            MOV     E,A     ;SAVE 2ND CHAR
  1D10    23                            INX     H       ;POINT NEXT
  1D11    CF                            RST     1       ;GET NON-BLANK FOLLOWING
  1D12    FE 24                 VAR2:   CPI     '$'     ;TEST IF STRING
  1D14    C2 1D1D                       JNZ     VAR3    ;BRIF NOT
  1D17    7B                            MOV     A,E     ;GET 2ND CHAR
  1D18    F6 80                         ORI     80H     ;SET TYPE
  1D1A    5F                            MOV     E,A     ;SAVE IT
  1D1B    23                            INX     H       ;SKIP $
  1D1C    C9                            RET             ;THEN RETURN
  1D1D    FE 28                 VAR3:   CPI     '('     ;TEST IF ARRAY
  1D1F    C0                            RNZ             ;RETURN IF NOT
  1D20    7A                            MOV     A,D     ;GET HI NAME
  1D21    F6 80                         ORI     80H     ;TURN ON D7
  1D23    57                            MOV     D,A     ;RESTORE
  1D24    C9                            RET             ;RETURN
                                ;
  1D25                          PRLIN   EQU     $
                                ;
                                ; PRINTS LINE NUMBER FOLLOWED BY CR/LF
                                ;
  1D25    11 23BE                       LXI     D,LINEN ;POINT AREA
  1D28    2A 25D0                       LHLD    LINE    ;GET ADDR OF LINE NUMBER
  1D2B    CD 1B1C                       CALL    LINEO   ;GO UNPACK
  1D2E    EB                            XCHG            ;PUT TO H,L
  1D2F    36 00                         MVI     M,0     ;END OF MSG
  1D31    21 23BE                       LXI     H,LINEN ;POINT AREA
  1D34    C3 1AD0                       JMP     TERMM   ;GO PRINT IT
                                ;PAGE
                                ;
                                ; ERROR MESSAGE ROUTINES
                                ; FATAL ERROR MUST BE FIRST
                                ;
  00FE                          EM      EQU     0FEH
                                ;
  1D37    F7                    ULERR:  RST     6
  1D38    55 4C FE F7                   DB      'UL',EM,FATAL   ;NOTE FATAL = CODE FOR RST 6
  1D3B                          ZMERR   EQU     $-1             ;LOG(X<=0),SQR(-X),0 DIVIDE
  1D3C    4F 46 FE F7                   DB      'OF',EM,FATAL
  1D3F                          STERR   EQU     $-1             ;ERROR IN EXPRESSION STACK
  1D40    53 54 FE F7                   DB      'ST',EM,FATAL
  1D43                          SNERR   EQU     $-1             ;DELIMITER ERROR
  1D44    53 4E FE F7                   DB      'SN',EM,FATAL
  1D47                          RTERR   EQU     $-1             ;RETURN & NO GOSUB
  1D48    52 54 FE F7                   DB      'RT',EM,FATAL
  1D4B                          DAERR   EQU     $-1             ;OUT OF DATA
  1D4C    44 41 FE F7                   DB      'DA',EM,FATAL
	MACRO-80 3.44	09-Dec-81	PAGE	1-89


  1D4F                          NXERR   EQU     $-1             ;NEXT & NO FOR / >8 FOR'S
  1D50    4E 58 FE F7                   DB      'NX',EM,FATAL
  1D53                          CVERR   EQU     $-1             ;CONVERSION ERROR
  1D54    43 56 FE F7                   DB      'CV',EM,FATAL
  1D57                          CKERR   EQU     $-1             ;CHECKSUM ERROR
  1D58    43 4B FE F7                   DB      'CK',EM,FATAL
  1D5B                          IOERR   EQU     $-1             ;RSV-CPM I/O ERROR
  1D5C    49 4F FE F7                   DB      'IO',EM,FATAL
                                ;
                                ; NON-FATAL ERRORS
                                ;
  1D5F                          OVERR   EQU     $-1             ;OVERFLOW ERROR
  1D60    4F 56 FE                      DB      'OV',EM
  1D63    C9                            RET                     ;RETURN TO ROUTINE
  1D64    F7                    UNERR:  RST     6               ;CALL   ERROR ROUTINE
  1D65    55 4E FE                      DB      'UN',EM
  1D68    C9                            RET
                                ;
                                ; CONTINUATION OF ERROR MESSAGE ROUTINE (RST 6)
                                ;
  1D69    CD 1AD0               ERROR:  CALL    TERMM   ;PRINT 'XX'
  1D6C    E5                            PUSH    H       ;SAVE RETURN
  1D6D    21 1F80                       LXI     H,ERRMS ;PRINT 'ERROR IN LINE'
  1D70    CD 1AD0                       CALL    TERMM
  1D73    CD 1D25                       CALL    PRLIN   ;PRINT LINE #
  1D76    E1                            POP     H
  1D77    23                            INX     H       ;RETURN ADDRESS
  1D78    7E                            MOV     A,M     ;GET INSTRUCTION
  1D79    FE F7                         CPI     FATAL   ;IS IT AN RST 6?
  1D7B    CA 02C4                       JZ      KEY     ;IF ZERO, YES, ABORT
  1D7E    C1                            POP     B       ;RESTORE REGISTERS
  1D7F    D1                            POP     D
  1D80    F1                            POP     PSW
  1D81    E3                            XTHL
  1D82    C9                            RET
                                        ;PAGE
                                ;
                                ;
                                ; MOVE THE STRING FROM (D,E) TO (H,L) COUNT IN B
                                ;
                                ;
  1D83    06 04                 CPY4D:  MVI     B,4
  1D85    1A                    COPYD:  LDAX    D       ;GET A BYTE
  1D86    77                            MOV     M,A     ;MOVE IT
  1D87    23                            INX     H       ;POINT NEXT
  1D88    13                            INX     D       ;DITTO
  1D89    05                            DCR     B       ;DECR CTR
  1D8A    C2 1D85                       JNZ     COPYD   ;LOOP
  1D8D    C9                            RET             ;THEN RETURN
                                ;
                                ;
                                ; MOVE THE STRING FROM (H,L) TO (D,E) COUNT IN B
                                ;
                                ;
  1D8E    06 04                 CPY4H:  MVI     B,4
  1D90    EB                    COPYH:  XCHG            ;FLIP/FLOP
	MACRO-80 3.44	09-Dec-81	PAGE	1-90


  1D91    CD 1D85                       CALL    COPYD   ;GO COPY
  1D94    EB                            XCHG            ;FLIP/FLOP BACK
  1D95    C9                            RET             ;RETURN
                                ;
  1D96                          ZEROM   EQU     $
                                ;
                                ; MOVES A STRING OF BINARY ZEROS, COUNT IN B
                                ;
  1D96    36 00                         MVI     M,0     ;MOVE A ZERO
  1D98    23                            INX     H       ;POINT NEXT
  1D99    05                            DCR     B       ;DECR CTR
  1D9A    C2 1D96                       JNZ     ZEROM   ;LOOP
  1D9D    C9                            RET             ;RETURN
                                ;
  1D9E                          FBIN    EQU     $
                                ;
                                ;
                                ; CONVERT FLOAT ACC TO UNSIGNED BINARY NUMBER IN A REG
                                ; RETURNS 0 IN A REG IF FACC<0 OR FACC>255
                                ;
                                ;
  1D9E    E5                            PUSH    H       ;SAVE H,L
  1D9F    D5                            PUSH    D       ;SAVE D,E
  1DA0    CD 20A0                       CALL    FACDE   ;CONVERT FACC TO D,E
  1DA3    AF                            XRA     A       ;ZERO A
  1DA4    B2                            ORA     D       ;TEST HIGH VALUE
  1DA5    C2 1DA9                       JNZ     FBIN1   ;BRIF NOT ZERO
  1DA8    7B                            MOV     A,E     ;VALUE TO A
  1DA9    D1                    FBIN1:  POP     D       ;RESTORE D,E
  1DAA    E1                            POP     H       ;RESTORE H,L
  1DAB    C9                            RET             ;RETURN
                                ;
  1DAC                          ARG     EQU     $
                                ;
                                ; GET NEXT ARGUMENT FROM POLISH STACK
                                ;
  1DAC    2A 2599                       LHLD    ADDR1   ;GET ADDRESS
  1DAF    23                            INX     H       ;POINT NEXT
  1DB0    56                            MOV     D,M     ;GET HI ADDRESS
  1DB1    23                            INX     H       ;POINT NEXT
  1DB2    5E                            MOV     E,M     ;GET LO ADDRESS
  1DB3    23                            INX     H       ;POINT TYPE
  1DB4    22 2599                       SHLD    ADDR1   ;GET ADDRESS
  1DB7    2B                            DCX     H       ;POINT BACK
  1DB8    C3 1474                       JMP     EVLD    ;CALL EVLOAD AND RETURN
                                ;
                                ;
  1DBB                          ARGNU   EQU     $
                                ;
  1DBB    CD 1DAC                       CALL    ARG     ;GET ARGUMENT
  1DBE    C3 1D9E                       JMP     FBIN    ;THEN CONVERT FACC TO BIN
                                ;
  1DC1                          BINFL   EQU     $
                                ;
                                ; CONVERT D,E TO FLOATING POINT NUMBER IN FAC
                                ;
	MACRO-80 3.44	09-Dec-81	PAGE	1-91


                                ;
  1DC1    21 259F                       LXI     H,FACC  ;POINT ACC
  1DC4    36 18                         MVI     M,24    ;MAX BITS
  1DC6    23                            INX     H       ;POINT NEXT
  1DC7    36 00                         MVI     M,0     ;CLEAR MSB
  1DC9    23                            INX     H       ;POINT NEXT
  1DCA    72                            MOV     M,D     ;MOVE MID
  1DCB    23                            INX     H       ;POINT NEXT
  1DCC    73                            MOV     M,E     ;MOVE LSB
  1DCD    C3 17CE                       JMP     FNORM   ;GO NORMALIZE & RETURN
                                ;PAGE
                                ;
                                ; FUNCTION TABLE. FORMAT IS:
                                ;     DB <LITERAL>,0
                                ;     DW <ADDRESS>
                                ;     DB <FUNCTION TYPE>
                                ;
                                ; TABLE IS TERMINATED WITH A '00'
                                ;
  1DD0                          FUNCT   EQU     $
  1DD0    41 42 53 00                   DB      'ABS',0
  1DD4    0CB8                          DW      ABS
  1DD6    AB                            DB      0ABH
  1DD7    53 51 52 00                   DB      'SQR',0
  1DDB    0D18                          DW      SQR
  1DDD    AB                            DB      0ABH
  1DDE    49 4E 54 00                   DB      'INT',0
  1DE2    0CD3                          DW      INT
  1DE4    AB                            DB      0ABH
  1DE5    53 47 4E 00                   DB      'SGN',0
  1DE9    0CC1                          DW      SGN
  1DEB    AB                            DB      0ABH
  1DEC    52 4E 44 00           RNDLI:  DB      'RND',0
  1DF0    0D75                          DW      RND
  1DF2    AB                            DB      0ABH
  1DF3    53 49 4E 00                   DB      'SIN',0
  1DF7    0B32                          DW      SIN
  1DF9    AB                            DB      0ABH
  1DFA    43 4F 53 00                   DB      'COS',0
  1DFE    0BA4                          DW      COS
  1E00    AB                            DB      0ABH
  1E01    54 41 4E 00                   DB      'TAN',0
  1E05    0BAD                          DW      TAN
  1E07    AB                            DB      0ABH
  1E08    41 54 4E 00                   DB      'ATN',0
  1E0C    0BC5                          DW      ATN
  1E0E    AB                            DB      0ABH
  1E0F    49 4E 50 00                   DB      'INP',0
  1E13    0DFB                          DW      INP
  1E15    AB                            DB      0ABH
  1E16    4C 4E 00                      DB      'LN',0
  1E19    0C04                          DW      LN
  1E1B    AB                            DB      0ABH
  1E1C    4C 4F 47 00                   DB      'LOG',0
  1E20    0C52                          DW      LOG
  1E22    AB                            DB      0ABH
	MACRO-80 3.44	09-Dec-81	PAGE	1-92


  1E23    45 58 50 00                   DB      'EXP',0
  1E27    0C5B                          DW      EXP
  1E29    AB                            DB      0ABH
  1E2A    50 4F 53 00                   DB      'POS',0
  1E2E    0E11                          DW      POS
  1E30    AB                            DB      0ABH
  1E31    4C 45 4E 00                   DB      'LEN',0
  1E35    0E7A                          DW      LENFN
  1E37    AB                            DB      0ABH
  1E38    43 48 52 24                   DB      'CHR$',0
  1E3C    00                    
  1E3D    0E80                          DW      CHRFN
  1E3F    CB                            DB      0CBH
  1E40    41 53 43 49                   DB      'ASCII',0
  1E44    49 00                 
  1E46    0E8B                          DW      ASCII
  1E48    AB                            DB      0ABH
  1E49    4E 55 4D 24                   DB      'NUM$',0
  1E4D    00                    
  1E4E    0E98                          DW      NUMFN
  1E50    CB                            DB      0CBH
  1E51    56 41 4C 00                   DB      'VAL',0
  1E55    0EAB                          DW      VAL
  1E57    AB                            DB      0ABH
  1E58    53 50 41 43                   DB      'SPACE$',0
  1E5C    45 24 00              
  1E5F    0ED2                          DW      SPACE
  1E61    CB                            DB      0CBH
  1E62    53 54 52 49                   DB      'STRING$',0
  1E66    4E 47 24 00           
  1E6A    0EE2                          DW      STRFN
  1E6C    D3                            DB      0D3H
  1E6D    4C 45 46 54                   DB      'LEFT$',0
  1E71    24 00                 
  1E73    0EF6                          DW      LEFT
  1E75    D3                            DB      0D3H
  1E76    52 49 47 48                   DB      'RIGHT$',0
  1E7A    54 24 00              
  1E7D    0EFF                          DW      RIGHT
  1E7F    D3                            DB      0D3H
  1E80    4D 49 44 24                   DB      'MID$',0
  1E84    00                    
  1E85    0F08                          DW      MIDFN
  1E87    DB                            DB      0DBH
  1E88    49 4E 53 54                   DB      'INSTR',0
  1E8C    52 00                 
  1E8E    0F42                          DW      INSTR
  1E90    BB                            DB      0BBH
  1E91    50 45 45 4B                   DB      'PEEK',0
  1E95    00                    
  1E96    2306                          DW      PEEK
  1E98    AB                            DB      0ABH
                                        IF      LARGE
  1E99    00 00 00 00                   DB      0,0,0,0 ;ROOM FOR ONE MORE FUNCTION
  1E9D    00 00 00 00                   DB      0,0,0,0
                                        ENDIF
	MACRO-80 3.44	09-Dec-81	PAGE	1-93


  1EA1    00                            DB      0       ;END OF FUNCTION TABLE
                                ;PAGE
                                ;
                                ; PROGRAM CONSTANTS
                                ;
  1EA2    13 14 00              PCHOF:  DB      19,20,0
  1EA5    3F FD                 RNDP:   DB      3FH,0FDH        ;16381
  1EA7    3F EB                         DB      3FH,0EBH        ;16363
  1EA9    3F DD                         DB      3FH,0DDH        ;16349
  1EAB    1B EC                 NRNDX:  DB      1BH,0ECH
  1EAD    33 D3                         DB      33H,0D3H
  1EAF    1A 85                         DB      1AH,85H
  1EB1    2B 1E                         DB      2BH,1EH
  1EB3    57 48 41 54           WHATL:  DB      'WHAT',0
  1EB7    00                    
  1EB8                          VERS    EQU     $       ;VERSION MESSAGE
                                        IF      LARGE
  1EB8    39 4B 20 56                   DB      '9K VERS 1.4',0
  1EBC    45 52 53 20           
  1EC0    31 2E 34 00           
  1EC4    08 20 08 FE           RBOUT:  DB      08H,20H,08H,0FEH ;RUBOUT SEQUENCE (9K ONLY)
                                        ENDIF
                                        IFF     LARGE
                                        DB      '8K VERS 1.4',0
                                        ENDIF
  1EC8    4C 49 4E 45           LLINE:  DB      'LINE',0
  1ECC    00                    
  1ECD    54 41 42 00           TABLI:  DB      'TAB',0
  1ED1    53 54 45 50           STEPL:  DB      'STEP',0
  1ED5    00                    
  1ED6    54 48 45 4E           THENL:  DB      'THEN',0
  1EDA    00                    
  1EDB    50 49 00              PILIT:  DB      'PI',0
  1EDE    02 80 00 00           TWO:    DB      02H,80H,00H,00H    ;CONSTANT:  2
  1EE2    04 A0 00 00           TEN:    DB      04H,0A0H,00H,00H   ;CONSTANT:  10
  1EE6    02 C9 0F D7           PI:     DB      02H,0C9H,0FH,0D7H  ;CONSTANT:  3.141593
  1EEA    00 C9 0F D7           QTRPI:  DB      00H,0C9H,0FH,0D7H  ;CONSTANT:  0.7853892
  1EEE    80 FF FF FF           NEGON:  DB      80H,0FFH,0FFH,0FFH ;CONSTANT: -0.9999999
  1EF2    00 B1 72 16           LN2C:   DB      00H,0B1H,72H,16H   ;CONSTANT:  0.6931472
  1EF6    00 97 14 EB           SQC1:   DB      00H,97H,14H,0EBH   ;CONSTANT:  0.59016206
  1EFA    7F D5 A9 56           SQC2:   DB      7FH,0D5H,0A9H,56H  ;CONSTANT:  0.41730759
                                ;PAGE
                                ;
                                ; THE FOLLOWING CONSTANTS MUST BE IN THIS ORDER ***********
                                ;
                                ;       CONSTANT WITH EXPONENT OF 1
                                ;       COEFFICIENT OF FIRST TERM
                                ;       ...
                                ;       COEEFICIENT OF NTH TERM
                                ;
                                ; SINCE ALL COEFFICIENTS ARE LESS THAN 1,
                                ; THE ITERATION LOOP USES THE
                                ; CONSTANT WITH EXPONENT 1 TO TERMINATE THE EVALUATION.
                                ;
  1EFE    01 B5 04 F3           SQC3:   DB      01H,0B5H,04H,0F3H    ;CONSTANT:  1.41421356
  1F02    FF AA 95 BC                   DB      0FFH,0AAH,95H,0BCH   ;CONSTANT: -0.3331738
	MACRO-80 3.44	09-Dec-81	PAGE	1-94


  1F06    7E CA D5 20                   DB      7EH,0CAH,0D5H,20H    ;CONSTANT:  0.1980787
  1F0A    FE 87 82 D6                   DB      0FEH,87H,82H,0D6H    ;CONSTANT: -0.1323351
  1F0E    7D A3 13 1C                   DB      7DH,0A3H,13H,1CH     ;CONSTANT:  0.07962632
  1F12    FC 89 A6 B8                   DB      0FCH,89H,0A6H,0B8H   ;CONSTANT: -0.03360627
  1F16    79 DF 3A 9E           ATNCO:  DB      79H,0DFH,3AH,9EH     ;CONSTANT:  0.006812411
                                ;
  1F1A    01 C9 0F D7           HALFP:  DB      01H,0C9H,0FH,0D7H    ;CONSTANT:  1.570796
  1F1E    80 A5 5D DE                   DB      80H,0A5H,5DH,0DEH    ;CONSTANT: -0.64596371
  1F22    7D A3 34 55                   DB      7DH,0A3H,34H,55H     ;CONSTANT:  0.076589679
  1F26    F9 99 38 60                   DB      0F9H,99H,38H,60H     ;CONSTANT: -0.0046737656
  1F2A    74 9E D7 B6           SINCO:  DB      74H,9EH,0D7H,0B6H    ;CONSTANT:  0.00015148419
                                ;
  1F2E    01 80                 ONE:    DB      001H,080H
  1F30    00 00                 NULLI:  DB      00H,00H              ;CONSTANT:  1.0
  1F32    00 FF FE C1                   DB      00H,0FFH,0FEH,0C1H   ;CONSTANT:  0.99998103
  1F36    FF FF BA B0                   DB      0FFH,0FFH,0BAH,0B0H  ;CONSTANT: -0.4994712
  1F3A    7F A8 0E 2B                   DB      7FH,0A8H,0EH,2BH     ;CONSTANT:  0.3282331
  1F3E    FE E7 4B 55                   DB      0FEH,0E7H,4BH,55H    ;CONSTANT: -0.2258733
  1F42    7E 89 DE E3                   DB      7EH,89H,0DEH,0E3H    ;CONSTANT:  0.134693
  1F46    FC E1 C5 78                   DB      0FCH,0E1H,0C5H,078H  ;CONSTANT: -0.05511996
  1F4A    7A B0 3F AE           LNCO:   DB      7AH,0B0H,3FH,0AEH    ;CONSTANT:  0.01075737
                                ;
  1F4E    01 B8 AA 3B           LN2E:   DB      001H,0B8H,0AAH,03BH  ;CONSTANT:  1.44269504
  1F52    00 B1 6F E6                   DB      000H,0B1H,06FH,0E6H  ;C=.69311397
  1F56    7E F6 2F 70                   DB      07EH,0F6H,02FH,070H  ;C=.24041548
  1F5A    7C E1 C2 AE                   DB      07CH,0E1H,0C2H,0AEH  ;C=.05511732
  1F5E    7A A0 BB 7E                   DB      07AH,0A0H,0BBH,07EH  ;C=.00981033
  1F62    77 CA 09 CB           EXPCO:  DB      077H,0CAH,009H,0CBH  ;C=.00154143
                                ;
  1F66    7F DE 5B D0           LNC:    DB      07FH,0DEH,05BH,0D0H     ;C=LOG BASE 10 OF E
  1F6A                          READY   EQU     $
  1F6A    FD                            DB      0FDH
  1F6B    52 45 41 44                   DB      'READY',0
  1F6F    59 00                 
  1F71                          STOPM   EQU     $
  1F71    FD                            DB      0FDH
  1F72    53 54 4F 50                   DB      'STOP AT LINE ',254
  1F76    20 41 54 20           
  1F7A    4C 49 4E 45           
  1F7E    20 FE                 
  1F80    20 45 52 52           ERRMS:  DB      ' ERROR IN LINE ',0FEH
  1F84    4F 52 20 49           
  1F88    4E 20 4C 49           
  1F8C    4E 45 20 FE           
  0002                          TTY     EQU     2
                                ;PAGE
                                ;
                                ; VERB (STATEMENT/COMMAND) TABLE
                                ; FORMAT IS: DB 'VERB',0
                                ;            DW ADDR
                                ;            DB 'NEXT VERB',0
                                ;            ETC
                                ;  END OF TABLE IS MARKED BY DB 0
                                ;
  1F90                          JMPTB   EQU     $
  1F90    4C 49 53 54                   DB      'LIST',0
	MACRO-80 3.44	09-Dec-81	PAGE	1-95


  1F94    00                    
  1F95    0353                          DW      LIST
  1F97    52 55 4E 00                   DB      'RUN',0
  1F9B    02D5                          DW      RUNCM
  1F9D    58 45 51 00                   DB      'XEQ',0
  1FA1    02DA                          DW      XEQ
  1FA3    4E 45 57 00                   DB      'NEW',0
  1FA7    0264                          DW      NEW
  1FA9    43 4F 4E 00                   DB      'CON',0
  1FAD    03DF                          DW      CONTI
  1FAF    54 41 50 45                   DB      'TAPE',0 
  1FB3    00                    
  1FB4    029A                          DW      TAPE
  1FB6    53 41 56 45                   DB      'SAVE',0
  1FBA    00                    
  1FBB    0336                          DW      SAVE
  1FBD    4B 45 59 00           KEYL:   DB      'KEY',0
  1FC1    02C4                          DW      KEY
  1FC3    46 52 45 00                   DB      'FRE',0
  1FC7    027C                          DW      FREE
  1FC9    49 46 00                      DB      'IF',0
  1FCC    05DA                          DW      IFSTM
  1FCE    52 45 41 44                   DB      'READ',0
  1FD2    00                    
  1FD3    08D2                          DW      READ
  1FD5    52 45 53 54                   DB      'RESTORE',0
  1FD9    4F 52 45 00           
  1FDD    0407                          DW      RESTO
  1FDF    44 41 54 41           DATAL:  DB      'DATA',0
  1FE3    00                    
  1FE4    02EC                          DW      RUN
  1FE6    46 4F 52 00                   DB      'FOR',0
  1FEA    04D6                          DW      FOR
  1FEC    4E 45 58 54           NEXTL:  DB      'NEXT',0
  1FF0    00                    
  1FF1    0783                          DW      NEXT
  1FF3    47 4F 53 55           GOSBL:  DB      'GOSUB',0
  1FF7    42 00                 
  1FF9    042B                          DW      GOSUB
  1FFB    52 45 54 55                   DB      'RETURN',0
  1FFF    52 4E 00              
  2002    0413                          DW      RETUR
  2004    49 4E 50 55                   DB      'INPUT',0
  2008    54 00                 
  200A    0812                          DW      INPUT
  200C    50 52 49 4E                   DB      'PRINT',0
  2010    54 00                 
  2012    0446                          DW      PRINT
  2014    47 4F                 GOTOL:  DB      'GO'
  2016    54 4F 00              TOLIT:  DB      'TO',0
  2019    03E7                          DW      GOTO
  201B    4C 45 54 00                   DB      'LET',0
  201F    06E2                          DW      LET
  2021    53 54 4F 50                   DB      'STOP',0
  2025    00                    
  2026    0963                          DW      STOP
	MACRO-80 3.44	09-Dec-81	PAGE	1-96


  2028    45 4E 44 00                   DB      'END',0
  202C    02AC                          DW      ENDIT
  202E    52 45 4D 00                   DB      'REM',0
  2032    02EC                          DW      RUN
  2034    21 00                         DB      '!',0
  2036    02EC                          DW      RUN
  2038    3F 00                         DB      '?',0
  203A    0446                          DW      PRINT
  203C    52 41 4E 44                   DB      'RANDOMIZE',0
  2040    4F 4D 49 5A           
  2044    45 00                 
  2046    0990                          DW      RANDO
  2048    4F 4E 00                      DB      'ON',0
  204B    09A6                          DW      ON
  204D    4F 55 54 00                   DB      'OUT',0
  2051    093B                          DW      OUTP
  2053    44 49 4D 00                   DB      'DIM',0
  2057    0AA2                          DW      DIM
  2059    43 48 41 4E                   DB      'CHANGE',0
  205D    47 45 00              
  2060    0A1B                          DW      CHANG
  2062    44 45 46              DEFLI:  DB      'DEF'
  2065    46 4E 00              FNLIT:  DB      'FN',0
  2068    02EC                          DW      RUN
                                        IF      CPM
  206A    44 44 54 00                   DB      'DDT',0
  206E    209C                          DW      DDT
  2070    42 59 45 00                   DB      'BYE',0
  2074    0000                          DW      BOOT
                                        ENDIF
  2076    50 4F 4B 45                   DB      'POKE',0
  207A    00                    
  207B    2311                          DW      POKE
  207D    43 41 4C 4C                   DB      'CALL',0
  2081    00                    
  2082    232F                          DW      JUMP
                                        IF      LARGE   ;INCLUDE ONLY IN 8K+ VERSION
  2084    45 44 49 54                   DB      'EDIT',0
  2088    00                    
  2089    2116                          DW      FIX
  208B    43 4C 4F 41                   DB      'CLOAD',0
  208F    44 00                 
  2091    22A6                          DW      CLOAD
  2093    43 53 41 56                   DB      'CSAVE',0
  2097    45 00                 
  2099    222E                          DW      CSAVE
                                        ENDIF
                                        IF      HUNTER
                                        DB      'BAUD',0
                                        DW      BAUD
                                        ENDIF
  209B    00                            DB      0       ;END OF TABLE
                                ;
                                ; DDT COMMAND, CPM ONLY
                                ;
                                        IF      CPM
	MACRO-80 3.44	09-Dec-81	PAGE	1-97


  209C    FF                    DDT:    RST     7
  209D    C3 019F                       JMP     RDY
                                        ENDIF
                                ;PAGE
                                ;
  20A0                          FACDE   EQU     $
                                ;
                                ; THIS ROUTINE CONVERTS THE FACC TO AN ADDRESS IN D,E
                                ;
  20A0    CD 0CD3                       CALL    INT     ;INTEGERIZE THE FACC
  20A3    3A 259F                       LDA     FACC    ;GET THE EXPONENT
  20A6    B7                            ORA     A       ;TEST IT
  20A7    FA 1D5F                       JM      OVERR   ;BRIF NEGATIVE ADDRESS
  20AA    D6 10                         SUI     16      ;SUBTRACT MAX EXPONENT
  20AC    CA 20C2                       JZ      FDE2    ;BRIF EQUAL MAX
  20AF    F2 1D5F                       JP      OVERR   ;BRIF GREATER THAN 64K
  20B2    2F                            CMA             ;2'S COMPLIMENT OF A YIELDS..
  20B3    3C                            INR     A       ;16-A
  20B4    4F                            MOV     C,A     ;SAVE SHIFT COUNT
  20B5    AF                    FDE1:   XRA     A       ;CLEAR CARRY
  20B6    21 25A0                       LXI     H,FACC+1        ;POINT MANTISSA
  20B9    06 02                         MVI     B,2     ;WORDS TO SHIFT
  20BB    CD 19EC                       CALL    FSHFT   ;GO SHIFT FACC+1 AND FACC+2
  20BE    0D                            DCR     C       ;REDUCE COUNT
  20BF    C2 20B5                       JNZ     FDE1    ;LOOP TILL COMPLETE
  20C2    21 25A0               FDE2:   LXI     H,FACC+1        ;POINT HIGH BYTE
  20C5    56                            MOV     D,M     ;LOAD D
  20C6    23                            INX     H       ;POINT LOW BYTE
  20C7    5E                            MOV     E,M     ;LOADE E
  20C8    C9                            RET             ;RETURN
                                ;
                                ;
  20C9                          LOCAT   EQU     $
                                ;
                                ; THIS ROUTINE SEARCHES FOR A LINE IN THE PROGRAM FILE.
                                ; Z SET, C RESET==>LINE FOUND. ADDRESS IS IN H,L
                                ; C SET, Z RESET==>NOT FOUND. H,L POINT TO NEXT LINE
                                ; C SET, Z SET==>NOT FOUND. H,L POINT AT END OF PROGRAM
                                ;
  20C9    21 280C                       LXI     H,BEGPR ;POINT START
  20CC    7E                    FIND1:  MOV     A,M     ;FETCH LENGTH OF LINE
  20CD    E5                            PUSH    H       ;SAVE POINTER
  20CE    B7                            ORA     A       ;TEST
  20CF    CA 20EE                       JZ      FIND3   ;BRIF END
  20D2    23                            INX     H       ;POINT LINE #
  20D3    7E                            MOV     A,M     ;FETCH HI #
  20D4    B8                            CMP     B       ;COMPARE TO REQUESTED
  20D5    DA 20E6                       JC      FIND2   ;BRIF LOW
  20D8    C2 20EE                       JNZ     FIND3   ;BRIF PAST AND NOT FOUND
  20DB    23                            INX     H       ;POINT LO #
  20DC    7E                            MOV     A,M     ;FETCH IT
  20DD    B9                            CMP     C       ;COMPARE TO REQUESTED
  20DE    DA 20E6                       JC      FIND2   ;BRIF LOW
  20E1    C2 20EE                       JNZ     FIND3   ;BRIF PAST AND NOT FOUND
  20E4    E1                            POP     H       ;POINT BEGIN IF MATCH
  20E5    C9                            RET             ;RETURN
	MACRO-80 3.44	09-Dec-81	PAGE	1-98


                                ;
                                ; BUMP H,L TO NEXT LINE
                                ;
  20E6    E1                    FIND2:  POP     H       ;POINT START OF LINE
  20E7    5E                            MOV     E,M     ;LENGHT TO E
  20E8    16 00                         MVI     D,0     ;CLEAR D
  20EA    19                            DAD     D       ;BUMP H,L
  20EB    C3 20CC                       JMP     FIND1   ;CONTINUE
                                ;
                                ; LINE NOT FOUND
                                ;
  20EE    37                    FIND3:  STC             ;SET CARRY
  20EF    E1                            POP     H       ;POINT LINE JUST PAST REQUESTED
  20F0    C9                            RET             ;RETURN
                                ;
                                ;
  20F1                          SEEK    EQU     $
                                ;
                                ;  THIS CODE FINDS AN ENTRY IN THE TABLE POINTED TO BY D,E.
                                ;  THE SOUGHT ENTRY IS POINTED TO BY H,L.
                                ;
  20F1    E5                    SEEK1:  PUSH    H       ;SAVE ADDRESS OF STRING
  20F2    1A                            LDAX    D       ;GET BYTE FROM TABLE
  20F3    B7                            ORA     A       ;TEST IT
  20F4    CA 2114                       JZ      SEEK3   ;BRIF END OF TABLE
  20F7    D7                            RST     2       ;COMPARE
  20F8    C2 2104                       JNZ     SEEK2   ;BRIF NOT FOUND
  20FB    E3                            XTHL            ;PUT CURRENT H,L ON STACK
  20FC    CD 1C2D                       CALL    SKP2Z   ;FIND END TO LITERAL IN TABLE
  20FF    13                            INX     D       ;POINT LOW BYTE
  2100    E1                            POP     H       ;RESTORE LINE POINTER
  2101    3C                            INR     A       ;PUT 1 IN A
  2102    B7                            ORA     A       ;RESET Z BIT
  2103    C9                            RET             ;RETURN
  2104    CD 1C2D               SEEK2:  CALL    SKP2Z   ;FIND END OF TABLE LITERAL
  2107    13                            INX     D       ;
  2108    13                            INX     D       ;POINT NEXT LIT IN TABLE
  2109    13                            INX     D       ;
  210A    E1                            POP     H       ;GET ORIGINAL STRING
  210B    1A                            LDAX    D       ;GET BYTE
  210C    17                            RAL             ;HIGH BIT TO CARRY
  210D    D2 20F1                       JNC     SEEK1   ;NOT A FUNCTION SEARCH
  2110    13                            INX     D       ;POINT NEXT BYTE IN FUNCTION TABLE
  2111    C3 20F1                       JMP     SEEK1   ;CONTINUE SEARCH
  2114    E1                    SEEK3:  POP     H       ;RESTORE ORIGINAL STRING
  2115    C9                            RET             ;RETURN
                                        IF      LARGE   ;ASSEMBLE THE REMAINDAR ONLY FOR 8+K
                                ;
                                ;
                                ; EDIT COMMAND
                                ; EDIT <LINE #><DELIMITER><OLD TEXT><DELIMITER><NEW TEXT>
                                ;
  2116                          FIX     EQU     $
                                
  2116    CF                            RST     1       ;SKIP BLANKS
  2117    CD 1BE9                       CALL    PACK    ;GET LINE # IN B,C
	MACRO-80 3.44	09-Dec-81	PAGE	1-99


  211A    CF                            RST     1       ;SKIP BLANKS
  211B    22 259B                       SHLD    ADDR2   ;SAVE COMMAND POINTER
  211E    CD 20C9                       CALL    LOCAT   ;SEARCH FOR LINE # IN PROGRAM
  2121    DA 1D37                       JC      ULERR   ;BRIF NOT FOUND
  2124    E5                            PUSH    H       ;SAVE ADDR OF EXISTING LINE <SOURCE>
  2125    C5                            PUSH    B       ;SAVE LINE #
  2126    46                            MOV     B,M     ;GET LENGTH OF <SOURCE>
  2127    EB                            XCHG            ;D,E POINT <SOURCE>
  2128    21 2467                       LXI     H,STRIN ;POINT STRING BUFFER
  212B    CD 1D85                       CALL    COPYD   ;<SOURCE> TO STRING BUFFER
  212E    3A 2467                       LDA     STRIN   ;LENGTH OF <SOURCE> TO A
  2131    D6 02                         SUI     2       ;ADJUST
  2133    32 2467                       STA     STRIN   ;STORE
  2136    11 2416                       LXI     D,IOBUF+1       ;POINT BUFFER
  2139    2A 259B                       LHLD    ADDR2   ;FETCH COMMAND POINTER
  213C    46                            MOV     B,M     ;FETCH <DELIMITER>
                                ;
                                ; FIND LENGTH OF <OLD TEXT>. STORE IT IN IOBUF.
                                ;
  213D    0E 00                         MVI     C,0     ;INITIAL LENGTH
  213F    23                    FIX1:   INX     H       ;POINT NEXT CHARACTER
  2140    7E                            MOV     A,M     ;FETCH
  2141    B7                            ORA     A       ;TEST
  2142    CA 1D43                       JZ      SNERR   ;MISSING 2ND <DELIMITER>.
  2145    B8                            CMP     B       ;TEST
  2146    CA 214F                       JZ      FIX2    ;BRIF 2ND <DELIMITER> FOUND
  2149    0C                            INR     C       ;ELSE, BUMP C
  214A    12                            STAX    D       ;STORE CHARACTER IN IOBUF
  214B    13                            INX     D       ;BUMP IOBUF POINTER
  214C    C3 213F                       JMP     FIX1    ;CONTINUE
                                ;
                                ; GET READY TO SEARCH <SOURCE> FOR <OLD TEXT>
                                ;
  214F    79                    FIX2:   MOV     A,C     ;LENGTH OF <OT> TO A
  2150    32 2415                       STA     IOBUF   ;STORE
  2153    22 259B                       SHLD    ADDR2   ;SAVE COMMAND POINTER
  2156    3E 03                         MVI     A,3     ;SEARCH WILL START IN POS 3.
  2158    2A 25DA                       LHLD    PROGE   ;POINT END OF PROGRAM
  215B    23                            INX     H       ;BUMP TWICE
  215C    23                            INX     H
  215D    22 2599                       SHLD    ADDR1   ;SAVE EXPR. STACK POINTER
  2160    23                            INX     H       ;POINT NEXT
  2161    11 2415                       LXI     D,IOBUF ;POINT BUFFER AREA
  2164    72                            MOV     M,D     ;STORE ADDRESS
  2165    23                            INX     H
  2166    73                            MOV     M,E
  2167    21 2467                       LXI     H,STRIN ; POINT <SOURCE>
                                ;
                                ; USE THE INSTR ROUTINE TO SEARCH
                                ;
  216A    CD 0F51                       CALL    INST2   ;GO SEARCH
  216D    7B                            MOV     A,E     ;RESULT TO A
  216E    B7                            ORA     A       ;TEST
  216F    CA 1D4B                       JZ      DAERR   ;BR IF NOT FOUND
  2172    4F                            MOV     C,A     ;SAVE POSITION IN C
  2173    3D                            DCR     A       ;ADJUST
	MACRO-80 3.44	09-Dec-81	PAGE	1-100


  2174    47                            MOV     B,A     ;COPY TO B
  2175    21 2468                       LXI     H,STRIN+1       ;POINT <OLD SOURCE>
  2178    11 2416                       LXI     D,IOBUF+1       ;PIONT <NEW LINE AREA>
  217B    CD 1D90                       CALL    COPYH   ;COPY <OLD SOURCE> UP TO <OLD TEXT>
  217E    D5                            PUSH    D       ;SAVE DEST POINTER
                                ;
                                ; SKIP OVER <OLD TEXT> IN <SOURCE>
                                ;
  217F    16 00                         MVI     D,0     ;CLEAR D
  2181    3A 2415                       LDA     IOBUF   ;GET LENGTH OF <OT>
  2184    5F                            MOV     E,A     ;LENGTH TO E
  2185    19                            DAD     D       ;BUMP H,L PAST <OT>
  2186    D1                            POP     D       ;RESTORE <DEST> POINTER
  2187    E5                            PUSH    H       ;SAVE <REMAINING SOURCE> POINTER
                                ;
                                ; APPEND <NEW TEXT> TO <DEST>
                                ;
  2188    2A 259B                       LHLD    ADDR2   ;FETCH COMMAND POINTER
  218B    23                    FIX3:   INX     H       ;POINT NEXT
  218C    7E                            MOV     A,M     ;FETCH CHARACTER
  218D    B7                            ORA     A       ;TEST IT
  218E    CA 2197                       JZ      FIX4    ;BRIF NO MORE <NEW TEXT>
  2191    0C                            INR     C       ;BUMP LENGTH COUNT
  2192    12                            STAX    D       ;STORE CHARACTER
  2193    13                            INX     D       ;BUMP <DEST> POINTER
  2194    C3 218B                       JMP     FIX3    ;CONTINUE
                                ;
                                ; APPEND <REMAINING SOURCE> TO <DEST>
                                ;
  2197    E1                    FIX4:   POP     H       ;GET REMAINING SOURCE POINTER
  2198    7E                    FIX4A:  MOV     A,M     ;FETCH CHARACTER
  2199    B7                            ORA     A       ;TEST
  219A    CA 21A4                       JZ      FIX5    ;BRIF DONE
  219D    12                            STAX    D       ;STORE CHARACTER
  219E    0C                            INR     C       ;BUMP CHAR COUNT
  219F    13                            INX     D       ;BUMP DEST POINTER
  21A0    23                            INX     H       ;BUMP <SOURCE> POINTER
  21A1    C3 2198                       JMP     FIX4A   ;CONTINUE
                                ;
                                ; PREPARE <DEST> FOR SUBMISSION AS NEW LINE
                                ;
  21A4    12                    FIX5:   STAX    D       ;BUFFER TERMINATOR
  21A5    0C                            INR     C       ;BUMP LENGTH COUNT
  21A6    79                            MOV     A,C     ;FETCH COUNT
  21A7    32 2415                       STA     IOBUF   ;STORE IT
  21AA    47                            MOV     B,A     ;COPY COUNT TO B
  21AB    21 23C3                       LXI     H,IMMED ;POINT NEW LINE AREA
  21AE    11 2415                       LXI     D,IOBUF ;POINT WHERE IT IS NOW
  21B1    CD 1D85                       CALL    COPYD   ;COPY IT
  21B4    C1                            POP     B       ;RESTORE LINE #
  21B5    E1                            POP     H       ;RESTORE PROGRAM POINTER
  21B6    E5                            PUSH    H       ;SAVE IT
  21B7    C3 01D9                       JMP     EDIT2   ;PROCESS AS NEW LINE
                                ;PAGE
                                ;
                                ; TAPE CASSETTE COMMANDS
	MACRO-80 3.44	09-Dec-81	PAGE	1-101


                                ;
                                ;
                                ;       TAPE CASSETTE EQUATES
                                ;
  00FF                          SWCH    EQU     0FFH    ;SWITCH PORT
  0003                          CASC    EQU     3       ;STATUS PORT FOR TARBELL
  0000                          CASD    EQU     0       ;DATA PORT
  0004                          CFLAG   EQU     4       ;DATA FLAG FOR TARBELL ON MIO
                                ;
                                ; CASSETTE FILE FORMAT
                                ;
                                ;    EACH RECORD:
                                ;       TYPE BYTE: 4 FOR BASIC PROGRAM,
                                ;                  PLUS BIT 7 ON IF DATA NOT HEADER RECORD
                                ;       LENGTH BYTE: # DATA BYTES (1-128)
                                ;       2 BYTES OF CHECKSUM
                                ;
                                ;    EACH FILE BEGINS WITH A HEADER RECORD
                                ;       TYPE 4
                                ;       LENGTH: 7
                                ;           5 CHARS FILENAME, BLANK-FILLED
                                ;           2 BYTES TOTAL LENGTH OF DATA IN FILE
                                ;       2 BYTES OF CHECKSUM
                                ;
                                ;    AND HAS N DATA RECORDS
                                ;       TYPE: 84
                                ;       LENGTH: 128 EXCEPT LAST RECORD MAY BE LESS
                                ;       DATA: NEXT (LENGTH) BYTES OF IMAGE OF PROGRAM AREA
                                ;       CHECKSUM: 2 BYTES, 2'S COMPLEMENT OF SUM OF BYTES
                                ;
                                ;    FILES OF TYPE OTHER THAN 4 ARE IGNORED BY BASIC
                                ;
                                ; HARDWARE USED:
                                ;       IMSAI MIO BOARD, CASSETTE DATA ON PORT 0,
                                ;       STATUS ON PORT 3,
                                ;       CASSETTE READY JUMPERED TO BIT 2 OF PORT 3.
                                ;
                                ;
                                ;       TAPE UTILITY ROUTINE
                                ;
                                ; WATCH         WAIT FOR TARBELL READY OR CONTROL-C
                                ;
  21BA    C5                    WATCH:  PUSH B          ;SAVE REGS - CPM STATUS CALL CAN CLOBBER
  21BB    D5                            PUSH D
  21BC    E5                            PUSH H
  21BD    CD 1B4D                       CALL    TSTCC   ;TEST FOR CNTRL-C
  21C0    E1                            POP H           ;RESTORE REGS IN CPM DEBUGGING MODE
  21C1    D1                            POP D
  21C2    C1                            POP B
  21C3    DB 03                         IN      CASC    ;READ STATUS PORT
  21C5    E6 04                         ANI     CFLAG   ;TEST
  21C7    CA 21BA                       JZ      WATCH   ;LOOP TILL RE^AADY
  21CA    C9                            RET
                                ;
                                ;
                                ; CASI          CASSETTE INPUT TO A-REGISTER
	MACRO-80 3.44	09-Dec-81	PAGE	1-102


                                ;
  21CB    CD 21BA               CASI:   CALL    WATCH   ;WAIT TIL READY
  21CE    DB 00                         IN      CASD    ;READ FROM DATA PORT
  21D0    C9                            RET
                                ;
                                ;
                                ; RECO          WRITE A RECORD TO THE TARBELL.
                                ;               D,E==>TYPE, LENGTH BYTES
                                ;               H,L==>START OF SOURCE
                                ;               RETURNS UPDATED SOURCE POINTER IN DE
                                ;
  21D1    7A                    RECO:   MOV     A,D     ;TYPE BYTE
  21D2    CD 21F2                       CALL    CASO    ;WRITE IT
  21D5    7B                            MOV     A,E     ;COUNT
  21D6    CD 21F2                       CALL    CASO    ;WRITE IT
  21D9    43                            MOV     B,E     ;COUNT
  21DA    EB                            XCHG            ;SOURCE NOW IN DE
  21DB    21 0000                       LXI     H,0     ;INITIAL CHECKSUM
  21DE    1A                    NCHAR:  LDAX    D       ;FETCH NEXT CHAR
  21DF    CD 21F2                       CALL    CASO    ;WRITE IT
  21E2    13                            INX     D       ;PNT NEXT CHAR
  21E3    CD 21FA                       CALL    CKSUM   ;ADD TO CKSUM, PUT ADD IN LIGHTS
  21E6    05                            DCR     B       ;REDUCE COUNT
  21E7    C2 21DE                       JNZ     NCHAR   ;LOOP ON COUNT
  21EA    2B                            DCX     H       ;ADJUST HL FOR COMPLIMENT
  21EB    7C                            MOV     A,H     ;WRITE CHECKSUM
  21EC    2F                            CMA
  21ED    CD 21F2                       CALL    CASO
  21F0    7D                            MOV     A,L
  21F1    2F                            CMA
                                        ;WRITE LAST BYTE & RETURN
                                ;
                                ;
                                ; CASO          CASSETTE OUTPUT BYTE FROM A-REGISTER
                                ;
  21F2    F5                    CASO:   PUSH PSW
  21F3    CD 21BA                       CALL WATCH      ;WAIT TILL READY
  21F6    F1                            POP PSW
  21F7    D3 00                         OUT CASD        ;WRITE TO DATA PORT
  21F9    C9                            RET
                                ;
                                ;
                                ; CKSUM         CALCULATE THE CHECKSUM:
                                ;               ADD A TO HL
                                ;       ALSO OUTPUS HI ADDR TO SENSE LIGHTS
                                ;
  21FA    85                    CKSUM:  ADD     L       ;ADD PREVIOUS LO
  21FB    6F                            MOV     L,A     ;SAVE NEW LO
  21FC    D0                            RNC
  21FD    24                            INR     H       ;PROPAGATE CARRY
                                ;
                                ;
                                ; SENSE         OUTPUT HI ADDR FROM D TO LIGHTS
                                ;
  21FE    7A                    SENSE:  MOV     A,D
  21FF    2F                            CMA
	MACRO-80 3.44	09-Dec-81	PAGE	1-103


  2200    D3 FF                         OUT     SWCH
  2202    C9                            RET
                                ;
                                ;
                                ; RECI          INPUT A RECORD FROM THE TARBELL
                                ;       TAKES A BUFFER POINTER IN HL
                                ;       RETURNS UPDATED POINTER IN DE,
                                ;               RECORD TYPE IN A, RECORD LENGTH IN C
                                ;               CLOBBERS B,H,L
                                ;
  2203    CD 21CB               RECI:   CALL    CASI    ;GET TYPE
  2206    F5                            PUSH    PSW     ;SAVE TYPE TO RETURN TO CALLER
  2207    CD 21CB                       CALL    CASI    ;GET LENGTH
  220A    4F                            MOV     C,A     ;STORE LEN
  220B    47                            MOV     B,A     ;IN B ALSO
  220C    EB                            XCHG            ;PUT DESTINATION PTR IN DE
  220D    21 0000                       LXI     H,0     ;INITIAL CHECKSUM
  2210    CD 21CB               RECI1:  CALL    CASI    ;INPUT BYTE
  2213    12                            STAX    D       ;STORE IT
  2214    13                    	INX	D
  2215    CD 21FA                       CALL    CKSUM   ;UPDATE CKSUM, PUT ADDR IN LIGHTS
  2218    05                            DCR     B       ;LOOP ON COUNT
  2219    C2 2210                       JNZ     RECI1
  221C    D5                            PUSH    D       ;SAVE DESTINATION PTR
  221D    CD 21CB                       CALL    CASI    ;INPUT CHECKSUM
  2220    57                            MOV     D,A
  2221    CD 21CB                       CALL    CASI
  2224    5F                            MOV     E,A
  2225    19                            DAD     D       ;COMPARE
  2226    7C                            MOV     A,H
  2227    B5                            ORA     L
  2228    C2 1D57                       JNZ     CKERR   ;BRIF CHECKSUM ERROR
  222B    D1                            POP     D       ;RESTORE DEST PTR
  222C    F1                            POP     PSW     ;RESTORE RECORD TYPE BYTE
  222D    C9                            RET
                                ;
                                ;
                                ; CSAVE COMMAND
                                ;
  222E    CF                    CSAVE:  RST     1       ;SKIP ANY SPACES
  222F    3E 10                         MVI     A,10H   ;ENABLE WRITE
  2231    D3 03                         OUT     CASC
  2233    E5                            PUSH    H       ;SAVE PTR
  2234    06 FF                         MVI     B,255   ;WRITE INITIAL 255 NULLS
  2236    AF                            XRA     A
  2237    CD 21F2               NULS:   CALL    CASO
  223A    05                            DCR     B
  223B    C2 2237                       JNZ     NULS
  223E    3E 3C                         MVI     A,3CH   ;START BYTE
  2240    CD 21F2                       CALL    CASO
  2243    06 20                         MVI     B,32    ;32 SYNC BYTES
  2245    3E E6                         MVI     A,0E6H  ;SYNC BYTE VALUE
  2247    CD 21F2               SYNCS:  CALL    CASO
  224A    05                            DCR     B
  224B    C2 2247                       JNZ     SYNCS
  224E    21 2415                       LXI     H,IOBUF ;POINT BUFFER
	MACRO-80 3.44	09-Dec-81	PAGE	1-104


  2251    06 05                         MVI     B,5     ;FILE NAME LENGTH
  2253    D1                            POP     D       ;RESTORE CMD PTR
  2254    36 20                 FNAME:  MVI     M,20H   ;DEFAULT BLANK
  2256    1A                            LDAX    D       ;FETCH FILE NAME
  2257    B7                            ORA     A       ;TEST
  2258    CA 225D                       JZ      BLANK
  225B    77                            MOV     M,A     ;STORE CHAR
  225C    13                            INX     D       ;NAME PTR
  225D    23                    BLANK:  INX     H       ;BUFFER PTR
  225E    05                            DCR     B       ;COUNT
  225F    C2 2254                       JNZ     FNAME
                                ;
                                ; CALCULATE LGTH OF PROGRAM FILE&WRITE IT ON THE HEADER
                                ;
  2262    11 280C                       LXI     D,BEGPR ;BEGINNING OF PROGRAM
  2265    2A 25DA                       LHLD    PROGE   ;END
  2268    7D                            MOV     A,L
  2269    93                            SUB     E
  226A    6F                            MOV     L,A
  226B    7C                            MOV     A,H
  226C    9A                            SBB     D
  226D    67                            MOV     H,A
  226E    23                            INX     H       ;PLUS 1 TO GET # OF BYTES INCLUSIVE
  226F    E5                            PUSH    H       ;SAVE FOR LATER
  2270    22 241A                       SHLD    IOBUF+5 ;STUFF LENGTH
  2273    11 0407                       LXI     D,407H  ;TYPE AND LEN OF HEADER RECORD
                                                        ;TYPE 4: BASIC PROG FILE, HEADER RCD
  2276    21 2415                       LXI     H,IOBUF
  2279    CD 21D1                       CALL    RECO    ;WRITE RECORD
                                ;
                                ; WRITE PROGRAM FILE
                                ;
  227C    21 280C                       LXI     H,BEGPR ;POINT START OF PROGRAM
  227F    E3                    NXTRC:  XTHL            ;GET REMAINING LENGTH
  2280    7C                            MOV     A,H     ;GET HI REMAINING
  2281    B5                            ORA     L       ;TEST FOR DONE
  2282    CA 229D                       JZ      ERITE   ;BRIF DONE
  2285    11 FF80                       LXI     D,0FF80H;-128
  2288    19                            DAD     D       ;SUBTRACT RECORD LENGTH
  2289    DA 2293                       JC      RITE    ;IF CARRY, NOT AT END
  228C    7D                            MOV     A,L     ;GET LOW
  228D    E6 7F                         ANI     7FH     ;NUMBER BYTES LEFT
  228F    5F                            MOV     E,A     ;COUNT
  2290    21 0000                       LXI     H,0     ;REMAINING BYTES
  2293    E3                    RITE:   XTHL            ;RESTORE H
  2294    16 84                         MVI     D,084H  ;TYPE BYTE: 80=DATA RECORD (NOT
                                                        ;FILE HDR), 4=BASIC PROGRAM FILE.
  2296    CD 21D1                       CALL    RECO    ;WRITE
  2299    EB                            XCHG            ;SAVE SOURCE PTR
  229A    C3 227F                       JMP     NXTRC
  229D    E1                    ERITE:  POP     H       ;CLEAN STACK
                                ;
                                ;
                                ; BELL          RING USER'S CHIMES
                                ;
  229E    3E 07                 BELL:   MVI     A,7     ;CODE FOR BELL
	MACRO-80 3.44	09-Dec-81	PAGE	1-105


  22A0    CD 1A39                       CALL    TESTO
  22A3    C3 019F                       JMP     RDY
                                        ;PAGE
                                ; CLOAD         LOAD A PROGRAM FROM THE TARBELL
                                ;
  22A6                          CLOAD:
  22A6    3E 60                 NULL1:  MVI     A,60H   ;MIO CONTROL TO READ BY BITS
  22A8    D3 03                         OUT     CASC    ;WRITE TO STATUS PORT
  22AA    CD 21CB               NULLS:  CALL    CASI    ;READ LEADING NULLS
  22AD    D3 FF                         OUT     SWCH    ;PUT IN LIGHTS
  22AF    FE E6                         CPI     0E6H    ;WAIT FOR FIRST SYNC BYTE
  22B1    C2 22AA                       JNZ     NULLS
  22B4    3E 20                         MVI     A,20H   ;MIO CONTROL TO READ BY BYTES
  22B6    D3 03                         OUT     CASC    ;WRITE TO STATUS PORT
  22B8    06 1F                         MVI     B,31    ;NUMBER REMAINING SYNC BYTES
  22BA    CD 21CB               SYNC:   CALL    CASI    ;READ PAST SYNC
  22BD    D3 FF                         OUT     SWCH
  22BF    FE E6                         CPI     0E6H
  22C1    C2 22A6                       JNZ     NULL1   ;TRY FOR MORE NULLS
  22C4    05                            DCR     B
  22C5    C2 22BA                       JNZ     SYNC
  22C8    21 2415                       LXI     H,IOBUF ;POINT BUFFER
  22CB    CD 2203                       CALL    RECI    ;READ A RECORD
  22CE    FE 04                         CPI     4       ;TEST TYPE BYTE: IS IT BASIC PROGRAM
                                                        ;..FILE HEADER RECORD?
  22D0    C2 22A6                       JNZ     NULL1   ;NO, START OVER, KEEP LOOKING
  22D3    2A 241A                       LHLD    IOBUF+5 ;LOAD LENGTH OF PROGRAM FILE
  22D6    E5                            PUSH    H       ;SAVE
  22D7    21 280C                       LXI     H,BEGPR
  22DA    CD 2203               NXTR:   CALL    RECI    ;READ RECORD
  22DD    FE 84                         CPI     84H     ;IS IT BASIC PROGRAM FILE DATA RECORD
  22DF    C2 1D57                       JNZ     CKERR   ;NO, SOMETHING'S WRONG.
  22E2    E1                            POP     H       ;LENGTH
                                        ;SUBTRACT 0,C  FROM HL
  22E3    7D                            MOV     A,L
  22E4    91                            SUB     C
  22E5    6F                            MOV     L,A
  22E6    7C                            MOV     A,H
  22E7    0E 00                         MVI     C,0
  22E9    99                            SBB     C
  22EA    67                            MOV     H,A
  22EB    B5                            ORA     L       ;TEST RESULT FOR 0
  22EC    EB                            XCHG            ;BUFFER ADDR TO HL
  22ED    D5                            PUSH    D       ;SAVE REMAINING LENGTH
  22EE    C2 22DA                       JNZ     NXTR    ;JIF NOT DONE READING DATA
  22F1    D1                            POP     D       ;CLEAR STACK
                                ;LOADING DONE. SET POINTER TO END OF PROGRAM.
  22F2    AF                            XRA     A
  22F3    77                            MOV     M,A     ;EXTRA 0 FOR PARANOISA
  22F4    2B                            DCX     H       ;POINT LAST RECORD BYTE (SHOULD BE 0)
  22F5    22 25DA                       SHLD    PROGE   ;SAVE END OF PROG FOR EDIT, LIST, &C
  22F8    32 241A                       STA     IOBUF+5 ;MARK END OF FILE NAME FOR TYPEOUT
                                ;TYPE FILE NAME
  22FB    3A 2415                       LDA     IOBUF
  22FE    FE 20                         CPI     20H     ;TEST FOR NO NAME
  2300    C4 1AC8                       CNZ     TERMO   ;PRINT NAME IF THERE
	MACRO-80 3.44	09-Dec-81	PAGE	1-106


  2303    C3 229E                       JMP     BELL
                                        ENDIF
                                ;
  2306                          PEEK    EQU     $
                                ;
                                ; STMT: A=PEEK(X). RETURNS DECIMAL VALUE OF MEMORY ADDRESS X.
                                ;
  2306    CD 20A0                       CALL    FACDE   ;GET ADDRESS IN D,E
  2309    EB                            XCHG            ;ADDRESS TO H,L
  230A    11 0000                       LXI     D,0     ;CLEAR D,E
  230D    5E                            MOV     E,M     ;PUT MEMORY BYTE IN E
  230E    C3 1DC1                       JMP     BINFL   ;CONVERT D,E TO BINARY AND RETURN
                                ;
  2311                          POKE    EQU     $
                                ;
                                ; STMT: POKE <ADDRESS>,<VALUE>.  PUTS IN MEMORY ADDRESS.
                                ;
  2311    CD 1071                       CALL    EXPR    ;EVALUATE ADDRESS EXPRESSION
  2314    7E                            MOV     A,M     ;LOAD NEXT CHARACTER
  2315    FE 2C                         CPI     ','     ;TEST
  2317    C2 1D43                       JNZ     SNERR   ;BRIF ERROR
  231A    23                            INX     H       ;POINT NEXT
  231B    E5                            PUSH    H       ;SAVE H,L
  231C    CD 20A0                       CALL    FACDE   ;PUT ADDRESS IN D,E
  231F    E1                            POP     H       ;RESTORE H,L
  2320    D5                            PUSH    D       ;SAVE ADDRESS
  2321    CD 1071                       CALL    EXPR    ;EVALUATE VALUE EXPRESSION
  2324    CD 1BC8                       CALL    EOL     ;TEST FOR END OF LINE
  2327    CD 1D9E                       CALL    FBIN    ;CONVERT FACC TO A REGISTER VALUE
  232A    E1                            POP     H       ;GET D,E ADDRESS IN H,L
  232B    77                            MOV     M,A     ;MOVE BYTE
  232C    C3 02EC                       JMP     RUN     ;CONTINUE
                                ;
                                ;
  232F                          JUMP    EQU     $
                                ;
                                ; STMT: CALL <ADDRESS>. EXECUTES CODE AT MEMORY ADDRESS.
                                ;
  232F    CD 1071                       CALL    EXPR    ;EVALUATE ADDRESS EXPRESSION
  2332    CD 1BC8                       CALL    EOL     ;TEST FOR END OF LINE
  2335    CD 20A0                       CALL    FACDE   ;CONVERT FACC TO ADDRESS IN D,E
  2338    21 02EC                       LXI     H,RUN   ;MAKE INTO SUBROUTINE
  233B    E5                            PUSH    H
  233C    EB                            XCHG            ;MOVE ADDRESS TO HL
  233D    E9                            PCHL            ;EXECUTE USER'S ROUTINE
                                ;PAGE
                                        IF      HUNTER
                                ;
                                ;
                                BAUD    EQU     $
                                ;
                                ; SOFTWARE BAUD SELECTION ON SIO BOARDS MODIFIED BY
                                ; W. HARTER, COYOTE COMPUTERS, DAVIS, CALIF.
                                ;
                                ; COMMAND 'BAUD <RATE>' WHERE <RATE>=110,300,1200,2400,9600
                                ;
	MACRO-80 3.44	09-Dec-81	PAGE	1-107


                                        RST     1       ;SKIP BLANKS
                                        LXI     D,BAUDS+6       ;POINT BAUD TABLE
                                        CALL    SEEK    ;GO SEARCH BAUD TABLE
                                        JZ      CVERR   ;BRIF RATE NOT FOUND
                                        DCX     H       ;ADJUST POINTER
                                BAUD1:  INX     H       ;LOOK AT CHARACTER
                                        CALL    NUMER   ;TEST FOR DIGIT
                                        JZ      BAUD1   ;LOOP PAST RATE
                                        CALL    EOL     ;TEST FOR END OF LINE
                                        XCHG            ;POINT ADDRESS OF CONTROL BYTES
                                        MOV     E,M     ;LOW BYTE TO E
                                        INX     H       ;POINT NEXT
                                        MOV     D,M     ;HIGH BYTE TO D
                                        LDA     EDSW    ;GET MODE SWITCH
                                        ORA     A       ;TEST IT
                                        JNZ     SETIT   ;BRIF IMMEDIATE MODE
                                        LXI     H,BAUDS ;POINT 'BAUD'
                                        CALL    TERMM   ;WRITE IT
                                        PUSH    D       ;SAVE ADDRESS OF CONTROL BYTES
                                        LXI     H,IOBUF ;POINT BUFFER
                                        MVI     B,4     ;LOAD COUNT
                                        CALL    COPYD   ;COPY RATE TO IOBUF
                                        MVI     M,0     ;TERMINATE MESSAGE
                                        CALL    TERMO   ;WRITE IT
                                        POP     D       ;RESTORE CONTROL BYTES
                                SETIT:  LXI     H,4     ;LOAD OFFSET
                                        DAD     D       ;PIONT 1ST CONTROL BYTE
                                        MVI     A,40H   ;LOAD RESET
                                        OUT     TTY+1   ;WRITE IT
                                        MVI     A,M     ;MODE BYTE
                                        OUT     TTY+1   ;WRITE IT
                                        MVI     A,17H   ;ENABLE BYTE
                                        OUT     TTY+1   ;WRITE IT
                                        INX     H       ;POINT SPEED BYTE
                                        MOV     A,M     ;LOAD IT
                                        OUT     8       ;WRITE IT
                                BAUD2:  IN      TTY+1   ;READ STATUS
                                        ANI     2       ;TEST
                                        JZ      BAUD2   ;WAIT FOR ACKNOWLEDGMENT
                                        IN      TTY     ;READ AND DISCARD
                                        LDA     EDSW    ;GET MODE SWITCH
                                        ORA     A       ;TEST IT
                                        JZ      RUN     ;BRIF RUN MODE
                                        JMP     GETCM   ;BRIF IMMEDIATE MODE
                                BAUDS:  DB      'BAUD',0FEH     ;BAUD MESSAGE
                                ;
                                ; BAUD TABLE.
                                ;
                                B110:   DB      '110 ',0FAH,2,0
                                        DW      B110
                                B300:   DB      '300 ',0FBH,0
                                        DW      B300
                                B1200:  DB      '1200',0FAH,0
                                        DW      B1200
                                B2400:  DB      '2400',0FAH,32,0
                                        DW      B2400
	MACRO-80 3.44	09-Dec-81	PAGE	1-108


                                B9600:  DB      '9600',0FAH,34,0
                                        DW      B9600
                                        DB      0       ;END OF BAUD TABLE
                                ;
                                        ENDIF
                                ;
                                        IF      CPM     ;CPM INITIALIZATION STORES
                                                        ;...BIOS JUMP TABLE HERE
  233E                          BTSTAT: DS      3       ;JMP TO BIOS CONSOLE STATUS
  2341                          BTIN:   DS      3       ;JMP TO BIOS CONSOLE INPUT
  2344                          BTOUT:  DS      3       ;JMP TO BIOS CONSOLE OUTPUT
                                        ENDIF
                                ;PAGE
  2346                          ROMEN   EQU     $-1
                                ;
                                ; RSV-DO NOT NEED TO ROM CODE
                                ;
                                ;       ORG     8192    ;RAM STARTS OF 8K BOUNDARY
                                ;       IF      LARGE   ;ADJUST START OF RAM IF 8+K
                                ;       ORG     2400H   ;RAM STARTS ON 9K BOUNDARY
                                ;       ELSE
                                ;       IF      CPM   ;ADJUST START OF RAM IF 8+K
                                ;       ORG     2400H   ;RAM STARTS ON 9K BOUNDARY
                                ;       ENDIF
                                ;       ENDIF
                                ;
                                ; ALL CODE ABOVE THIS POINT IS READ ONLY AND CAN BE PROM'ED
                                ;
                                ;
  2347                          RAM     EQU     $
                                ;
  2347                          BZERO   EQU     $
  2347                          FORNE:  DS      1       ;# ENTRYS IN TABLE (MUST BE HERE)
  2348                                  DS      112     ;ROOM FOR 8 NESTS (MUST BE HERE)
  23B8                          TAPES:  DS      1       ;TAPE SWITCH (MUST BE HERE) 1=READ FROM TAPE,2=PUNCH ON TAPE
  23B9                          DIMSW:  DS      1       ;DIM SWITCH (MUST BE HERE)
  23BA                          OUTSW:  DS      1       ;OUTPUT SWITCH (MUST BE HERE)
  23BB                          ILSW:   DS      1       ;INPUT LINE SWITCH (MUST BE HERE)
  23BC                          RUNSW:  DS      1       ;RUN SWITCH(MUST BE HERE)
  23BD                          EDSW:   DS      1       ;MODE SWITCH(MUST BE HERE)
  23BE                          EZERO   EQU     $
                                ;
  23BE                          LINEN:  DS      5
  23C3                          IMMED:  DS      82      ;IMMEDIATE COMMAND STORAGE AREA
  2415                          IOBUF:  DS      82      ;INPUT/OUTPUT BUFFER
  2467                          STRIN:  DS      256     ;STRING BUFFER AREA
  2567                          OUTA:   DS      3       ;*** FILLED IN AT RUN TIME
  256A                          INDX:   DS      2       ;HOLDS VARIABLE NAME OF FOR/NEXT
  256C                          REL:    DS      1       ;HOLDS THE RELATION IN AN IF STMT
  256D                          IFTYP:  DS      1       ;HOLDS TYPE CODE OF LEFT SIDE
  256E                          TVAR1:  DS      4       ;TEMP STORAGE
  2572                          TVAR2:  DS      4       ;DITTO
  2576                          TEMP1:  DS      4       ;TEMP STORAGE FOR FUNCTIONS
  257A                          TEMP2:  DS      4
  257E                          TEMP3:  DS      4
  2582                          TEMP4:  DS      4
	MACRO-80 3.44	09-Dec-81	PAGE	1-109


  2586                          TEMP5:  DS      4
  258A                          TEMP6:  DS      4
  258E                          TEMP7:  DS      4
  2592                          LINEL:  DS      2       ;HOLDS MIN LINE NUMBER IN LIST
  2594                          LINEH:  DS      2       ;HOLDS MAX LINE NUMBER IN LIST
  2596                          PROMP:  DS      1       ;HOLDS PROMPT CHAR
  2597                          EXPRS:  DS      2       ;HOLDS ADDR OF EXPRESSION
  2599                          ADDR1:  DS      2       ;HOLDS TEMP ADDRESS
  259B                          ADDR2:  DS      2       ;HOLDS TEMP ADDRESS
  259D                          ADDR3:  DS      2       ;HOLDS STMT ADD DURING EXPR EVAL
  259F                          FACC:   DS      4
  25A3                          FTEMP:  DS      12
  25AF                          PARCT:  DS      1
  25B0                          SPCTR:  DS      2
  25B2                          CMACT:  DS      1       ;COUNT OF COMMAS
  25B3                          FNARG:  DS      4       ;SYMBOLIC ARG & ADDRESS
  25B7                          STMT:   DS      2       ;HOLDS ADDR OF CURRENT STATEMENT
  25B9                          ENDLI:  DS      2       ;HOLDS ADDR OF MULTI STMT PTR
  25BB                          MULTI:  DS      1       ;SWITCH 0=NO, 1=MULTI STMT LINE
  25BC                          DEXP:   DS      1
  25BD                          COLUM:  DS      1       ;CURRENT TTY COLUMN
  25BE                          RNDX:   DS      2       ;RANDOM VARIABLE STORAGE
  25C0                          RNDY:   DS      2       ;THE RND<X>,TRND<X>,AND RNDSW
  25C2                          RNDZ:   DS      2       ;MUST BE KEPT IN ORDER
  25C4                          RNDS:   DS      2
  25C6                          TRNDX:  DS      2
  25C8                          TRNDY:  DS      2
  25CA                          TRNDZ:  DS      2
  25CC                          TRNDS:  DS      2
  25CE                          RNDSW:  DS      1
  25CF                          FNMOD:  DS      1       ;SWITCH, 0=NOT, <>0 = IN DEF FN
  25D0                          LINE:   DS      2       ;HOLD ADD OF PREV LINE NUM
  25D2                          STACK:  DS      2       ;HOLDS ADDR OF START OF RETURN STACK
  25D4                          PRSW:   DS      1       ;ON=PRINT ENDED WITH , OR ;
  25D5                          NS:     DS      1       ;HOLDS LAST TYPE (NUMERIC/STRING)
  25D6                          DATAP:  DS      2       ;ADDRESS OF CURRENT DATA STMT
  25D8                          DATAB:  DS      2       ;ADDRESS OF DATA POOL
  25DA                          PROGE:  DS      2       ;ADDRESS OF PROGRAM END
                                ;
                                        IF      CPM
                                        
                                ;TEMPORARY CODE FOR INITIALIZATION HERE
                                ;
  25DC    2A 0001               INITC:  LHLD    BOOT+1  ;PTR TO BIOS TABLE
  25DF    11 0003                       LXI     D,CSTAT ;OFFSET OF CONSOLE QUERY ENTRY
  25E2    19                            DAD     D       ;POINT INTO BIO JUMP TABLE
  25E3    11 233E                       LXI     D,BTSTAT;POINT INTO BASIC JMP TABLE
  25E6    06 09                         MVI     B,9     ;COUNT
  25E8    CD 1D90                       CALL    COPYH   ;MOE BIOS TABLE INTO BASIC
  25EB    3E C3                         MVI     A,0C3H  ;JMP OP CODE
  25ED    21 0103                       LXI     H,RST1
  25F0    32 0008                       STA 8H
  25F3    22 0009                       SHLD 9H
  25F6    21 010B                       LXI     H,RST2
  25F9    32 0010                       STA 10H
  25FC    22 0011                       SHLD 11H
	MACRO-80 3.44	09-Dec-81	PAGE	1-110


  25FF    21 0113                       LXI     H,RST3
  2602    32 0018                       STA 18H
  2605    22 0019                       SHLD 19H
  2608    21 011B                       LXI     H,RST4
  260B    32 0020                       STA 20H
  260E    22 0021                       SHLD 21H
  2611    21 0123                       LXI     H,RST5
  2614    32 0028                       STA 28H
  2617    22 0029                       SHLD 29H
  261A    21 012B                       LXI     H,RST6
  261D    32 0030                       STA 30H
  2620    22 0031                       SHLD 31H
  2623    CD 265A                       CALL    CLRFCB  ;RSV-MARK FCB AS NO FILE OPEN
  2626    2A 0006                       LHLD    BDOS+1  ;LOCATE TOP OF RAM
  2629    C3 0178                       JMP     INIT1   ;CONTINUE AS IN NON-CPM VERSION
                                        ENDIF
                                ;
                                ; RSV-OPENF/CLOSEF FUNCTIONS FOR LOAD/SAVE FILE UNDER CPM 
                                ;     RETURNS 0 ON OK, NOT ZERO ON I/O ERROR
                                ;
                                        .Z80
                                
  001A                          CNTRLZ	EQU	1AH		;control-z (end-of-file mark)
                                
  262C    3A 005C               TAPIN:	LD	A,(FCB)		;READ CHAR FROM FILE
  262F    FE FF                 	CP	255		;IF (FCB)=FF THERE IS NO FILE OPEN
  2631    CA 264E               	JP	Z,TAPBRK	;IF NO FILE OPEN END TAPE READ
  2634    CD 2677               	CALL	TYPE1		;GET CHAR FROM FILE C=CHAR, A=0 OK, A<>0 ERROR/EOF
  2637    B7                    	OR	A
  2638    C2 264E               	JP	NZ,TAPBRK	;IF ERROR/EOF->RETURN ^C TO CALLER
  263B    79                    	LD	A,C
  263C    FE 0D                 	CP      13
  263E    C0                    	RET	NZ		;RET IF CHAR FROM FILE NOT <CR>
  263F    0E 06                         LD	C,6		;CHAR FROM FILE=<CR> -> CHECK KBD FOR ^C
  2641    1E FF                         LD	E,255
  2643    CD 0005                       CALL    BDOS
  2646    FE 03                         CP	3
  2648    CA 264E                       JP	Z,TAPBRK	;IF ^C PRESSED->RETURN ^C TO CALLER
  264B    3E 0D                         LD	A,13
  264D    C9                    	RET
  264E    3E 03                 TAPBRK:	LD	A,3
  2650    C9                    	RET	
                                        
  2651    3A 005C               CLOSEF: LD	A,(FCB)		;IF (FCB)=FF THERE IS NO FILE OPEN
  2654    FE FF                 	CP	255
  2656    C8                    	RET	Z
  2657    CD 2791               	CALL	CLOSFCB		;  ELSE CLOSE FILE IN FCB
  265A    3E FF                 CLRFCB:	LD	A,255
  265C    32 005C               	LD	(FCB),A
  265F    C9                    	RET
                                        
  2660    CD 26AA               OPENFR:	CALL	CONVERT		;convert file name.
  2663    B7                    	OR	A
  2664    C2 269F               	JP	NZ,TYPERR	;wild cards not allowed.
  2667    CD 2772               	CALL	OPENFCB		;open the file.
  266A    FE FF                 	CP	255
	MACRO-80 3.44	09-Dec-81	PAGE	1-111


  266C    CA 269F               	JP	Z,TYPERR	;not there?
  266F    21 27AC               	LD	HL,NBYTES	;initialize byte counter.
  2672    36 FF                 	LD	(HL),0FFH	;set to read first sector.	
  2674    3E 00                 	LD 	A,0		;return A=0 -> OK
  2676    C9                    	RET
                                	
  2677    21 27AC               TYPE1:	LD	HL,NBYTES
  267A    7E                    TYPE2:	LD	A,(HL)		;have we written the entire sector?
  267B    FE 80                 	CP	128
  267D    DA 268B               	JP	C,TYPE3
  2680    E5                    	PUSH	HL		;yes, read in the next one.
  2681    CD 277F               	CALL	READFCB
  2684    E1                    	POP	HL
  2685    B7                    	OR	A
  2686    C2 269F               	JP	NZ,TYPERR	;end or error?
  2689    AF                    	XOR	A		;ok, clear byte counter.
  268A    77                    	LD	(HL),A
  268B    34                    TYPE3:	INC	(HL)		;count this byte.
  268C    21 0080               	LD	HL,TBUFF	;and get the (A)th one from the buffer (TBUFF).
  268F    CD 26A5               	CALL	ADDHL
  2692    7E                    	LD	A,(HL)
  2693    4F                    	LD      C,A
  2694    FE 1A                 	CP	CNTRLZ		;end of file mark?
  2696    CA 269F               	JP	Z,TYPERR
  2699    3E 00                 	LD 	A,0		;return A=0 -> OK
  269B    C9                    	RET			; C=CHAR READ
                                ;
                                ;   Get here on an end of file or read error or open error.
                                ;
  269C    CD 2791               TYPERR2:CALL	CLOSFCB
  269F    CD 265A               TYPERR:	CALL	CLRFCB
  26A2    3E FF                   	LD	A,255		;eof found
  26A4    C9                            RET
                                ;
                                ;   Add (HL)=(HL)+(A)
                                ;
  26A5    85                    ADDHL:	ADD	A,L
  26A6    6F                    	LD	L,A
  26A7    D0                    	RET	NC		;take care of any carry.
  26A8    24                    	INC	H
  26A9    C9                    	RET	
                                ;
                                ;   Convert the name in (de) to (FCB).
                                ;   Format a file name (convert * to '?', etc.). On return,
                                ; (A)=0 is an unambigeous name was specified. Enter with (A) equal to
                                ; the position within the fcb for the name (either 0 or 16).
                                ;
  26AA    21 005C               CONVERT:LD	HL,FCB
  26AD    1A                    	LD	A,(DE)		;get first character of filename
  26AE    B7                    	OR	A
  26AF    C2 26B5               	JP	NZ,CONVRT1
  26B2    3E 01                 	LD	A,1		;error: empty filename
  26B4    C9                    	RET
  26B5    DE 40                 CONVRT1:SBC	A,'A'-1		;might be a drive name, convert to binary.
  26B7    47                    	LD	B,A		;and save.
  26B8    13                    	INC	DE		;check next character for a ':'.
	MACRO-80 3.44	09-Dec-81	PAGE	1-112


  26B9    1A                    	LD	A,(DE)
  26BA    FE 3A                 	CP	':'
  26BC    CA 26C6               	JP	Z,CONVRT2
  26BF    1B                    	DEC	DE		;nope, move pointer back to the start of the line.
  26C0    3E 00                 	LD	A,0             ;default drive
  26C2    77                    	LD	(HL),A
  26C3    C3 26C8               	JP	CONVRT3
  26C6    70                    CONVRT2:LD	(HL),B
  26C7    13                    	INC	DE
                                ;
                                ;   Convert the basic file name.
                                ;
  26C8    06 08                 CONVRT3:LD	B,08H
  26CA    CD 2759               CONVRT4:CALL	CHECK
  26CD    CA 26EB               	JP	Z,CONVRT8
  26D0    23                    	INC	HL
  26D1    FE 2A                 	CP	'*'		;note that an '*' will fill the remaining
  26D3    C2 26DB               	JP	NZ,CONVRT5	;field with '?'.
  26D6    36 3F                 	LD	(HL),'?'
  26D8    C3 26DD               	JP	CONVRT6
  26DB    77                    CONVRT5:LD	(HL),A
  26DC    13                    	INC	DE
  26DD    05                    CONVRT6:DEC	B
  26DE    C2 26CA               	JP	NZ,CONVRT4
  26E1    CD 2759               CONVRT7:CALL	CHECK		;get next delimiter.
  26E4    CA 26F2               	JP	Z,GETEXT
  26E7    13                    	INC	DE
  26E8    C3 26E1               	JP	CONVRT7
  26EB    23                    CONVRT8:INC	HL		;blank fill the file name.
  26EC    36 20                 	LD	(HL),' '
  26EE    05                    	DEC	B
  26EF    C2 26EB               	JP	NZ,CONVRT8
                                ;
                                ;   Get the extension and convert it.
                                ;
  26F2    06 03                 GETEXT:	LD	B,03H
  26F4    FE 2E                 	CP	'.'
  26F6    C2 271B               	JP	NZ,GETEXT5
  26F9    13                    	INC	DE
  26FA    CD 2759               GETEXT1:CALL	CHECK
  26FD    CA 271B               	JP	Z,GETEXT5
  2700    23                    	INC	HL
  2701    FE 2A                 	CP	'*'
  2703    C2 270B               	JP	NZ,GETEXT2
  2706    36 3F                 	LD	(HL),'?'
  2708    C3 270D               	JP	GETEXT3
  270B    77                    GETEXT2:LD	(HL),A
  270C    13                    	INC	DE
  270D    05                    GETEXT3:DEC	B
  270E    C2 26FA               	JP	NZ,GETEXT1
  2711    CD 2759               GETEXT4:CALL	CHECK
  2714    CA 2722               	JP	Z,GETEXT6
  2717    13                    	INC	DE
  2718    C3 2711               	JP	GETEXT4
  271B    23                    GETEXT5:INC	HL
  271C    36 20                 	LD	(HL),' '
	MACRO-80 3.44	09-Dec-81	PAGE	1-113


  271E    05                    	DEC	B
  271F    C2 271B               	JP	NZ,GETEXT5
  2722    06 03                 GETEXT6:LD	B,3
  2724    23                    GETEXT7:INC	HL
  2725    36 00                 	LD	(HL),0
  2727    05                    	DEC	B
  2728    C2 2724               	JP	NZ,GETEXT7
                                ;
                                ; Check to see if this is an ambigeous file name specification.
                                ; Set the (A) register to non zero if it is.
                                ;
  272B    01 000B               	LD	BC,11		;set name length.
  272E    21 005C               	LD	HL,FCB	
  2731    23                    GETEXT8:INC	HL
  2732    7E                    	LD	A,(HL)
  2733    FE 3F                 	CP	'?'		;any question marks?
  2735    C2 2739               	JP	NZ,GETEXT9
  2738    04                    	INC	B		;count them.
  2739    0D                    GETEXT9:DEC	C
  273A    C2 2731               	JP	NZ,GETEXT8
  273D    78                    	LD	A,B
  273E    B7                    	OR	A
  273F    C0                    	RET     NZ		;do niot allow ? in filename
  2740    3A 005C               	LD 	A,(FCB)
  2743    B7                    	OR	A
  2744    CA 2750               	JP	Z,GETEXTA
  2747    3D                    	DEC	A
  2748    5F                    	LD	E,A
  2749    0E 0E                 	LD	C,14		;DSKSEL
  274B    CD 0005               	CALL	BDOS		
  274E    B7                    	OR	A
  274F    C0                    	RET	NZ		;not ready?
  2750    11 0080               GETEXTA:LD	DE,TBUFF
  2753    0E 1A                 	LD	C,26		;SETDMA
  2755    CD 0005               	CALL 	BDOS
  2758    C9                    	RET	
                                ;
                                ; Check character at (DE) for legal command input. Note that the
                                ; zero flag is set if the character is a delimiter.
                                ;
  2759    1A                    CHECK:	LD	A,(DE)
  275A    B7                    	OR	A
  275B    C8                    	RET	Z
  275C    FE 3D                 	CP	'='
  275E    C8                    	RET	Z
  275F    FE 5F                 	CP	'_'
  2761    C8                    	RET	Z
  2762    FE 2E                 	CP	'.'
  2764    C8                    	RET	Z
  2765    FE 3A                 	CP	':'
  2767    C8                    	RET	Z
  2768    FE 3B                 	CP	';'
  276A    C8                    	RET	Z
  276B    FE 3C                 	CP	'<'
  276D    C8                    	RET	Z
  276E    FE 3E                 	CP	'>'
	MACRO-80 3.44	09-Dec-81	PAGE	1-114


  2770    C8                    	RET	Z
  2771    C9                    	RET	
                                ;
                                ;   Routine to open file at (FCB).
                                ;
  2772    AF                    OPENFCB:XOR	A		;clear the record number byte at fcb+32
  2773    32 007C               	LD	(FCB+32),A
  2776    11 005C               	LD	DE,FCB
  2779    0E 0F                 	LD	C,15
  277B    CD 0005               	CALL 	BDOS
  277E    C9                    	RET
                                ;
                                ;   Routine to read file at (FCB).
                                ;
  277F    11 005C               READFCB:LD	DE,FCB
  2782    0E 14                 	LD	C,20
  2784    CD 0005               	CALL 	BDOS
  2787    C9                    	RET
                                
  2788    11 005C               WRTFCB: LD	DE,FCB
  278B    0E 15                 	LD	C,21
  278D    CD 0005               	CALL 	BDOS
  2790    C9                    	RET
                                ;
                                ;   Routine to close file at (FCB).
                                ;
  2791    11 005C               CLOSFCB:LD	DE,FCB
  2794    0E 10                 	LD	C,16
  2796    CD 0005               	CALL 	BDOS
  2799    C9                    	RET
                                
  279A    11 005C               DELFCB: LD	DE,FCB
  279D    0E 13                 	LD	C,19
  279F    CD 0005               	CALL 	BDOS
  27A2    C9                    	RET
                                
  27A3    11 005C               CREAFCB:LD	DE,FCB
  27A6    0E 16                 	LD	C,22
  27A8    CD 0005               	CALL 	BDOS
  27AB    C9                    	RET
                                
                                ;
                                ; File control block setup by the CCP.
                                ;
  005C                          FCB	EQU	5CH		;default file control block.
  0080                          TBUFF	EQU	80H		;i/o buffer and command line storage.
  27AC    0000                  NBYTES:	DW	0		;byte counter used by tape command
  27AE    00                    CH:	DB	0		;save char
                                
  27AF    CD 26AA               OPENFW:	CALL	CONVERT		;convert file name.
  27B2    C2 269F               	JP	NZ,TYPERR	;wild cards not allowed.
  27B5    CD 279A               	CALL	DELFCB		;delete file
  27B8    CD 27A3               	CALL	CREAFCB		;and create it again.
  27BB    FE FF                 	CP	255
  27BD    CA 269F               	JP	Z,TYPERR	;can't create?
  27C0    AF                    	XOR	A		;clear record number byte.
	MACRO-80 3.44	09-Dec-81	PAGE	1-115


  27C1    32 007C               	LD	(FCB+32),A
  27C4    32 27AC               	LD	(NBYTES),A
  27C7    C9                    	RET
                                
  27C8    32 27AE               SAV1:	LD	(CH),A
  27CB    3A 27AC               	LD	A,(NBYTES)
  27CE    FE 80                 	CP	128
  27D0    C2 27DD               	JP	NZ,SAV1A
  27D3    CD 2788               	CALL	WRTFCB
  27D6    B7                    	OR	A
  27D7    C2 269C               	JP	NZ,TYPERR2
  27DA    32 27AC               	LD	(NBYTES),A
  27DD    21 27AC               SAV1A:	LD	HL,NBYTES
  27E0    7E                    	LD	A,(HL)
  27E1    34                    	INC 	(HL)
  27E2    21 0080               	LD	HL,TBUFF
  27E5    CD 26A5               	CALL	ADDHL
  27E8    3A 27AE               	LD	A,(CH)
  27EB    77                    	LD	(HL),A
  27EC    3E 00                 	LD      A,0
  27EE    C9                    	RET
                                	
                                ;
                                ;   Get here after writing all of the file.
                                ;
  27EF    3A 27AC               SAV2:	LD	A,(NBYTES)
  27F2    B7                    	OR	A
  27F3    CA 27FD               	JP	Z,SAV2A
  27F6    CD 2788               	CALL	WRTFCB
  27F9    B7                    	OR	A
  27FA    C2 269C               	JP	NZ,TYPERR2	
  27FD    11 005C               SAV2A:	LD	DE,FCB		;now close the file.
  2800    CD 2791               	CALL	CLOSFCB
  2803    FE FF                 	CP	255
  2805    CA 269F               	JP	Z,TYPERR
  2808    3E 00                 	LD	A,0
  280A    C9                    	RET
                                
                                
  280B                                  DS      1       ;DATA STATEMENT FLAG (MUST BE HERE)
  280C                          BEGPR:
                                ;
                                        END
	MACRO-80 3.44	09-Dec-81	PAGE	S


Macros:

Symbols:
0CB8 	ABS             26A5 	ADDHL           2599 	ADDR1           
259B 	ADDR2           259D 	ADDR3           1C55 	ALPHA           
1DAC 	ARG             1DBB 	ARGNU           0E8B 	ASCII           
0BC5 	ATN             0BD4 	ATN1            1F16 	ATNCO           
0000 	BASIC           0005 	BDOS            280C 	BEGPR           
229E 	BELL            1DC1 	BINFL           225D 	BLANK           
0000 	BOOT            2341 	BTIN            2344 	BTOUT           
233E 	BTSTAT          2347 	BZERO           0003 	CASC            
0000 	CASD            21CB 	CASI            21F2 	CASO            
11FC 	CERCE           0004 	CFLAG           27AE 	CH              
0A44 	CHA1            0A59 	CHA2            0A89 	CHA3            
0A1B 	CHANG           2759 	CHECK           0E80 	CHRFN           
1D57 	CKERR           21FA 	CKSUM           22A6 	CLOAD           
2651 	CLOSEF          2791 	CLOSFCB         265A 	CLRFCB          
25B2 	CMACT           001A 	CNTRLZ          25BD 	COLUM           
010E 	COMP1           1BAD 	COMP2           1BB1 	COMP3           
1BB2 	COMP4           1BB5 	COMP5           1BC2 	COMP6           
0E2D 	CONC2           0E35 	CONC3           0E3D 	CONC4           
0E53 	CONC5           0E67 	CONC6           0E17 	CONCA           
03DF 	CONTI           26AA 	CONVERT         26B5 	CONVRT1         
26C6 	CONVRT2         26C8 	CONVRT3         26CA 	CONVRT4         
26DB 	CONVRT5         26DD 	CONVRT6         26E1 	CONVRT7         
26EB 	CONVRT8         1D85 	COPYD           1D90 	COPYH           
0BA4 	COS             0001 	CPM             1D83 	CPY4D           
1D8E 	CPY4H           1A23 	CR1             27A3 	CREAFCB         
1A63 	CRLF            222E 	CSAVE           0003 	CSTAT           
1B7C 	CTRLC           1D53 	CVERR           1D4B 	DAERR           
25D8 	DATAB           1FDF 	DATAL           25D6 	DATAP           
209C 	DDT             2062 	DEFLI           279A 	DELFCB          
25BC 	DEXP            0AA2 	DIM             0AC0 	DIM1            
0AF2 	DIM2            0AFD 	DIM3            0B08 	DIM4            
23B9 	DIMSW           13AD 	DV8             1AC4 	ECHO            
0219 	ED7A            0222 	ED7B            01C4 	EDIT1           
01D9 	EDIT2           01DF 	EDIT3           01F0 	EDIT5           
0205 	EDIT6           0211 	EDIT7           01EB 	EDIT8           
148E 	EDM1            149D 	EDM2A           14A1 	EDM3            
14B5 	EDM4            23BD 	EDSW            0C8E 	ELOOP           
00FE 	EM              02AC 	ENDIT           25B9 	ENDLI           
123C 	ENDXP           1BC8 	EOL             1BD7 	EOL1            
229D 	ERITE           1F80 	ERRMS           1D69 	ERROR           
12B1 	EV1             13EA 	EV10            1443 	EV11            
12B9 	EV1A            12C1 	EV2             12E1 	EV2A            
12F8 	EV3             1319 	EV3A            133D 	EV4             
1351 	EV4A            135C 	EV4B            1369 	EV5             
1387 	EV6             13A3 	EV7             13B8 	EV9             
12AB 	EVAL            1468 	EVCOM           1474 	EVLD            
1485 	EVLD1           1454 	EVNEG           0B7C 	EVPS            
0B86 	EVPS1           0B8D 	EVPS2           0240 	EXEC            
0250 	EXEC1           0C5B 	EXP             0C75 	EXP1            
1F62 	EXPCO           1071 	EXPR            2597 	EXPRS           
23BE 	EZERO           259F 	FACC            20A0 	FACDE           
19E2 	FAD1            1728 	FADD            1747 	FADD3           
	MACRO-80 3.44	09-Dec-81	PAGE	S-1


1754 	FADD4           1777 	FADD6           1779 	FADD7           
1785 	FADD9           17AD 	FADDA           140C 	FADDJ           
19E1 	FADDT           19DF 	FADT3           02EC 	FALSE           
00F7 	FATAL           1D9E 	FBIN            1DA9 	FBIN1           
005C 	FCB             20B5 	FDE1            20C2 	FDE2            
0E0B 	FDEC            188C 	FDIV            18AB 	FDIV3           
18C1 	FDIV5           18DB 	FDIV6           18E1 	FDIV7           
18EF 	FDIV8           19CD 	FEXP            151F 	FIN             
152F 	FIN2            1555 	FIN3            155D 	FIN4            
155F 	FIN5            156C 	FIN6            1571 	FIN7            
1579 	FIN8            1591 	FIN8A           1593 	FIN9            
15AF 	FINB            15D6 	FIND            15D9 	FIND0           
20CC 	FIND1           20E6 	FIND2           20EE 	FIND3           
2116 	FIX             213F 	FIX1            214F 	FIX2            
218B 	FIX3            2197 	FIX4            2198 	FIX4A           
21A4 	FIX5            15C6 	FMTEN           1809 	FMUL            
1833 	FMUL5           183F 	FMUL6           1845 	FMUL7           
185B 	FMUL8           1861 	FMUL9           0FA2 	FN              
0FE4 	FN2             1002 	FN3             100A 	FN4             
2254 	FNAME           25B3 	FNARG           0D9B 	FND3            
17BB 	FNEG1           17C2 	FNEG2           112F 	FNL             
1147 	FNL3            2065 	FNLIT           25CF 	FNMOD           
17CE 	FNORM           17E0 	FNRM1           17EA 	FNRM2           
17F6 	FNRM3           04D6 	FOR             051B 	FOR1            
051F 	FOR2            0543 	FOR4            054F 	FOR5            
055F 	FOR6            056B 	FOR7            0572 	FOR8            
05A3 	FOR9            05D1 	FORA            2347 	FORNE           
15E1 	FOUT            15F2 	FOUT0           15FC 	FOUT2           
160D 	FOUT3           1618 	FOUT4           1628 	FOUT5           
162E 	FOUT6           1651 	FOUT7           1661 	FOUT9           
1670 	FOUTA           1673 	FOUTB           1678 	FOUTC           
167D 	FOUTD           168A 	FOUTH           16A1 	FOUTI           
16A5 	FOUTJ           16C4 	FOUTK           16C7 	FOUTL           
16CA 	FOUTM           16E2 	FOUTN           16ED 	FOUTO           
16EE 	FOUTP           16FA 	FOUTQ           1702 	FOUTR           
1710 	FOUTS           171A 	FOUTT           164E 	FOUTU           
1607 	FOUTV           196E 	FOV1            1962 	FOVUN           
027C 	FREE            19D5 	FSB1            19EC 	FSHFT           
17FD 	FSUB            19D4 	FSUBT           25A3 	FTEMP           
19BF 	FTEST           110C 	FUNC0           1127 	FUNC4           
1DD0 	FUNCT           1B60 	GETCH           1B71 	GETCH0          
1B74 	GETCH1          01A5 	GETCM           26F2 	GETEXT          
26FA 	GETEXT1         270B 	GETEXT2         270D 	GETEXT3         
2711 	GETEXT4         271B 	GETEXT5         2722 	GETEXT6         
2724 	GETEXT7         2731 	GETEXT8         2739 	GETEXT9         
2750 	GETEXTA         190E 	GETS1           191F 	GETS2           
1920 	GETS3           1930 	GETS4           1932 	GETS5           
1940 	GETS8           195D 	GETS9           18FE 	GETST           
1FF3 	GOSBL           0434 	GOSU1           042B 	GOSUB           
03E7 	GOTO            03F7 	GOTO2           2014 	GOTOL           
1C34 	GTEMP           1F1A 	HALFP           0000 	HUNTER          
05F8 	IF1             05FC 	IF2             0600 	IF3             
0609 	IF4             0611 	IF5             061B 	IF6             
0653 	IF8             0661 	IF9             0699 	IFF             
06A2 	IFG             06AB 	IFH             06B3 	IFI             
06C1 	IFJ             06C7 	IFK             06CE 	IFL             
	MACRO-80 3.44	09-Dec-81	PAGE	S-2


06D8 	IFM             06DD 	IFN             05DA 	IFSTM           
256D 	IFTYP           23BB 	ILSW            23C3 	IMMED           
256A 	INDX            0178 	INIT1           0178 	INIT3           
25DC 	INITC           0DFB 	INP             0896 	INPL            
08B8 	INPL1           08C4 	INPL2           0824 	INPU1           
082F 	INPU2           0833 	INPU3           083E 	INPU4           
0851 	INPU5           0852 	INPU6           0866 	INPU7           
0879 	INPU8           087E 	INPU9           088D 	INPUA           
0887 	INPUB           0812 	INPUT           1272 	INS             
1273 	INS1            0F4C 	INST1           0F51 	INST2           
0F58 	INST3           0F74 	INST5           0F78 	INST6           
0F83 	INST8           0F94 	INST9           0F9D 	INSTA           
0F42 	INSTR           0CD3 	INT             0CE1 	INT2            
0CF0 	INT3            0CFA 	INT4            0D00 	INT5            
2415 	IOBUF           1D5B 	IOERR           022D 	IRAM            
1F90 	JMPTB           232F 	JUMP            02C4 	KEY             
1FBD 	KEYL            0001 	LARGE           10A0 	LDALP           
1182 	LDDTN           1196 	LDDTP           1090 	LDF             
10E5 	LDFN            10EB 	LDFN1           1170 	LDFNC           
108D 	LDNUM           1166 	LDPI            1154 	LDRND           
10CF 	LDV             10B7 	LDV1            10C4 	LDV2            
14C8 	LDV2A           0EF6 	LEFT            0E7A 	LENFN           
06E2 	LET             06FD 	LET1            0717 	LET2            
0722 	LET2A           072E 	LET3            073C 	LET4            
0748 	LET5            0755 	LET6            076A 	LET7            
0777 	LET8            077A 	LET9            25D0 	LINE            
2594 	LINEH           2592 	LINEL           23BE 	LINEN           
1B1C 	LINEO           0353 	LIST            0383 	LIST1           
0386 	LIST2           03A6 	LIST4           03B6 	LIST5           
03C0 	LIST6           03C6 	LIST7           03D6 	LIST8           
11B0 	LIT1            11D4 	LIT2            11F0 	LIT3            
11AA 	LITST           1EC8 	LLINE           0C04 	LN              
0C1D 	LN0             0C29 	LN1             0C2E 	LN2             
1EF2 	LN2C            1F4E 	LN2E            1F66 	LNC             
1F4A 	LNCO            20C9 	LOCAT           0C52 	LOG             
1086 	LOOKD           120E 	LOOKO           1B27 	LOUT            
1870 	MDSGN           0F12 	MID0            0F20 	MID1            
0F2D 	MID2            0F31 	MID3            0F39 	MID4            
0F08 	MIDFN           25BB 	MULTI           27AC 	NBYTES          
21DE 	NCHAR           0D6B 	NEG             1EEE 	NEGON           
0264 	NEW             026F 	NEW0            0274 	NEW1            
0783 	NEXT            0799 	NEXT1           07A4 	NEXT2           
07AD 	NEXT3           07E8 	NEXT5           07EC 	NEXT6           
07E0 	NEXT7           1FEC 	NEXTL           1AA3 	NOTBS           
1AB9 	NOTCH           1A80 	NOTCO           1A72 	NOTCR           
1BE1 	NOTEO           1B35 	NOTZ1           1B45 	NOTZ2           
1EAB 	NRNDX           25D5 	NS              22A6 	NULL1           
1F30 	NULLI           22AA 	NULLS           2237 	NULS            
0EA3 	NUM1            1C64 	NUMEN           1C5E 	NUMER           
0E98 	NUMFN           1D4F 	NXERR           22DA 	NXTR            
227F 	NXTRC           09A6 	ON              09CC 	ON3             
09CD 	ON3A            09E0 	ON4             09EA 	ON5             
09EE 	ON6             09FA 	ON7             0A03 	ON8             
0A0E 	ON9             1F2E 	ONE             1249 	OP1             
1288 	OP2             129D 	OP3             12A8 	OP4             
2772 	OPENFCB         2660 	OPENFR          27AF 	OPENFW          
	MACRO-80 3.44	09-Dec-81	PAGE	S-3


1254 	OPLP1           1258 	OPLP2           1AD0 	OT1             
1ADF 	OT2             1AEE 	OT4             2567 	OUTA            
093B 	OUTP            23BA 	OUTSW           1D5F 	OVERR           
1BE9 	PACK            25AF 	PARCT           1EA2 	PCHOF           
2306 	PEEK            1EE6 	PI              1EDB 	PILIT           
1BF1 	PK1             1C05 	PK3             2311 	POKE            
0E11 	POS             1414 	POWER           1BA1 	PRCNT           
047C 	PRIN2           0447 	PRIN4           0487 	PRIN5           
0490 	PRIN6           047A 	PRIN7           049B 	PRIN8           
049E 	PRIN9           04A4 	PRINA           04BB 	PRINB           
04C4 	PRINC           0446 	PRINT           1D25 	PRLIN           
25DA 	PROGE           2596 	PROMP           25D4 	PRSW            
1EEA 	QTRPI           2347 	RAM             0990 	RANDO           
1EC4 	RBOUT           019F 	RDY             019C 	RDYM            
08D2 	READ            08E1 	READ1           08FC 	READ2           
090C 	READ3           0911 	READ4           091D 	READ5           
0924 	READ6           0934 	READ7           0935 	READ8           
277F 	READFCB         1F6A 	READY           2203 	RECI            
2210 	RECI1           21D1 	RECO            0B0E 	REDIM           
0B24 	REDM1           19F8 	REIN            256C 	REL             
0407 	RESTO           0413 	RETUR           0EFF 	RIGHT           
2293 	RITE            0D75 	RND             0D87 	RND1            
0D8D 	RND2            0DAA 	RND4            0DB6 	RND5            
0DBE 	RND6            0DF2 	RND7            1DEC 	RNDLI           
1EA5 	RNDP            25C4 	RNDS            25CE 	RNDSW           
25BE 	RNDX            25C0 	RNDY            25C2 	RNDZ            
2346 	ROMEN           1882 	RSSGN           0103 	RST1            
010B 	RST2            0113 	RST3            011B 	RST4            
0132 	RST4A           013B 	RST4B           0123 	RST5            
012B 	RST6            1D47 	RTERR           02EC 	RUN             
02FC 	RUN1            0306 	RUN2            0318 	RUN3            
0319 	RUN4            0330 	RUN7            02D5 	RUNCM           
23BC 	RUNSW           1C4D 	SADR            27C8 	SAV1            
27DD 	SAV1A           27EF 	SAV2            27FD 	SAV2A           
0336 	SAVE            1C70 	SCH0            1C73 	SCH1            
1C95 	SCH2            1C99 	SCH3            1CB1 	SCH4            
1CB5 	SCH5            1CC3 	SCH6            1CD7 	SCH7            
1CEC 	SCH8            1CF8 	SCH9            1C68 	SEARC           
20F1 	SEEK            20F1 	SEEK1           2104 	SEEK2           
2114 	SEEK3           21FE 	SENSE           0CC1 	SGN             
0CC7 	SGN1            0B32 	SIN             0B3A 	SIN1            
0B69 	SIN3A           1F2A 	SINCO           1C2D 	SKP2Z           
1192 	SKPP            1D43 	SNERR           0EDA 	SPAC1           
0ED2 	SPACE           25B0 	SPCTR           1EF6 	SQC1            
1EFA 	SQC2            1EFE 	SQC3            0D18 	SQR             
0D55 	SQR1            1C21 	SQUI2           1C16 	SQUIS           
25D2 	STACK           1ED1 	STEPL           1D3F 	STERR           
25B7 	STMT            0963 	STOP            1F71 	STOPM           
0EEF 	STR11           0EE2 	STRFN           2467 	STRIN           
1989 	SUB1            1994 	SUB2            199E 	SUB3            
19AD 	SUB4            1976 	SUBSC           187A 	SVSGN           
00FF 	SWCH            22BA 	SYNC            2247 	SYNCS           
1ECD 	TABLI           1AF2 	TABST           0BAD 	TAN             
264E 	TAPBRK          029A 	TAPE            23B8 	TAPES           
262C 	TAPIN           0100 	TBASE           1B01 	TBLP            
1B08 	TBLP2           1B0D 	TBON            1B12 	TBSPA           
	MACRO-80 3.44	09-Dec-81	PAGE	S-4


0080 	TBUFF           2576 	TEMP1           257A 	TEMP2           
257E 	TEMP3           2582 	TEMP4           2586 	TEMP5           
258A 	TEMP6           258E 	TEMP7           1EE2 	TEN             
19F5 	TERMI           1AD0 	TERMM           1AC8 	TERMO           
1A54 	TEST2A          1A5C 	TEST2B          1A39 	TESTO           
1ED6 	THENL           2016 	TOLIT           1A0E 	TREAD           
25CC 	TRNDS           25C6 	TRNDX           25C8 	TRNDY           
25CA 	TRNDZ           0672 	TRUE            1B92 	TSTC1           
1B4D 	TSTCC           1BDC 	TSTEL           0002 	TTY             
256E 	TVAR1           2572 	TVAR2           1EDE 	TWO             
2677 	TYPE1           267A 	TYPE2           268B 	TYPE3           
269F 	TYPERR          269C 	TYPERR2         1D37 	ULERR           
1D64 	UNERR           0EAB 	VAL             0EB7 	VAL1            
0EC0 	VAL2            1CFD 	VAR             1D12 	VAR2            
1D1D 	VAR3            1EB8 	VERS            21BA 	WATCH           
1EB3 	WHATL           2788 	WRTFCB          02DA 	XEQ             
1439 	XSQR            1B3B 	Z1              1B4B 	Z2              
1D96 	ZEROM           1D3B 	ZMERR           



No Fatal error(s)


    268B 	TYPE3           
269F 	TYPERR          269C 	TYPERR2         1D