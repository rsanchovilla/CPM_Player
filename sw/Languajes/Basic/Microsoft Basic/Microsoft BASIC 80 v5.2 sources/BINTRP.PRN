BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1
Common file for BASIC interpreter

                                	SUBTTL	Common file for BASIC interpreter
                                	.SALL	
                                
  000F                          CONTO	SET	15			;CHARACTER TO SUPRESS OUTPUT (USUALLY CONTROL-O)
  0000                          DBLTRN	SET	0			;FOR DOUBLE PRECISION TRANSCENDENTALS
                                	IF2	
                                
                                	.PRINTX	/EXTENDED/
                                
                                
                                	.PRINTX	/LPT/
                                
                                	.PRINTX	/CPM DISK/
                                
                                
                                	.PRINTX	/Z80/
                                
                                	.PRINTX	/FAST/
                                
                                	.PRINTX	/5.0 FEATURES/
                                
                                	.PRINTX	/ANSI COMPATIBLE/
                                	ENDIF
                                
  000E                          CLMWID	SET	14			;MAKE COMMA COLUMNS FOURTEEN CHARACTERS
  0080                          DATPSC	SET	128			;NUMBER OF DATA BYTES IN DISK SECTOR
  0050                          LINLN	SET	80			;TERMINAL LINE LENGTH 
  0084                          LPTLEN	SET	132
  00FF                          BUFLEN	SET	255			;LONG LINES
  0028                          NAMLEN	SET	40			;MAXIMUM LENGTH NAME -- 3 TO 127
                                
  001D                          NUMLEV	SET	0*20+19+2*5		;NUMBER OF STACK LEVELS RESERVED
                                					;BY AN EXPLICIT CALL TO GETSTK
                                
  0004                          STRSIZ	SET	4
                                
  0003                          STRSIZ	SET	3
  0003                          NUMTMP	SET	3			;NUMBER OF STRING TEMPORARIES
                                
  000A                          NUMTMP	SET	10
                                
  0003                          MD.RND	SET	3			;THE MODE NUMBER FOR RANDOM FILES
  0001                          MD.SQI	SET	1			;THE MODE NUMBER FOR SEQUENTIAL INPUT FILES
                                					;NEVER WRITTEN INTO A FILE
  0002                          MD.SQO	SET	2			;THE MODE FOR SEQUENTIAL OUTPUT FILES
                                					;AND PROGRAM FILES
  0000                          CPMWRM	SET	0			;CP/M WARM BOOT ADDR
  0005                          CPMENT	SET	CPMWRM+5		;CP/M BDOS CALL ADDR
  0000'                         	CSEG	
  0000                          TRUROM	SET	0
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-1
Common file for BASIC interpreter

                                
                                	TITLE	BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen
                                	SUBTTL	VERSION 5.11 -- NOT MANY FEATURES TO GO
                                ;
                                ;
                                ;--------- ---- -- ---- ----- --- ---- -----
                                ;COPYRIGHT 1975 BY BILL GATES AND PAUL ALLEN
                                ;--------- ---- -- ---- ----- --- ---- -----
                                ;
                                ;ORIGINALLY WRITTEN ON THE PDP-10 FROM
                                ;FEBRUARY 9 TO  APRIL 9 1975
                                ;
                                ;BILL GATES WROTE A LOT OF STUFF.
                                ;PAUL ALLEN WROTE OTHER STUFF AND FAST CODE.
                                ;MONTE DAVIDOFF WROTE THE MATH PACKAGE (F4I.MAC).
                                ;
                                ;*
                                
                                	.LIST	
                                	EXTRN	SIN,LOG,EXP,COS,TAN,ATN
                                	PUBLIC	FRMEQL
                                
  0000                          BUFOFS	SET	0
  0002                          BUFOFS	SET	2			;MUST CRUNCH INTO EARLIER PLACE FOR SINGLE QUOTE
  013E                          KBFLEN	SET	BUFLEN+(BUFLEN/4)	;MAKE KRUNCH BUFFER SOMEWHAT
                                					;LARGER THAN SOURCE BUFFER (BUF)
                                	EXTRN	NAME
                                	PUBLIC	MAIN,LIST,FRMEVL,NXTCON
                                	PUBLIC	GIVINT
                                	PUBLIC	GTBYTC,EQULTK,OLDTXT
                                	PUBLIC	VARTAB,GONE,DOCNVF
                                	PUBLIC	DOASIG
                                	PUBLIC	FNDFOR
                                	PUBLIC	READY,SNERR,REPINI,INTIDX,INTID2
                                	PUBLIC	NXTCON,DATPTR,ERRFIN,USERR,SAVTXT,NFERR,OLDTXT
                                	EXTRN	OUTDO,INCHRI,INLIN,CRDO,CRDONZ,STRCMP,FININL,PPSWRT
                                	EXTRN	BLTU,BLTUC,CLEAR,CLEARC,GTMPRT,ISLET,ISLET2,PTRGET
                                	EXTRN	QINLIN,SCRTCH,STKINI,RUNC,RESFIN,PTRGT2,STPEND,DIM
                                	EXTRN	DCOMPR,SYNCHR
                                	PUBLIC	GETYPR
                                	PUBLIC	ENDBUF,BUF
                                	PUBLIC	STREND,CURLIN,DV0ERR,CHRGTR
                                	PUBLIC	ERRST,ERRDD,ERRBS,TEMP2,ARYTA2,DIMFLG,ARYTAB,TSTOP
                                	PUBLIC	ERRCN
                                	PUBLIC	FRMEVL,GIVDBL,EVAL,FRMPRN,ERRLS,SUBFLG,TEMP3,ERRSO
                                	PUBLIC	VARTAB,TEMP8
                                	EXTRN	SIGN
                                	EXTRN	OPEN,CLOSE,PRGFIN,FILIND
                                	EXTRN	FILINP,CLSALL,FILOUT,INDSKC
                                	EXTRN	LRUN
                                	EXTRN	FILGET
                                	PUBLIC	ATNFIX,COSFIX,SINFIX,TANFIX
                                	EXTRN	FPWR
                                	EXTRN	INXHRT
                                	EXTRN	SGN,ABS,SQR,FDIV,FSUB,FMULT,RND;MATHPK INTERNALS
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-2
VERSION 5.11 -- NOT MANY FEATURES TO GO

                                	EXTRN	QINT,ZERO,MOVE,FOUT,FIN,FCOMP,FADD,PUSHF,INT
                                	EXTRN	ENDS,NEXT,RESTORE,SCRATH,CONT,FRE
                                	EXTRN	MOVFR,MOVRF,MOVRM,INPRT,LINPRT,FDIVT
                                	EXTRN	MOVFM,MOVMF,FLOATR,FADDS
                                	PUBLIC	FAC,FACLO,OVERR,NEWSTT,RETVAR,OLDLIN,FRMCHK,BRKTXT,CHRCON
                                	PUBLIC	FNDLIN,ARYTAB,FINI
                                	EXTRN	INRART,NEG,FLOAT
                                	EXTRN	STROUI,BSERR
                                	PUBLIC	ERROR,FCERR
                                	PUBLIC	TOPMEM
                                	PUBLIC	VALTYP
                                	PUBLIC	TEMPST,TEMPPT
                                	PUBLIC	TMERR
                                	PUBLIC	MEMSIZ,FRETOP
                                	EXTRN	CAT,FREFAC,FRESTR,FRETMP,FRETMS,GARBA2,STRCPY,GETSTK
                                	EXTRN	STRLIT,STRLT2,STRLT3,STRLTI,STROUT,STRPRT,STROUI
                                	EXTRN	GETSPA,PUTNEW,STOP,OMERR,REASON
                                	EXTRN	INSTR
                                	EXTRN	PRINUS,PUTTMP
                                	EXTRN	FOUTH,FOUTO,STRO$,STRH$
                                	EXTRN	STR$,LEN,ASC,CHR$,LEFT$,RIGHT$,MID$,VAL
                                	PUBLIC	ERRLIN,ONELIN,ONEFLG,TRCFLG,BUFLIN,LISPRT
                                	EXTRN	STRNG$,SPACE$,TON,TOFF
                                	EXTRN	SIGNS
                                	PUBLIC	FBUFFR,MINUTK,PLUSTK,LINGET,INTXT,REDDY
                                	EXTRN	TTYCHR
                                	PUBLIC	TXTTAB
                                	EXTRN	INIT
                                	EXTRN	TSTACK
                                	EXTRN	RNDX
                                	EXTRN	UMULT
                                	EXTRN	SIGNC,POPHRT
                                	PUBLIC	CNTOFL
                                	EXTRN	FINLPT
                                	PUBLIC	LPTPOS,PRTFLG
                                	EXTRN	CONSIH,VMOVFA,VMOVAF,ISIGN,CONIA,GETBCD,VSIGN,VDFACS
                                	EXTRN	VMOVMF,VMOVFM,FRCINT,FRCSNG,FRCDBL,VNEG,PUFOUT,DCXBRT,IADD
                                	EXTRN	ISUB,IMULT,ICOMP,INEG,DADD,DSUB,DMULT,DDIV,DCOMP,VINT
                                	EXTRN	FINDBL,INEG2
                                
                                	EXTRN	IDIV,IMOD
                                	EXTRN	VMOVE,VALINT,VALSNG,FRCSTR,CHKSTR,MAKINT
                                	PUBLIC	PRMLEN,PRMLN2,PRMFLG,NOFUNS,PARM1,TEMP9
                                	PUBLIC	DFACLO,ARG,ARGLO,TEMP2,TEMP3,DEFTBL,FUNACT
                                	EXTRN	MOVE1
                                	PUBLIC	STRPRN
                                	PUBLIC	CALTTY
                                	EXTRN	SCNSEM
                                	PUBLIC	$FOR,$WHILE,ERRWE,ERRWH,ENDFOR
                                	EXTRN	WHILE,WEND
                                	EXTRN	CALLS
                                	EXTRN	PROCHK
                                
                                	EXTRN	WRITE
                                	PUBLIC	DATA,USERR,SUBFLG,TEMP9,$MERGE,SCNLIN
                                	PUBLIC	$COMMO
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-3
VERSION 5.11 -- NOT MANY FEATURES TO GO

                                	PUBLIC	$DELET
                                	EXTRN	CHAIN,COMMON
                                
                                					;READER INPUT
                                
                                	PUBLIC	START
  0000'                         START:
                                	PUBLIC	JMPINI
  0000'   C3 0000*              JMPINI:	JMP	INIT			;INIT IS THE INTIALIZATION ROUTINE
                                					;IT SETS UP CERTAIN
                                					;LOCATIONS DELETES FUNCTIONS IF
                                					;DESIRED AND
                                					;CHANGES THIS TO JMP READY
                                					;WARM START FOR ISIS
                                
                                					;OF THE ROUTINE TO CONVERT [A,B]
                                					;TO A FLOATING POINT NUMBER IN THE FAC
  0003'   0000*                 	DW	FRCINT			;TURN FAC INTO AN INTEGER IN [H,L]
  0005'   0000*                 	DW	MAKINT			;TURN [H,L] INTO A VALUE IN THE FAC
                                					;SET VALTYP FOR INTEGER
                                
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-4
VERSION 5.11 -- NOT MANY FEATURES TO GO

                                
                                	SUBTTL	ROM VERSION INITALIZATION, AND CONSTANTS
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-5
ROM VERSION INITALIZATION, AND CONSTANTS

                                
                                	SUBTTL	DISPATCH TABLES, RESERVED WORD TABLES
                                
                                ;DEFINE SOME EQUIVALENCES IN CASE LPTSW & CASSW OFF
  0BEC'                         CLOAD	SET	SNERR
  0BEC'                         CSAVE	SET	SNERR
                                
                                
                                ; THESE MACRO CALLS DEFINE THE RESWRD VALUES
                                ; AND THE TABLE DISPATCH FOR STATEMENTS AND FUNCTIONS
                                
                                ; STATEMENTS:
  0007'                         STMDSP:					;MARKS START OF STATEMENT LIST
  0080                          Q	SET	128
  0007'   0000*                 	DW	ENDS
  0081                          Q	SET	Q+1
  0081                          $END	SET	Q
  0009'   10EE'                 	DW	FOR
  0082                          Q	SET	Q+1
  0082                          $FOR	SET	Q
  000B'   0000*                 	DW	NEXT
  0083                          Q	SET	Q+1
  0083                          $NEXT	SET	Q
  000D'   1415'                 	DW	DATAS
  0084                          Q	SET	Q+1
  0084                          $DATA	SET	Q
  000F'   178D'                 	DW	INPUT
  0085                          Q	SET	Q+1
  0085                          $INPUT	SET	Q
  0011'   0000*                 	DW	DIM
  0086                          Q	SET	Q+1
  0086                          $DIM	SET	Q
  0013'   1857'                 	DW	READ
  0087                          Q	SET	Q+1
  0087                          $READ	SET	Q
  0015'   1441'                 	DW	LET
  0088                          Q	SET	Q+1
  0088                          $LET	SET	Q
  0017'   13C3'                 	DW	GOTO
  0089                          Q	SET	Q+1
  0089                          $GOTO	SET	Q
  0019'   1395'                 	DW	RUN
  008A                          Q	SET	Q+1
  008A                          $RUN	SET	Q
  001B'   157A'                 	DW	IFS
  008B                          Q	SET	Q+1
  008B                          $IF	SET	Q
  001D'   0000*                 	DW	RESTORE
  008C                          Q	SET	Q+1
  008C                          $RESTO	SET	Q
  001F'   13AB'                 	DW	GOSUB
  008D                          Q	SET	Q+1
  008D                          $GOSUB	SET	Q
  0021'   13FA'                 	DW	RETURN
  008E                          Q	SET	Q+1
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-6
DISPATCH TABLES, RESERVED WORD TABLES

  008E                          $RETUR	SET	Q
  0023'   1417'                 	DW	REM
  008F                          Q	SET	Q+1
  008F                          $REM	SET	Q
  0025'   0000*                 	DW	STOP
  0090                          Q	SET	Q+1
  0090                          $STOP	SET	Q
  0027'   15C5'                 	DW	PRINT
  0091                          Q	SET	Q+1
  0091                          $PRINT	SET	Q
  0029'   0000*                 	DW	CLEAR
  0092                          Q	SET	Q+1
  0092                          $CLEAR	SET	Q
  002B'   1F9F'                 	DW	LIST
  0093                          Q	SET	Q+1
  0093                          $LIST	SET	Q
  002D'   0000*                 	DW	SCRATH
  0094                          Q	SET	Q+1
  0094                          $NEW	SET	Q
                                
                                ; 8K AND ABOVE STATEMENTS
                                
  002F'   14AE'                 	DW	ONGOTO
  0095                          Q	SET	Q+1
  0095                          $ON	SET	Q
                                	EXTRN	NULL
  0031'   0000*                 	DW	NULL
  0096                          Q	SET	Q+1
  0096                          $NULL	SET	Q
                                
  0033'   1F1C'                 	DW	FNWAIT
  0097                          Q	SET	Q+1
  0097                          $WAIT	SET	Q
  0035'   1D45'                 	DW	DEF
  0098                          Q	SET	Q+1
  0098                          $DEF	SET	Q
  0037'   21CB'                 	DW	POKE
  0099                          Q	SET	Q+1
  0099                          $POKE	SET	Q
  0039'   0000*                 	DW	CONT
  009A                          Q	SET	Q+1
  009A                          $CONT	SET	Q
  003B'   0BEC'                 	DW	CSAVE
  009B                          Q	SET	Q+1
  009B                          $CSAVE	SET	Q
  003D'   0BEC'                 	DW	CLOAD
  009C                          Q	SET	Q+1
  009C                          $CLOAD	SET	Q
                                
  003F'   1F16'                 	DW	FNOUT
  009D                          Q	SET	Q+1
  009D                          $OUT	SET	Q
  0041'   15BD'                 	DW	LPRINT
  009E                          Q	SET	Q+1
  009E                          $LPRIN	SET	Q
  0043'   1F9A'                 	DW	LLIST
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-7
DISPATCH TABLES, RESERVED WORD TABLES

  009F                          Q	SET	Q+1
  009F                          $LLIST	SET	Q
                                
                                ; LEN2 AND ABOVE STATEMENTS
                                
                                	PUBLIC	IOGOR
  0045'                         IOGOR:					;DONT ALLOW CONSOLE IF CODE DELETED
  0045'                         	DS	2
  00A0                          Q	SET	Q+1			;PAD THE HOLE
  0047'   1F3C'                 	DW	WIDTH
  00A1                          Q	SET	Q+1
  00A1                          $WIDTH	SET	Q
  0049'   1417'                 	DW	ELSES
  00A2                          Q	SET	Q+1
  00A2                          $ELSE	SET	Q
  004B'   0000*                 	DW	TON
  00A3                          Q	SET	Q+1
  00A3                          $TRON	SET	Q
  004D'   0000*                 	DW	TOFF
  00A4                          Q	SET	Q+1
  00A4                          $TROFF	SET	Q
                                	EXTRN	SWAP
  004F'   0000*                 	DW	SWAP
  00A5                          Q	SET	Q+1
  00A5                          $SWAP	SET	Q
  0051'   0000*                 	DW	ERASE
  00A6                          Q	SET	Q+1
  00A6                          $ERASE	SET	Q
                                	EXTRN	ERASE
                                	EXTRN	EDIT
  0053'   0000*                 	DW	EDIT
  00A7                          Q	SET	Q+1
  00A7                          $EDIT	SET	Q
  0055'   1539'                 	DW	ERRORS
  00A8                          Q	SET	Q+1
  00A8                          $ERROR	SET	Q
  0057'   14FC'                 	DW	RESUME
  00A9                          Q	SET	Q+1
  00A9                          $RESUM	SET	Q
  0059'   2187'                 	DW	DELETE
  00AA                          Q	SET	Q+1
  00AA                          $DELET	SET	Q
  005B'   1544'                 	DW	AUTO
  00AB                          Q	SET	Q+1
  00AB                          $AUTO	SET	Q
  005D'   21FC'                 	DW	RESEQ
  00AC                          Q	SET	Q+1
  00AC                          $RENUM	SET	Q
                                
                                ; EXTENDED AND ABOVE
                                
  005F'   12FB'                 	DW	DEFSTR
  00AD                          Q	SET	Q+1
  00AD                          $DEFST	SET	Q
  0061'   12FE'                 	DW	DEFINT
  00AE                          Q	SET	Q+1
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-8
DISPATCH TABLES, RESERVED WORD TABLES

  00AE                          $DEFIN	SET	Q
  0063'   1301'                 	DW	DEFREA
  00AF                          Q	SET	Q+1
  00AF                          $DEFSN	SET	Q
  0065'   1304'                 	DW	DEFDBL
  00B0                          Q	SET	Q+1
  00B0                          $DEFDB	SET	Q
  0067'   171F'                 	DW	LINE
  00B1                          Q	SET	Q+1
  00B1                          $LINE	SET	Q
                                
                                
                                ;***********
                                ; PADDING INITIALLY SET TO 10
  00B3                          Q	SET	Q+2
  0069'                         	DS	4
  006D'   0000*                 	DW	WHILE
  00B4                          Q	SET	Q+1
  00B4                          $WHILE	SET	Q
  006F'   0000*                 	DW	WEND
  00B5                          Q	SET	Q+1
  00B5                          $WEND	SET	Q
  0071'   0000*                 	DW	CALLS
  00B6                          Q	SET	Q+1
  00B6                          $CALL	SET	Q
  0073'   0000*                 	DW	WRITE
  00B7                          Q	SET	Q+1
  00B7                          $WRITE	SET	Q
  0075'   1415'                 	DW	DATAS
  00B8                          Q	SET	Q+1
  00B8                          $COMMO	SET	Q
  0077'   0000*                 	DW	CHAIN
  00B9                          Q	SET	Q+1
  00B9                          $CHAIN	SET	Q
  0079'   2340'                 	DW	OPTION
  00BA                          Q	SET	Q+1
  00BA                          $OPTIO	SET	Q
  007B'   238A'                 	DW	RANDOM
  00BB                          Q	SET	Q+1
  00BB                          $RANDO	SET	Q
                                
                                ; DISK AND ABOVE
                                
  007D'                         	DS	2
  00BC                          Q	SET	Q+1
                                	EXTRN	SYSTEM
  007F'   0000*                 	DW	SYSTEM
  00BD                          Q	SET	Q+1
  00BD                          $SYSTE	SET	Q
  00BE                          Q	SET	Q+1
  0081'                         	DS	2
                                	EXTRN	FIELD,GET,PUT,LOAD,MERGE
  0083'   0000*                 	DW	OPEN
  00BF                          Q	SET	Q+1
  00BF                          $OPEN	SET	Q
  0085'   0000*                 	DW	FIELD
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-9
DISPATCH TABLES, RESERVED WORD TABLES

  00C0                          Q	SET	Q+1
  00C0                          $FIELD	SET	Q
  0087'   0000*                 	DW	GET
  00C1                          Q	SET	Q+1
  00C1                          $GET	SET	Q
  0089'   0000*                 	DW	PUT
  00C2                          Q	SET	Q+1
  00C2                          $PUT	SET	Q
  008B'   0000*                 	DW	CLOSE
  00C3                          Q	SET	Q+1
  00C3                          $CLOSE	SET	Q
  008D'   0000*                 	DW	LOAD
  00C4                          Q	SET	Q+1
  00C4                          $LOAD	SET	Q
  008F'   0000*                 	DW	MERGE
  00C5                          Q	SET	Q+1
  00C5                          $MERGE	SET	Q
                                	EXTRN	FILES
  0091'   0000*                 	DW	FILES
  00C6                          Q	SET	Q+1
  00C6                          $FILES	SET	Q
                                	EXTRN	NAME
  0093'   0000*                 	DW	NAME
  00C7                          Q	SET	Q+1
  00C7                          $NAME	SET	Q
                                	EXTRN	KILL,LSET,RSET,SAVE
  0095'   0000*                 	DW	KILL
  00C8                          Q	SET	Q+1
  00C8                          $KILL	SET	Q
  0097'   0000*                 	DW	LSET
  00C9                          Q	SET	Q+1
  00C9                          $LSET	SET	Q
  0099'   0000*                 	DW	RSET
  00CA                          Q	SET	Q+1
  00CA                          $RSET	SET	Q
  009B'   0000*                 	DW	SAVE
  00CB                          Q	SET	Q+1
  00CB                          $SAVE	SET	Q
                                	EXTRN	RESET
  009D'   0000*                 	DW	RESET
  00CC                          Q	SET	Q+1
  00CC                          $RESET	SET	Q
                                ; NCR VERSION ONES.
                                
  004C                          NUMCMD	SET	Q-$END+1
                                ; TOKENS
                                ;**********
                                ;PADDING INITIALLY SET TO 2 BETWEEN LAST DISK STATEMENT AND TOKENS
                                ;PADDING SET TO 1 - FEB 4, 1977
  00CD                          Q	SET	Q+1
                                ;Q MUST BE SET SO TOKENS START AT RIGHT PLACE
                                
                                
  00CE                          Q	SET	Q+1
  00CE                          $TO	SET	Q
  00CE                          $TO	SET	Q
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-10
DISPATCH TABLES, RESERVED WORD TABLES

  00CF                          Q	SET	Q+1
  00CF                          $THEN	SET	Q
  00CF                          THENTK	SET	Q
  00D0                          Q	SET	Q+1
  00D0                          $TAB	SET	Q
  00D0                          TABTK	SET	Q
  00D1                          Q	SET	Q+1
  00D1                          $STEP	SET	Q
  00D1                          STEPTK	SET	Q
                                
  00D2                          Q	SET	Q+1
  00D2                          $USR	SET	Q
  00D2                          USRTK	SET	Q
                                ; 8K FUNCTIONS
                                
  00D3                          Q	SET	Q+1
  00D3                          $FN	SET	Q
  00D3                          FNTK	SET	Q
  00D4                          Q	SET	Q+1
  00D4                          $SPC	SET	Q
  00D4                          SPCTK	SET	Q
  00D5                          Q	SET	Q+1
  00D5                          $NOT	SET	Q
  00D5                          NOTTK	SET	Q
                                
                                ; LEN2 TOKENS
                                
  00D6                          Q	SET	Q+1
  00D6                          $ERL	SET	Q
  00D6                          ERLTK	SET	Q
  00D7                          Q	SET	Q+1
  00D7                          $ERR	SET	Q
  00D7                          ERCTK	SET	Q
                                
                                ; EXTENDED TOKENS
                                
  00D8                          Q	SET	Q+1
  00D8                          $STRIN	SET	Q
  00D9                          Q	SET	Q+1
  00D9                          $USING	SET	Q
  00D9                          USINTK	SET	Q
  00DA                          Q	SET	Q+1
  00DA                          $INSTR	SET	Q
  00DA                          INSRTK	SET	Q
  00DB                          Q	SET	Q+1
  00DB                          $DUMMY	SET	Q
  00DB                          SNGQTK	SET	Q
  00DC                          Q	SET	Q+1
  00DC                          $VARPT	SET	Q
                                
                                ;NCR VERSION TOKENS
                                
                                ;SPCDSK TOKENS
  00DD                          Q	SET	Q+1
  00DD                          $INKEY	SET	Q
                                	PUBLIC	$INKEY
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-11
DISPATCH TABLES, RESERVED WORD TABLES

  00DC                          Q	SET	Q-1			;MAKE SURE DOESNT INTERFERE WITH RESWRDS BELOW
                                ;*********
                                ;PADDING INITIALLY SET TO 18
  00EE                          Q	SET	Q+18
                                
                                ; OPERATORS
                                
  00EF                          Q	SET	Q+1
  00EF                          $DUMMY	SET	Q
  00EF                          GREATK	SET	Q
  00F0                          Q	SET	Q+1
  00F0                          $DUMMY	SET	Q
  00F0                          EQULTK	SET	Q
  00F1                          Q	SET	Q+1
  00F1                          $DUMMY	SET	Q
  00F1                          LESSTK	SET	Q
  00F2                          Q	SET	Q+1
  00F2                          $DUMMY	SET	Q
  00F2                          PLUSTK	SET	Q
  00F3                          Q	SET	Q+1
  00F3                          $DUMMY	SET	Q
  00F3                          MINUTK	SET	Q
  00F4                          Q	SET	Q+1
  00F4                          $DUMMY	SET	Q
  00F4                          MULTK	SET	Q
  00F5                          Q	SET	Q+1
  00F5                          $DUMMY	SET	Q
  00F5                          DIVTK	SET	Q
                                
                                
                                ; 8K OPERATORS
                                
  00F6                          Q	SET	Q+1
  00F6                          $DUMMY	SET	Q
  00F6                          EXPTK	SET	Q
  00F7                          Q	SET	Q+1
  00F7                          $AND	SET	Q
  00F8                          Q	SET	Q+1
  00F8                          $OR	SET	Q
                                
                                ; EXTENDED OPERATORS
                                
  00F9                          Q	SET	Q+1
  00F9                          $XOR	SET	Q
  00FA                          Q	SET	Q+1
  00FA                          $EQV	SET	Q
  00FB                          Q	SET	Q+1
  00FB                          $IMP	SET	Q
  00FC                          Q	SET	Q+1
  00FC                          $MOD	SET	Q
  00FD                          Q	SET	Q+1
  00FD                          $DUMMY	SET	Q
  00FD                          IDIVTK	SET	Q
  000C                          LSTOPK	SET	Q+1-PLUSTK
                                
                                ; FUNCTIONS
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-12
DISPATCH TABLES, RESERVED WORD TABLES

                                
  0080                          Q	SET	128
  009F'                         FUNDSP:
  009F'   0000*                 	DW	LEFT$
  0081                          Q	SET	Q+1
  0081                          $LEFT$	SET	Q
  0081                          ONEFUN	SET	Q
  00A1'   0000*                 	DW	RIGHT$
  0082                          Q	SET	Q+1
  0082                          $RIGHT	SET	Q
  00A3'   0000*                 	DW	MID$
  0083                          Q	SET	Q+1
  0083                          $MID$	SET	Q
  0083                          MIDTK	SET	Q
  00A5'   0000*                 	DW	SGN
  0084                          Q	SET	Q+1
  0084                          $SGN	SET	Q
  00A7'   0000*                 	DW	VINT
  0085                          Q	SET	Q+1
  0085                          $INT	SET	Q
  00A9'   0000*                 	DW	ABS
  0086                          Q	SET	Q+1
  0086                          $ABS	SET	Q
  00AB'                         SQRFIX:
  00AB'   0000*                 	DW	SQR
  0087                          Q	SET	Q+1
  0087                          $SQR	SET	Q
  0087                          SQRTK	SET	Q
  00AD'   0000*                 	DW	RND
  0088                          Q	SET	Q+1
  0088                          $RND	SET	Q
  00AF'                         SINFIX:
  00AF'   0000*                 	DW	SIN
  0089                          Q	SET	Q+1
  0089                          $SIN	SET	Q
                                
                                ; 8K FUNCTIONS
                                
  00B1'   0000*                 	DW	LOG
  008A                          Q	SET	Q+1
  008A                          $LOG	SET	Q
  00B3'   0000*                 	DW	EXP
  008B                          Q	SET	Q+1
  008B                          $EXP	SET	Q
  00B5'                         COSFIX:
  00B5'   0000*                 	DW	COS
  008C                          Q	SET	Q+1
  008C                          $COS	SET	Q
  00B7'                         TANFIX:
  00B7'   0000*                 	DW	TAN
  008D                          Q	SET	Q+1
  008D                          $TAN	SET	Q
  00B9'                         ATNFIX:
  00B9'   0000*                 	DW	ATN
  008E                          Q	SET	Q+1
  008E                          $ATN	SET	Q
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-13
DISPATCH TABLES, RESERVED WORD TABLES

  008E                          ATNTK	SET	Q
  00BB'   0000*                 	DW	FRE
  008F                          Q	SET	Q+1
  008F                          $FRE	SET	Q
                                
  00BD'   1F0B'                 	DW	FNINP
  0090                          Q	SET	Q+1
  0090                          $INP	SET	Q
  00BF'   1CEB'                 	DW	POS
  0091                          Q	SET	Q+1
  0091                          $POS	SET	Q
  00C1'   0000*                 	DW	LEN
  0092                          Q	SET	Q+1
  0092                          $LEN	SET	Q
  00C3'   0000*                 	DW	STR$
  0093                          Q	SET	Q+1
  0093                          $STR$	SET	Q
  00C5'   0000*                 	DW	VAL
  0094                          Q	SET	Q+1
  0094                          $VAL	SET	Q
  00C7'   0000*                 	DW	ASC
  0095                          Q	SET	Q+1
  0095                          $ASC	SET	Q
  00C9'   0000*                 	DW	CHR$
  0096                          Q	SET	Q+1
  0096                          $CHR$	SET	Q
  00CB'   21C1'                 	DW	PEEK
  0097                          Q	SET	Q+1
  0097                          $PEEK	SET	Q
  00CD'   0000*                 	DW	SPACE$
  0098                          Q	SET	Q+1
  0098                          $SPACE	SET	Q
  00CF'   0000*                 	DW	STRO$
  0099                          Q	SET	Q+1
  0099                          $OCT$	SET	Q
  00D1'   0000*                 	DW	STRH$
  009A                          Q	SET	Q+1
  009A                          $HEX$	SET	Q
  00D3'   1CE5'                 	DW	LPOS
  009B                          Q	SET	Q+1
  009B                          $LPOS	SET	Q
  009B                          LASNUM	SET	Q
                                
                                ; EXTENDED FUNCTIONS
                                
  00D5'   0000*                 	DW	FRCINT
  009C                          Q	SET	Q+1
  009C                          $CINT	SET	Q
  00D7'   0000*                 	DW	FRCSNG
  009D                          Q	SET	Q+1
  009D                          $CSNG	SET	Q
  00D9'   0000*                 	DW	FRCDBL
  009E                          Q	SET	Q+1
  009E                          $CDBL	SET	Q
                                	EXTRN	FIXER
  00DB'   0000*                 	DW	FIXER
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-14
DISPATCH TABLES, RESERVED WORD TABLES

  009F                          Q	SET	Q+1
  009F                          $DUMMY	SET	Q
  009F                          $FIX	SET	Q
                                
                                ;NCR VERSION FUNCTIONS
                                
                                
                                ; DISK FUNCTIONS
                                
                                ;**********
                                ;PADDING INITIALLY SET TO 10
  00A9                          Q	SET	Q+10
  00DD'                         	DS	20
  00F1'                         	DS	2			;PAD IN THE HOLE
  00AA                          Q	SET	Q+1
                                	EXTRN	CVI,CVS,CVD
  00F3'   0000*                 	DW	CVI
  00AB                          Q	SET	Q+1
  00AB                          $CVI	SET	Q
  00F5'   0000*                 	DW	CVS
  00AC                          Q	SET	Q+1
  00AC                          $CVS	SET	Q
  00F7'   0000*                 	DW	CVD
  00AD                          Q	SET	Q+1
  00AD                          $CVD	SET	Q
  00F9'                         	DS	2			;PAD IN THE HOLE
  00AE                          Q	SET	Q+1
                                	EXTRN	EOF,LOC
  00FB'   0000*                 	DW	EOF
  00AF                          Q	SET	Q+1
  00AF                          $EOF	SET	Q
  00FD'   0000*                 	DW	LOC
  00B0                          Q	SET	Q+1
  00B0                          $LOC	SET	Q
                                	EXTRN	LOF
  00FF'   0000*                 	DW	LOF
  00B1                          Q	SET	Q+1
  00B1                          $LOF	SET	Q
                                	EXTRN	MKI$,MKS$,MKD$
  0101'   0000*                 	DW	MKI$
  00B2                          Q	SET	Q+1
  00B2                          $MKI$	SET	Q
  0103'   0000*                 	DW	MKS$
  00B3                          Q	SET	Q+1
  00B3                          $MKS$	SET	Q
  0105'   0000*                 	DW	MKD$
  00B4                          Q	SET	Q+1
  00B4                          $MKD$	SET	Q
                                					;END DISK FUNCTIONS
                                ; SPCDSK FUNCTIONS
                                ; THE FOLLOWING TABLES ARE THE ALPHABETIC DISPATCH TABLE
                                ; FOLLOWED BY THE RESERVED WORD TABLE ITSELF
                                
  0107'                         ALPTAB:
                                
  0107'   013B'                 	DW	ATAB
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-15
DISPATCH TABLES, RESERVED WORD TABLES

  0109'   014C'                 	DW	BTAB
  010B'   014D'                 	DW	CTAB
  010D'   0187'                 	DW	DTAB
  010F'   01B0'                 	DW	ETAB
  0111'   01D5'                 	DW	FTAB
  0113'   01EB'                 	DW	GTAB
  0115'   01FD'                 	DW	HTAB
  0117'   0202'                 	DW	ITAB
  0119'   021E'                 	DW	JTAB
  011B'   021F'                 	DW	KTAB
  011D'   0224'                 	DW	LTAB
  011F'   0258'                 	DW	MTAB
  0121'   0271'                 	DW	NTAB
  0123'   0284'                 	DW	OTAB
  0125'   029A'                 	DW	PTAB
  0127'   02AE'                 	DW	QTAB
  0129'   02AF'                 	DW	RTAB
  012B'   02ED'                 	DW	STAB
  012D'   0322'                 	DW	TTAB
  012F'   0339'                 	DW	UTAB
  0131'   0342'                 	DW	VTAB
  0133'   034C'                 	DW	WTAB
  0135'   0364'                 	DW	XTAB
  0137'   0368'                 	DW	YTAB
  0139'   0369'                 	DW	ZTAB
                                
                                
                                ; THE FOLLOWING MACRO IS FOR FUNCTIONS. IT DOESNT TURN THE TOKEN BIT 7 ON.
                                
  013B'                         RESLST:
                                
  013B'                         ATAB:
  013B'   4E                    	DB	'N'
  013C'   C4                    	DB	'D' OR 128
  013D'   F7                    	DB	$AND
  013E'   42                    	DB	'B'
  013F'   D3                    	DB	'S' OR 128
  0140'   06                    	DB	$ABS-128
  0141'   54                    	DB	'T'
  0142'   CE                    	DB	'N' OR 128
  0143'   0E                    	DB	$ATN-128
  0144'   53                    	DB	'S'
  0145'   C3                    	DB	'C' OR 128
  0146'   15                    	DB	$ASC-128
  0147'   55 54                 	DB	'UT'
  0149'   CF                    	DB	'O' OR 128
  014A'   AB                    	DB	$AUTO
  014B'   00                    	DB	0
                                
  014C'                         BTAB:
  014C'   00                    	DB	0
                                
  014D'                         CTAB:
  014D'   4C 4F 53              	DB	'LOS'
  0150'   C5                    	DB	'E' OR 128
  0151'   C3                    	DB	$CLOSE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-16
DISPATCH TABLES, RESERVED WORD TABLES

  0152'   4F 4E                 	DB	'ON'
  0154'   D4                    	DB	'T' OR 128
  0155'   9A                    	DB	$CONT
  0156'   4C 45 41              	DB	'LEA'
  0159'   D2                    	DB	'R' OR 128
  015A'   92                    	DB	$CLEAR
  015B'   49 4E                 	DB	'IN'
  015D'   D4                    	DB	'T' OR 128
  015E'   1C                    	DB	$CINT-128
  015F'   53 4E                 	DB	'SN'
  0161'   C7                    	DB	'G' OR 128
  0162'   1D                    	DB	$CSNG-128
  0163'   44 42                 	DB	'DB'
  0165'   CC                    	DB	'L' OR 128
  0166'   1E                    	DB	$CDBL-128
  0167'   56                    	DB	'V'
  0168'   C9                    	DB	'I' OR 128
  0169'   2B                    	DB	$CVI-128
  016A'   56                    	DB	'V'
  016B'   D3                    	DB	'S' OR 128
  016C'   2C                    	DB	$CVS-128
  016D'   56                    	DB	'V'
  016E'   C4                    	DB	'D' OR 128
  016F'   2D                    	DB	$CVD-128
  0170'   4F                    	DB	'O'
  0171'   D3                    	DB	'S' OR 128
  0172'   0C                    	DB	$COS-128
  0173'   48 52                 	DB	'HR'
  0175'   A4                    	DB	'$' OR 128
  0176'   16                    	DB	$CHR$-128
  0177'   41 4C                 	DB	'AL'
  0179'   CC                    	DB	'L' OR 128
  017A'   B6                    	DB	$CALL
  017B'   4F 4D 4D 4F           	DB	'OMMO'
  017F'   CE                    	DB	'N' OR 128
  0180'   B8                    	DB	$COMMO
  0181'   48 41 49              	DB	'HAI'
  0184'   CE                    	DB	'N' OR 128
  0185'   B9                    	DB	$CHAIN
  0186'   00                    	DB	0
                                
  0187'                         DTAB:
                                
  0187'   41 54                 	DB	'AT'
  0189'   C1                    	DB	'A' OR 128
  018A'   84                    	DB	$DATA
  018B'   49                    	DB	'I'
  018C'   CD                    	DB	'M' OR 128
  018D'   86                    	DB	$DIM
  018E'   45 46 53 54           	DB	'EFST'
  0192'   D2                    	DB	'R' OR 128
  0193'   AD                    	DB	$DEFST
  0194'   45 46 49 4E           	DB	'EFIN'
  0198'   D4                    	DB	'T' OR 128
  0199'   AE                    	DB	$DEFIN
  019A'   45 46 53 4E           	DB	'EFSN'
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-17
DISPATCH TABLES, RESERVED WORD TABLES

  019E'   C7                    	DB	'G' OR 128
  019F'   AF                    	DB	$DEFSN
  01A0'   45 46 44 42           	DB	'EFDB'
  01A4'   CC                    	DB	'L' OR 128
  01A5'   B0                    	DB	$DEFDB
  01A6'   45                    	DB	'E'
  01A7'   C6                    	DB	'F' OR 128
  01A8'   98                    	DB	$DEF
  01A9'   45 4C 45 54           	DB	'ELET'
  01AD'   C5                    	DB	'E' OR 128
  01AE'   AA                    	DB	$DELET
                                
                                
  01AF'   00                    	DB	0
                                
  01B0'                         ETAB:
  01B0'   4E                    	DB	'N'
  01B1'   C4                    	DB	'D' OR 128
  01B2'   81                    	DB	$END
  01B3'   4C 53                 	DB	'LS'
  01B5'   C5                    	DB	'E' OR 128
  01B6'   A2                    	DB	$ELSE
  01B7'   52 41 53              	DB	'RAS'
  01BA'   C5                    	DB	'E' OR 128
  01BB'   A6                    	DB	$ERASE
  01BC'   44 49                 	DB	'DI'
  01BE'   D4                    	DB	'T' OR 128
  01BF'   A7                    	DB	$EDIT
  01C0'   52 52 4F              	DB	'RRO'
  01C3'   D2                    	DB	'R' OR 128
  01C4'   A8                    	DB	$ERROR
  01C5'   52                    	DB	'R'
  01C6'   CC                    	DB	'L' OR 128
  01C7'   D6                    	DB	$ERL
  01C8'   52                    	DB	'R'
  01C9'   D2                    	DB	'R' OR 128
  01CA'   D7                    	DB	$ERR
  01CB'   58                    	DB	'X'
  01CC'   D0                    	DB	'P' OR 128
  01CD'   0B                    	DB	$EXP-128
  01CE'   4F                    	DB	'O'
  01CF'   C6                    	DB	'F' OR 128
  01D0'   2F                    	DB	$EOF-128
  01D1'   51                    	DB	'Q'
  01D2'   D6                    	DB	'V' OR 128
  01D3'   FA                    	DB	$EQV
  01D4'   00                    	DB	0
                                
  01D5'                         FTAB:
  01D5'   4F                    	DB	'O'
  01D6'   D2                    	DB	'R' OR 128
  01D7'   82                    	DB	$FOR
  01D8'   49 45 4C              	DB	'IEL'
  01DB'   C4                    	DB	'D' OR 128
  01DC'   C0                    	DB	$FIELD
  01DD'   49 4C 45              	DB	'ILE'
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-18
DISPATCH TABLES, RESERVED WORD TABLES

  01E0'   D3                    	DB	'S' OR 128
  01E1'   C6                    	DB	$FILES
  01E2'                         	DB	''
  01E2'   CE                    	DB	'N' OR 128
  01E3'   D3                    	DB	$FN
  01E4'   52                    	DB	'R'
  01E5'   C5                    	DB	'E' OR 128
  01E6'   0F                    	DB	$FRE-128
  01E7'   49                    	DB	'I'
  01E8'   D8                    	DB	'X' OR 128
  01E9'   1F                    	DB	$FIX-128
                                
                                
                                
  01EA'   00                    	DB	0
                                
  01EB'                         GTAB:
  01EB'   4F 54                 	DB	'OT'
  01ED'   CF                    	DB	'O' OR 128
  01EE'   89                    	DB	$GOTO
  01EF'   4F                    	DB	'O'
  01F0'   20                    	DB	' '
  01F1'   54                    	DB	'T'
  01F2'   CF                    	DB	'O'+128
  01F3'   89                    	DB	$GOTO
  01F4'   4F 53 55              	DB	'OSU'
  01F7'   C2                    	DB	'B' OR 128
  01F8'   8D                    	DB	$GOSUB
  01F9'   45                    	DB	'E'
  01FA'   D4                    	DB	'T' OR 128
  01FB'   C1                    	DB	$GET
  01FC'   00                    	DB	0
                                
  01FD'                         HTAB:
  01FD'   45 58                 	DB	'EX'
  01FF'   A4                    	DB	'$' OR 128
  0200'   1A                    	DB	$HEX$-128
  0201'   00                    	DB	0
                                
  0202'                         ITAB:
  0202'   4E 50 55              	DB	'NPU'
  0205'   D4                    	DB	'T' OR 128
  0206'   85                    	DB	$INPUT
  0207'                         	DB	''
  0207'   C6                    	DB	'F' OR 128
  0208'   8B                    	DB	$IF
  0209'   4E 53 54              	DB	'NST'
  020C'   D2                    	DB	'R' OR 128
  020D'   DA                    	DB	$INSTR
  020E'   4E                    	DB	'N'
  020F'   D4                    	DB	'T' OR 128
  0210'   05                    	DB	$INT-128
  0211'   4E                    	DB	'N'
  0212'   D0                    	DB	'P' OR 128
  0213'   10                    	DB	$INP-128
  0214'   4D                    	DB	'M'
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-19
DISPATCH TABLES, RESERVED WORD TABLES

  0215'   D0                    	DB	'P' OR 128
  0216'   FB                    	DB	$IMP
  0217'   4E 4B 45 59           	DB	'NKEY'
  021B'   A4                    	DB	'$' OR 128
  021C'   DD                    	DB	$INKEY
  021D'   00                    	DB	0
                                
  021E'                         JTAB:
  021E'   00                    	DB	0
                                
  021F'                         KTAB:
  021F'   49 4C                 	DB	'IL'
  0221'   CC                    	DB	'L' OR 128
  0222'   C8                    	DB	$KILL
  0223'   00                    	DB	0
                                
  0224'                         LTAB:
  0224'   45                    	DB	'E'
  0225'   D4                    	DB	'T' OR 128
  0226'   88                    	DB	$LET
  0227'   49 4E                 	DB	'IN'
  0229'   C5                    	DB	'E' OR 128
  022A'   B1                    	DB	$LINE
  022B'   4F 41                 	DB	'OA'
  022D'   C4                    	DB	'D' OR 128
  022E'   C4                    	DB	$LOAD
  022F'   53 45                 	DB	'SE'
  0231'   D4                    	DB	'T' OR 128
  0232'   C9                    	DB	$LSET
  0233'   50 52 49 4E           	DB	'PRIN'
  0237'   D4                    	DB	'T' OR 128
  0238'   9E                    	DB	$LPRIN
  0239'   4C 49 53              	DB	'LIS'
  023C'   D4                    	DB	'T' OR 128
  023D'   9F                    	DB	$LLIST
  023E'   50 4F                 	DB	'PO'
  0240'   D3                    	DB	'S' OR 128
  0241'   1B                    	DB	$LPOS-128
  0242'   49 53                 	DB	'IS'
  0244'   D4                    	DB	'T' OR 128
  0245'   93                    	DB	$LIST
  0246'   4F                    	DB	'O'
  0247'   C7                    	DB	'G' OR 128
  0248'   0A                    	DB	$LOG-128
  0249'   4F                    	DB	'O'
  024A'   C3                    	DB	'C' OR 128
  024B'   30                    	DB	$LOC-128
  024C'   45                    	DB	'E'
  024D'   CE                    	DB	'N' OR 128
  024E'   12                    	DB	$LEN-128
  024F'   45 46 54              	DB	'EFT'
  0252'   A4                    	DB	'$' OR 128
  0253'   01                    	DB	$LEFT$-128
  0254'   4F                    	DB	'O'
  0255'   C6                    	DB	'F' OR 128
  0256'   31                    	DB	$LOF-128
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-20
DISPATCH TABLES, RESERVED WORD TABLES

  0257'   00                    	DB	0
                                
  0258'                         MTAB:
  0258'   45 52 47              	DB	'ERG'
  025B'   C5                    	DB	'E' OR 128
  025C'   C5                    	DB	$MERGE
  025D'   4F                    	DB	'O'
  025E'   C4                    	DB	'D' OR 128
  025F'   FC                    	DB	$MOD
  0260'   4B 49                 	DB	'KI'
  0262'   A4                    	DB	'$' OR 128
  0263'   32                    	DB	$MKI$-128
  0264'   4B 53                 	DB	'KS'
  0266'   A4                    	DB	'$' OR 128
  0267'   33                    	DB	$MKS$-128
  0268'   4B 44                 	DB	'KD'
  026A'   A4                    	DB	'$' OR 128
  026B'   34                    	DB	$MKD$-128
  026C'   49 44                 	DB	'ID'
  026E'   A4                    	DB	'$' OR 128
  026F'   03                    	DB	$MID$-128
  0270'   00                    	DB	0
                                
  0271'                         NTAB:
  0271'   45 58                 	DB	'EX'
  0273'   D4                    	DB	'T' OR 128
  0274'   83                    	DB	$NEXT
  0275'   55 4C                 	DB	'UL'
  0277'   CC                    	DB	'L' OR 128
  0278'   96                    	DB	$NULL
  0279'   41 4D                 	DB	'AM'
  027B'   C5                    	DB	'E' OR 128
  027C'   C7                    	DB	$NAME
  027D'   45                    	DB	'E'
  027E'   D7                    	DB	'W' OR 128
  027F'   94                    	DB	$NEW
  0280'   4F                    	DB	'O'
  0281'   D4                    	DB	'T' OR 128
  0282'   D5                    	DB	$NOT
  0283'   00                    	DB	0
                                
  0284'                         OTAB:
  0284'   55                    	DB	'U'
  0285'   D4                    	DB	'T' OR 128
  0286'   9D                    	DB	$OUT
  0287'                         	DB	''
  0287'   CE                    	DB	'N' OR 128
  0288'   95                    	DB	$ON
  0289'   50 45                 	DB	'PE'
  028B'   CE                    	DB	'N' OR 128
  028C'   BF                    	DB	$OPEN
  028D'                         	DB	''
  028D'   D2                    	DB	'R' OR 128
  028E'   F8                    	DB	$OR
  028F'   43 54                 	DB	'CT'
  0291'   A4                    	DB	'$' OR 128
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-21
DISPATCH TABLES, RESERVED WORD TABLES

  0292'   19                    	DB	$OCT$-128
                                
  0293'   50 54 49 4F           	DB	'PTIO'
  0297'   CE                    	DB	'N' OR 128
  0298'   BA                    	DB	$OPTIO
                                
  0299'   00                    	DB	0
                                
  029A'                         PTAB:
  029A'   55                    	DB	'U'
  029B'   D4                    	DB	'T' OR 128
  029C'   C2                    	DB	$PUT
  029D'   4F 4B                 	DB	'OK'
  029F'   C5                    	DB	'E' OR 128
  02A0'   99                    	DB	$POKE
  02A1'   52 49 4E              	DB	'RIN'
  02A4'   D4                    	DB	'T' OR 128
  02A5'   91                    	DB	$PRINT
  02A6'   4F                    	DB	'O'
  02A7'   D3                    	DB	'S' OR 128
  02A8'   11                    	DB	$POS-128
  02A9'   45 45                 	DB	'EE'
  02AB'   CB                    	DB	'K' OR 128
  02AC'   17                    	DB	$PEEK-128
  02AD'   00                    	DB	0
  02AE'                         QTAB:
  02AE'   00                    	DB	0
                                
  02AF'                         RTAB:
  02AF'   45 41                 	DB	'EA'
  02B1'   C4                    	DB	'D' OR 128
  02B2'   87                    	DB	$READ
  02B3'   55                    	DB	'U'
  02B4'   CE                    	DB	'N' OR 128
  02B5'   8A                    	DB	$RUN
  02B6'   45 53 54 4F           	DB	'ESTOR'
  02BA'   52                    
  02BB'   C5                    	DB	'E' OR 128
  02BC'   8C                    	DB	$RESTO
  02BD'   45 54 55 52           	DB	'ETUR'
  02C1'   CE                    	DB	'N' OR 128
  02C2'   8E                    	DB	$RETUR
  02C3'   45                    	DB	'E'
  02C4'   CD                    	DB	'M' OR 128
  02C5'   8F                    	DB	$REM
  02C6'   45 53 55 4D           	DB	'ESUM'
  02CA'   C5                    	DB	'E' OR 128
  02CB'   A9                    	DB	$RESUM
  02CC'   53 45                 	DB	'SE'
  02CE'   D4                    	DB	'T' OR 128
  02CF'   CA                    	DB	$RSET
  02D0'   49 47 48 54           	DB	'IGHT'
  02D4'   A4                    	DB	'$' OR 128
  02D5'   02                    	DB	$RIGHT-128
  02D6'   4E                    	DB	'N'
  02D7'   C4                    	DB	'D' OR 128
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-22
DISPATCH TABLES, RESERVED WORD TABLES

  02D8'   08                    	DB	$RND-128
  02D9'   45 4E 55              	DB	'ENU'
  02DC'   CD                    	DB	'M' OR 128
  02DD'   AC                    	DB	$RENUM
  02DE'   45 53 45              	DB	'ESE'
  02E1'   D4                    	DB	'T' OR 128
  02E2'   CC                    	DB	$RESET
  02E3'   41 4E 44 4F           	DB	'ANDOMIZ'
  02E7'   4D 49 5A              
  02EA'   C5                    	DB	'E' OR 128
  02EB'   BB                    	DB	$RANDO
  02EC'   00                    	DB	0
                                
  02ED'                         STAB:
  02ED'   54 4F                 	DB	'TO'
  02EF'   D0                    	DB	'P' OR 128
  02F0'   90                    	DB	$STOP
  02F1'   57 41                 	DB	'WA'
  02F3'   D0                    	DB	'P' OR 128
  02F4'   A5                    	DB	$SWAP
  02F5'   41 56                 	DB	'AV'
  02F7'   C5                    	DB	'E' OR 128
  02F8'   CB                    	DB	$SAVE
  02F9'   50                    	DB	'P'
  02FA'   43                    	DB	'C'
  02FB'   A8                    	DB	'('+128
  02FC'   D4                    	DB	SPCTK
  02FD'   54 45                 	DB	'TE'
  02FF'   D0                    	DB	'P' OR 128
  0300'   D1                    	DB	$STEP
  0301'   47                    	DB	'G'
  0302'   CE                    	DB	'N' OR 128
  0303'   04                    	DB	$SGN-128
  0304'   51                    	DB	'Q'
  0305'   D2                    	DB	'R' OR 128
  0306'   07                    	DB	$SQR-128
  0307'   49                    	DB	'I'
  0308'   CE                    	DB	'N' OR 128
  0309'   09                    	DB	$SIN-128
  030A'   54 52                 	DB	'TR'
  030C'   A4                    	DB	'$' OR 128
  030D'   13                    	DB	$STR$-128
  030E'   54 52 49 4E           	DB	'TRING'
  0312'   47                    
  0313'   A4                    	DB	'$' OR 128
  0314'   D8                    	DB	$STRIN
  0315'   50 41 43 45           	DB	'PACE'
  0319'   A4                    	DB	'$' OR 128
  031A'   18                    	DB	$SPACE-128
                                
  031B'   59 53 54 45           	DB	'YSTE'
  031F'   CD                    	DB	'M' OR 128
  0320'   BD                    	DB	$SYSTE
  0321'   00                    	DB	0
                                
  0322'                         TTAB:
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-23
DISPATCH TABLES, RESERVED WORD TABLES

  0322'   52 4F                 	DB	'RO'
  0324'   CE                    	DB	'N' OR 128
  0325'   A3                    	DB	$TRON
  0326'   52 4F 46              	DB	'ROF'
  0329'   C6                    	DB	'F' OR 128
  032A'   A4                    	DB	$TROFF
  032B'   41                    	DB	'A'
  032C'   42                    	DB	'B'
  032D'   A8                    	DB	'('+128
  032E'   D0                    	DB	TABTK
  032F'                         	DB	''
  032F'   CF                    	DB	'O' OR 128
  0330'   CE                    	DB	$TO
  0331'   48 45                 	DB	'HE'
  0333'   CE                    	DB	'N' OR 128
  0334'   CF                    	DB	$THEN
  0335'   41                    	DB	'A'
  0336'   CE                    	DB	'N' OR 128
  0337'   0D                    	DB	$TAN-128
  0338'   00                    	DB	0
                                
  0339'                         UTAB:
  0339'   53 49 4E              	DB	'SIN'
  033C'   C7                    	DB	'G' OR 128
  033D'   D9                    	DB	$USING
  033E'   53                    	DB	'S'
  033F'   D2                    	DB	'R' OR 128
  0340'   D2                    	DB	$USR
  0341'   00                    	DB	0
                                
  0342'                         VTAB:
  0342'   41                    	DB	'A'
  0343'   CC                    	DB	'L' OR 128
  0344'   14                    	DB	$VAL-128
  0345'   41 52 50 54           	DB	'ARPT'
  0349'   D2                    	DB	'R' OR 128
  034A'   DC                    	DB	$VARPT
  034B'   00                    	DB	0
                                
  034C'                         WTAB:
  034C'   49 44 54              	DB	'IDT'
  034F'   C8                    	DB	'H' OR 128
  0350'   A1                    	DB	$WIDTH
  0351'   41 49                 	DB	'AI'
  0353'   D4                    	DB	'T' OR 128
  0354'   97                    	DB	$WAIT
  0355'   48 49 4C              	DB	'HIL'
  0358'   C5                    	DB	'E' OR 128
  0359'   B4                    	DB	$WHILE
  035A'   45 4E                 	DB	'EN'
  035C'   C4                    	DB	'D' OR 128
  035D'   B5                    	DB	$WEND
  035E'   52 49 54              	DB	'RIT'
  0361'   C5                    	DB	'E' OR 128
  0362'   B7                    	DB	$WRITE
  0363'   00                    	DB	0
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-24
DISPATCH TABLES, RESERVED WORD TABLES

                                
  0364'                         XTAB:
  0364'   4F                    	DB	'O'
  0365'   D2                    	DB	'R' OR 128
  0366'   F9                    	DB	$XOR
  0367'   00                    	DB	0
  0368'                         YTAB:
  0368'   00                    	DB	0
  0369'                         ZTAB:
  0369'   00                    	DB	0
                                
  036A'                         SPCTAB:
  036A'   AB                    	DB	'+'+128
  036B'   F2                    	DB	PLUSTK
  036C'   AD                    	DB	'-'+128
  036D'   F3                    	DB	MINUTK
  036E'   AA                    	DB	'*'+128
  036F'   F4                    	DB	MULTK
  0370'   AF                    	DB	'/'+128
  0371'   F5                    	DB	DIVTK
  0372'   DE                    	DB	'^'+128
  0373'   F6                    	DB	EXPTK
  0374'   DC                    	DB	'\'+128
  0375'   FD                    	DB	IDIVTK
  0376'   A7                    	DB	''''+128
  0377'   DB                    	DB	SNGQTK
  0378'   BE                    	DB	62+128
  0379'   EF                    	DB	GREATK
  037A'   BD                    	DB	'='+128
  037B'   F0                    	DB	EQULTK
  037C'   BC                    	DB	60+128
  037D'   F1                    	DB	LESSTK
  037E'   00                    	DB	0
                                
  037F'   79                    OPTAB:	DB	121			;OPERATOR TABLE CONTAINS
                                					;PRECEDENCE FOLLOWED BY
                                					;THE ROUTINE ADDRESS
  0380'   79                    	DB	121
  0381'   7C                    	DB	124
  0382'   7C                    	DB	124
  0383'   7F                    	DB	127
  0384'   50                    	DB	80
  0385'   46                    	DB	70
  0386'   3C                    	DB	60			;PRECEDENCE OF "XOR"
  0387'   32                    	DB	50			;PRECEDENCE OF "EQV"
  0388'   28                    	DB	40			;PRECEDENCE OF "IMP"
  0389'   7A                    	DB	122			;PRECEDENCE OF "MOD"
  038A'   7B                    	DB	123			;PRECEDENCE OF "IDIV"
                                
                                ;
                                ; USED BY ASSIGNMENT CODE TO FORCE THE RIGHT HAND VALUE
                                ; TO CORRESPOND TO THE VALUE TYPE OF THE VARIABLE BEING
                                ; ASSIGNED TO.
                                ;
  038B'   0000*                 FRCTBL:	DW	FRCDBL
  038D'                         	DS	2
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-25
DISPATCH TABLES, RESERVED WORD TABLES

  038F'   0000*                 	DW	FRCINT
  0391'   0000*                 	DW	CHKSTR
  0393'   0000*                 	DW	FRCSNG
                                ;
                                ; THESE TABLES ARE USED AFTER THE DECISION HAS BEEN MADE
                                ; TO APPLY AN OPERATOR AND ALL THE NECESSARY CONVERSION HAS
                                ; BEEN DONE TO MATCH THE TWO ARGUMENT TYPES (APPLOP)
                                ;
  0395'   0000*                 DBLDSP:	DW	DADD			;DOUBLE PRECISION ROUTINES
  0397'   0000*                 	DW	DSUB
  0399'   0000*                 	DW	DMULT
  039B'   0000*                 	DW	DDIV
  039D'   0000*                 	DW	DCOMP
  0004                          OPCNT	SET	(($-DBLDSP)/2)-1
  039F'   0000*                 SNGDSP:	DW	FADD			;SINGLE PRECISION ROUTINES
  03A1'   0000*                 	DW	FSUB
  03A3'   0000*                 	DW	FMULT
  03A5'   0000*                 	DW	FDIV
  03A7'   0000*                 	DW	FCOMP
  03A9'   0000*                 INTDSP:	DW	IADD			;INTEGER ROUTINES
  03AB'   0000*                 	DW	ISUB
  03AD'   0000*                 	DW	IMULT
  03AF'   1A9F'                 	DW	INTDIV
  03B1'   0000*                 	DW	ICOMP
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-26
DISPATCH TABLES, RESERVED WORD TABLES

                                
                                	SUBTTL	ERROR MESSAGE TABLE
                                
  FFFE                          Q	SET	-2
                                
  03B3'                         ERRTAB:
  03B3'   00                    	DB	0
  0000                          Q	SET	0
  0001                          Q	SET	Q+1
  03B4'   4E 45 58 54           	DB	'NEXT without FOR',0
  03B8'   20 77 69 74           
  03BC'   68 6F 75 74           
  03C0'   20 46 4F 52           
  03C4'   00                    
  0001                          ERRNF	SET	Q
  0002                          Q	SET	Q+1
  03C5'   53 79 6E 74           	DB	'Syntax error',0
  03C9'   61 78 20 65           
  03CD'   72 72 6F 72           
  03D1'   00                    
  0002                          ERRSN	SET	Q
  0003                          Q	SET	Q+1
  03D2'   52 45 54 55           	DB	'RETURN without GOSUB',0
  03D6'   52 4E 20 77           
  03DA'   69 74 68 6F           
  03DE'   75 74 20 47           
  03E2'   4F 53 55 42           
  03E6'   00                    
  0003                          ERRRG	SET	Q
  0004                          Q	SET	Q+1
  03E7'   4F 75 74 20           	DB	'Out of DATA',0
  03EB'   6F 66 20 44           
  03EF'   41 54 41 00           
  0004                          ERROD	SET	Q
  0005                          Q	SET	Q+1
  03F3'   49 6C 6C 65           	DB	'Illegal function call',0
  03F7'   67 61 6C 20           
  03FB'   66 75 6E 63           
  03FF'   74 69 6F 6E           
  0403'   20 63 61 6C           
  0407'   6C 00                 
  0005                          ERRFC	SET	Q
                                	PUBLIC	OVRMSG
  0409'                         OVRMSG:
  0006                          Q	SET	Q+1
  0409'   4F 76 65 72           	DB	'Overflow',0
  040D'   66 6C 6F 77           
  0411'   00                    
  0006                          ERROV	SET	Q
  0007                          Q	SET	Q+1
  0412'   4F 75 74 20           	DB	'Out of memory',0
  0416'   6F 66 20 6D           
  041A'   65 6D 6F 72           
  041E'   79 00                 
                                	PUBLIC	ERROM
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-27
ERROR MESSAGE TABLE

  0007                          ERROM	SET	Q
  0008                          Q	SET	Q+1
  0420'   55 6E 64 65           	DB	'Undefined line number',0
  0424'   66 69 6E 65           
  0428'   64 20 6C 69           
  042C'   6E 65 20 6E           
  0430'   75 6D 62 65           
  0434'   72 00                 
  0008                          ERRUS	SET	Q
  0009                          Q	SET	Q+1
  0436'   53 75 62 73           	DB	'Subscript out of range',0
  043A'   63 72 69 70           
  043E'   74 20 6F 75           
  0442'   74 20 6F 66           
  0446'   20 72 61 6E           
  044A'   67 65 00              
  0009                          ERRBS	SET	Q
  000A                          Q	SET	Q+1
  044D'   44 75 70 6C           	DB	'Duplicate Definition',0
  0451'   69 63 61 74           
  0455'   65 20 44 65           
  0459'   66 69 6E 69           
  045D'   74 69 6F 6E           
  0461'   00                    
  000A                          ERRDD	SET	Q
                                	PUBLIC	DIVMSG
  0462'                         DIVMSG:
  000B                          Q	SET	Q+1
  0462'   44 69 76 69           	DB	'Division by zero',0
  0466'   73 69 6F 6E           
  046A'   20 62 79 20           
  046E'   7A 65 72 6F           
  0472'   00                    
  000B                          ERRDV0	SET	Q
  000C                          Q	SET	Q+1
  0473'   49 6C 6C 65           	DB	'Illegal direct',0
  0477'   67 61 6C 20           
  047B'   64 69 72 65           
  047F'   63 74 00              
  000C                          ERRID	SET	Q
  000D                          Q	SET	Q+1
  0482'   54 79 70 65           	DB	'Type mismatch',0
  0486'   20 6D 69 73           
  048A'   6D 61 74 63           
  048E'   68 00                 
  000D                          ERRTM	SET	Q
  000E                          Q	SET	Q+1
  0490'   4F 75 74 20           	DB	'Out of string space',0
  0494'   6F 66 20 73           
  0498'   74 72 69 6E           
  049C'   67 20 73 70           
  04A0'   61 63 65 00           
  000E                          ERRSO	SET	Q
  000F                          Q	SET	Q+1
  04A4'   53 74 72 69           	DB	'String too long',0
  04A8'   6E 67 20 74           
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-28
ERROR MESSAGE TABLE

  04AC'   6F 6F 20 6C           
  04B0'   6F 6E 67 00           
  000F                          ERRLS	SET	Q
  0010                          Q	SET	Q+1
  04B4'   53 74 72 69           	DB	'String formula too complex',0
  04B8'   6E 67 20 66           
  04BC'   6F 72 6D 75           
  04C0'   6C 61 20 74           
  04C4'   6F 6F 20 63           
  04C8'   6F 6D 70 6C           
  04CC'   65 78 00              
  0010                          ERRST	SET	Q
  0011                          Q	SET	Q+1
  04CF'   43 61 6E 27           	DB	'Can''t continue',0
  04D3'   74 20 63 6F           
  04D7'   6E 74 69 6E           
  04DB'   75 65 00              
  0011                          ERRCN	SET	Q
  0012                          Q	SET	Q+1
  04DE'   55 6E 64 65           	DB	'Undefined user function',0
  04E2'   66 69 6E 65           
  04E6'   64 20 75 73           
  04EA'   65 72 20 66           
  04EE'   75 6E 63 74           
  04F2'   69 6F 6E 00           
  0012                          ERRUF	SET	Q
  0013                          Q	SET	Q+1
  04F6'   4E 6F 20 52           	DB	'No RESUME',0
  04FA'   45 53 55 4D           
  04FE'   45 00                 
  0013                          ERRNR	SET	Q
  0014                          Q	SET	Q+1
  0500'   52 45 53 55           	DB	'RESUME without error',0
  0504'   4D 45 20 77           
  0508'   69 74 68 6F           
  050C'   75 74 20 65           
  0510'   72 72 6F 72           
  0514'   00                    
  0014                          ERRRE	SET	Q
  0015                          Q	SET	Q+1
  0515'   55 6E 70 72           	DB	'Unprintable error',0
  0519'   69 6E 74 61           
  051D'   62 6C 65 20           
  0521'   65 72 72 6F           
  0525'   72 00                 
  0015                          ERRUE	SET	Q
  0016                          Q	SET	Q+1
  0527'   4D 69 73 73           	DB	'Missing operand',0
  052B'   69 6E 67 20           
  052F'   6F 70 65 72           
  0533'   61 6E 64 00           
  0016                          ERRMO	SET	Q
                                	PUBLIC	ERRLBO
  0017                          Q	SET	Q+1
  0537'   4C 69 6E 65           	DB	'Line buffer overflow',0
  053B'   20 62 75 66           
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-29
ERROR MESSAGE TABLE

  053F'   66 65 72 20           
  0543'   6F 76 65 72           
  0547'   66 6C 6F 77           
  054B'   00                    
  0017                          ERRLBO	SET	Q
                                
  0018                          Q	SET	Q+1
  054C'   3F 00                 	DB	'?',0
  0019                          Q	SET	Q+1
  054E'   3F 00                 	DB	'?',0
  001A                          Q	SET	Q+1
  0550'   46 4F 52 20           	DB	'FOR Without NEXT',0
  0554'   57 69 74 68           
  0558'   6F 75 74 20           
  055C'   4E 45 58 54           
  0560'   00                    
  001A                          ERRFN	SET	Q
  001B                          Q	SET	Q+1
  0561'   3F 00                 	DB	'?',0
  001C                          Q	SET	Q+1
  0563'   3F 00                 	DB	'?',0
  001D                          Q	SET	Q+1
  0565'   57 48 49 4C           	DB	'WHILE without WEND',0
  0569'   45 20 77 69           
  056D'   74 68 6F 75           
  0571'   74 20 57 45           
  0575'   4E 44 00              
  001D                          ERRWH	SET	Q
  001E                          Q	SET	Q+1
  0578'   57 45 4E 44           	DB	'WEND without WHILE',0
  057C'   20 77 69 74           
  0580'   68 6F 75 74           
  0584'   20 57 48 49           
  0588'   4C 45 00              
  001E                          ERRWE	SET	Q
  001F                          Q	SET	Q+1
  058B'   47 72 61 70           	DB	'Graphics statement not implemented',0
  058F'   68 69 63 73           
  0593'   20 73 74 61           
  0597'   74 65 6D 65           
  059B'   6E 74 20 6E           
  059F'   6F 74 20 69           
  05A3'   6D 70 6C 65           
  05A7'   6D 65 6E 74           
  05AB'   65 64 00              
  001F                          ERRGS	SET	Q
  001F                          NONDSK	SET	Q			;LAST NON DISK ERROR.
                                
  0031                          Q	SET	49			;DISK ERRORS START AT 50.
  0031                          DSKERR	SET	Q			;FIRST DISK ERROR
  0032                          Q	SET	Q+1
  05AE'   46 49 45 4C           	DB	'FIELD overflow',0
  05B2'   44 20 6F 76           
  05B6'   65 72 66 6C           
  05BA'   6F 77 00              
                                	PUBLIC	ERRFOV
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-30
ERROR MESSAGE TABLE

  0032                          ERRFOV	SET	Q
  0033                          Q	SET	Q+1
  05BD'   49 6E 74 65           	DB	'Internal error',0
  05C1'   72 6E 61 6C           
  05C5'   20 65 72 72           
  05C9'   6F 72 00              
                                	PUBLIC	ERRIER
  0033                          ERRIER	SET	Q
  0034                          Q	SET	Q+1
  05CC'   42 61 64 20           	DB	'Bad file number',0
  05D0'   66 69 6C 65           
  05D4'   20 6E 75 6D           
  05D8'   62 65 72 00           
                                	PUBLIC	ERRBFN
  0034                          ERRBFN	SET	Q
  0035                          Q	SET	Q+1
  05DC'   46 69 6C 65           	DB	'File not found',0
  05E0'   20 6E 6F 74           
  05E4'   20 66 6F 75           
  05E8'   6E 64 00              
                                	PUBLIC	ERRFNF
  0035                          ERRFNF	SET	Q
  0036                          Q	SET	Q+1
  05EB'   42 61 64 20           	DB	'Bad file mode',0
  05EF'   66 69 6C 65           
  05F3'   20 6D 6F 64           
  05F7'   65 00                 
  0036                          ERRBFM	SET	Q
  0037                          Q	SET	Q+1
  05F9'   46 69 6C 65           	DB	'File already open',0
  05FD'   20 61 6C 72           
  0601'   65 61 64 79           
  0605'   20 6F 70 65           
  0609'   6E 00                 
  0037                          ERRFAO	SET	Q
  0038                          Q	SET	Q+1
  060B'   3F 00                 	DB	'?',0			;PAD IN HOLE
  0613'                         DSKLOC	SET	$+6
  0039                          Q	SET	Q+1
  060D'   44 69 73 6B           	DB	'Disk I/O error',0
  0611'   20 49 2F 4F           
  0615'   20 65 72 72           
  0619'   6F 72 00              
  0039                          ERRIOE	SET	Q
  003A                          Q	SET	Q+1
  061C'   46 69 6C 65           	DB	'File already exists',0
  0620'   20 61 6C 72           
  0624'   65 61 64 79           
  0628'   20 65 78 69           
  062C'   73 74 73 00           
  003A                          ERRFAE	SET	Q
  003B                          Q	SET	Q+1
  0630'   3F 00                 	DB	'?',0
  003C                          Q	SET	Q+1
  0632'   3F 00                 	DB	'?',0			;PAD IN HOLE
  003D                          Q	SET	Q+1
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-31
ERROR MESSAGE TABLE

  0634'   44 69 73 6B           	DB	'Disk full',0
  0638'   20 66 75 6C           
  063C'   6C 00                 
  003D                          ERRDFL	SET	Q
  003E                          Q	SET	Q+1
  063E'   49 6E 70 75           	DB	'Input past end',0
  0642'   74 20 70 61           
  0646'   73 74 20 65           
  064A'   6E 64 00              
  003E                          ERRRPE	SET	Q
  003F                          Q	SET	Q+1
  064D'   42 61 64 20           	DB	'Bad record number',0
  0651'   72 65 63 6F           
  0655'   72 64 20 6E           
  0659'   75 6D 62 65           
  065D'   72 00                 
  003F                          ERRBRN	SET	Q
  0040                          Q	SET	Q+1
  065F'   42 61 64 20           	DB	'Bad file name',0
  0663'   66 69 6C 65           
  0667'   20 6E 61 6D           
  066B'   65 00                 
  0040                          ERRNMF	SET	Q
  0041                          Q	SET	Q+1
  066D'   3F 00                 	DB	'?',0
  0041                          ERRMMM	SET	Q
  0042                          Q	SET	Q+1
  066F'   44 69 72 65           	DB	'Direct statement in file',0
  0673'   63 74 20 73           
  0677'   74 61 74 65           
  067B'   6D 65 6E 74           
  067F'   20 69 6E 20           
  0683'   66 69 6C 65           
  0687'   00                    
                                	PUBLIC	ERRFDR
  0042                          ERRFDR	SET	Q
  0043                          Q	SET	Q+1
  0688'   54 6F 6F 20           	DB	'Too many files',0
  068C'   6D 61 6E 79           
  0690'   20 66 69 6C           
  0694'   65 73 00              
  0043                          ERRTMF	SET	Q
                                
  0044                          LSTERR	SET	Q+1			;LAST ERROR USED FOR RANGE CHECKS IN LEN2
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-32
ERROR MESSAGE TABLE

                                
                                	SUBTTL	CONSTANTS FOR ROM BASIC I/O, RNDX, FDIV, USRGO
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-33
CONSTANTS FOR ROM BASIC I/O, RNDX, FDIV, USRGO

                                
                                	SUBTTL	LOW SEGMENT -- RAM -- IE THIS STUFF IS NOT CONSTANT
                                ;
                                ; THIS IS THE "VOLATILE" STORAGE AREA AND NONE OF IT
                                ; CAN BE KEPT IN ROM. ANY CONSTANTS IN THIS AREA CANNOT
                                ; BE KEPT IN A ROM, BUT MUST BE LOADED IN BY THE 
                                ; PROGRAM INSTRUCTIONS IN ROM.
                                ;
                                
  0697'                         USRTAB:
  0697'   134A'                 	DW	FCERR
  0699'   134A'                 	DW	FCERR
  069B'   134A'                 	DW	FCERR
  069D'   134A'                 	DW	FCERR
  069F'   134A'                 	DW	FCERR
  06A1'   134A'                 	DW	FCERR
  06A3'   134A'                 	DW	FCERR
  06A5'   134A'                 	DW	FCERR
  06A7'   134A'                 	DW	FCERR
  06A9'   134A'                 	DW	FCERR			;SET UP DISPATCHES
                                	PUBLIC	NULCNT
  06AB'   01                    NULCNT:	DB	1			;STORE HERE THE NUMBER OF NULLS
                                					;TO PRINT AFTER CRLF
                                	PUBLIC	CHARC
  06AC'   00                    CHARC:	DB	0			;ISCNTC STORES EATEN CHAR HERE WHEN NOT A ^C
                                	PUBLIC	ERRFLG
  06AD'   00                    ERRFLG:	DB	0			;USED TO SAVE THE ERROR NUMBER SO EDIT CAN BE
                                					;CALLED ON "SYNTAX ERROR"
                                	PUBLIC	LPTLST
  06AE'   00                    LPTLST:	DB	0			;LAST LINE PRINTER OPERATION. ZERO MEANS LINEFEED
                                					;NON-ZERO MEANS PRINT COMMAND (OKIA ONLY)
  06AF'   01                    LPTPOS:	DB	1			;POSITION OF LPT PRINT HEAD
  06B0'   00                    PRTFLG:	DB	0			;WHETHER OUTPUT GOES TO LPT
                                	PUBLIC	NLPPOS,LPTSIZ
  0070                          LNCMPS	SET	(((LPTLEN/CLMWID)-1)*CLMWID);LAST COMMA FIELD POSIT
  06B1'   70                    NLPPOS:	DB	LNCMPS			;LAST COL # BEYOND WHICH NO MORE COMMA FIELDS
  06B2'   84                    LPTSIZ:	DB	LPTLEN			;DEFAULT LINE PRINTER WIDTH
                                	PUBLIC	LINLEN
  06B3'   50                    LINLEN:	DB	LINLN			;LINE LENGTH
  0038                          NCMPOS	SET	(((LINLN/CLMWID)-1)*CLMWID);POSITION BEYOND WHICH THERE ARE
                                					;NO MORE COMMA FIELDS	
  06B4'   38                    CLMLST:	DB	NCMPOS			;POSITION OF LAST COMMA COLUMN
                                					;NON-ZERO MEANS SEND OUTPUT TO LPT
                                	PUBLIC	RUBSW
  06B5'   00                    RUBSW:	DB	0			;RUBOUT SWITCH =1 INSIDE
                                					;THE PROCESSING OF A RUBOUT (INLIN)
  06B6'   00                    CNTOFL:	DB	0			;SUPRESS OUTPUT FLAG
                                					;NON-ZERO MEANS SUPRESS
                                					;RESET BY "INPUT",READY AND ERRORS
                                					;COMPLEMENTED BY INPUT OF ^O
                                	PUBLIC	PTRFIL
  06B7'   0000                  PTRFIL:	DW	0			;POINTER TO DATA BLOCK OF CURRENT FILE
                                					;USED BY DISK AND NCR CASSETTE CODE
                                
  06B9'                         TOPMEM:
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-34
LOW SEGMENT -- RAM -- IE THIS STUFF IS NOT CONSTANT

  06B9'   0064*                 	DW	TSTACK+100		;TOP LOCATION TO USE FOR THE STACK
                                					;INITIALLY SET UP BY INIT
                                					;ACCORDING TO MEMORY SIZE
                                					;TO ALLOW FOR 50 BYTES OF STRING SPACE.
                                					;CHANGED BY A CLEAR COMMAND WITH
                                					;AN ARGUMENT.
  06BB'   FFFE                  CURLIN:	DW	0+65534			;CURRENT LINE #
                                					;SET TO 65534 IN PURE VERSION DURING INIT EXECUTION
                                					;SET TO 65535 WHEN DIRECT STATEMENTS EXECUTE
  06BD'   0001*                 TXTTAB:	DW	TSTACK+1		;POINTER TO BEGINNING OF TEXT
                                					;DOESN'T CHANGE AFTER BEING
                                					;SETUP BY INIT.
                                	PUBLIC	OVERRI
  06BF'   0409'                 OVERRI:	DW	OVRMSG			;ADDRESS OF MESSAGE TO PRINT (OVERFLOW)
                                					;DATA SEGMENT AGAIN
                                ;
                                ;	END OF INITIALIZED PART OF RAM
                                ;
                                ;
                                ; DISK DATA STORAGE AREA
                                ;
                                	PUBLIC	LSTFRE,MAXTRK,DSKMOD,FILPT1,FILPTR,MAXFIL
  06C1'                         LSTFRE:	DS	2			;FREE PLACE IN DIRECTORY
  06C3'                         MAXTRK:	DS	1			;ALLOCATE INSIDE THIS TRACK
  06C4'                         DSKMOD:	DS	1			;MODE OF FILE JUST LOOKED UP
                                					;ZERO IF FILE WAS JUST CREATED
  06C5'                         FILPT1:	DS	2			;[FILPTR] ALWAYS REFETCHED FROM HERE
  06C7'                         FILPTR:	DS	32			;POINTERS TO DATA BLOCKS FOR EACH FILE
  06E7'                         MAXFIL:	DS	1			;HIGHEST FILE NUMBER ALLOWED
                                	PUBLIC	NAMCNT,NAMBUF,NAMTMP
  06E8'                         NAMCNT:	DS	1			;THE NUMBER OF CHARACTER BEYOND #2 IN A VAR NAME
  06E9'                         NAMBUF:	DS	NAMLEN-2		;STORAGE FOR CHARS BEYOND #2. USED IN PTRGET
  070F'                         NAMTMP:	DS	2			;TEMP STORAGE DURING NAME SAVE AT INDLOP
                                	PUBLIC	DIRTMP,FILNA2,FILNAM
  0080                          DIRTMP	SET	CPMWRM+128		;USE CPM DEFAULT BUFFER IN LOW MEMORY
  0711'                         FILNA2:	DS	16			;USED BY NAME CODE
  0721'                         FILNAM:	DS	33			;BECAUSE CPM MUST HAVE BUFFER FOR DIRECTORY READS
                                
                                ;	CP/M 1.4 and 2.x Support
                                
                                	PUBLIC	CPMVRN,CPMREA,CPMWRI
                                
  0742'                         CPMVRN:	DS	1			;CP/M Version Number (#0 is 2.x)
  0743'                         CPMREA:	DS	1			;CP/M Read Call
  0744'                         CPMWRI:	DS	1			;CP/M Write Call
  0745'   3A                    	DB	':'			;a colon for restarting input
  0746'                         KBUF:	DS	KBFLEN			;THIS IS THE KRUNCH BUFFER
                                	PUBLIC	BUFMIN
  0884'   2C                    BUFMIN:	DB	44			;A COMMA (PRELOAD OR ROM)
                                					;USED BY INPUT STATEMENT SINCE THE
                                					;DATA POINTER ALWAYS STARTS ON A
                                					;COMMA OR TERMINATOR
  0885'                         BUF:	DS	BUFLEN+1		;TYPE IN STORED HERE
                                					;DIRECT STATEMENTS EXECUTE OUT OF
                                					;HERE. REMEMBER "INPUT" SMASHES BUF.
                                					;MUST BE AT A LOWER ADDRESS
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-35
LOW SEGMENT -- RAM -- IE THIS STUFF IS NOT CONSTANT

                                					;THAN DSCTMP OR ASSIGNMENT OF STRING
                                					;VALUES IN DIRECT STATEMENTS WON'T COPY
                                					;INTO STRING SPACE -- WHICH IT MUST
  0985'                         	DS	2			;ALLOW FOR SINGLE QUOTE IN BIG LINE
  0987'                         ENDBUF:	DS	1			;PLACE TO STOP BIG LINES
                                	PUBLIC	TTYPOS
  0988'                         TTYPOS:	DS	1			;STORE TERMINAL POSITION HERE
  0989'                         DIMFLG:	DS	1			;IN GETTING A POINTER TO A VARIABLE
                                					;IT IS IMPORTANT TO REMEMBER WHETHER IT
                                					;IS BEING DONE FOR "DIM" OR NOT
                                					;DIMFLG AND VALTYP MUST BE
                                					;CONSECUTIVE LOCATIONS
  098A'                         VALTYP:	DS	1			;THE TYPE INDICATOR
                                					;IN THE 8K 0=NUMERIC 1=STRING
  098B'                         OPRTYP:					;USED TO STORE OPERATOR NUMBER
                                					;IN THE EXTENDED MOMENTARILY BEFORE
                                					;OPERATOR APPLICATION (APPLOP)
  098B'                         DORES:	DS	1			;WHETHER CAN OR CAN'T CRUNCH RES'D WORDS
                                					;TURNED ON IN THE 8K WHEN "DATA"
                                					;BEING SCANNED BY CRUNCH SO UNQUOTED
                                					;STRINGS WON'T BE CRUNCHED.
  098C'                         DONUM:	DS	1			;FLAG FOR CRUNCH =0 MEANS
                                					;NUMBERS ALLOWED, (FLOATING,INT, DBL)
                                					;1 MEANS NUMBERS ALLOWED, KRUNCH BY CALLING LINGET
                                					;-1 (377) MEANS NUMBERS DISALLOWED 
                                					;(SCANNING VARIABLE NAME)
  098D'                         CONTXT:	DS	2			;SAVED TEXT POINTER USED BY CHRGET
                                					;TO SAVE THE TEXT POINTER AFTER CONSTANT
                                					;HAS BEEN SCANNED.
  098F'                         CONSAV:	DS	1			;THE SAVED TOKEN FOR A CONSTANT
                                					;AFTER CHRGET HAS BEEN CALLED
  0990'                         CONTYP:	DS	1			;SAVED CONSTANT VALTYPE
  0991'                         CONLO:	DS	4			;SAVED CONSTANT VALUE
  0995'                         	DS	4			;EXTRA FOUR BYTES FOR DOUBLE PRECISION
  0999'                         MEMSIZ:	DS	2			;HIGHEST LOCATION IN MEMORY
  099B'                         TEMPPT:	DS	2			;POINTER AT FIRST FREE TEMP DESCRIPTOR
                                					;INITIALIZED TO POINT TO TEMPST
  099D'                         TEMPST:	DS	STRSIZ*NUMTMP		;STORAGE FOR NUMTMP TEMP DESCRIPTORS
                                	PUBLIC	DSCTMP,DSCPTR
  09BB'                         DSCTMP:	DS	STRSIZ			;STRING FUNCTIONS BUILD ANSWER DESCRIPTOR HERE
                                					;MUST BE AFTER TEMPST AND BEFORE PARM1
  09BC'                         DSCPTR	SET	$-2			;WHERE STRING ADDRESS IS STORE IN DSCTMP
  09BE'                         FRETOP:	DS	2			;TOP OF STRING FREE SPACE
  09C0'                         TEMP3:	DS	2			;USED TO STORE THE ADDRESS OF THE END OF
                                					;STRING ARRAYS IN GARBAGE COLLECTION
                                					;AND USED MOMENTARILY BY FRMEVL
                                					;USED IN EXTENDED BY FOUT AND
                                					;USER DEFINED FUNCTIONS
                                					;ARRAY VARIABLE HANDLING TEMPORARY
  09C2'                         TEMP8:	DS	2			;7/3/79 Now used by garbage collection
                                					;not TEMP3 due to conflict
  09C4'                         ENDFOR:	DS	2			;SAVED TEXT POINTER AT END OF "FOR" STATEMENT
  09C6'                         DATLIN:	DS	2			;DATA LINE # -- REMEMBER FOR ERRORS
  09C8'                         SUBFLG:	DS	1			;FLAG WHETHER SUBSCRIPTED VARIABLE ALLOWED
                                					;"FOR" AND USER-DEFINED FUNCTION
                                					;POINTER FETCHING TURN
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-36
LOW SEGMENT -- RAM -- IE THIS STUFF IS NOT CONSTANT

                                					;THIS ON BEFORE CALLING PTRGET
                                					;SO ARRAYS WON'T BE DETECTED.
                                					;STKINI AND PTRGET CLEAR IT.
                                	PUBLIC	USFLG
  09C9'                         USFLG:
  09C9'                         FLGINP:	DS	1			;FLAGS WHETHER WE ARE DOING "INPUT"
                                					;OR A READ
                                	PUBLIC	TEMP
  09CA'                         TEMP:	DS	2			;TEMPORARY FOR STATEMENT CODE
                                					;NEWSTT SAVES [H,L] HERE FOR INPUT AND ^C
                                					;"LET" SAVES VARIABLE
                                					;POINTERS HERE FOR "FOR"
                                					;"NEXT" SAVES ITS TEXT POINTER HERE
                                					;CLEARC SAVES [H,L] HERE
                                	PUBLIC	PTRFLG
  09CC'                         PTRFLG:	DS	1			;=0 IF NO LINE NUMBERS CONVERTED
                                					;TO POINTERS, NON ZERO IF POINTERS EXIST.
                                	PUBLIC	AUTFLG
  09CD'                         AUTFLG:	DS	1			;FLAG TO INICATE AUTO COMMAND IN
                                					;PROGRESS =0 IF NOT, NON-ZERO IF SO.
  09CE'                         AUTLIN:	DS	2			;CURRENT LINE BEING INSERTED BY AUTO
  09D0'                         AUTINC:	DS	2			;THE AUTO INCREMENT
  09D2'                         SAVTXT:	DS	2			;PLACE WHERE NEWSTT SAVES TEXT POINTER
                                					;FOR "RESUME" STATEMENT
                                	PUBLIC	SAVSTK,ERRLIN
  09D4'                         SAVSTK:	DS	2			;NEWSTT SAVES STACK HERE BEFORE
                                					;SO THAT ERROR REVERY CAN
                                					;CAN RESTORE THE STACK WHEN AN
                                					;ERROR OCCURS
  09D6'                         ERRLIN:	DS	2			;LINE NUMBER WHERE LAST ERROR OCCURED.
                                	PUBLIC	DOT
  09D8'                         DOT:	DS	2			;KEEPS CURRENT LINE FOR EDIT & LIST
  09DA'                         ERRTXT:	DS	2			;TEXT POINTER FOR USE BY "RESUME"
                                	PUBLIC	ONELIN
  09DC'                         ONELIN:	DS	2			;THE LINE TO GOTO WHEN AN ERROR 
                                					;OCCURS
  09DE'                         ONEFLG:	DS	1			;ONEFLG=1 IF WERE ARE EXECUTING
                                					;AN ERROR TRAP ROUTINE, OTHERWISE 0
  09DF'                         TEMP2:	DS	2			;FORMULA EVALUATOR TEMP
                                					;MUST BE PRESERVED BY OPERATORS
                                					;USED IN EXTENDED BY FOUT AND
                                					;USER-DEFINED FUNCTIONS
                                					;ARRAY VARIABLE HANDLER TEMPORARY
  09E1'                         OLDLIN:	DS	2			;OLD LINE NUMBER (SETUP BY ^C,"STOP"
                                					;OR "END" IN A PROGRAM)
  09E3'                         OLDTXT:	DS	2			;OLD TEXT POINTER
                                					;POINTS AT STATEMENT TO BE EXECUTED NEXT
  09E5'                         VARTAB:	DS	2			;POINTER TO START OF SIMPLE
                                					;VARIABLE SPACE
                                					;UPDATED WHENEVER THE SIZE OF THE
                                					;PROGRAM CHANGES, SET TO [TXTTAB]
                                					;BY SCRATCH ("NEW").
  09E7'                         ARYTAB:	DS	2			;POINTER TO BEGINNING OF ARRAY
                                					;TABLE
                                					;INCREMENTED BY 6 WHENEVER
                                					;A NEW SIMPLE VARIABLE IS FOUND, AND
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-37
LOW SEGMENT -- RAM -- IE THIS STUFF IS NOT CONSTANT

                                					;SET TO [VARTAB] BY CLEARC.
  09E9'                         STREND:	DS	2			;END OF STORAGE IN USE
                                					;INCREASED WHENEVER A NEW ARRAY
                                					;OR SIMPLE VARIABLE IS ENCOUNTERED
                                					;SET TO [VARTAB] BY CLEARC.
  09EB'                         DATPTR:	DS	2			;POINTER TO DATA. INITIALIZED TO POINT
                                					;AT THE ZERO IN FRONT OF [TXTTAB]
                                					;BY "RESTORE" WHICH IS CALLED BY CLEARC
                                					;UPDATED BY EXECUTION OF A "READ"
  09ED'                         DEFTBL:	DS	26			;THIS GIVES THE DEFAULT VALTYP FOR EACH
                                					;LETTER OF THE ALPHABET
                                					;IT IS SET UP BY "CLEAR" AND CHANGED BY
                                					;"DEFSTR" "DEFINT" "DEFSNG" "DEFDBL" AND USED
                                					;BY PTRGET WHEN ! # % OR $ DON'T FOLLOW
                                					;A VARAIBLE NAME
                                ;
                                ; RAM STORAGE FOR USER DEFINED FUNCTION PARAMETER INFORMATION
                                ;
  0064                          PRMSIZ	SET	100			;NUMBER OF BYTES FOR DEFINITION BLOCK
  0A07'   0000                  PRMSTK:	DW	0			;PREVIOUS DEFINITION BLOCK ON STACK
                                					;BLOCK (FOR GARBAGE COLLECTION)
  0A09'                         PRMLEN:	DS	2			;THE NUMBER OF BYTES IN THE ACTIVE TABLE
  0A0B'                         PARM1:	DS	PRMSIZ			;THE ACTIVE PARAMETER DEFINITION TABLE
                                	PUBLIC	PRMPRV,PRMSTK		;ALLOW INIT TO INITIALIZE THIS CONSTANT
  0A6F'   0A07'                 PRMPRV:	DW	PRMSTK			;THE POINTER AT THE PREVIOUS PARAMETER
                                					;BLOCK (FOR GARBAGE COLLECTION)
  0A71'                         PRMLN2:	DS	2			;SIZE OF PARAMETER BLOCK BEING BUILT
  0A73'                         PARM2:	DS	PRMSIZ			;PLACE TO KEEP PARAMETERS BEING MADE
  0AD7'                         PRMFLG:	DS	1			;USED BY PTRGET TO FLAG IF PARM1 HAS BEEN SEARCHED
  0AD8'                         ARYTA2:	DS	2			;STOPPING POINT FOR SIMPLE SEARCH
                                					;(EITHER [ARYTAB] OR PARM1+[PRMLEN])
  0ADA'                         NOFUNS:	DS	1			;ZERO IF NO FUNCTIONS ACTIVE. SAVES TIME IN SIMPLE SEARCH
  0ADB'                         TEMP9:	DS	2			;GARBAGE COLLECTION TEMP TO CHAIN THROUGH PARAMETER BLOCKS
  0ADD'                         FUNACT:	DS	2			;COUNT OF ACTIVE FUNCTIONS
                                	PUBLIC	INPPAS,NXTTXT,NXTFLG,FVALSV,NXTLIN,OPTVAL,OPTFLG
  0ADF'                         INPPAS:	DS	1			;FLAG TELLING WHETHER INPUT IS SCANNING FIRST OR
                                					;SECOND TIME. ZERO IF FIRST.
  0AE0'                         NXTTXT:	DS	2			;USED TO SAVE TEXT POINTER AT START OF NEXT
  0AE2'                         NXTFLG:	DS	1			;ZERO IF "FOR" IS USING NEXT CODE
                                					;TO CHECK FOR EMPTY LOOP
  0AE3'                         FVALSV:	DS	4			;USE TO STORE THE START VALUE OF THE LOOP VARIABLE
                                					;SINCE ANSI SAYS START AND END ARE EVALUATED
                                					;BEFORE ASSIGNMENT TAKES PLACE
  0AE7'                         NXTLIN:	DS	2			;THE LINE NUMBER DURING SCAN FOR "NEXT"
  0AE9'                         OPTVAL:	DS	1			;ZERO FOR OPTION BASE 0 ONE FOR OPTION BASE 1
  0AEA'                         OPTFLG:	DS	1			;NON-ZERO IF "OPTION BASE" HAS BEEN SCANNED
                                	PUBLIC	PATCH
  0AEB'                         PATCH:	DS	30			;THIRTY BYTES OF PATCH SPACE
                                	PUBLIC	TEMPA
  0B09'                         TEMPA:	DS	2			;MISC TEMP USED BY CALL AND LIST
                                	PUBLIC	SAVFRE
  0B0B'                         SAVFRE:	DS	2			;FRETOP SAVED HERE BY CHAIN
                                	PUBLIC	MAXREC
  0B0D'                         MAXREC:	DS	2			;MAXIMUM RECORD SIZE
                                	PUBLIC	PROFLG
  0B0F'                         PROFLG:	DS	1			;NON-ZERO IF WE HAVE LOADED A PROTECTED FILE W/O PASSWRD
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-38
LOW SEGMENT -- RAM -- IE THIS STUFF IS NOT CONSTANT

                                	PUBLIC	CHNFLG,CHNLIN,MDLFLG,MRGFLG,CMEPTR,CMSPTR
  0B10'                         MRGFLG:	DS	1			;NON-ZERO IF CHAIN W/ MERGE IN PROGRESS
  0B11'                         MDLFLG:	DS	1			;NON-ZERO I CHAIN W/ MERGE AND DELETE IN PROGRESS
  0B12'                         CMEPTR:	DS	2			;POINTER TTO END LINE TO DELETE
  0B14'                         CMSPTR:	DS	2			;POINTER TO START LINE TO DELETE
  0B16'                         CHNFLG:	DS	1			;NON-ZERO IF CHAIN IN PROGRESS
  0B17'                         CHNLIN:	DS	2			;DESTINATION LINE IN NEW PROGRAM
                                	PUBLIC	SWPTMP
  0B19'                         SWPTMP:	DS	4			;VALUE OF FIRST "SWAP" VARIABLE STORED HERE
  0B1D'                         	DS	4			;ENOUGH ROOM FOR DOUBLE PRECISION
  0B21'                         TRCFLG:	DS	1			;ZERO MEANS NO TRACE IN PROGRESS
                                
                                ; THIS IS THE RAM TERMPORARY AREA FOR THE MATH PACKAGE ROUTINES
                                ;
                                ;THE FLOATING ACCUMULATOR
  0B22'                         	DS	1			;[TEMPORARY LEAST SIGNIFICANT BYTE]
  0B23'                         DFACLO:	DS	4			;[FOUR LOWEST ORDERS FOR DOUBLE PRECISION]
  0B27'                         FACLO:	DS	2
  0B29'                         	DS	1
                                					;[MIDDLE ORDER OF MANTISSA]
                                					;[HIGH ORDER OF MANTISSA]
  0B2A'                         FAC:	DS	2			;[EXPONENT]
                                					;[TEMPORARY COMPLEMENT OF SIGN IN MSB]
                                	PUBLIC	FANSII
                                	PUBLIC	FLGOVC,OVCSTR
  0B2C'                         FLGOVC:	DS	1			;OVERFLOW PRINT FLAG,=0,1 PRINT 
                                					;FURTHER =1 CHANGE TO 2
  0B2D'                         OVCSTR:	DS	1			;PLACE TO STORE OVERFLOW FLAG AFTER FIN
  0B2E'                         FANSII:	DS	1			;FLAG TO FORCE FIXED OUTPUT (SEE ANSI)
  0B2F'                         	DS	1			;[TEMPORARY LEAST SIGNIFICANT BYTE]
  0B30'                         ARGLO:	DS	7			;[LOCATION OF SECOND ARGUMENT FOR DOUBLE
  0B37'                         ARG:	DS	1			; PRECISION]
                                					;FOR INTEL FORMATS MUST HAVE SPACE FOR
                                					;11 BITS OF EXPONENT
  0B38'                         FBUFFR:	DS	13			;BUFFER FOR FOUT
                                
  0B45'                         	DS	43-13			;THE LAST 3 LOCATIONS ARE TEMP FOR ROM FMULT
                                	PUBLIC	FMLTT1,FMLTT2
  0B60'                         FMLTT1	SET	FBUFFR+40
  0B61'                         FMLTT2	SET	FBUFFR+41
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-39
LOW SEGMENT -- RAM -- IE THIS STUFF IS NOT CONSTANT

                                
                                	SUBTTL	TEXT CONSTANTS FOR PRINT OUT
                                ;
                                ; NEEDED FOR MESSAGES IN ALL VERSIONS
                                ;
  0B63'   20 69 6E 20           INTXT:	DB	' in '
  0B67'   00                    	DB	0
  0B68'                         REDDY:
  0B68'   4F 6B                 	DB	'Ok'
  0B6A'   0D                    	DB	13
  0B6B'   0A                    	DB	10
  0B6C'   00                    	DB	0
  0B6D'   42 72 65 61           BRKTXT:	DB	'Break'
  0B71'   6B                    
  0B72'   00                    	DB	0
                                
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-40
TEXT CONSTANTS FOR PRINT OUT

                                
                                	SUBTTL	GENERAL STORAGE MANAGEMENT ROUTINES - FNDFOR, BLTU, GETSTK
                                ;
                                ; FIND A "FOR" ENTRY ON THE STACK WITH THE VARIABLE POINTER
                                ; PASSED IN [D,E].
                                ;
  0B73'   21 0004               FNDFOR:	LXI	H,4+0			;IGNORING EVERYONES "NEWSTT"
                                					;AND THE RETURN ADDRESS OF THIS
  0B76'   39                    	DAD	SP			;SUBROUTINE, SET [H,L]=SP
  0B77'                         LOOPER:
  0B77'   7E                    	MOV	A,M			;SEE WHAT TYPE OF THING IS ON THE STACK
  0B78'   23                    	INX	H
  0006                          WHLSIZ	SET	6
  0B79'   FE B4                 	CPI	$WHILE
  0B7B'   C2 0B85'              	JNZ	STKSRC
  0B7E'   01 0006               	LXI	B,0+WHLSIZ
  0B81'   09                    	DAD	B
  0B82'   C3 0B77'              	JMP	LOOPER
  0B85'                         STKSRC:
  0B85'   FE 82                 	CPI	$FOR			;IS THIS STACK ENTRY A "FOR"?
  0B87'   C0                    	RNZ				;NO SO OK
  0B88'   4E                    	MOV	C,M
  0B89'   23                    	INX	H			;DO EQUIVALENT OF PUSHM / XTHL
  0B8A'   46                    	MOV	B,M
  0B8B'   23                    	INX	H
  0B8C'   E5                    	PUSH	H			;PUT H  ON
  0B8D'   69                    	MOV	L,C			;PUSH B / XTHL IS SLOWER
  0B8E'   60                    	MOV	H,B
  0B8F'   7A                    	MOV	A,D			;FOR THE "NEXT" STATMENT WITHOUT AN ARGUMENT
  0B90'   B3                    	ORA	E			;WE MATCH ON ANYTHING
  0B91'   EB                    	XCHG				;MAKE SURE WE RETURN [D,E]
  0B92'   CA 0B99'              	JZ	POPGOF			;POINTING TO THE VARIABLE
  0B95'   EB                    	XCHG	
  0B96'   CD 0000*              	CALL	DCOMPR
  000D                          FORSIZ	SET	13
                                
  000E                          FORSIZ	SET	14
                                
  0010                          FORSIZ	SET	FORSIZ+2
                                	PUBLIC	FORSZC
  0010                          FORSZC	SET	0+FORSIZ
  0B99'   01 0010               POPGOF:	LXI	B,FORSZC		;TO WIPE OUT A "FOR" ENTRY
  0B9C'   E1                    	POP	H
  0B9D'   C8                    	RZ				;IF VARIABLE IN THIS ENTRY MATCHES
                                					;RETURN WITH [H,L] POINTING THE BOTTOM
                                					;OF THE ENTRY
  0B9E'   09                    	DAD	B
  0B9F'   C3 0B77'              	JMP	LOOPER			;NOW POINTING TO THE START OF THE NEXT
                                					;ENTRY. SEE IF ITS A "FOR" ENTRY
                                					;AND IF THE VARIABLE MATCHES
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-41
GENERAL STORAGE MANAGEMENT ROUTINES - FNDFOR, BLTU, GETSTK

                                
                                	SUBTTL	ERROR HANDLING
                                ; THIS ROUTINE IS CALLED TO RESET THE STACK IF BASIC IS
                                ; EXTERNALLY STOPPED AND THEN RESTARTED.
                                	PUBLIC	READYR
  0BA2'   01 0CA9'              READYR:	LXI	B,STPRDY		;ADDRESS GO TO, ALSO POP OFF GARBAGE STACK ENTRY.
  0BA5'   C3 0C1F'              	JMP	ERESET			;RESET STACK, GOTO READY.
                                
  0BA8'   2A 06BB'              PRGEND:	LHLD	CURLIN			;GET CURRENT LINE #
  0BAB'   7C                    	MOV	A,H			;SEE IF DIRECT
  0BAC'   A5                    	ANA	L			;AND TOGETHER
  0BAD'   3C                    	INR	A			;SET CC'S
  0BAE'   CA 0BBA'              	JZ	ENDCNJ			;IF DIRECT DONE, ALLOW FOR DEBUGGING PURPOSES
  0BB1'   3A 09DE'              	LDA	ONEFLG			;SEE IF IN ON ERROR
  0BB4'   B7                    	ORA	A			;SET CC
  0BB5'   1E 13                 	MVI	E,ERRNR			;"NO RESUME" ERROR
  0BB7'   C2 0C06'              	JNZ	ERROR			;YES, FORGOT RESUME
                                	EXTRN	ENDCON
  0BBA'   C3 0000*              ENDCNJ:	JMP	ENDCON			;NO, LET IT END
  0BBD'   1E 3D                 DERDFL:	MVI	E,ERRDFL
                                	PUBLIC	DERDFL
  0BBF'   01                    	DB	1			;"DISK FULL"
  0BC0'   1E 39                 DERIOE:	MVI	E,ERRIOE
                                	PUBLIC	DERIOE
  0BC2'   01                    	DB	1			;"DISK I/O ERROR"
  0BC3'   1E 36                 DERBFM:	MVI	E,ERRBFM
                                	PUBLIC	DERBFM
  0BC5'   01                    	DB	1			;"BAD FILE MODE"
  0BC6'   1E 35                 DERFNF:	MVI	E,ERRFNF
                                	PUBLIC	DERFNF
  0BC8'   01                    	DB	1			;"FILE NOT FOUND"
  0BC9'   1E 34                 DERBFN:	MVI	E,ERRBFN
                                	PUBLIC	DERBFN
  0BCB'   01                    	DB	1			;"BAD FILE NUMBER"
  0BCC'   1E 33                 DERIER:	MVI	E,ERRIER
                                	PUBLIC	DERIER
  0BCE'   01                    	DB	1			;"INTERNAL ERROR"
  0BCF'   1E 3E                 DERRPE:	MVI	E,ERRRPE
                                	PUBLIC	DERRPE
  0BD1'   01                    	DB	1			;"READ PAST END"
  0BD2'   1E 37                 DERFAO:	MVI	E,ERRFAO
                                	PUBLIC	DERFAO
  0BD4'   01                    	DB	1			;"FILE ALREADY OPEN"
  0BD5'   1E 40                 DERNMF:	MVI	E,ERRNMF
                                	PUBLIC	DERNMF
  0BD7'   01                    	DB	1			;"BAD FILE NAME"
  0BD8'   1E 3F                 DERBRN:	MVI	E,ERRBRN
                                	PUBLIC	DERBRN
  0BDA'   01                    	DB	1			;"BAD RECORD NUMBER"
  0BDB'   1E 32                 DERFOV:	MVI	E,ERRFOV
                                	PUBLIC	DERFOV
  0BDD'   01                    	DB	1			;"FIELD OVERFLOW"
  0BDE'   1E 43                 DERTMF:	MVI	E,ERRTMF
                                	PUBLIC	DERTMF
  0BE0'   01                    	DB	1			;"TOO MANY FILES"
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-42
ERROR HANDLING

  0BE1'   1E 3A                 DERFAE:	MVI	E,ERRFAE
                                	PUBLIC	DERFAE
  0BE3'   01                    	DB	1			;"FILE ALREADY EXISTS"
                                	ORG	$-1
  0BE3'   C3 0C06'              	JMP	ERROR
  0BE6'   2A 09C6'              DATSNE:	LHLD	DATLIN			;GET DATA LINE
  0BE9'   22 06BB'              	SHLD	CURLIN			;MAKE IT CURRENT LINE
  0BEC'   1E 02                 SNERR:	MVI	E,ERRSN			;"SYNTAX ERROR"
  0BEE'   01                    	DB	1Q			;"LXI B," OVER THE NEXT 2
  0BEF'   1E 0B                 DV0ERR:	MVI	E,ERRDV0		;DIVISION BY ZERO
  0BF1'   01                    	DB	1Q			;"LXI B," OVER THE NEXT 2
  0BF2'   1E 01                 NFERR:	MVI	E,ERRNF			;"NEXT WITHOUT FOR" ERROR
                                	PUBLIC	DDERR
  0BF4'   01                    	DB	1Q			;"LXI B," OVER THE NEXT TWO BYTES
  0BF5'   1E 0A                 DDERR:	MVI	E,ERRDD			;"REDIMENSIONED VARIABLE"
  0BF7'   01                    	DB	1Q			;"LXI B," OVER THE NEXT 2 BYTES
  0BF8'   1E 12                 UFERR:	MVI	E,ERRUF			;"UNDEFINED FUNCTION" ERROR
  0BFA'   01                    	DB	1Q			;"LXI B," OVER THE NEXT TWO
  0BFB'   1E 14                 REERR:	MVI	E,ERRRE			;"RESUME WITHOUT ERROR"
  0BFD'   01                    	DB	1Q			;"LXI B," OVER THE NEXT TWO
  0BFE'   1E 06                 OVERR:	MVI	E,ERROV			;SET OVERFLOW ERROR CODE
  0C00'   01                    	DB	1Q			;"LXI B," OVER NEXT TWO
  0C01'   1E 16                 MOERR:	MVI	E,ERRMO			;TYPE MISMATCH ERROR
  0C03'   01                    	DB	1Q			;"LXI	B," OVER THE NEXT TWO
  0C04'   1E 0D                 TMERR:	MVI	E,ERRTM			;TYPE MISMATCH ERROR
  0C06'                         ERROR:
  0C06'   2A 06BB'              	LHLD	CURLIN			;GET CURRENT LINE NUMBER
  0C09'   22 09D6'              	SHLD	ERRLIN			;SAVE IT FOR ERL VARIABLE
  0C0C'   AF                    	XRA	A			;CLEAR CHAIN FLAG IN CASE OF ERROR
  0C0D'   32 0B10'              	STA	MRGFLG			;ALSO MERGE FLAG
  0C10'   32 0B16'              	STA	CHNFLG			;SO IT DOESNT TRY TO CHAIN
  0C13'   7C                    	MOV	A,H			;ONLY SET UP DOT IF IT ISNT DIRECT
  0C14'   A5                    	ANA	L
  0C15'   3C                    	INR	A
  0C16'   CA 0C1C'              	JZ	ERRESM
  0C19'   22 09D8'              	SHLD	DOT			;SAVE IT FOR EDIT OR LIST
  0C1C'   01 0C25'              ERRESM:	LXI	B,ERRMOR		;GET RETURN ADDRESS IN [B,C]
                                	PUBLIC	ERESET
                                	EXTRN	STKERR
  0C1F'   2A 09D4'              ERESET:	LHLD	SAVSTK			;GET A GOOD STACK BACK
  0C22'   C3 0000*              	JMP	STKERR			;JUMP INTO STKINI
  0C25'   C1                    ERRMOR:	POP	B			;POP OFF FNDFOR STOPPER
  0C26'   7B                    	MOV	A,E			;[A]=ERROR NUMBER
  0C27'   4B                    	MOV	C,E			;ALSO SAVE IT FOR LATER RESTORE
  0C28'   32 06AD'              	STA	ERRFLG			;SAVE IT SO WE KNOW WHETHER TO CALL "EDIT"
  0C2B'   2A 09D2'              	LHLD	SAVTXT			;GET SAVED TEXT POINTER
  0C2E'   22 09DA'              	SHLD	ERRTXT			;SAVE FOR RESUME.
  0C31'   EB                    	XCHG				;SAVE SAVTXT PTR
  0C32'   2A 09D6'              	LHLD	ERRLIN			;GET ERROR LINE #
  0C35'   7C                    	MOV	A,H			;TEST IF DIRECT LINE
  0C36'   A5                    	ANA	L			;SET CC'S
  0C37'   3C                    	INR	A			;SETS ZERO IF DIRECT LINE (65535)
  0C38'   CA 0C42'              	JZ	NTMDCN			;IF DIRECT, DONT MODIFY OLDTXT & OLDLIN
  0C3B'   22 09E1'              	SHLD	OLDLIN			;SET OLDLIN=ERRLIN.
  0C3E'   EB                    	XCHG				;GET BACK SAVTXT
  0C3F'   22 09E3'              	SHLD	OLDTXT			;SAVE IN OLDTXT.
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-43
ERROR HANDLING

  0C42'   2A 09DC'              NTMDCN:	LHLD	ONELIN			;SEE IF WE ARE TRAPPING ERRORS.
  0C45'   7C                    	MOV	A,H			;BY CHECKING FOR LINE ZERO.
  0C46'   B5                    	ORA	L			;IS IT?
  0C47'   EB                    	XCHG				;PUT LINE TO GO TO IN [D,E]
  0C48'   21 09DE'              	LXI	H,ONEFLG		;POINT TO ERROR FLAG
  0C4B'   CA 0C57'              	JZ	NOTRAP			;SORRY, NO TRAPPING...
  0C4E'   A6                    	ANA	M			;A IS NON-ZERO, SETZERO IF ONEFLG ZERO
  0C4F'   C2 0C57'              	JNZ	NOTRAP			;IF FLAG ALREADY SET, FORCE ERROR
  0C52'   35                    	DCR	M			;IF ALREADY IN ERROR ROUTINE, FORCE ERROR
  0C53'   EB                    	XCHG				;GET LINE POINTER IN [H,L]
  0C54'   C3 11ED'              	JMP	GONE4			;GO DIRECTLY TO NEWSTT CODE
  0C57'   AF                    NOTRAP:	XRA	A			;A MUST BE ZERO FOR CONTRO
  0C58'   77                    	MOV	M,A			;RESET ONEFLG
  0C59'   59                    	MOV	E,C			;GET BACK ERROR CODE
  0C5A'   32 06B6'              	STA	CNTOFL			;FORCE OUTPUT
  0C5D'   CD 0000*              	CALL	CRDONZ			;CRLF
  0C60'   21 03B3'              	LXI	H,ERRTAB		;GET START OF ERROR TABLE
  0C63'   7B                    	MOV	A,E			;GET ERROR CODE
  0C64'   FE 44                 	CPI	LSTERR			;IS IT PAST LAST ERROR?
  0C66'   D2 0C73'              	JNC	UPERR			;YES, TOO BIG TO PRINT
  0C69'   FE 32                 	CPI	DSKERR+1		;DISK ERROR?
  0C6B'   D2 0C75'              	JNC	NTDER2			;YES
  0C6E'   FE 20                 	CPI	NONDSK+1		;IS IT BETWEEN LAST NORMAL & FIRST DISK?
  0C70'   DA 0C78'              	JC	NTDERR			;YES, OK TO PRINT IT
  0C73'   3E 27                 UPERR:	MVI	A,ERRUE+DSKERR-NONDSK	;PRINT "UNPRINTABLE ERROR"
  0C75'   D6 12                 NTDER2:	SUI	DSKERR-NONDSK		;FIX OFFSET INTO TABLE OF MESSAGES
  0C77'   5F                    	MOV	E,A			;SAVE BACK ERROR CODE
  0C78'                         NTDERR:
                                					;ON "SYNTAX ERROR"S
  0C78'   CD 1417'              LEPSKP:	CALL	REM			;SKIP AN ERROR MESSAGE
  0C7B'   23                    	INX	H			;SKIP OVER THIS ERROR MESSAGE
  0C7C'   1D                    	DCR	E			;DECREMENT ERROR COUNT
  0C7D'   C2 0C78'              	JNZ	LEPSKP			;SKIP SOME MORE
  0C80'   E5                    	PUSH	H			;SAVE TEXT POINTER
  0C81'   2A 09D6'              	LHLD	ERRLIN			;GET ERROR LINE NUMBER
  0C84'   E3                    	XTHL				;GET BACK ERROR TEXT POINTER
  0C85'                         ERRFIN:
  0C85'   7E                    	MOV	A,M			;GET 1ST CHAR OF ERROR
  0C86'   FE 3F                 	CPI	'?'			;PADDED ERROR?
  0C88'   C2 0C92'              	JNZ	ERRFN1			;NO,PRINT
  0C8B'   E1                    	POP	H			;GET LINE # OFF STACK
  0C8C'   21 03B3'              	LXI	H,ERRTAB
  0C8F'   C3 0C73'              	JMP	UPERR			;MAKE UNPRINTABLE ERROR
                                
  0C92'                         ERRFN1:
  0C92'   CD 0000*              	CALL	STROUT			;PRINT MESSAGE
  0C95'   E1                    	POP	H			;RESTORE LINE NUMBER
  0C96'   11 FFFE               	LXI	D,0+65534		;IS INIT EXECUTING?
  0C99'   CD 0000*              	CALL	DCOMPR
  0C9C'   CC 0000*              	CZ	CRDO			;DO CRLF
                                	EXTRN	SYSTME
  0C9F'   CA 0000*              	JZ	SYSTME			;SYSTEM error exit
                                					;EXIT TO OS
                                					;IF SO, RESTART IT
  0CA2'   7C                    	MOV	A,H			;SEE IF IN DIRECT MODE
  0CA3'   A5                    	ANA	L
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-44
ERROR HANDLING

  0CA4'   3C                    	INR	A			;ZERO SAYS DIRECT MODE
  0CA5'   C4 0000*              	CNZ	INPRT			;PRINT LINE NUMBER IN [H,L]
                                ; NOW FALL INTO MAIN INTERPRETER LOOP
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-45
ERROR HANDLING

                                
                                	SUBTTL	STPRDY, READY, MAIN, CHEAD
                                ;
                                ; FOR "LIST" COMMAND STOPPING
                                ; AND FOR RETURNING FROM A FAILED "CVER"
                                ; AND TO CORRECT A DIRECT GOSUB WHICH DOES INPUT
                                ;
                                	PUBLIC	STPRDY
  0CA8'   3E                    	DB	76Q			;SKIP THE NEXT BYTE WITH "MVI A,0"
  0CA9'   C1                    STPRDY:	POP	B
  0CAA'                         READY:
  0CAA'   CD 0000*              	CALL	FINLPT			;PRINT ANY LEFT OVERS
  0CAD'   AF                    	XRA	A
  0CAE'   32 06B6'              	STA	CNTOFL			;FORCE OUTPUT
  0CB1'   CD 0000*              	CALL	PRGFIN			;FINISH OUTPUT OF A FILE
  0CB4'   CD 0000*              	CALL	CRDONZ			;IF NOT ALREADY AT LEFT, SEND CRLF
  0CB7'   21 0B68'              	LXI	H,REDDY			;"OK" CRLF CRLF
  0CBA'                         REPINI:
                                					;BY THE INIT CODE. THIS IS HERE SO AFTER
                                					;ERRORS DURING INIT, INIT IS RESTARTED
  0CBA'   CD 0000               	CALL	CPMWRM			;ERRORS IN CP/M INITIALIZATION, RETURN TO CP/M
  0CBD'   3A 06AD'              	LDA	ERRFLG			;SEE IF IT WAS A "SYNTAX ERROR"
  0CC0'   D6 02                 	SUI	ERRSN
                                	EXTRN	ERREDT
  0CC2'   CC 0000*              	CZ	ERREDT			;"EDIT" THE BAD LINE
  0CC5'   21 FFFF               MAIN:	LXI	H,0+65535
  0CC8'   22 06BB'              	SHLD	CURLIN			;SETUP CURLIN FOR DIRECT MODE
  0CCB'   3A 09CD'              	LDA	AUTFLG			;IN AN AUTO COMMAND?
  0CCE'   B7                    	ORA	A			;SET CC'S
  0CCF'   CA 0D1C'              	JZ	NTAUTO			;NO, REUGLAR MODE
  0CD2'   2A 09CE'              	LHLD	AUTLIN			;GET CURRENT AUTO LINE
  0CD5'   E5                    	PUSH	H			;SAVE AWAY FOR LATER USE
  0CD6'   CD 0000*              	CALL	LINPRT			;PRINT THE LINE #
  0CD9'   D1                    	POP	D			;GET IT BACK
  0CDA'   D5                    	PUSH	D			;SAVE BACK AGAIN
  0CDB'   CD 0E1B'              	CALL	FNDLIN			;SEE IF IT EXISTS
  0CDE'   3E 2A                 	MVI	A,'*'			;CHAR TO PRINT IF LINE ALREADY EXISTS
  0CE0'   DA 0CE5'              	JC	AUTELN			;DOESNT EXIST
  0CE3'   3E 20                 	MVI	A,' '			;PRINT SPACE
  0CE5'   CD 0000*              AUTELN:	CALL	OUTDO			;PRINT CHAR
  0CE8'   CD 0000*              	CALL	INLIN			;READ A LINE
  0CEB'   D1                    	POP	D			;GET LINE # OFF STACK
  0CEC'   D2 0CFD'              	JNC	AUTGOD			;IF NO CONTROL-C, PROCEED
  0CEF'   AF                    	XRA	A			;CLEAR AUTFLG
  0CF0'   32 09CD'              	STA	AUTFLG			;BY SETTING IT TO ZERO
  0CF3'   C3 0CAA'              	JMP	READY			;PRINT READY MESSAGE
                                
  0CF6'   AF                    AUTRES:	XRA	A
  0CF7'   32 09CD'              	STA	AUTFLG			;Clear auto flag
  0CFA'   C3 0D12'              	JMP	AUTSTR			;And enter line
                                
  0CFD'   2A 09D0'              AUTGOD:	LHLD	AUTINC			;GET INCREMENT
  0D00'   19                    	DAD	D			;ADD INCREMENT TO THIS LINE
  0D01'   DA 0CF6'              	JC	AUTRES			;CHECK FOR PATHETIC CASE
  0D04'   D5                    	PUSH	D			;SAVE LINE NUMBER #
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-46
STPRDY, READY, MAIN, CHEAD

  0D05'   11 FFF9               	LXI	D,0+65529		;CHECK FOR LINE # TOO BIG
  0D08'   CD 0000*              	CALL	DCOMPR
  0D0B'   D1                    	POP	D			;GET BACK LINE #
  0D0C'   D2 0CF6'              	JNC	AUTRES			;IF TOO BIG, QUIT
  0D0F'   22 09CE'              	SHLD	AUTLIN			;SAVE IN NEXT LINE
  0D12'                         AUTSTR:
                                					;SET NON-ZERO CONDITION CODES (SEE EDIT)
  0D12'   3A 0885'              	LDA	BUF			;GET CHAR FROM BUFFER
  0D15'   B7                    	ORA	A			;IS IT NULL LINE?
  0D16'   CA 0CC5'              	JZ	MAIN			;YES, LEAVE LINE ALONE
                                	EXTRN	EDITRT
  0D19'   C3 0000*              	JMP	EDITRT			;JUMP INTO EDIT CODE
  0D1C'                         NTAUTO:
  0D1C'   CD 0000*              	CALL	INLIN			;GET A LINE FROM TTY
  0D1F'   DA 0CC5'              	JC	MAIN			;IGNORE ^C S
  0D22'   CD 1232'              	CALL	CHRGTR			;GET THE FIRST
  0D25'   3C                    	INR	A			;SEE IF 0 SAVING THE CARRY FLAG
  0D26'   3D                    	DCR	A
  0D27'   CA 0CC5'              	JZ	MAIN			;IF SO, A BLANK LINE WAS INPUT
  0D2A'   F5                    	PUSH	PSW			;SAVE STATUS INDICATOR FOR 1ST CHARACTER
  0D2B'   CD 135A'              	CALL	LINGET			;READ IN A LINE #
  0D2E'   CD 10DB'              	CALL	BAKSP			;BACK UP THE POINTER
  0D31'   7E                    	MOV	A,M			;GET THE CHAR
  0D32'   FE 20                 	CPI	' '			;CHARACTER A SPACE?
  0D34'   CC 0000*              	CZ	INXHRT			;THEN EAT PAST IT
                                					;ONE SPACE ALWAYS PRINTED AFTER LINE #
                                	PUBLIC	EDENT
  0D37'   D5                    EDENT:	PUSH	D			;SAVE LINE #
  0D38'   CD 0E3B'              	CALL	CRUNCH			;CRUNCH THE LINE DOWN
  0D3B'   D1                    	POP	D			;RESTORE LINE #
  0D3C'   F1                    	POP	PSW			;WAS THERE A LINE #?
  0D3D'   22 09D2'              	SHLD	SAVTXT			;FOR RESUMING A DIRECT STMT
                                					;RESTORE TEXT POINTER
                                	EXTRN	DIRDO
  0D40'   D2 0000*              	JNC	DIRDO			;MAKE SURE WE'RE NOT READING A FILE
  0D43'   D5                    	PUSH	D
  0D44'   C5                    	PUSH	B			;SAVE LINE # AND CHARACTER COUNT
  0D45'   CD 0000*              	CALL	PROCHK			;DONT ALLOW ANY FUNNY BUSINESS WITH EXISTING PGM
  0D48'   CD 1232'              	CALL	CHRGTR			;REMEMBER IF THIS LINE IS
  0D4B'   B7                    	ORA	A			;SET THE ZERO FLAG ON ZERO
                                					;LINES THAT START WITH ":" SHOULD NOT BE
                                					;IGNORED
  0D4C'   F5                    	PUSH	PSW			;BLANK SO WE DON'T INSERT IT
  0D4D'   EB                    	XCHG				;SAVE THIS LINE # IN DOT
  0D4E'   22 09D8'              	SHLD	DOT
  0D51'   EB                    	XCHG	
  0D52'   CD 0E1B'              	CALL	FNDLIN			;GET A POINTER TO THE LINE
  0D55'   DA 0D5E'              	JC	LEXIST			;LINE EXISTS, DELETE IT
  0D58'   F1                    	POP	PSW			;GET FLAG SAYS WHETHER LINE BLANK
  0D59'   F5                    	PUSH	PSW			;SAVE BACK
  0D5A'   CA 13F5'              	JZ	USERR			;TRYING TO DELETE NON-EXISTANT LINE, ERROR
  0D5D'   B7                    	ORA	A			;CLEAR FLAG THAT SAYS LINE EXISTS
  0D5E'   C5                    LEXIST:	PUSH	B			;SAVE THE POINTER
  0D5F'   F5                    	PUSH	PSW			;SAVE REGISTERS
  0D60'   E5                    	PUSH	H			;SAVE [H,L]
  0D61'   CD 2338'              	CALL	DEPTR			;GET RID OF PTRS IN PGM
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-47
STPRDY, READY, MAIN, CHEAD

  0D64'   E1                    	POP	H			;GET BACK POINTER TO NEXT LINE
  0D65'   F1                    	POP	PSW			;GET BACK PSW
  0D66'   C1                    	POP	B			;RESTORE POINTER TO THIS LINE
  0D67'   C5                    	PUSH	B			;SAVE BACK AGAIN
  0D68'   DC 21AD'              	CC	DEL			;DELETE THE LINE
  0D6B'   D1                    NODEL:	POP	D			;POP POINTER AT PLACE TO INSERT
  0D6C'   F1                    	POP	PSW			;SEE IF THIS LINE HAD
                                					;ANYTHING ON IT
  0D6D'   D5                    	PUSH	D			;SAVE PLACE TO START FIXING LINKS
  0D6E'   CA 0DAA'              	JZ	FINI			;IF NOT DON'T INSERT
  0D71'   D1                    	POP	D			;GET RID OF START OF LINK FIX
  0D72'   3A 0B16'              	LDA	CHNFLG			;ONLY CHANGET FRETOP IF NOT CHAINING
  0D75'   B7                    	ORA	A
  0D76'   C2 0D7F'              	JNZ	LEVFRE			;LEAVE FRETOP ALONE
  0D79'   2A 0999'              	LHLD	MEMSIZ			;DELETE ALL STRINGS
  0D7C'   22 09BE'              	SHLD	FRETOP			;SO REASON DOESNT USE THEM
  0D7F'                         LEVFRE:
  0D7F'   2A 09E5'              	LHLD	VARTAB			;CURRENT END
  0D82'   E3                    	XTHL				;[H,L]=CHARACTER COUNT. VARTAB
                                					;ONTO THE STACK
  0D83'   C1                    	POP	B			;[B,C]=OLD VARTAB
  0D84'   E5                    	PUSH	H			;SAVE COUNT OF CHARS TO MOVE
  0D85'   09                    	DAD	B
  0D86'   E5                    	PUSH	H			;SAVE NEW VARTAB
  0D87'   CD 0000*              	CALL	BLTU
  0D8A'   E1                    	POP	H			;POP OFF VARTAB
  0D8B'   22 09E5'              	SHLD	VARTAB			;UPDATE VARTAB
  0D8E'   EB                    	XCHG	
  0D8F'   74                    	MOV	M,H			;FOOL CHEAD WITH NON-ZERO LINK
  0D90'   C1                    	POP	B			;RESTORE COUNT OF CHARS TO MOVE
  0D91'   D1                    	POP	D			;GET LINE # OFF STACK
  0D92'   E5                    	PUSH	H			;SAVE START OF PLACE TO FIX LINKS
  0D93'   23                    	INX	H			;SO IT DOESN'T THINK
                                					;THIS LINK IS THE
                                					;END OF THE PROGRAM
  0D94'   23                    	INX	H
  0D95'   73                    	MOV	M,E
  0D96'   23                    	INX	H			;PUT DOWN LINE #
  0D97'   72                    	MOV	M,D
  0D98'   23                    	INX	H
  0D99'   11 0746'              	LXI	D,KBUF			;MOVE LINE FRM KBUF TO PROGRAM AREA
  0D9C'   0B                    	DCX	B			;FIX UP COUNT OF CHARS TO MOVE
  0D9D'   0B                    	DCX	B			;(DONT INCLUDE LINE # & LINK)
  0D9E'   0B                    	DCX	B			;
  0D9F'   0B                    	DCX	B
  0DA0'   1A                    MLOOPR:	LDAX	D			;NOW TRANSFERING LINE
                                					;IN FROM BUF
  0DA1'   77                    	MOV	M,A
  0DA2'   23                    	INX	H
  0DA3'   13                    	INX	D
  0DA4'   0B                    	DCX	B			;DECREMENT CHAR COUNT BY 1
  0DA5'   79                    	MOV	A,C			;TEST FOR COUNT EXHAUSTED
  0DA6'   B0                    	ORA	B			;BY SEEING IF [B,C]=0
  0DA7'   C2 0DA0'              	JNZ	MLOOPR
  0DAA'                         FINI:
  0DAA'   D1                    	POP	D			;GET START OF LINK FIXING AREA
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-48
STPRDY, READY, MAIN, CHEAD

  0DAB'   CD 0DD2'              	CALL	CHEAD			;FIX LINKS
  0DAE'   21 0080               	LXI	H,DIRTMP		;DON'T ALLOW ZERO TO BE CLOSED
  0DB1'   36 00                 	MVI	M,0			;NOT SEQUENTIAL OUTPUT
  0DB3'   22 06C7'              	SHLD	FILPTR
  0DB6'   2A 06B7'              	LHLD	PTRFIL			;GET FILE POINTER, COULD BE ZERO
  0DB9'   22 09DF'              	SHLD	TEMP2			;SAVE IT
  0DBC'   CD 0000*              	CALL	RUNC			;DO CLEAR & SET UP STACK 
  0DBF'   2A 06C5'              	LHLD	FILPT1			;RESET [FILPTR]
  0DC2'   22 06C7'              	SHLD	FILPTR
  0DC5'   2A 09DF'              	LHLD	TEMP2			;RESET [PTRFIL]
  0DC8'   22 06B7'              	SHLD	PTRFIL
  0DCB'   C3 0CC5'              	JMP	MAIN			;GO TO MAIN CODE
                                	PUBLIC	LINKER
  0DCE'                         LINKER:
  0DCE'   2A 06BD'              	LHLD	TXTTAB
  0DD1'   EB                    	XCHG	
                                ;
                                ; CHEAD GOES THROUGH PROGRAM STORAGE AND FIXES
                                ; UP ALL THE LINKS. THE END OF EACH
                                ; LINE IS FOUND BY SEARCHING FOR THE ZERO AT THE END.
                                ; THE DOUBLE ZERO LINK IS USED TO DETECT THE END OF THE PROGRAM
                                ;
  0DD2'   62                    CHEAD:	MOV	H,D			;[H,L]=[D,E]
  0DD3'   6B                    	MOV	L,E
  0DD4'   7E                    	MOV	A,M			;SEE IF END OF CHAIN
  0DD5'   23                    	INX	H			;BUMP POINTER
  0DD6'   B6                    	ORA	M			;2ND BYTE
                                
  0DD7'   C8                    	RZ	
  0DD8'   23                    	INX	H			;FIX H TO START OF TEXT
  0DD9'   23                    	INX	H
  0DDA'   23                    CZLOOP:	INX	H			;BUMP POINTER
  0DDB'   7E                    	MOV	A,M			;GET BYTE
  0DDC'   B7                    CZLOO2:	ORA	A			;SET CC'S
  0DDD'   CA 0DF3'              	JZ	CZLIN			;END OF LINE, DONE.
  0DE0'   FE 20                 	CPI	DBLCON+1		;EMBEDDED CONSTANT?
  0DE2'   D2 0DDA'              	JNC	CZLOOP			;NO, GET NEXT
  0DE5'   FE 0B                 	CPI	11			;IS IT LINEFEED OR BELOW?
  0DE7'   DA 0DDA'              	JC	CZLOOP			;THEN SKIP PAST
  0DEA'   CD 1233'              	CALL	CHRGT2			;GET CONSTANT
  0DED'   CD 1232'              	CALL	CHRGTR			;GET OVER IT
  0DF0'   C3 0DDC'              	JMP	CZLOO2			;GO BACK FOR MORE
  0DF3'   23                    CZLIN:	INX	H			;MAKE [H,L] POINT AFTER TEXT
  0DF4'   EB                    	XCHG				;SWITCH TEMP
  0DF5'   73                    	MOV	M,E			;DO FIRST BYTE OF FIXUP
  0DF6'   23                    	INX	H			;ADVANCE POINTER
  0DF7'   72                    	MOV	M,D			;2ND BYTE OF FIXUP
  0DF8'   C3 0DD2'              	JMP	CHEAD			;KEEP CHAINING TIL DONE
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-49
STPRDY, READY, MAIN, CHEAD

                                
                                	SUBTTL	SCNLIN, FNDLIN - SCAN LINE RANGE AND FIND LINE # IN PROGRAM
                                ;
                                ; SCNLIN SCANS A LINE RANGE OF
                                ; THE FORM  #-# OR # OR #- OR -# OR BLANK
                                ; AND THEN FINDS THE FIRST LINE IN THE RANGE
                                ;
  0DFB'   11 0000               SCNLIN:	LXI	D,0			;ASSUME START LIST AT ZERO
  0DFE'   D5                    	PUSH	D			;SAVE INITIAL ASSUMPTION
  0DFF'   CA 0E0E'              	JZ	ALLLST			;IF FINISHED, LIST IT ALL
  0E02'   D1                    	POP	D			;WE ARE GOING TO GRAB A #
  0E03'   CD 134F'              	CALL	LINSPC			;GET A LINE #. IF NONE, RETURNS ZERO
  0E06'   D5                    	PUSH	D			;SAVE FIRST
  0E07'   CA 0E17'              	JZ	SNGLIN			;IF ONLY # THEN DONE.
  0E0A'   CD 0000*              	CALL	SYNCHR
  0E0D'   F3                    	DB	MINUTK			;MUST BE A DASH.
  0E0E'   11 FFFA               ALLLST:	LXI	D,0+65530		;ASSUME MAX END OF RANGE
  0E11'   C4 134F'              	CNZ	LINSPC			;GET THE END OF RANGE
  0E14'   C2 0BEC'              	JNZ	SNERR			;MUST BE TERMINATOR
  0E17'   EB                    SNGLIN:	XCHG				;[H,L] = FINAL
  0E18'   D1                    	POP	D			;GET INITIAL IN [D,E]
  0E19'   E3                    FNDLN1:	XTHL				;PUT MAX ON STACK, RETURN ADDR TO [H,L]
  0E1A'   E5                    	PUSH	H			;SAVE RETURN ADDRESS BACK
                                ;
                                ; FNDLIN SEARCHES THE PROGRAM TEXT FOR THE LINE
                                ; WHOSE LINE # IS PASSED IN [D,E]. [D,E] IS PRESERVED.
                                ; THERE ARE THREE POSSIBLE RETURNS:
                                ;
                                ;	1) ZERO FLAG SET. CARRY NOT SET.  LINE NOT FOUND.
                                ;	   NO LINE IN PROGRAM GREATER THAN ONE SOUGHT.
                                ;	   [B,C] POINTS TO TWO ZERO BYTES AT END OF PROGRAM.
                                ;	   [H,L]=[B,C]
                                ;
                                ;	2) ZERO, CARRY SET. 
                                ;	   [B,C] POINTS TO THE LINK FIELD IN THE LINE
                                ;	   WHICH IS THE LINE SEARCHED FOR.
                                ;	   [H,L] POINTS TO THE LINK FIELD IN THE NEXT LINE.
                                ;
                                ;	3) NON-ZERO, CARRY NOT SET.
                                ;	   LINE NOT FOUND, [B,C]  POINTS TO LINE IN PROGRAM
                                ;	   GREATER THAN ONE SEARCHED FOR.
                                ;	   [H,L] POINTS TO THE LINK FIELD IN THE NEXT LINE.
                                ;
  0E1B'                         FNDLIN:
  0E1B'   2A 06BD'              	LHLD	TXTTAB			;GET POINTER TO START OF TEXT
  0E1E'                         LOOP:
  0E1E'   44                    	MOV	B,H			;IF EXITING BECAUSE OF END OF PROGRAM,
                                					;SET [B,C] TO POINT TO DOUBLE ZEROES.
  0E1F'   4D                    	MOV	C,L
  0E20'   7E                    	MOV	A,M			;GET WORD POINTER TO
  0E21'   23                    	INX	H			;BUMP POINTER
  0E22'   B6                    	ORA	M			;GET 2ND BYTE
  0E23'   2B                    	DCX	H			;GO BACK
  0E24'   C8                    	RZ				;IF ZERO THEN DONE
  0E25'   23                    	INX	H			;SKIP PAST AND GET THE LINE #
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-50
SCNLIN, FNDLIN - SCAN LINE RANGE AND FIND LINE # IN PROGRAM

  0E26'   23                    	INX	H
  0E27'   7E                    	MOV	A,M			;INTO [H,L] FOR COMPARISON WITH
  0E28'   23                    	INX	H			;THE LINE # BEING SEARCHED FOR
  0E29'   66                    	MOV	H,M			;WHICH IS IN [D,E]
  0E2A'   6F                    	MOV	L,A
  0E2B'   CD 0000*              	CALL	DCOMPR			;SEE IF IT MATCHES OR IF WE'VE GONE TOO FAR
  0E2E'   60                    	MOV	H,B			;MAKE [H,L] POINT TO THE START OF THE
  0E2F'   69                    	MOV	L,C			;LINE BEYOND THIS ONE, BY PICKING
  0E30'   7E                    	MOV	A,M			;UP THE LINK THAT [B,C] POINTS AT
  0E31'   23                    	INX	H
  0E32'   66                    	MOV	H,M
  0E33'   6F                    	MOV	L,A
  0E34'   3F                    	CMC				;TURN CARRY ON
  0E35'   C8                    	RZ				;EQUAL RETURN
  0E36'   3F                    	CMC				;MAKE CARRY ZERO
  0E37'   D0                    	RNC				;NO MATCH RETURN (GREATER)
  0E38'   C3 0E1E'              	JMP	LOOP			;KEEP LOOPING
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-51
SCNLIN, FNDLIN - SCAN LINE RANGE AND FIND LINE # IN PROGRAM

                                
                                	SUBTTL	PRE FAST CRUNCH - COMPACTIFICATION
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-52
PRE FAST CRUNCH - COMPACTIFICATION

                                
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-53
PRE FAST CRUNCH - COMPACTIFICATION

                                
                                	SUBTTL	FAST CRUNCH - COMPACTIFICATION
                                ;
                                ; ALL "RESERVED" WORDS ARE TRANSLATED INTO SINGLE
                                ; ONE OR TWO (IF TWO, FIRST IS ALWAYS 377 OCTAL)
                                ; BYTES WITH THE MSB ON. THIS SAVES SPACE AND TIME
                                ; BY ALLOWING FOR TABLE DISPATCH DURING EXECUTION.
                                ; THEREFORE ALL STATEMENTS APPEAR TOGETHER IN THE
                                ; RESERVED WORD LIST IN THE SAME
                                ; ORDER THEY APPEAR IN IN STMDSP.
                                ;
                                ; NUMERIC CONSTANTS ARE ALSO CONVERTED TO THEIR INTERNAL
                                ; BINARY REPRESENTATION TO IMPROVE EXECUTION SPEED
                                ; LINE NUMBERS ARE ALSO PRECEEDED BY A SPECIAL TOKEN
                                ; SO THAT LINE NUMBERS CAN BE CONVERTED TO POINTERS AT EXECUTION
                                ; TIME.
  0E3B'   AF                    CRUNCH:	XRA	A			;SAY EXPECTING FLOATING NUMBERS
  0E3C'   32 098C'              	STA	DONUM			;SET FLAG ACORDINGLY
  0E3F'   32 098B'              	STA	DORES			;ALLOW CRUNCHING
  0E42'   01 013B               	LXI	B,0+KBFLEN-3		;GET LENGTH OF KRUNCH BUFFER
                                					;MINUS THREE BECAUSE OF ZEROS AT END
  0E45'   11 0746'              	LXI	D,KBUF			;SETUP DESTINATION POINTER
  0E48'   7E                    KLOOP:	MOV	A,M			;GET CHARACTER FROM BUF
                                					;SETUP B WITH A QUOTE IF IT IS A STRING
  0E49'   FE 22                 	CPI	34			;QUOTE SIGN? 
  0E4B'   CA 106A'              	JZ	STRNG			;YES, GO TO SPECIAL STRING HANDLING
  0E4E'   FE 20                 	CPI	' '			;SPACE?
  0E50'   CA 1040'              	JZ	STUFFH			;JUST STUFF AWAY
  0E53'   B7                    	ORA	A			;END OF LINE?
  0E54'   CA 1073'              	JZ	CRDONE			;YES, DONE CRUNCHING
  0E57'   3A 098B'              	LDA	DORES			;IN DATA STATEMENT AND NO CRUNCH?
  0E5A'   B7                    	ORA	A
  0E5B'   7E                    	MOV	A,M			;GET THE CHARACTER AGAIN
  0E5C'   C2 1040'              	JNZ	STUFFH			;IF NO CRUNCHING JUST STORE
                                					;THE CHARACTER
  0E5F'   FE 3F                 	CPI	'?'			;A QMARK?
  0E61'   3E 91                 	MVI	A,$PRINT
  0E63'   D5                    	PUSH	D			;SAVE STORE POINTER
  0E64'   C5                    	PUSH	B			;SAVE CHAR COUNT
  0E65'   CA 0F2C'              	JZ	NOTFN2			;THEN USE A "PRINT" TOKEN
                                					;***5.11 DONT ALLOW FOLLOWING LINE #***
  0E68'   11 036A'              	LXI	D,SPCTAB		;ASSUME WE'LL SEARCH SPECIAL CHAR TABLE
  0E6B'   CD 1B75'              	CALL	MAKUPL			;TRANSLATE THIS CHAR TO UPPER CASE
  0E6E'   CD 0000*              	CALL	ISLET2			;LETTER?
  0E71'   DA 0F80'              	JC	TSTNUM			;NOT A LETTER, TEST FOR NUMBER
  0E74'   E5                    	PUSH	H			;SAVE TEXT POINTER
  0E75'   01 0EBA'              	LXI	B,NOTGOS		;PLACE TO RETURN IF NOT FUNNY GO
  0E78'   C5                    	PUSH	B
  0E79'   FE 47                 	CPI	'G'			;FIRST CHECK FOR "GO "
  0E7B'   C0                    	RNZ	
  0E7C'   23                    	INX	H
  0E7D'   CD 1B75'              	CALL	MAKUPL
  0E80'   FE 4F                 	CPI	'O'
  0E82'   C0                    	RNZ	
  0E83'   23                    	INX	H
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-54
FAST CRUNCH - COMPACTIFICATION

  0E84'   CD 1B75'              	CALL	MAKUPL
  0E87'   FE 20                 	CPI	' '
  0E89'   C0                    	RNZ	
  0E8A'   23                    	INX	H
  0E8B'   CD 1B75'              GSKPSP:	CALL	MAKUPL			;NOW SKIP ANY NUMBER OF SPACES
  0E8E'   23                    	INX	H
  0E8F'   FE 20                 	CPI	' '
  0E91'   CA 0E8B'              	JZ	GSKPSP
  0E94'   FE 53                 	CPI	'S'
  0E96'   CA 0EA6'              	JZ	CKGOSU			;LOOKS LIKE "GO SUB" NOT "GO TO"
  0E99'   FE 54                 	CPI	'T'
  0E9B'   C0                    	RNZ	
  0E9C'   CD 1B75'              	CALL	MAKUPL
  0E9F'   FE 4F                 	CPI	'O'
  0EA1'   3E 89                 	MVI	A,$GOTO			;RESWRD TO USE IF MATCHED
  0EA3'   C3 0EB4'              	JMP	GPUTRS			;MERGE WITH "GO SUB"
  0EA6'   CD 1B75'              CKGOSU:	CALL	MAKUPL
  0EA9'   FE 55                 	CPI	'U'
  0EAB'   C0                    	RNZ	
  0EAC'   23                    	INX	H
  0EAD'   CD 1B75'              	CALL	MAKUPL
  0EB0'   FE 42                 	CPI	'B'
  0EB2'   3E 8D                 	MVI	A,$GOSUB
  0EB4'   C0                    GPUTRS:	RNZ	
  0EB5'   C1                    	POP	B			;POP OFF THE RETURN ADDRESS SINCE MATCHED
  0EB6'   C1                    	POP	B			;POP OFF THE OLD TEXT POINTER
  0EB7'   C3 0F2C'              	JMP	NOTFN2			;STORE THE RESERVED WORD
  0EBA'   E1                    NOTGOS:	POP	H
  0EBB'   CD 1B75'              	CALL	MAKUPL			;GET BACK THE CHARACTER
  0EBE'   E5                    	PUSH	H			;RESAVE THE TEXT POINTER
  0EBF'   21 0107'              	LXI	H,ALPTAB		;GET POINTER TO ALPHA DISPATCH TABLE
  0EC2'   D6 41                 	SUI	'A'			;SUBTRACT ALPHA OFFSET
  0EC4'   87                    	ADD	A			;MULTIPLY BY TWO
  0EC5'   4F                    	MOV	C,A			;SAVE OFFSET IN [C] FOR DAD.
  0EC6'   06 00                 	MVI	B,0			;MAKE HIGH PART OF OFFSET ZERO
  0EC8'   09                    	DAD	B			;ADD TO TABLE ADDRESS
  0EC9'   5E                    	MOV	E,M			;SET UP POINTER IN [D,E]
  0ECA'   23                    	INX	H
  0ECB'   56                    	MOV	D,M			;GET HIGH PART OF ADDRESS
  0ECC'   E1                    	POP	H			;GET BACK SOURCE POINTER
  0ECD'   23                    	INX	H			;POINT TO CHAR AFTER FIRST ALPHA
  0ECE'   E5                    TRYAGA:	PUSH	H			;SAVE TXTPTR TO START OF SEARCH AREA
  0ECF'                         LOPPSI:
  0ECF'   CD 1B75'              	CALL	MAKUPL			;TRANSLATE THIS CHAR TO UPPER CASE
  0ED2'   4F                    	MOV	C,A			;SAVE CHAR IN [C]
  0ED3'   1A                    	LDAX	D			;GET BYTE FROM RESERVED WORD LIST
  0ED4'   E6 7F                 	ANI	127			;GET RID OF HIGH BIT
  0ED6'   CA 1093'              	JZ	NOTRES			;IF=0 THEN END OF THIS CHARS RESLT
  0ED9'   23                    	INX	H			;BUMP SOURCE POINTER
  0EDA'   B9                    	CMP	C			;COMPARE TO CHAR FROM SOURCE LINE
  0EDB'   C2 0F20'              	JNZ	LOPSKP			;IF NO MATCH, SEARCH FOR NEXT RESWRD
  0EDE'   1A                    	LDAX	D			;GET RESWRD BYTE AGAIN
  0EDF'   13                    	INX	D			;BUMP RESLST POINTER
  0EE0'   B7                    	ORA	A			;SET CC'S
  0EE1'   F2 0ECF'              	JP	LOPPSI			;SEE IF REST OFCHARS MATCH
  0EE4'   79                    	MOV	A,C			;GET LAST CHAR OF RESWRD
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-55
FAST CRUNCH - COMPACTIFICATION

  0EE5'   FE 28                 	CPI	'('			;IF TAB( OR SPC(, SPACE NEED NOT FOLLOW
  0EE7'   CA 0F05'              	JZ	ISRESW			;IS A RESWORD
  0EEA'   1A                    	LDAX	D			;LOOK AFTER CHAR
  0EEB'   FE D3                 	CPI	$FN			;FUNCTION?
  0EED'   CA 0F05'              	JZ	ISRESW			;THEN NO SPACE NEED AFTERWARD
  0EF0'   FE D2                 	CPI	$USR			;OR USR DEFINITION?
  0EF2'   CA 0F05'              	JZ	ISRESW
  0EF5'   CD 1B75'              	CALL	MAKUPL			;GET NEXT CHAR IN LINE (MC 6/22/80)
  0EF8'   FE 2E                 	CPI	'.'			;IS IT A DOT
  0EFA'   CA 0F00'              	JZ	ISVARS			;YES
  0EFD'   CD 20ED'              	CALL	TSTANM			;IS IT A LETTER IMMEDIATELY FOLLOWING RESWRD
  0F00'   3E 00                 ISVARS:	MVI	A,0			;SET DONUM TO -1
  0F02'   D2 1093'              	JNC	NOTRES			;IF ALPHA, CANT BE RESERVED WORD
  0F05'                         ISRESW:
  0F05'   F1                    	POP	PSW			;GET RID OF SAVED [H,L]
  0F06'   1A                    	LDAX	D			;GET RESWRD VALUE
  0F07'   B7                    	ORA	A			;SET CC'S
  0F08'   FA 0F2B'              	JM	NOTFNT			;IF MINUS, WASNT FUNCTION TOKEN
  0F0B'   C1                    	POP	B			;GET CHAR COUNT OFF STACK
  0F0C'   D1                    	POP	D			;GET DEPOSIT POINTER OFF STACK
  0F0D'   F6 80                 	ORI	200O			;MAKE HIGH ORDER BIT ONE
  0F0F'   F5                    	PUSH	PSW			;SAVE FN CHAR
  0F10'   3E FF                 	MVI	A,377O			;GET BYTE WHICH PRECEEDS FNS
  0F12'   CD 1088'              	CALL	KRNSAV			;SAVE IN KRUNCH BUFFER
  0F15'   AF                    	XRA	A			;MAKE A ZERO
  0F16'   32 098C'              	STA	DONUM			;TO RESET DONUM (FLOATINGS ALLOWED)
  0F19'   F1                    	POP	PSW			;GET FUNCTION TOKEN
  0F1A'   CD 1088'              	CALL	KRNSAV			;STORE IT
  0F1D'   C3 0E48'              	JMP	KLOOP			;KEEP KRUNCHING
                                
  0F20'   E1                    LOPSKP:	POP	H			;RESTORE UNDEFILED TEXT POINTER
  0F21'   1A                    LOPSK2:	LDAX	D			;GET A BYTE FROM RESWRD LIST
  0F22'   13                    	INX	D			;BUMP RESLST POINTER
  0F23'   B7                    	ORA	A			;SET CC'S
  0F24'   F2 0F21'              	JP	LOPSK2			;NOT END OF RESWRD, KEEP SKIPPING
  0F27'   13                    	INX	D			;POINT AFTER TOKEN
  0F28'   C3 0ECE'              	JMP	TRYAGA			;TRY ANOTHER RESWRD
                                
  0F2B'   2B                    NOTFNT:	DCX	H			;FIX TEXT POINTER
  0F2C'   F5                    NOTFN2:	PUSH	PSW			;SAVE CHAR TO BE SAVE D IN KRUNCH BUFFER
  0F2D'   01 0F5E'              	LXI	B,NOTRS2		;WHERE TO GO IF NOT LINE NUMBER RESWRD
  0F30'   C5                    	PUSH	B			;SAVE LABEL ADDRESS ON STACK
  0F31'   FE 8C                 	CPI	$RESTO 			;RESTORE CAN HAVE FOLLOWING LINE NUMBER
  0F33'   C8                    	RZ	
  0F34'   FE AB                 	CPI	$AUTO			;AUTO COMMAND
  0F36'   C8                    	RZ				;SCAN LINE RANGE &CRUNCH
  0F37'   FE AC                 	CPI	$RENUM			;RENUMBER?
  0F39'   C8                    	RZ	
  0F3A'   FE AA                 	CPI	$DELET 			;DELETE?
  0F3C'   C8                    	RZ				;IF SO, CRUNCH FOLLOWING LINE #
  0F3D'   FE A7                 	CPI	$EDIT			;EDIT?
  0F3F'   C8                    	RZ	
  0F40'   FE A9                 	CPI	$RESUM			;RESUME?
  0F42'   C8                    	RZ				;CRUNCH FOLLOWING LINE NUMBER
  0F43'   FE D6                 	CPI	$ERL			;ERROR LINE
  0F45'   C8                    	RZ				;CRUNCH FOLLOWING LINE NUMBER
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-56
FAST CRUNCH - COMPACTIFICATION

                                					;SO THAT IF "ERL=...THEN"
                                					;WILL RESEQUENCE PROPERLY
                                					;THIS CAN MAKE STATEMENTS LIKE 
                                					;"PRINT ERL,1E20" DO STRANGE THINGS
  0F46'   FE A2                 	CPI	$ELSE
  0F48'   C8                    	RZ				;IF ELSE, CRUNCH FOLLOWING LINE #
  0F49'   FE 8A                 	CPI	$RUN			;RUN?
  0F4B'   C8                    	RZ				;CRUNCH FOLLOWING LINE #
  0F4C'   FE 93                 	CPI	$LIST			;LIST?
  0F4E'   C8                    	RZ	
  0F4F'   FE 9F                 	CPI	$LLIST			;LPT LIST?
  0F51'   C8                    	RZ				;CRUNCH FOLLOWING LINE #'S
  0F52'   FE 89                 	CPI	$GOTO			;IF GOTO, CRUNCH LINE #
  0F54'   C8                    	RZ	
  0F55'   FE CF                 	CPI	$THEN			;CRUNCH LINE #'S AFTER 'THEN'
  0F57'   C8                    	RZ	
  0F58'   FE 8D                 	CPI	$GOSUB			;IF GOSUB, CRUNCH LINE #'S
  0F5A'   C8                    	RZ	
  0F5B'   F1                    	POP	PSW			;GET RID OF NOTRS2 RETURN ADDRESS
  0F5C'   AF                    	XRA	A			;GET A ZERO (EXPECT USUALL NUMBERS)
  0F5D'   C2                    	DB	302Q			;"JNZ" OVER NEXT TWO BYTES
  0F5E'   3E 01                 NOTRS2:	MVI	A,1			;SAY LINE #'S ALLOWED.
  0F60'   32 098C'              NOTRS6:	STA	DONUM			;SAVE IN FLAG
  0F63'   F1                    	POP	PSW			;RESTORE CHARACTER TO SAVE IN KRUNCH BUFFER
  0F64'   C1                    	POP	B			;GET BACK THE CHARACTER COUNT
  0F65'   D1                    	POP	D			;GET STUFF POINTER BACK
  0F66'   FE A2                 	CPI	$ELSE			;HAVE TO PUT A HIDDEN
                                					;COLON IN FRONT OF "ELSE"S
  0F68'   F5                    	PUSH	PSW			;SAVE CURRENT CHAR ($ELSE)
  0F69'   CC 1086'              	CZ	KRNSVC			;SAVE ":" IN CRUNCH BUFFER
  0F6C'   F1                    	POP	PSW			;GET BACK TOKEN
  0F6D'   FE DB                 CKSNGQ:	CPI	SNGQTK			;SINGLE QUOATATION MARK?
  0F6F'   C2 101E'              	JNZ	NTSNGT
  0F72'   F5                    	PUSH	PSW			;SAVE SNGQTK
  0F73'   CD 1086'              	CALL	KRNSVC			;SAVE ":" IN CRUNCH BUFFER
  0F76'   3E 8F                 	MVI	A,$REM			;STORE ":$REM" IN FRONT FOR EXECUTION
  0F78'   CD 1088'              	CALL	KRNSAV			;SAVE IT
  0F7B'   F1                    	POP	PSW			;GET SNGQTK BACK
  0F7C'   F5                    	PUSH	PSW			;SAVE BACK AS TERMINATOR FOR STRNG
  0F7D'   C3 106C'              	JMP	STRNG2			;STUFF THE REST OF THE LINE WITHOUT CRUNCHING
  0F80'   7E                    TSTNUM:	MOV	A,M			;GET CHAR
  0F81'   FE 2E                 	CPI	'.'			;TEST FOR START OF FLOATING #
  0F83'   CA 0F90'              	JZ	NUMTRY			;TRY INPUTTING IT AS CONSTANT
  0F86'   FE 3A                 	CPI	'9'+1			;IS IT A DIGIT?
  0F88'   D2 100B'              	JNC	SRCSPC			;NO, TRY OTHER THINGS
  0F8B'   FE 30                 	CPI	'0'			;TRY LOWER END
  0F8D'   DA 100B'              	JC	SRCSPC			;NO TRY OTHER POSSIBILITIES
  0F90'   3A 098C'              NUMTRY:	LDA	DONUM			;TEST FOR NUMBERS ALLOWED
  0F93'   B7                    	ORA	A			;SET CC'S
  0F94'   7E                    	MOV	A,M			;GET CHAR IF GOING TO STUFFH
  0F95'   C1                    	POP	B			;RESTORE CHAR COUNT
  0F96'   D1                    	POP	D			;RESTORE DEP. POINTER
  0F97'   FA 1040'              	JM	STUFFH			;NO, JUST STUFF IT (!)
  0F9A'   CA 0FBC'              	JZ	FLTGET			;IF DONUM=0 THEN FLOATING #'S ALLOWED
  0F9D'   FE 2E                 	CPI	'.'			;IS IT DOT?
  0F9F'   CA 1040'              	JZ	STUFFH			;YES, STUFF IT FOR HEAVENS SAKE! (EDIT .)
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-57
FAST CRUNCH - COMPACTIFICATION

  0FA2'   3E 0E                 	MVI	A,LINCON		;GET LINE # TOKEN
  0FA4'   CD 1088'              	CALL	KRNSAV			;SAVE IT
  0FA7'   D5                    	PUSH	D			;SAVE DEPOSIT POINTER
  0FA8'   CD 135A'              	CALL	LINGET			;GET THE LINE #.
  0FAB'   CD 10DB'              	CALL	BAKSP			;BACK UP POINTER TO AFTER LAST DIGIT
  0FAE'   E3                    SAVINT:	XTHL				;EXCHANGE CURRENT [H,L] WITH SAVED [D,E]
  0FAF'   EB                    	XCHG				;GET SAVED [D,E] IN [D,E]
  0FB0'   7D                    SAVI:	MOV	A,L			;GET LOW BYTE OF VALUE RETURNED BY LINGET
  0FB1'   CD 1088'              	CALL	KRNSAV			;SAVE THE LOW BYTE OF LINE #
  0FB4'   7C                    	MOV	A,H			;GET HIGH BYTE
  0FB5'   E1                    POPSTF:	POP	H			;RESTORE [H,L]
  0FB6'   CD 1088'              	CALL	KRNSAV			;SAVE IT TOO
  0FB9'   C3 0E48'              	JMP	KLOOP			;EAT SOME MORE
                                
  0FBC'   D5                    FLTGET:	PUSH	D			;SAVE DEPOSIT POINTER
  0FBD'   C5                    	PUSH	B			;SAVE CHAR COUNT
  0FBE'   7E                    	MOV	A,M			;FIN ASSUMES CHAR IN [A]
  0FBF'   CD 0000*              	CALL	FIN			;READ THE #
  0FC2'   CD 10DB'              	CALL	BAKSP			;BACK UP POINTER TO AFTER LAST DIGIT
  0FC5'   C1                    	POP	B			;RESTORE CHAR COUNT
  0FC6'   D1                    	POP	D			;RESTORE DEPOSIT POINTER
  0FC7'   E5                    	PUSH	H			;SAVE TEXT POINTER
  0FC8'   3A 098A'              	LDA	VALTYP			;GET VALUE TYPE
  0FCB'   FE 02                 	CPI	2			;INTEGER?
  0FCD'   C2 0FE8'              	JNZ	NTINTG			;NO
  0FD0'   2A 0B27'              	LHLD	FACLO			;GET IT
  0FD3'   7C                    	MOV	A,H			;GET HIGH PART
  0FD4'   B7                    	ORA	A			;IS IT ZERO?
  0FD5'   3E 02                 	MVI	A,2			;RESTORE INT VALTYP
  0FD7'   C2 0FE8'              	JNZ	NTINTG			;THEN ISNT SINGLE BYTE INT
  0FDA'   7D                    	MOV	A,L			;GET LOW BYTE
  0FDB'   65                    	MOV	H,L			;GET LOW BYTE IN HIGH BYTE TO STORE
  0FDC'   2E 0F                 	MVI	L,IN2CON		;GET CONSTANT FOR 1 BYTE INTS
  0FDE'   FE 0A                 	CPI	10			;IS IT TOO BIG FOR A SINGLE BYTE CONSTANT?
  0FE0'   D2 0FB0'              	JNC	SAVI			;TOO BIG, USE SINGLE BYTE INT
  0FE3'   C6 11                 	ADI	ONECON			;MAKE SINGLE BYTE CONSTANT
  0FE5'   C3 0FB5'              	JMP	POPSTF			;POP H & STUFF AWAY CHAR
  0FE8'   F5                    NTINTG:	PUSH	PSW			;SAVE FOR LATER
  0FE9'   0F                    	RRC				;DIVIDE BY TWO
  0FEA'   C6 1B                 	ADI	INTCON-1		;ADD OFFSET TO GET TOKEN
  0FEC'   CD 1088'              	CALL	KRNSAV			;SAVE THE TOKEN
  0FEF'   21 0B27'              	LXI	H,FACLO			;GET START POINTER
  0FF2'   CD 1C7F'              	CALL	GETYPR			;SET CC'S ON VALTYPE
  0FF5'   DA 0FFB'              	JC	NTDBL			;IF NOT DOUBLE, START MOVING AT FACLO
  0FF8'   21 0B23'              	LXI	H,DFACLO		;DOUBLE, START MOVING AT DFACLO
  0FFB'   F1                    NTDBL:	POP	PSW			;RESTORE COUNT OF BYTES TO MOVE
  0FFC'   F5                    MOVCON:	PUSH	PSW			;SAVE BYTE MOVE COUNT
  0FFD'   7E                    	MOV	A,M			;GET A BYTE
  0FFE'   CD 1088'              	CALL	KRNSAV			;SAVE IT IN KRUNCH BUFFER
  1001'   F1                    	POP	PSW			;GET BACK COUNT
  1002'   23                    	INX	H			;BUMP POINTER INTO FAC
  1003'   3D                    	DCR	A			;MOVE IT DOWN
  1004'   C2 0FFC'              	JNZ	MOVCON			;KEEP MOVING IT
  1007'   E1                    	POP	H			;GET BACK SAVED TEXT POINTER
  1008'   C3 0E48'              	JMP	KLOOP			;KEEP LOOPING
                                
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-58
FAST CRUNCH - COMPACTIFICATION

  100B'   11 0369'              SRCSPC:	LXI	D,SPCTAB-1		;GET POINTER TO SPECIAL CHARACTER TABLE
  100E'   13                    SRCSP2:	INX	D			;MOVE POINTER AHEAD
  100F'   1A                    	LDAX	D			;GET BYTE FROM TABLE
  1010'   E6 7F                 	ANI	177O			;MASK OFF HIGH BIT
  1012'   CA 10BD'              	JZ	NOTRS5			;IF END OF TABLE, STUFF AWAY, DONT CHANGE DONUM
  1015'   13                    	INX	D			;BUMP POINTER
  1016'   BE                    	CMP	M			;IS THIS SPECIAL CHAR SAME AS CURRENT TEXT CHAR?
  1017'   1A                    	LDAX	D			;GET NEXT RESWRD
  1018'   C2 100E'              	JNZ	SRCSP2			;IF NO MATCH, KEEP LOOKING
  101B'   C3 10CF'              	JMP	NOTRS1			;FOUND, SAVE AWAY AND SET DONUM=1.
                                
  101E'                         NTSNGT:
  101E'   FE 26                 	CPI	'&'			;OCTAL CONSTANT?
  1020'   C2 1040'              	JNZ	STUFFH			;JUST STUFF IT AWAY
  1023'   E5                    	PUSH	H			;SAVE TEXT POINTER
  1024'   CD 1232'              	CALL	CHRGTR			;GET NEXT CHAR
  1027'   E1                    	POP	H			;RESTORE TEXT POINTER
  1028'   CD 1B76'              	CALL	MAKUPS			;MAKE CHAR UPPER CASE
  102B'   FE 48                 	CPI	'H'			;HEX CONSTANT?
  102D'   3E 0B                 	MVI	A,OCTCON		;ASSUME OCTAL CONSTANT
  102F'   C2 1034'              	JNZ	WUZOCT			;YES, IT WAS
  1032'   3E 0C                 	MVI	A,HEXCON		;NO, WAS HEX
  1034'   CD 1088'              WUZOCT:	CALL	KRNSAV			;SAVE IT
  1037'   D5                    	PUSH	D			;SAVE CURRENT DEPOSIT POINTER
  1038'   C5                    	PUSH	B			;SAVE COUNT
  1039'   CD 1B84'              	CALL	OCTCNS			;GET THE VALUE
  103C'   C1                    	POP	B			;RESTORE [B,C]
  103D'   C3 0FAE'              	JMP	SAVINT			;SAVE THE INTEGER IN THE KRUNCH BUFFER
  1040'   23                    STUFFH:	INX	H			;ENTRY TO BUMP [H,L]
  1041'   F5                    	PUSH	PSW			;SAVE CHAR AS KRNSAV CLOBBERS
  1042'   CD 1088'              	CALL	KRNSAV			;SAVE CHAR IN KRUNCH BUFFER
  1045'   F1                    	POP	PSW			;RESTORE CHAR
  1046'   D6 3A                 	SUI	':'			;SEE IF IT IS A COLON
  1048'   CA 1052'              	JZ	COLIS			;IF SO ALLOW CRUNCHING AGAIN
  104B'   FE 4A                 	CPI	$DATA-':'
  104D'   C2 1058'              	JNZ	NODATT			;SEE IF IT IS A DATA TOKEN
  1050'   3E 01                 	MVI	A,1			;SET LINE NUMBER ALLOWED FLAG
                                					;KLUDGE AS HAS TO BE NON-ZERO.
  1052'   32 098B'              COLIS:	STA	DORES			;SETUP FLAG
  1055'   32 098C'              	STA	DONUM			;SET NUMBER ALLOWED FLAG
  1058'   D6 55                 NODATT:	SUI	$REM-':'
  105A'   C2 0E48'              	JNZ	KLOOP			;KEEP LOOPING
  105D'   F5                    	PUSH	PSW			;SAVE TERMINATOR ON STACK
  105E'   7E                    STR1:	MOV	A,M			;GET A CHAR
  105F'   B7                    	ORA	A			;SET CONDITION CODES
  1060'   E3                    	XTHL				;GET SAVED TERMINATOR OFF STACK, SAVE [H,L]
  1061'   7C                    	MOV	A,H			;GET TERMINATOR INTO [A] WITHOUT AFFECTING PSW
  1062'   E1                    	POP	H			;RESTORE [H,L]
  1063'   CA 1073'              	JZ	CRDONE			;IF END OF LINE THEN DONE
  1066'   BE                    	CMP	M			;COMPARE CHAR WITH THIS TERMINATOR
  1067'   CA 1040'              	JZ	STUFFH			;IF YES, DONE WITH STRING
  106A'                         STRNG:
  106A'   F5                    	PUSH	PSW			;SAVE TERMINATOR
  106B'   7E                    	MOV	A,M			;GET BACK LINE CHAR
  106C'   23                    STRNG2:	INX	H			;INCREMENT TEXT POINTER
  106D'   CD 1088'              	CALL	KRNSAV			;SAVE CHAR IN KRUNCH BUFFER
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-59
FAST CRUNCH - COMPACTIFICATION

  1070'   C3 105E'              	JMP	STR1			;KEEP LOOPING
                                
  1073'                         CRDONE:
                                
                                					;ADD 5 TO LINE COUNT & FOR IN [B,C]
  1073'   21 0140               	LXI	H,0+KBFLEN+2		;GET OFFSET
  1076'   7D                    	MOV	A,L			;GET COUNT TO SUBTRACT FROM
  1077'   91                    	SUB	C			;SUBTRACT
  1078'   4F                    	MOV	C,A
  1079'   7C                    	MOV	A,H
  107A'   98                    	SBB	B
  107B'   47                    	MOV	B,A
  107C'   21 0745'              	LXI	H,KBUF-1		;GET POINTER TO CHAR BEFORE KBUF
                                					;AS "GONE" DOES A CHRGET
  107F'   AF                    	XRA	A			;GET A ZERO
  1080'   12                    	STAX	D			;NEED THREE 0'S ON THE END
  1081'   13                    	INX	D			;ONE FOR END-OF-LINE
  1082'   12                    	STAX	D			;AND 2 FOR A ZERO LINK
  1083'   13                    	INX	D			;SINCE IF THIS IS A DIRECT STATEMENT
  1084'   12                    	STAX	D			;ITS END MUST LOOK LIKE THE END OF A PROGRAM
  1085'   C9                    	RET				;END OF CRUNCHING
                                
  1086'   3E 3A                 KRNSVC:	MVI	A,':'			;GET COLON
  1088'                         KRNSAV:
                                					;IN KRUNCH BUFFER
  1088'   12                    	STAX	D			;SAVE BYTE IN KRUNCH BUFFER
  1089'   13                    	INX	D			;BUMP POINTER
  108A'   0B                    	DCX	B			;DECREMENT COUNT OF BYTES LEFT IN BUFFER
  108B'   79                    	MOV	A,C			;TEST IF IT WENT TO ZERO
  108C'   B0                    	ORA	B			;BY SEEING IF DOUBLE BYTE ZERO.
  108D'   C0                    	RNZ				;ALL DONE IF STILL SPACE LEFT
                                	PUBLIC	LBOERR
  108E'   1E 17                 LBOERR:	MVI	E,ERRLBO		;GET ERROR CODE
  1090'   C3 0C06'              	JMP	ERROR			;JUMP TO ERROR ROUTINE
                                
  1093'   E1                    NOTRES:	POP	H			;GET BACK POINTER TO ORIGINAL CHAR
  1094'   2B                    	DCX	H			;NOW POINT TO FIRST ALPHA CHAR
  1095'   3D                    	DCR	A			;SET A TO MINUS ONE
  1096'   32 098C'              	STA	DONUM			;FLAG WERE IN VARIABLE NAME
  1099'   C1                    	POP	B			;GET BACK CHAR COUNT
  109A'   D1                    	POP	D			;GET BACK DEPOSIT POINTER
  109B'   CD 1B75'              	CALL	MAKUPL			;GET CHAR FROM LINE, MAKE UPPER CASE
  109E'   CD 1088'              KRNVAR:	CALL	KRNSAV			;SAVE CHAR
  10A1'   23                    	INX	H			;INCRMENT SOURCE POINTER
  10A2'   CD 1B75'              	CALL	MAKUPL			;MAKE UPPER CASE (?)
  10A5'   CD 0000*              	CALL	ISLET2			;IS IT A LETTER?
  10A8'   D2 109E'              	JNC	KRNVAR			;YES, EAT
  10AB'   FE 3A                 	CPI	'9'+1			;DIGIT?
  10AD'   D2 10BA'              	JNC	JKLOOP			;NO, TOO LARGE
  10B0'   FE 30                 	CPI	'0'
  10B2'   D2 109E'              	JNC	KRNVAR			;YES, EAT
  10B5'   FE 2E                 	CPI	'.'			;IS IT DOT
  10B7'   CA 109E'              	JZ	KRNVAR			;YES, DOTS OK IN VAR NAMES
  10BA'   C3 0E48'              JKLOOP:	JMP	KLOOP			;DONE LOOKING AT VARIABLE NAME
  10BD'   7E                    NOTRS5:	MOV	A,M			;GET CHAR FROM LINE
  10BE'   FE 20                 	CPI	32			;SPACE OR HIGHER ?
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-60
FAST CRUNCH - COMPACTIFICATION

  10C0'   D2 10CF'              	JNC	NOTRS1			;YES = SAVE IT
  10C3'   FE 09                 	CPI	9			;TAB ?
  10C5'   CA 10CF'              	JZ	NOTRS1			;YES = THAT'S OK
  10C8'   FE 0A                 	CPI	10			;ALSO ALLOW...
  10CA'   CA 10CF'              	JZ	NOTRS1			;...LINE FEEDS
  10CD'   3E 20                 	MVI	A,32			;FORCE REST TO SPACES
  10CF'   F5                    NOTRS1:	PUSH	PSW			;SAVE THIS CHAR
  10D0'   3A 098C'              	LDA	DONUM			;GET NUMBER OK FLAG
  10D3'   3C                    	INR	A			;SEE IF IN A VARIABLE NAME.
  10D4'   CA 10D8'              	JZ	JNTRS6			;IF SO & SPECIAL CHAR SEEN, RESET DONUM
  10D7'   3D                    	DCR	A			;OTHERWISE LEAVE DONUM UNCHANGED.
  10D8'   C3 0F60'              JNTRS6:	JMP	NOTRS6
                                
                                ; ROUTINE TO BACK UP POINTER AFTER # EATEN
  10DB'   2B                    BAKSP:	DCX	H			;POINT TO PREVIOUS CHAR
  10DC'   7E                    	MOV	A,M			;GET THE CHAR
  10DD'   FE 20                 	CPI	' '			;A SPACE?
  10DF'   CA 10DB'              	JZ	BAKSP			;YES, KEEP BACKING UP
  10E2'   FE 09                 	CPI	9			;TAB?
  10E4'   CA 10DB'              	JZ	BAKSP			;YES, BACK UP
  10E7'   FE 0A                 	CPI	10			;LF?
  10E9'   CA 10DB'              	JZ	BAKSP
  10EC'   23                    	INX	H			;POINT TO CHAR AFTER LAST NON-SPACE
  10ED'   C9                    	RET				;ALL DONE.
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-61
FAST CRUNCH - COMPACTIFICATION

                                
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-62
FAST CRUNCH - COMPACTIFICATION

                                
                                	SUBTTL	THE NON-EXTENDED "LIST" COMMAND
                                
                                
                                
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-63
THE NON-EXTENDED "LIST" COMMAND

                                
                                	SUBTTL	"FOR" STATEMENT
                                ;
                                ; A "FOR" ENTRY ON THE STACK HAS THE FOLLOWING FORMAT:
                                ;
                                ; LOW ADDRESS
                                ;	TOKEN ($FOR IN HIGH BYTE)  1 BYTE
                                ;	A POINTER TO THE LOOP VARIABLE  2 BYTES
                                ;	A BYTE REFLECTING THE SIGN OF THE INCREMENT 1 BYTE
                                ;	THE STEP 4 BYTES
                                ;	THE UPPER VALUE 4 BYTES
                                ;	THE LINE # OF THE "FOR" STATEMENT 2 BYTES
                                ;	A TEXT POINTER INTO THE "FOR" STATEMENT 2 BYTES
                                ; HIGH ADDRESS
                                ;
                                ; TOTAL 16 BYTES
                                ;
                                
  10EE'   3E 64                 FOR:	MVI	A,100
  10F0'   32 09C8'              	STA	SUBFLG			;DONT RECOGNIZE SUBSCRIPTED VARIABLES
  10F3'   CD 0000*              	CALL	PTRGET			;GET POINTER TO LOOP VARIABLE
  10F6'   CD 0000*              	CALL	SYNCHR
  10F9'   F0                    	DB	EQULTK			;SKIP OVER ASSIGNMENT "="
  10FA'   D5                    	PUSH	D			;SAVE THE VARIABLE POINTER
  10FB'   EB                    	XCHG				;SAVE THE LOOP VARIABLE IN TEMP
  10FC'   22 09CA'              	SHLD	TEMP			;FOR USE LATER ON
  10FF'   EB                    	XCHG	
  1100'   3A 098A'              	LDA	VALTYP			;REMEMBER THE LOOP VARIABLE TYPE
  1103'   F5                    	PUSH	PSW
  1104'   CD 191D'              	CALL	FRMEVL			;GET THE START VALUE
  1107'   F1                    	POP	PSW			;REGET THE LOOP TYPE
  1108'   E5                    	PUSH	H			;SAVE THE TEXT POINTER
  1109'   CD 1EC5'              	CALL	DOCNVF			;FORCE CONVERSION TO LOOP TYPE
  110C'   21 0AE3'              	LXI	H,FVALSV		;PLACE TO SAVE THE VALUE
  110F'   CD 0000*              	CALL	MOVMF			;STORE FOR USE IN "NEXT"
  1112'   E1                    	POP	H			;GET BACK THE TEXT POINTER
  1113'   D1                    	POP	D			;GET BACK THE VARIABLE POINTER
                                					;THE CORRECT INTIAL VALUE
                                					;AND STORE A POINTER
                                					;TO THE VARIABLE IN [TEMP]
  1114'   C1                    	POP	B			;GET RID OF THE NEWSTT RETURN
  1115'   E5                    	PUSH	H			;SAVE THE TEXT POINTER
  1116'   CD 1415'              	CALL	DATA			;SET [H,L]=END OF STATEMENT
  1119'   22 09C4'              	SHLD	ENDFOR			;SAVE FOR COMPARISON
  111C'   21 0002               	LXI	H,0+2			;SET UP POINTER INTO STACK
  111F'   39                    	DAD	SP
  1120'   CD 0B77'              LPFORM:	CALL	LOOPER			;MUST HAVE VARIABLE POINTER IN [D,E]
  1123'   D1                    	POP	D			;[D,E]=TEXT POINTER
  1124'   C2 113F'              	JNZ	NOTOL			;IF NO MATCHING ENTRY, DON'T
                                					;ELIMINATE ANYTHING
  1127'   09                    	DAD	B			;IN THE CASE OF "FOR"
                                					;WE ELIMINATE THE MATCHING ENTRY
                                					;AS WELL AS EVERYTHING AFTER IT
  1128'   D5                    	PUSH	D			;SAVE THE TEXT POINTER
  1129'   2B                    	DCX	H			;SEE IF END TEXT POINTER OF MATCHING ENTRY
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-64
"FOR" STATEMENT

  112A'   56                    	MOV	D,M			;MATCHES THE FOR WE ARE HANDLING
  112B'   2B                    	DCX	H			;PICK UP THE END OF THE "FOR" TEXT POINTER
  112C'   5E                    	MOV	E,M			;FOR THE ENTRY ON THE STACK
  112D'   23                    	INX	H			;WITHOUT CHANGING [H,L]
  112E'   23                    	INX	H
  112F'   E5                    	PUSH	H			;SAVE THE STACK POINTER FOR THE COMPARISON
  1130'   2A 09C4'              	LHLD	ENDFOR			;GET ENDING TEXT POINTER FOR THIS "FOR"
  1133'   CD 0000*              	CALL	DCOMPR			;SEE IF THEY MATCH
  1136'   E1                    	POP	H			;GET BACK THE STACK POINTER
  1137'   C2 1120'              	JNZ	LPFORM			;KEEP SEARCHING IF NO MATCH
  113A'   D1                    	POP	D			;GET BACK THE TEXT POINTER
  113B'   F9                    	SPHL				;DO THE ELIMINATION
  113C'   22 09D4'              	SHLD	SAVSTK			;UPDATE SAVED STACK
                                					;SINCE A MATCHING ENTRY WAS FOUND
  113F'   EB                    NOTOL:	XCHG				;[H,L]=TEXT POINTER
  1140'   0E 08                 	MVI	C,8			;MAKE SURE 16 BYTES ARE AVAILABLE
                                					;OFF OF THE STACK
  1142'   CD 0000*              	CALL	GETSTK
  1145'   E5                    	PUSH	H			;REALLY SAVE THE TEXT POINTER
  1146'   2A 09C4'              	LHLD	ENDFOR			;PICK UP POINTER AT END OF "FOR"
                                					;JUST BEYOND THE TERMINATOR
  1149'   E3                    	XTHL				;PUT [H,L] POINTER TO TERMINATOR ON THE STACK
                                					;AND RESTORE [H,L] AS TEXT POINTER AT
                                					;VARIABLE NAME
  114A'   E5                    	PUSH	H			;PUSH THE TEXT POINTER ONTO THE STACK
  114B'   2A 06BB'              	LHLD	CURLIN			;[H,L] GET THE CURRENT LINE #
  114E'   E3                    	XTHL				;NOW THE CURRENT LINE # IS ON THE STACK AND
                                					;[H,L] IS THE TEXT POINTER
  114F'   CD 0000*              	CALL	SYNCHR
  1152'   CE                    	DB	$TO			;"TO" IS NECESSARY
  1153'   CD 1C7F'              	CALL	GETYPR			;SEE WHAT TYPE THIS VALUE HAS
  1156'   CA 0C04'              	JZ	TMERR			;GIVE STRINGS A "TYPE MISMATCH"
  1159'   D2 0C04'              	JNC	TMERR			;AS WELL AS DOUBLE-PRECISION
  115C'   F5                    	PUSH	PSW			;SAVE THE INTEGER/FLOATING FLAG
  115D'   CD 191D'              	CALL	FRMEVL			;EVALUATE THE TARGET VALUE FORMULA
  1160'   F1                    	POP	PSW			;POP OFF THE FLAG
  1161'   E5                    	PUSH	H			;SAVE THE TEXT POINTER
  1162'   F2 117B'              	JP	SNGFOR			;POSITIVE MEANS SINGLE PRECISION "FOR"-LOOP
  1165'   CD 0000*              	CALL	FRCINT			;COERCE THE FINAL VALUE
  1168'   E3                    	XTHL				;SAVE IT ON THE STACK AND REGET THE
                                					;TEXT POINTER
  1169'   11 0001               	LXI	D,0+1			;DEFAULT THE STEP TO BE 1
  116C'   7E                    	MOV	A,M			;SEE WHAT CHARACTER IS NEXT
  116D'   FE D1                 	CPI	STEPTK			;IS THERE A "STEP" CLAUSE?
  116F'   CC 1F69'              	CZ	GETINT			;IF SO, READ THE STEP INTO [D,E]
  1172'   D5                    	PUSH	D			;PUT THE STEP ONTO THE STACK
  1173'   E5                    	PUSH	H			;SAVE THE TEXT POINTER
  1174'   EB                    	XCHG				;STEP INTO [H,L]
  1175'   CD 0000*              	CALL	ISIGN			;THE SIGN OF THE STEP INTO [A]
  1178'   C3 119E'              	JMP	STPSGN			;FINISH UP THE ENTRY
                                					;BY PUTTING THE SIGN OF THE STEP
                                					;AND THE DUMMY ENTRIES ON THE STACK
  117B'   CD 0000*              SNGFOR:	CALL	FRCSNG
  117E'   CD 0000*              	CALL	MOVRF			;GET THE STUFF
  1181'   E1                    	POP	H			;REGAIN TEXT POINTER
  1182'   C5                    	PUSH	B			;OPPOSITE OF PUSHR
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-65
"FOR" STATEMENT

  1183'   D5                    	PUSH	D			;SAVE THE SIGN OF THE INCREMENT
  1184'   01 8100               	LXI	B,0+201O*256
  1187'   51                    	MOV	D,C
  1188'   5A                    	MOV	E,D			;GET 1.0 IN THE REGISTERS
  1189'   7E                    	MOV	A,M			;GET TERMINATING CHARACTER
  118A'   FE D1                 	CPI	STEPTK			;DO WE HAVE "STEP" ?
  118C'   3E 01                 	MVI	A,1			;SETUP DEFAULT SIGN
  118E'   C2 119F'              	JNZ	ONEON			;PUSH SOME CONSTANTS ON IF NOT
  1191'   CD 191E'              	CALL	FRMCHK			;DON'T NEED TO CHECK THE TYPE
  1194'   E5                    	PUSH	H
  1195'   CD 0000*              	CALL	FRCSNG
  1198'   CD 0000*              	CALL	MOVRF			;SET UP THE REGISTERS
  119B'   CD 0000*              	CALL	SIGN			;GET THE SIGN OF THE INCREMENT
  119E'   E1                    STPSGN:	POP	H			;POP OFF THE TEXT POINTER
  119F'   C5                    ONEON:	PUSH	B			;PUT VALUE ON BACKWARDS
  11A0'   D5                    	PUSH	D			;OPPOSITE OF PUSHR
  11A1'   4F                    	MOV	C,A			;[C]=SIGN OF STEP
  11A2'   CD 1C7F'              	CALL	GETYPR			;MUST PUT ON INTEGER/SINGLE-PRECISION FLAG
                                					;MINUS IS SET FOR INTEGER CASE
  11A5'   47                    	MOV	B,A			;HIGH BYTE = INTEGER/SINGLE PRECISION FLAG
  11A6'   C5                    	PUSH	B			;SAVE FLAG AND SIGN OF STEP BOTH
  11A7'   2B                    	DCX	H			;MAKE SURE THE "FOR" ENDED PROPERLY
  11A8'   CD 1232'              	CALL	CHRGTR
  11AB'   C2 0BEC'              	JNZ	SNERR
  11AE'   CD 23E7'              	CALL	NXTSCN			;SCAN UNTIL THE MATCHING "NEXT" IS FOUND
  11B1'   CD 1232'              	CALL	CHRGTR			;FETCH FIRST CHARACTER OF "NEXT"
  11B4'   E5                    	PUSH	H			;MAKE THE NEXT TXTPTR PART OF THE ENTRY
  11B5'   E5                    	PUSH	H
  11B6'   2A 0AE7'              	LHLD	NXTLIN			;GET THE LINE NUMBER OF NEXT
  11B9'   22 06BB'              	SHLD	CURLIN			;MAKE IT THE CURRENT LINE
  11BC'   2A 09CA'              	LHLD	TEMP			;GET THE POINTER TO THE VARIABLE BACK
  11BF'   E3                    	XTHL				;PUT THE POINTER TO THE VARIABLE
                                					;ONTO THE STACK AND RESTORE THE TEXT POINTER
  11C0'   06 82                 	MVI	B,$FOR			;FINISH UP "FOR"
  11C2'   C5                    	PUSH	B
  11C3'   33                    	INX	SP
  11C4'   F5                    	PUSH	PSW			;SAVE THE CHARACTER
  11C5'   F5                    	PUSH	PSW			;MAKE A STACK ENTRY TO SUBSTITUTE FOR "NEWSTT"
                                	EXTRN	NEXTS
  11C6'   C3 0000*              	JMP	NEXTS			;GO EXECUTE "NEXT" WITH NXTFLG ZERO
  11C9'   06 82                 NXTCON:	MVI	B,$FOR			;PUT A 'FOR' TOKEN ONTO THE STACK
  11CB'   C5                    	PUSH	B
  11CC'   33                    	INX	SP			;THE "TOKEN" ONLY TAKES ONE BYTE OF
                                					;STACK SPACE
                                ;	JMP	NEWSTT		;ALL DONE
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-66
"FOR" STATEMENT

                                
                                	SUBTTL	NEW STATEMENT FETCHER
                                ;
                                ; BACK HERE FOR NEW STATEMENT. CHARACTER POINTED TO BY [H,L]
                                ; ":" OR END-OF-LINE. THE ADDRESS OF THIS LOCATION IS
                                ; LEFT ON THE STACK WHEN A STATEMENT IS EXECUTED SO
                                ; IT CAN MERELY DO A RETURN WHEN IT IS DONE.
                                ;
  11CD'                         NEWSTT:
                                	EXTRN	CNTCCN,ISCNTC
  11CD'   E5                    	PUSH	H
                                	PUBLIC	CONST2,CSTS
  0000                          CSTS	SET	0
  11CE'   CD 0000               CONST2:	CALL	CSTS			;GET CONSOLE STATUS
  11D1'   E1                    	POP	H			;RESTORE ALL REGISTERS
  11D2'   B7                    	ORA	A			;SET CC'S - 0 FALSE - NO CHAR TYPED
  11D3'   C4 0000*              	CNZ	CNTCCN			;SEE IF ITS CONTROL-C
                                					;IF SO, CHECK FOR CONTRL-C
  11D6'   22 09D2'              	SHLD	SAVTXT			;USED BY CONTINUE AND INPUT AND CLEAR AND PRINT USING
  11D9'   EB                    	XCHG				;SAVE TEXT POINTER
  11DA'   21 0000               	LXI	H,0			;SAVE STACK POINTER
  11DD'   39                    	DAD	SP			;COPY TO [H,L]
  11DE'   22 09D4'              	SHLD	SAVSTK			;SAVE IT
                                					;TO REMEMBER HOW TO RESTART THIS
                                					;STATEMENT
  11E1'   EB                    	XCHG				;GET CURRENT TEXT POINTER BACK IN [H,L]
                                					;TO SAVE BYTES & SPEED
  11E2'   7E                    	MOV	A,M			;GET CURRENT CHARACTER
                                					;WHICH TERMINATED THE LAST STATEMENT
  11E3'   FE 3A                 	CPI	':'			;IS IT A COLON?
  11E5'   CA 1212'              	JZ	GONE
  11E8'   B7                    	ORA	A
  11E9'   C2 0BEC'              	JNZ	SNERR			;MUST BE A ZERO
  11EC'   23                    	INX	H
  11ED'   7E                    GONE4:	MOV	A,M			;CHECK POINTER TO SEE IF
                                					;IT IS ZERO, IF SO WE ARE AT THE
                                					;END OF THE PROGRAM
  11EE'   23                    	INX	H
  11EF'   B6                    	ORA	M			;OR IN HIGH PART
  11F0'   CA 0BA8'              	JZ	PRGEND			;FIX SYNTAX ERROR IN UNENDED ERROR ROUTINE
  11F3'   23                    	INX	H
  11F4'   5E                    	MOV	E,M
  11F5'   23                    	INX	H
  11F6'   56                    	MOV	D,M			;GET LINE # IN [D,E]
  11F7'   EB                    	XCHG				;[H,L]=LINE #
  11F8'   22 06BB'              	SHLD	CURLIN			;SETUP CURLIN WITH THE CURRENT LINE #
  11FB'   3A 0B21'              	LDA	TRCFLG			;SEE IF TRACE IS ON
  11FE'   B7                    	ORA	A			;NON-ZERO MEANS YES
  11FF'   CA 1211'              	JZ	NOTTRC			;SKIP THIS PRINTING
  1202'   D5                    	PUSH	D			;SAVE THE TEXT POINTER
  1203'   3E 5B                 	MVI	A,'['			;FORMAT THE LINE NUMBER
  1205'   CD 0000*              	CALL	OUTDO			;OUTPUT IT
  1208'   CD 0000*              	CALL	LINPRT			;PRINT THE LINE # IN [H,L]
  120B'   3E 5D                 	MVI	A,']'			;SOME MORE FORMATING
  120D'   CD 0000*              	CALL	OUTDO
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-67
NEW STATEMENT FETCHER

  1210'   D1                    	POP	D			;[D,E]=TEXT POINTER
  1211'                         NOTTRC:
  1211'   EB                    	XCHG				;RESTORE THE TEXT POINTER
  1212'   CD 1232'              GONE:	CALL	CHRGTR			;GET THE STATEMENT TYPE
  1215'   11 11CD'              	LXI	D,NEWSTT		;PUSH ON A RETURN ADDRESS OF NEWSTT
  1218'   D5                    	PUSH	D			;STATEMENT
  1219'   C8                    GONE3:	RZ				;IF A TERMINATOR TRY AGAIN
                                					;"IF" COMES HERE
  121A'   D6 81                 GONE2:	SUI	$END			;"ON ... GOTO" AND "ON ... GOSUB" COME HERE
  121C'   DA 1441'              	JC	LET			;MUST BE A LET
  121F'   FE 4C                 	CPI	NUMCMD
                                					;A STATEMENT RESERVED WORD
  1221'   D2 1EFB'              	JNC	ISMID$			;SEE IF LHS MID$ CASE
  1224'   07                    	RLC				;MULTIPLY BY 2
  1225'   4F                    	MOV	C,A
  1226'   06 00                 	MVI	B,0
  1228'   EB                    	XCHG	
  1229'   21 0007'              	LXI	H,STMDSP		;STATEMENT DISPATCH TABLE
  122C'   09                    	DAD	B			;ADD ON OFFSET 
  122D'   4E                    	MOV	C,M			;PUSH THE ADDRESS TO GO TO ONTO
  122E'   23                    	INX	H			;THE STACK
  122F'   46                    	MOV	B,M			;PUSHM SAVES BYTES BUT NOT SPEED
  1230'   C5                    	PUSH	B
  1231'   EB                    	XCHG				;RESTORE THE TEXT POINTER
                                ; NEWSTT FALLS INTO CHRGET. THIS FETCHES THE FIRST CHAR AFTER
                                ; THE STATEMENT TOKEN AND THE CHRGET'S "RET" DISPATCHES TO STATEMENT
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-68
NEW STATEMENT FETCHER

                                
                                	SUBTTL	CHRGET - THE NEXT CHARACTER SCAN ROUTINE
  1232'   23                    CHRGTR:	INX	H			;DUPLICATION OF CHRGET RST FOR SPEED
                                	PUBLIC	CHRGT2
  1233'   7E                    CHRGT2:	MOV	A,M			;SEE CHRGET RST FOR EXPLANATION
  1234'   FE 3A                 	CPI	':'
  1236'   D0                    	RNC	
                                ;
                                ; CHRCON IS THE CONTINUATION OF THE CHRGET RST
                                ;
                                ; IN EXTENDED, CHECK FOR INLINE CONSTANT AND IF ONE
                                ; MOVE IT INTO THE FAC & SET VALTYP APPROPRIATELY
  000B                          OCTCON	SET	11			;EMBEDED OCTAL CONSTANT
  000C                          HEXCON	SET	12			;EMBEDED CONSTANT
  000D                          PTRCON	SET	13			;A LINE REFERENCE CONSTANT
  000E                          LINCON	SET	14			;A LINE NUMBER UNCONVERTED TO POINTER
  000F                          IN2CON	SET	15			;SINGLE BYTE (TWO BYTE WITH TOKEN) INTEGER
  0010                          CONCN2	SET	16			;TOKEN RETURNED SECOND TYPE CONSTANT IS SCANNED.
  0011                          ONECON	SET	17			;FIRST OF 10 (0-9) INTEGER SPECIAL TOKENS
  001C                          INTCON	SET	28			;REGULAR 16 BIT TWO'S COMPLEMENT INT
  001D                          SNGCON	SET	29			;SINGLE PREC (4 BYTE) CONSTANT
  001E                          CONCON	SET	30			;TOKEN RETURNED BY CHRGET AFTER CONSTANT SCANNED
  001F                          DBLCON	SET	31			;DOUBLE PREC (8 BYTE) CONSTANT
  1237'   FE 20                 CHRCON:	CPI	' '			;MUST SKIP SPACES
  1239'   CA 1232'              	JZ	CHRGTR			;GET ANOTHER CHARACTER
  123C'   D2 12B0'              	JNC	NOTLFT			;NOT SPECIAL TRY OTHER POSSIB.
  123F'   B7                    	ORA	A			;NULL AT EOL?
  1240'   C8                    	RZ				;YES, ALL DONE
  1241'   FE 0B                 	CPI	OCTCON			;IS IT INLINE CONSTANT
  1243'   DA 12AB'              	JC	NOTCON			;NO, SHOULD BE TAB OR LF
  1246'   FE 1E                 	CPI	CONCON			;ARE WE TRYING TO RE-SCAN A CONSTANT?
  1248'   C2 1250'              	JNZ	NTRSCC			;NO.
  124B'   3A 098F'              	LDA	CONSAV			;GET THE SAVED CONSTANT TOKEN
  124E'   B7                    	ORA	A			;SET NON-ZERO, NON CARRY CC'S
  124F'   C9                    	RET				;ALL DONE
                                
  1250'   FE 10                 NTRSCC:	CPI	CONCN2			;GOING TO SCAN PAST EMBEDDED CONSTANT?
  1252'   C2 125B'              	JNZ	NTRSC2			;NO, TRY OTHER CASES
  1255'   2A 098D'              CONSCN:	LHLD	CONTXT			;GET SAVED TEXT POINTER
  1258'   C3 1233'              	JMP	CHRGT2			;AND SCAN THING AFTER CONSTANT
  125B'   F5                    NTRSC2:	PUSH	PSW			;SAVE TOKEN TO RETURN
  125C'   23                    	INX	H			;POINT TO NUMBER
  125D'   32 098F'              	STA	CONSAV			;SAVE CURRENT TOKEN
  1260'   D6 1C                 	SUI	INTCON			;IS IT LESS THAN INTEGER CONSTANT?
  1262'   D2 1290'              	JNC	MAKTKN			;NO, NOT LINE NUMBER CONSTANT
  1265'   D6 F5                 	SUI	365O			;<ONECON-INTCON>&^O377
                                					;LESS THAN EMBEDDED 1 BYTER
  1267'   D2 1271'              	JNC	ONEI			;WAS ONE BYTER
  126A'   FE FE                 	CPI	IN2CON-ONECON		;IS IT TWO BYTER?
  126C'   C2 1285'              	JNZ	FRCINC			;NOPE, NORMAL INT
  126F'   7E                    	MOV	A,M			;GET EMBEDED INT
  1270'   23                    	INX	H			;POINT AFTER CONSTANT
  1271'   22 098D'              ONEI:	SHLD	CONTXT			;SAVE TEXT POINTER
  1274'   26 00                 	MVI	H,0			;GET UPPER BYTE OF ZERO
  1276'   6F                    ONEI2:	MOV	L,A			;GET VALUE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-69
CHRGET - THE NEXT CHARACTER SCAN ROUTINE

  1277'   22 0991'              	SHLD	CONLO			;SAVE CONSTANT VALUE
  127A'   3E 02                 	MVI	A,2			;GET VALTYPE
  127C'   32 0990'              	STA	CONTYP			;SET IT UP IN SAVE PLACE
  127F'   21 12B6'              	LXI	H,NUMCON		;POINT TO NUMBER RE-SCANNER
  1282'   F1                    	POP	PSW			;GET BACK TOKEN
  1283'   B7                    	ORA	A			;MAKE SURE NUMBER FLAG RE-SET
  1284'   C9                    	RET				;RETURN TO CALLER
                                
  1285'   7E                    FRCINC:	MOV	A,M			;GET LOW BYTE OF CONSTANT
  1286'   23                    	INX	H			;POINT PAST IT
  1287'   23                    	INX	H			;TO NEXT THING
  1288'   22 098D'              	SHLD	CONTXT			;SAVE POINTER PAST
  128B'   2B                    	DCX	H			;BACK TO HIGH BYTE
  128C'   66                    	MOV	H,M			;GET HIGH BYTE
  128D'   C3 1276'              	JMP	ONEI2			;FINISH SCANNING
  1290'   3C                    MAKTKN:	INR	A			;CALCULATE VALTYPE
  1291'   07                    	RLC				;*2 TO GET VALTYPE 0=2, 1=4, 3=8
  1292'   32 0990'              	STA	CONTYP			;CONTYPE NOW SETUP
  1295'   D5                    	PUSH	D			;SAVE SOME RGS
  1296'   C5                    	PUSH	B
  1297'   11 0991'              	LXI	D,CONLO			;PLACE TO STORE SAVED CONSTANT
  129A'   EB                    	XCHG				;GET TEXT POINTER IN [D,E]
  129B'   47                    	MOV	B,A			;SETUP COUNTER IN [B]
  129C'   CD 0000*              	CALL	MOVE1			;MOVE DATA IN
  129F'   EB                    	XCHG				;GET TEXT POINTER BACK
  12A0'   C1                    	POP	B			;RESTORE [B,C]
  12A1'   D1                    	POP	D
  12A2'   22 098D'              FININ1:	SHLD	CONTXT			;SAVE THE GOOD TEXT POINTER
  12A5'   F1                    	POP	PSW			;RESTORE TOKEN
  12A6'   21 12B6'              	LXI	H,NUMCON		;GET POINTER TO FAKE TEXT
  12A9'   B7                    	ORA	A			;CLEAR CARRY SO OTHERS DONT THINK ITS A NUMBER
                                					;AND SET NON-ZERO SO NOT TERMINATOR
  12AA'   C9                    	RET				;ALL DONE
  12AB'                         NOTCON:
  12AB'   FE 09                 	CPI	9			;LINE FEED OR TAB?
  12AD'   D2 1232'              	JNC	CHRGTR			;YES, EAT.
  12B0'   FE 30                 NOTLFT:	CPI	'0'			;ALL CHARACTERS GREATER THAN
                                					;"9" HAVE RETURNED, SO SEE IF NUMERIC
  12B2'   3F                    	CMC				;MAKE NUMERICS HAVE CARRY ON
  12B3'   3C                    	INR	A			;SET ZERO IF [A]=0
  12B4'   3D                    	DCR	A
  12B5'   C9                    	RET	
                                
  12B6'   1E                    NUMCON:	DB	CONCON			;THESE FAKE TOKENS FORCE CHRGET
  12B7'   10                    	DB	CONCN2			;TO EFFECTIVELY RE-SCAN THE EMBEDED CONSTANT
                                
                                ; THIS ROUTINE MOVES THE SAVED CONSTANT INTO THE FAC
  12B8'                         CONFAC:
  12B8'   3A 098F'              	LDA	CONSAV			;GET CONSTANT TOKEN
  12BB'   FE 0F                 	CPI	LINCON+1		;LINE# CONSTANT? (ERL=#)
  12BD'   D2 12D8'              	JNC	NTLINE			;NO
  12C0'   FE 0D                 	CPI	PTRCON			;LINE POINTER CONSTANT?
  12C2'   DA 12D8'              	JC	NTLINE			;NO
  12C5'   2A 0991'              	LHLD	CONLO			;GET VALUE
  12C8'   C2 12D2'              	JNZ	FLTLIN			;MUST BE LINE NUMBER, NOT POINTER
  12CB'   23                    	INX	H			;POINT TO LINE #
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-70
CHRGET - THE NEXT CHARACTER SCAN ROUTINE

  12CC'   23                    	INX	H
  12CD'   23                    	INX	H
  12CE'   5E                    	MOV	E,M			;GET LINE # IN [D,E]
  12CF'   23                    	INX	H
  12D0'   56                    	MOV	D,M			;GET HIGH PART
  12D1'   EB                    	XCHG				;VALUE TO [H,L]
  12D2'   CD 0000*              FLTLIN:	CALL	INEG2			;FLOAT IT
  12D5'   C3 1255'              	JMP	CONSCN			;RESTORE TEXT PTR
  12D8'                         NTLINE:
  12D8'   3A 0990'              	LDA	CONTYP			;GET SAVED CONSTANT VALTYP
  12DB'   32 098A'              	STA	VALTYP			;SAVE IN REAL VALTYP
  12DE'   FE 08                 	CPI	8			;DOUBLE PRECISION
  12E0'   CA 12F2'              	JZ	CONFDB			;YES
  12E3'   2A 0991'              	LHLD	CONLO			;GET LOW TWO BYTES OF FAC
  12E6'   22 0B27'              	SHLD	FACLO			;SAVE THEM
  12E9'   2A 0993'              	LHLD	CONLO+2			;GET NEXT TWO BYTES
  12EC'   22 0B29'              	SHLD	FACLO+2			;SAVE THEM
  12EF'   C3 1255'              	JMP	CONSCN			;SCAN FURTHUR
  12F2'   21 0991'              CONFDB:	LXI	H,CONLO			;GET POINTER TO SAVED CONSTANT AREA
  12F5'   CD 0000*              	CALL	VMOVFM			;MOVE INTO FAC
  12F8'   C3 1255'              	JMP	CONSCN			;RESTORE TEXT PTR & SCAN FOLLOWING CHARACTER
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-71
CHRGET - THE NEXT CHARACTER SCAN ROUTINE

                                
                                	SUBTTL	DEFSTR, DEFINT, DEFSNG, DEFDBL, INTIDX
  12FB'   1E 03                 DEFSTR:	MVI	E,3			;DEFAULT SOME LETTERS TO STRING
  12FD'   01                    	DB	1Q			;"LXI B," OVER THE NEXT 2 BYTES
  12FE'   1E 02                 DEFINT:	MVI	E,2			;DEFAULT SOME LETTERS TO INTEGER
  1300'   01                    	DB	1Q			;"LXI B," OVER THE NEXT 2 BYTES
  1301'   1E 04                 DEFREA:	MVI	E,4			;DEFAULT SOME LETTERS TO SINGLE PRECISION
  1303'   01                    	DB	1Q			;"LXI B," OVER THE NEXT 2 BYTES
  1304'   1E 08                 DEFDBL:	MVI	E,8			;DEFAULT SOME LETTERS TO DOUBLE PRECISION
  1306'   CD 0000*              DEFCON:	CALL	ISLET			;MAKE SURE THE ARGUMENT IS A LETTER
  1309'   01 0BEC'              	LXI	B,SNERR			;PREPARE "SYNTAX ERROR" RETURN
  130C'   C5                    	PUSH	B
  130D'   D8                    	RC				;RETURN IF THERES NO LETTER
  130E'   D6 41                 	SUI	'A'			;MAKE AN OFFSET INTO DEFTBL
  1310'   4F                    	MOV	C,A			;SAVE THE INITIAL OFFSET
  1311'   47                    	MOV	B,A			;ASSUME IT WILL BE THE FINAL OFFSET
  1312'   CD 1232'              	CALL	CHRGTR			;GET THE POSSIBLE DASH
  1315'   FE F3                 	CPI	MINUTK			;A RANGE ARGUMENT?
  1317'   C2 1327'              	JNZ	NOTRNG			;IF NOT, JUST ONE LETTER
  131A'   CD 1232'              	CALL	CHRGTR			;GET THE FINAL POSITION
  131D'   CD 0000*              	CALL	ISLET			;CHECK FOR A LETTER
  1320'   D8                    	RC				;GIVE A SYNTAX ERROR IF IMPROPER
  1321'   D6 41                 	SUI	'A'			;MAKE IT AN OFFSET
  1323'   47                    	MOV	B,A			;PUT THE FINAL IN [B]
  1324'   CD 1232'              	CALL	CHRGTR			;GET THE TERMINATOR
  1327'   78                    NOTRNG:	MOV	A,B			;GET THE FINAL CHARACTER
  1328'   91                    	SUB	C			;SUBTRACT THE START
  1329'   D8                    	RC				;IF IT'S LESS THATS NONSENSE
  132A'   3C                    	INR	A			;SETUP THE COUNT RIGHT
  132B'   E3                    	XTHL				;SAVE THE TEXT POINTER AND GET RID
                                					;OF THE "SYNTAX ERROR" RETURN
  132C'   21 09ED'              	LXI	H,DEFTBL		;POINT TO THE TABLE OF DEFAULTS
  132F'   06 00                 	MVI	B,0			;SETUP A TWO-BYTE STARTING OFFSET
  1331'   09                    	DAD	B			;MAKE [H,L] POINT TO THE FIRST ENTRY
                                					;TO BE MODIFIED
  1332'   73                    LPDCHG:	MOV	M,E			;MODIFY THE DEFAULT TABLE
  1333'   23                    	INX	H
  1334'   3D                    	DCR	A			;COUNT DOUNT THE NUMBER OF CHANGES TO MAKE
  1335'   C2 1332'              	JNZ	LPDCHG
  1338'   E1                    	POP	H			;GET BACK THE TEXT POINTER
  1339'   7E                    	MOV	A,M			;GET LAST CHARACTER
  133A'   FE 2C                 	CPI	44			;IS IT A COMMA?
  133C'   C0                    	RNZ				;IF NOT STATEMENT SHOULD HAVE ENDED
  133D'   CD 1232'              	CALL	CHRGTR			;OTHERWISE SET UP TO SCAN NEW RANGE
  1340'   C3 1306'              	JMP	DEFCON
                                ;
                                ; INTIDX READS A FORMULA FROM THE CURRENT POSITION AND
                                ; TURNS IT INTO A POSITIVE INTEGER
                                ; LEAVING THE RESULT IN [D,E].  NEGATIVE ARGUMENTS
                                ; ARE NOT ALLOWED. [H,L] POINTS TO THE TERMINATING
                                ; CHARACTER OF THE FORMULA ON RETURN.
                                ;
  1343'   CD 1232'              INTIDX:	CALL	CHRGTR
  1346'   CD 1F6C'              INTID2:	CALL	GETIN2			;READ A FORMULA AND GET THE
                                					;RESULT AS AN INTEGER IN [D,E]
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-72
DEFSTR, DEFINT, DEFSNG, DEFDBL, INTIDX

                                					;ALSO SET THE CONDITION CODES BASED ON
                                					;THE HIGH ORDER OF THE RESULT
  1349'   F0                    	RP				;DON'T ALLOW NEGATIVE NUMBERS
  134A'   1E 05                 FCERR:	MVI	E,ERRFC			;TOO BIG. FUNCTION CALL ERROR
  134C'   C3 0C06'              	JMP	ERROR
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-73
DEFSTR, DEFINT, DEFSNG, DEFDBL, INTIDX

                                
                                	SUBTTL	LINSPC, LINGET
                                ;
                                ; LINSPC IS THE SAME AS LINGET EXCEPT IN ALLOWS THE
                                ; CURRENT LINE (.) SPECIFIER
                                ;
                                	PUBLIC	LINSPC
  134F'   7E                    LINSPC:	MOV	A,M			;GET CHAR FROM MEMORY
  1350'   FE 2E                 	CPI	'.'			;IS IT CURRENT LINE SPECIFIER
  1352'   EB                    	XCHG				;SAVE TEXT POINTER
  1353'   2A 09D8'              	LHLD	DOT			;GET CURRENT LINE #
  1356'   EB                    	XCHG				;GET BACK TEXT POINTER
  1357'   CA 1232'              	JZ	CHRGTR			;ALL DONE.
                                
                                ;
                                ; LINGET READS A LINE # FROM THE CURRENT TEXT POSITION
                                ;
                                ; LINE NUMBERS RANGE FROM 0 TO 65529
                                ;
                                ; THE ANSWER IS RETURNED IN [D,E].
                                ; [H,L] IS UPDATED TO POINT TO THE TERMINATING CHARACTER
                                ; AND [A] CONTAINS THE TERMINATING CHARACTER WITH CONDITION
                                ; CODES SET UP TO REFLECT ITS VALUE.
                                ;
  135A'   2B                    LINGET:	DCX	H			;BACKSPACE PTR
  135B'   CD 1232'              LINGT2:	CALL	CHRGTR			;FETCH CHAR (GOBBLE LINE CONSTANTS)
  135E'   FE 0E                 	CPI	LINCON			;EMBEDDED LINE CONSTANT?
  1360'   CA 1365'              	JZ	LINGT3			;YES, RETURN DOUBLE BYTE VALUE
  1363'   FE 0D                 	CPI	PTRCON			;ALSO CHECK FOR POINTER
  1365'   EB                    LINGT3:	XCHG				;SAVE TEXT PTR IN [D,E]
  1366'   2A 0991'              	LHLD	CONLO			;GET EMBEDDED LINE #
  1369'   EB                    	XCHG				;RESTORE TEXT PTR.
  136A'   CA 1232'              	JZ	CHRGTR			;EAT FOLLOWING CHAR
  136D'   2B                    	DCX	H			;BACK UP POINTER
  136E'   11 0000               	LXI	D,0			;ZERO ACCUMULATED LINE #
  1371'   CD 1232'              MORLIN:	CALL	CHRGTR
  1374'   D0                    	RNC				;WAS IT A DIGIT
  1375'   E5                    	PUSH	H
  1376'   F5                    	PUSH	PSW
  1377'   21 1998               	LXI	H,0+6552		;SEE IF THE LINE # IS TOO BIG
  137A'   CD 0000*              	CALL	DCOMPR
  137D'   DA 1392'              	JC	POPHSR			;YES, DON'T SCAN ANY MORE DIGITS IF SO
                                					;FORCE CALLER TO SEE DIGIT AND GIVE SYNTAX ERROR
                                					;CAN'T JUST GO TO SYNTAX ERROR BECAUSE OF NON-FAST
                                					;RENUM WHICH CAN'T TERMINATE
  1380'   62                    	MOV	H,D			;SAVE [D,E]
  1381'   6B                    	MOV	L,E
  1382'   19                    	DAD	D
  1383'   29                    	DAD	H
  1384'   19                    	DAD	D
  1385'   29                    	DAD	H			;PUTTING [D,E]*10 INTO [H,L]
  1386'   F1                    	POP	PSW
  1387'   D6 30                 	SUI	'0'
  1389'   5F                    	MOV	E,A
  138A'   16 00                 	MVI	D,0
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-74
LINSPC, LINGET

  138C'   19                    	DAD	D			;ADD THE NEW DIGIT
  138D'   EB                    	XCHG	
  138E'   E1                    	POP	H			;GET BACK TEXT POINTER
  138F'   C3 1371'              	JMP	MORLIN
  1392'   F1                    POPHSR:	POP	PSW			;GET OFF TERMINATING DIGIT
  1393'   E1                    	POP	H			;GET BACK OLD TEXT POINTER
  1394'   C9                    	RET	
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-75
LINSPC, LINGET

                                
                                	SUBTTL	RUN, GOTO, GOSUB, RETURN, DATA, REM
  1395'   CA 0000*              RUN:	JZ	RUNC			;NO LINE # ARGUMENT
  1398'   FE 0E                 	CPI	LINCON			;LINE NUMBER CONSTANT?
  139A'   CA 13A2'              	JZ	CONRUN			;YES
  139D'   FE 0D                 	CPI	PTRCON			;LINE POINTER (RATHER UNLIKELY)
  139F'   C2 0000*              	JNZ	LRUN
  13A2'                         CONRUN:
                                					;CLEAN UP,SET [H,L]=[TXTTAB]-1 AND
                                					;RETURN TO NEWSTT
  13A2'   CD 0000*              	CALL	CLEARC			;CLEAN UP -- RESET THE STACK
                                					;DATPTR,VARIABLES ...
                                					;[H,L] IS THE ONLY THING PRESERVED
  13A5'   01 11CD'              	LXI	B,NEWSTT
  13A8'   C3 13C2'              	JMP	RUNC2			;PUT "NEWSTT" ON AND FALL INTO "GOTO"
                                ; A "GOSUB" ENTRY ON THE STACK HAS THE FOLLOWING FORMAT
                                ;
                                ; LOW ADDRESS
                                ;
                                ;	A TOKEN EQUAL TO $GOSUB 1 BYTE
                                ;	THE LINE # OF THE THE "GOSUB" STATEMENT 2 BYTES
                                ;	A POINTER INTO THE TEXT OF THE "GOSUB" 2 BYTES
                                ;
                                ; HIGH ADDRESS
                                ;
                                ; TOTAL 5 BYTES
                                ;
  13AB'   0E 03                 GOSUB:	MVI	C,3			;"GOSUB" ENTRIES ARE 5 BYTES LONG
  13AD'   CD 0000*              	CALL	GETSTK			;MAKE SURE THERE IS ROOM
  13B0'   CD 135A'              	CALL	LINGET			;MUST SCAN LINE NUMBER NOW
  13B3'   C1                    	POP	B			;POP OFF RETURN ADDRESS OF "NEWSTT"
  13B4'   E5                    	PUSH	H			;REALLY PUSH THE TEXT POINTER
  13B5'   E5                    	PUSH	H			;SAVE TEXT POINTER
  13B6'   2A 06BB'              	LHLD	CURLIN			;GET THE CURRENT LINE #
  13B9'   E3                    	XTHL				;PUT CURLIN ON THE STACK AND [H,L]=TEXT PTR
  13BA'   3E 8D                 	MVI	A,$GOSUB
  13BC'   F5                    	PUSH	PSW			;PUT GOSUB TOKEN ON THE STACK
  13BD'   33                    	INX	SP			;THE GOSUB TOKEN TAKES ONLY ONE BYTE
  13BE'   C5                    	PUSH	B			;SAVE NEWSTT ON STACK
  13BF'   C3 13C6'              	JMP	GOTO2			;HAVE NOW GRAB LINE # PROPERLY
                                					;CONTINUE WITH SUBROUTINE
  13C2'   C5                    RUNC2:	PUSH	B			;RESTORE RETURN ADDRESS
                                					;OF "NEWSTT"
                                ; AND SEARCH. IN THE 8K WE START WHERE WE
                                ; ARE IF WE ARE  GOING TO A FORWARD LOCATION.
                                ;
  13C3'   CD 135A'              GOTO:	CALL	LINGET			;PICK UP THE LINE #
                                					;AND PUT IT IN [D,E]
  13C6'                         GOTO2:
  13C6'   3A 098F'              	LDA	CONSAV			;GET TOKEN FOR LINE # BACK
  13C9'   FE 0D                 	CPI	PTRCON			;WAS IT A POINTER
  13CB'   EB                    	XCHG				;ASSUME SO
  13CC'   C8                    	RZ				;IF IT WAS, GO BACK TO NEWSTT
                                					;WITH [H,L] AS TEXT PTR
  13CD'   EB                    	XCHG				;FLIP BACK IF NOT
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-76
RUN, GOTO, GOSUB, RETURN, DATA, REM

  13CE'   E5                    	PUSH	H			;SAVE CURRENT TEXT PTR ON STACK
  13CF'   2A 098D'              	LHLD	CONTXT			;GET POINTER TO RIGHT AFTER CONSTANT
  13D2'   E3                    	XTHL				;SAVE ON STACK, RESTORE CURRENT TEXT PTR
  13D3'   CD 1417'              	CALL	REM			;SKIP TO THE END OF THIS LINE
  13D6'   23                    	INX	H			;POINT AT THE LINK BEYOND IT
  13D7'   E5                    	PUSH	H			;SAVE THE POINTER
  13D8'   2A 06BB'              	LHLD	CURLIN			;GET THE CURRENT LINE #
  13DB'   CD 0000*              	CALL	DCOMPR			;[D,E] CONTAINS WHERE WE ARE GOING
                                					;[H,L] CONTAINS THE CURRENT LINE #
                                					;SO COMPARING THEM TELLS US WHETHER TO
                                					;START SEARCHING FROM WHERE WE ARE OR
                                					;TO START SEARCHING FROM THE BEGINNING
                                					;OF TXTTAB
  13DE'   E1                    	POP	H			;[H,L]=CURRENT POINTER
  13DF'   DC 0E1E'              	CC	LOOP			;SEARCH FROM THIS POINT
  13E2'   D4 0E1B'              	CNC	FNDLIN			;SEARCH FROM THE BEGINNING -- ACTUALLY
                                					;SEARCH AGAIN IF ABOVE SEARCH FAILED
  13E5'   D2 13F5'              	JNC	USERR			;LINE NOT FOUND, DEATH
  13E8'   0B                    	DCX	B			;POINT TO ZERO AT END OF PREVIOUS LINE
  13E9'   3E 0D                 	MVI	A,PTRCON		;POINTER CONSTANT
  13EB'   32 09CC'              	STA	PTRFLG			;SET PTRFLG
  13EE'   E1                    	POP	H			;GET SAVED POINTER TO RIGHT AFTER CONSTANT
  13EF'   CD 232F'              	CALL	CONCH2			;CHANGE LINE # TO PTR
  13F2'   60                    	MOV	H,B			;[H,L]= POINTER TO THE START OF THE
                                					;MATCHED LINE
  13F3'   69                    	MOV	L,C			;NOW POINTING AT THE FIRST BYTE OF THE POINTER
                                					;TO THE START OF THE NEXT LINE
  13F4'   C9                    	RET				;GO TO NEWSTT
  13F5'   1E 08                 USERR:	MVI	E,ERRUS
  13F7'   C3 0C06'              	JMP	ERROR			;C=MATCH, SO IF NO MATCH WE
                                					;GIVE A "US" ERROR
                                ;
                                ; SEE "GOSUB" FOR THE FORMAT OF THE STACK ENTRY
                                ; "RETURN" RESTORES THE LINE NUMBER AND TEXT POINTER ON THE STACK
                                ; AFTER ELIMINATING ALL THE "FOR" ENTRIES IN FRONT OF THE "GOSUB"
                                ; ENTRY
                                ;
  13FA'   C0                    RETURN:	RNZ				;BLOW HIM UP IF THERE ISN'T A TERMINATOR
  13FB'   16 FF                 	MVI	D,255			;MAKE SURE THIS VARIABLE POINTER
                                					;IN [D,E] NEVER GETS MATCHED
  13FD'   CD 0B73'              	CALL	FNDFOR			;GO PAST ALL THE "FOR" ENTRIES
  1400'   F9                    	SPHL				;UPDATE THE STACK
  1401'   22 09D4'              	SHLD	SAVSTK			;UPDATE SAVED STACK
  1404'   FE 8D                 	CPI	$GOSUB
  1406'   1E 03                 	MVI	E,ERRRG			;ERROR ERRRG IS "RETURN WITHOUT GOSUB"
  1408'   C2 0C06'              	JNZ	ERROR
  140B'   E1                    	POP	H			;GET LINE # "GOSUB" WAS FROM
  140C'   22 06BB'              	SHLD	CURLIN			;PUT IT INTO CURLIN
  140F'   21 11CD'              	LXI	H,NEWSTT
  1412'   E3                    	XTHL				;PUT RETURN ADDRESS OF "NEWSTT"
                                					;BACK ONTO THE STACK. GET TEXT POINTER
                                					;FROM "GOSUB"
                                					;SKIP OVER SOME CHARACTERS
                                					;SINCE WHEN "GOSUB" STUCK THE TEXT POINTER
                                					;ONTO THE STACK THE LINE # ARGUMENT HADN'T
                                					;BEEN READ IN YET.
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-77
RUN, GOTO, GOSUB, RETURN, DATA, REM

                                
  1413'   3E                    	DB	76Q			;"MVI A," AROUND POP H.
  1414'   E1                    DATAH:	POP	H			;GET TEXT POINTER OFF STACK
                                
  1415'   01                    DATA:	DB	1Q			;"LXI B," TO PICK UP ":" INTO C AND SKIP
  1416'   3A                    	DB	':'			;"DATA" TERMINATES ON ":"
                                					;AND 0. ":" ONLY APPLIES IF
                                					;QUOTES HAVE MATCHED UP
                                
  1417'                         ELSES:					;EXECUTED "ELSE"S ARE SKIPPED
                                ;
                                ; NOTE: REM MUST PRESERVE [D,E] BECAUSE OF "GO TO" AND ERROR
                                ;
  1417'   0E                    REM:	DB	16Q			;"MVI C,"   THE ONLY TERMINATOR IS ZERO
  1418'   00                    	DB	0			;NO-OPERATION
                                					;"DATA" ACTUALLY EXECUTES THIS 0
  1419'   06 00                 REMZER:	MVI	B,0			;INSIDE QUOTES THE ONLY TERMINATOR IS ZERO
  141B'   79                    EXCHQT:	MOV	A,C			;WHEN A QUOTE IS SEEN THE SECOND
  141C'   48                    	MOV	C,B			;TERMINATOR IS TRADED, SO IN "DATA"
  141D'   47                    	MOV	B,A			;COLONS INSIDE QUOTATIONS WILL HAVE NO EFFECT
  141E'                         REMER:
  141E'   2B                    	DCX	H			;NOP THE INX H IN CHRGET
  141F'   CD 1232'              REMER1:	CALL	CHRGTR			;GET A CHAR
  1422'   B7                    	ORA	A			;ZERO IS ALWAYS A TERMINATOR
  1423'   C8                    	RZ	
  1424'   B8                    	CMP	B			;TEST FOR THE OTHER TERMINATOR
  1425'   C8                    	RZ	
  1426'   23                    	INX	H
  1427'   FE 22                 	CPI	34			;IS IT A QUOTE?
  1429'   CA 141B'              	JZ	EXCHQT			;IF SO TIME TO TRADE
                                ;
                                ; WHEN AN "IF" TAKES A FALSE BRANCH IT MUST FIND THE APPROPRIATE "ELSE"
                                ; TO START EXECUTION AT. "DATA" COUNTS THE NUMBER OF "IF"S
                                ; IT SEES SO THAT THE "ELSE" CODE CAN MATCH "ELSE"S WITH
                                ; "IF"S. THE COUNT IS KEPT IN [D]
                                					;BECAUSE THEN S HAVE TNO COLON
                                					;MULTIPLE IFS CAN BE FOUND IN A SINGLE
                                					;STATEMENT SCAN
                                					;THIS CAUSES A PROBLEM FOR 8-BIT DATA
                                					;IN UNQUOTED STRING DATA BECAUSE $IF MIGHT
                                					;BE MATCHED. FIX IS TO HAVE FALSIF IGNORE CHANGES
                                					;IN [D] IF ITS A DATA STATEMENT
                                ;
  142C'   3C                    	INR	A			;FUNCTION TOKEN?
  142D'   CA 141F'              	JZ	REMER1			;THEN IGNORE FOLLOWING FN NUMBER
  1430'   D6 8C                 	SUI	$IF+1			;IS IT AN "IF"
  1432'   C2 141E'              	JNZ	REMER			;IF NOT, CONTINUE ON
  1435'   B8                    	CMP	B			;SINCE "REM" CAN'T SMASH
                                					;[D,E] WE HAVE TO BE CAREFUL
                                					;SO ONLY IF B DOESN'T EQUAL
                                					;ZERO WE INCREMENT D. (THE "IF" COUNT)
  1436'   8A                    	ADC	D			;CARRY ON IF [B] NOT ZERO
  1437'   57                    	MOV	D,A			;UPDATE [D]
  1438'   C3 141E'              	JMP	REMER
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-78
RUN, GOTO, GOSUB, RETURN, DATA, REM

                                
                                	SUBTTL	"LET"
                                	PUBLIC	LETCON
                                
                                ; LETCON IS LET ENTRY POINT WITH VALTYP-3 IN [A]
                                ; BECAUSE GETYPR HAS BEEN CALLED
  143B'   F1                    LETCON:	POP	PSW			;GET VALTYPE OFF STACK
  143C'   C6 03                 	ADI	3			;MAKE VALTYPE CORRECT
  143E'   C3 1456'              	JMP	LETCN2			;CONTINUE
                                
  1441'   CD 0000*              LET:	CALL	PTRGET			;GET THE POINTER TO THE VARIABLE
                                					;NAMED IN TEXT AND PUT
                                					;IT INTO [D,E]
  1444'   CD 0000*              	CALL	SYNCHR
  1447'   F0                    	DB	EQULTK			;CHECK FOR "="
  1448'   EB                    	XCHG				;MUST SET UP TEMP FOR "FOR"
  1449'   22 09CA'              	SHLD	TEMP			;UP HERE SO WHEN USER-FUNCTIONS
  144C'   EB                    	XCHG				;CALL REDINP, TEMP DOESN'T GET CHANGED
  144D'   D5                    REDINP:	PUSH	D
  144E'   3A 098A'              	LDA	VALTYP
  1451'   F5                    	PUSH	PSW
  1452'   CD 191D'              	CALL	FRMEVL			;GET THE VALUE OF THE FORMULA
  1455'   F1                    	POP	PSW			;GET THE VALTYP OF THE
                                					;VARIABLE INTO [A]
                                					;INTO FAC
  1456'   E3                    LETCN2:	XTHL				;[H,L]=POINTER TO VARIABLE
                                					;TEXT POINTER TO ON TOP OF STACK
  1457'   47                    INPCOM:	MOV	B,A			;SAVE VALTYP
  1458'   3A 098A'              	LDA	VALTYP			;GET PRESENT VALTYPE
  145B'   B8                    	CMP	B			;COMPARE THE TWO
  145C'   78                    	MOV	A,B			;GET BACK CURRENT
  145D'   CA 1466'              	JZ	LETCN5			;VALTYPE ALREADY SET UP, GO!
  1460'   CD 1EC5'              	CALL	DOCNVF			;FORCE VALTPES TO BE [A]'S
  1463'   3A 098A'              LETCN4:	LDA	VALTYP			;GET VALTYPE
  1466'   11 0B27'              LETCN5:	LXI	D,FACLO			;ASSUME THIS IS WHERE TO START MOVEING
  1469'   FE 05                 	CPI	5			;IS IT?
  146B'   DA 1471'              	JC	LETCN6			;YES
  146E'   11 0B23'              	LXI	D,DFACLO		;NO, USE D.P. FAC
  1471'   E5                    LETCN6:	PUSH	H			;SAVE THE POINTER AT THE VALUE POSITION
  1472'   FE 03                 	CPI	3			;STRING?
  1474'   C2 14A8'              	JNZ	COPNUM			;NUMERIC, SO FORCE IT AND COPY
  1477'   2A 0B27'              	LHLD	FACLO			;GET POINTER TO THE DESCRIPTOR OF THE RESULT
  147A'   E5                    	PUSH	H			;SAVE THE POINTER AT THE DESCRIPTOR
  147B'   23                    	INX	H
  147C'   5E                    	MOV	E,M
  147D'   23                    	INX	H
  147E'   56                    	MOV	D,M
  147F'   2A 06BD'              	LHLD	TXTTAB			;IF THE DATA IS IN BUF, OR IN DISK
                                					;RANDOM BUFFER, COPY.
  1482'   CD 0000*              	CALL	DCOMPR			;SINCE BUF CHANGES ALL THE TIME
  1485'   D2 149C'              	JNC	INBUFC			;GO COPY, IF DATA REALLY IS IN BUF
  1488'   2A 09E9'              	LHLD	STREND			;SEE IF IT POINTS INTO STRING SPACE
  148B'   CD 0000*              	CALL	DCOMPR			;IF NOT DON'T COPY
  148E'   D1                    	POP	D			;GET BACK THE POINTER AT THE DESCRIPTOR
  148F'   D2 14A4'              	JNC	DNTCPY			;DON'T COPY LITERALS
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-79
"LET"

  1492'   21 09BB'              	LXI	H,DSCTMP		;NOW, SEE IF ITS A VARIABLE
  1495'   CD 0000*              	CALL	DCOMPR			;BY SEEING IF THE DESCRIPTOR
                                					;IS IN THE TEMPORARY STORAGE AREA (BELOW DSCTMP)
  1498'   D2 14A4'              	JNC	DNTCPY			;DON'T COPY IF ITS NOT A VARIABLE
  149B'   3E                    	DB	76Q			;SKIP THE NEXT BYTE WITH A "MVI A,"
  149C'   D1                    INBUFC:	POP	D			;GET THE POINTER TO THE DESCRIPTOR
                                					;IN [D,E]
  149D'   CD 0000*              	CALL	FRETMS			;FREE UP A TEMORARY POINTING INTO BUF
  14A0'   EB                    	XCHG				;STRCPY COPIES [H,L]
  14A1'   CD 0000*              	CALL	STRCPY			;COPY VARIABLES IN STRING SPACE OR
                                					;STRINGS WITH DATA IN BUF
  14A4'   CD 0000*              DNTCPY:	CALL	FRETMS			;FREE UP THE TEMPORARY WITHOUT
                                					;FREEING UP ANY STRING SPACE
  14A7'   E3                    	XTHL				;[H,L]=PLACE TO STORE THE DESCRIPTOR
                                					;LEAVE A NONSENSE ENTRY ON THE STACK,
                                					;SINCE THE "POP	D" DOESN'T EVER
                                					;MATTER IN THIS CASE
  14A8'   CD 0000*              COPNUM:	CALL	VMOVE			;COPY A DESCRIPTOR OR A VALUE
  14AB'   D1                    	POP	D			;FOR "FOR" POP OFF A POINTER
                                					;AT THE LOOP VARIABLE INTO [D,E]
  14AC'   E1                    	POP	H			;GET THE TEXT POINTER BACK
  14AD'   C9                    	RET	
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-80
"LET"

                                
                                	SUBTTL	ON..GOTO, ON ERROR GOTO CODE
                                
  14AE'                         ONGOTO:
  14AE'   FE A8                 	CPI	$ERROR			;"ON...ERROR"?
  14B0'   C2 14DE'              	JNZ	NTOERR			;NO.
  14B3'   CD 1232'              	CALL	CHRGTR			;GET NEXT THING
  14B6'   CD 0000*              	CALL	SYNCHR
  14B9'   89                    	DB	$GOTO			;MUST HAVE ...GOTO
  14BA'   CD 135A'              	CALL	LINGET			;GET FOLLOWING LINE #
  14BD'   7A                    	MOV	A,D			;IS LINE NUMBER ZERO?
  14BE'   B3                    	ORA	E			;SEE
  14BF'   CA 14CB'              	JZ	RESTRP			;IF ON ERROR GOTO 0, RESET TRAP
  14C2'   CD 0E19'              	CALL	FNDLN1			;SEE IF LINE EXISTS (SAVE [H,L] ON STACK)
  14C5'   50                    	MOV	D,B			;GET POINTER TO LINE IN [D,E]
  14C6'   59                    	MOV	E,C			;(LINK FIELD OF LINE)
  14C7'   E1                    	POP	H			;RESTORE [H,L]
  14C8'   D2 13F5'              	JNC	USERR			;ERROR IF LINE NOT FOUND
  14CB'   EB                    RESTRP:	XCHG				;GET LINE POINTER IN [H,L]
  14CC'   22 09DC'              	SHLD	ONELIN			;SAVE POINTER TO LINE OR ZERO IF 0.
  14CF'   EB                    	XCHG				;BACK TO NORMAL
  14D0'   D8                    	RC				;YOU WOULDN'T BELIEVE IT IF I TOLD YOU
  14D1'   3A 09DE'              	LDA	ONEFLG			;ARE WE IN AN "ON...ERROR" ROUTINE?
  14D4'   B7                    	ORA	A			;SET CONDITION CODES
  14D5'   7B                    	MOV	A,E			;WANT AN EVEN STACK PTR. FOR 8086
  14D6'   C8                    	RZ				;IF NOT, HAVE ALREADY DISABLED TRAPPING.
  14D7'   3A 06AD'              	LDA	ERRFLG			;GET ERROR CODE
  14DA'   5F                    	MOV	E,A			;INTO E.
  14DB'   C3 0C1C'              	JMP	ERRESM			;FORCE THE ERROR TO HAPPEN
  14DE'                         NTOERR:
                                
  14DE'   CD 1F8B'              	CALL	GETBYT			;GET VALUE INTO [E]
  14E1'   7E                    	MOV	A,M			;GET THE TERMINATOR BACK
  14E2'   47                    	MOV	B,A			;SAVE THIS CHARACTER FOR LATER
  14E3'   FE 8D                 	CPI	$GOSUB			;AN "ON ... GOSUB" PERHAPS?
  14E5'   CA 14ED'              	JZ	ISGOSU			;YES, SOME FEATURE USE
  14E8'   CD 0000*              	CALL	SYNCHR
  14EB'   89                    	DB	$GOTO			;OTHERWISE MUST BE "GOTO"
  14EC'   2B                    	DCX	H			;BACK UP CHARACTER POINTER
  14ED'   4B                    ISGOSU:	MOV	C,E			;GET COUNT INTO  [C]
  14EE'   0D                    LOOPON:	DCR	C			;SEE IF ENOUGH SKIPS
  14EF'   78                    	MOV	A,B			;PUT DISPATCH CHARACTER IN PLACE
  14F0'   CA 121A'              	JZ	GONE2			;IF DONE, GO OFF
  14F3'   CD 135B'              	CALL	LINGT2			;SKIP OVER A LINE #
  14F6'   FE 2C                 	CPI	44			;A COMMA
  14F8'   C0                    	RNZ				;IF A COMMA DOESN'T DELIMIT THE END OF
                                					;THE CURRENT LINE # WE MUST BE THE END OF THE LINE
  14F9'   C3 14EE'              	JMP	LOOPON			;CONTINUE GOBBLING LINE #S
                                
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-81
ON..GOTO, ON ERROR GOTO CODE

                                
                                	SUBTTL	RESUME, ERROR STATEMENT CODE
  14FC'   11 09DE'              RESUME:	LXI	D,ONEFLG		;POINT TO FLAG
  14FF'   1A                    	LDAX	D			;GET FLAG
  1500'   B7                    	ORA	A			;TRAP ROUTINE.
  1501'   CA 0BFB'              	JZ	REERR			;GIVE RESUME WITHOUT ERROR ERROR	
  1504'   3C                    	INR	A			;MAKE A=0
  1505'   32 06AD'              	STA	ERRFLG			;CLEAR ERROR FLAG SO ^C DOESN'T GIVE ERROR
  1508'   12                    	STAX	D			;RESET FLAG
  1509'   7E                    	MOV	A,M			;GET CURRENT CHAR BACK
  150A'   FE 83                 	CPI	$NEXT			;RESUME NEXT?
  150C'   CA 151C'              	JZ	RESNXT			;YUP.
  150F'   CD 135A'              	CALL	LINGET			;GET FOLLOWING LINE #
  1512'   C0                    	RNZ				;SHOULD TERMINATE
  1513'   7A                    	MOV	A,D			;IS LINE NUMBER ZERO?
  1514'   B3                    	ORA	E			;TEST
  1515'   C2 13C6'              	JNZ	GOTO2			;DO A GOTO THAT LINE.
  1518'   3C                    	INR	A			;SET NON ZERO CONDITION CODES
  1519'   C3 1520'              	JMP	RESTXT			;GO TO IT
  151C'   CD 1232'              RESNXT:	CALL	CHRGTR			;MUST TERMINATE
  151F'   C0                    	RNZ				;BLOW HIM UP
  1520'   2A 09DA'              RESTXT:	LHLD	ERRTXT			;GET POINTER INTO LINE.
  1523'   EB                    	XCHG				;SAVE ERRTXT IN [D,E]
  1524'   2A 09D6'              	LHLD	ERRLIN			;GET LINE #
  1527'   22 06BB'              	SHLD	CURLIN			;SAVE IN CURRENT LINE #
  152A'   EB                    	XCHG	
  152B'   C0                    	RNZ				;GO TO NEWSTT IF JUST "RESUME"
  152C'   7E                    	MOV	A,M			;GET ":" OR LINE HEADER
  152D'   B7                    	ORA	A			;SET CC
  152E'   C2 1535'              	JNZ	NOTBGL			;#0 MEANS MUST BE ":"
  1531'   23                    	INX	H			;SKIP HEADER
  1532'   23                    	INX	H
  1533'   23                    	INX	H
  1534'   23                    	INX	H
  1535'   23                    NOTBGL:	INX	H			;POINT TO START OF THIS STATEMENT
  1536'   C3 1415'              	JMP	DATA			;GET NEXT STMT
                                
                                ; THIS IS THE ERROR <CODE> STATEMENT WHICH FORCES
                                ; AN ERROR OF TYPE <CODE> TO OCCUR
                                ; <CODE> MUST BE .GE. 0 AND .LE. 255
  1539'   CD 1F8B'              ERRORS:	CALL	GETBYT			;GET THE PARAM
  153C'   C0                    	RNZ				;SHOULD HAVE TERMINATED
  153D'   B7                    	ORA	A			;ERROR CODE 0?
  153E'   CA 134A'              	JZ	FCERR			;YES, ERROR IN ITSELF
  1541'   C3 0C06'              GOERR:	JMP	ERROR			;FORCE AN ERROR
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-82
RESUME, ERROR STATEMENT CODE

                                
                                	SUBTTL	AUTO COMMAND
                                ; THE AUTO [BEGGINNING LINE[,[INCREMENT]]]
                                ; COMMAND IS USED TO AUTOMATICALLY GENERATE LINE NUMBERS
                                ; FOR LINES TO BE INSERTED. BEGINNING LINE IS
                                ; USED TO SPECIFY THE INITAL LINE (10 IS ASSUMED IF OMMITED)
                                ; AND THE INCREMENT IS USED TO SPECIFY THE INCREMENT USED
                                ; TO GENERATE THE NEXT LINE #. IF ONLY A COMMA IS USED AFTER THE
                                ; BEGGINING LINE, THE OLD INCREMENT IS USED.
  1544'   11 000A               AUTO:	LXI	D,0+10			;ASSUME INITIAL LINE # OF 10
  1547'   D5                    	PUSH	D			;SAVE IT
  1548'   CA 1566'              	JZ	SNGAUT			;IF END OF COMMAND USE 10,10
  154B'   CD 134F'              	CALL	LINSPC			;GET LINE #, ALLOW USE OF . FOR CURRENT LINE
  154E'   EB                    	XCHG				;GET TXT PTR IN [D,E]
  154F'   E3                    	XTHL				;PUT INIT ON STACK, GET 10 IN [H,L]
  1550'   CA 1567'              	JZ	SNGAU1			;IF TERMINATOR, USE INC OF 10
  1553'   EB                    	XCHG				;GET TEXT PTR BACK IN [H,L]
  1554'   CD 0000*              	CALL	SYNCHR
  1557'   2C                    	DB	54O			;COMMA MUST FOLLOW
  1558'   EB                    	XCHG				;SAVE TEXT PTR IN [D,E]
  1559'   2A 09D0'              	LHLD	AUTINC			;GET PREVIOUS INC
  155C'   EB                    	XCHG				;GET BACK TEXT PTR; GET IN IN[D,E]
  155D'   CA 1566'              	JZ	SNGAUT			;USE PREVIOUS INC IF TERMINATOR
  1560'   CD 135A'              	CALL	LINGET			;GET INC
  1563'   C2 0BEC'              	JNZ	SNERR			;SHOULD HAVE FINISHED.
  1566'   EB                    SNGAUT:	XCHG				;GET INC IN [H,L]
  1567'   7C                    SNGAU1:	MOV	A,H			;SEE IF ZERO
  1568'   B5                    	ORA	L
  1569'   CA 134A'              	JZ	FCERR			;ZERO INC GIVES FCERR
  156C'   22 09D0'              	SHLD	AUTINC			;SAVE INCREMENT
  156F'   32 09CD'              	STA	AUTFLG			;SET FLAG TO USE AUTO IN MAIN CODE.
  1572'   E1                    	POP	H			;GET INITIAL LINE #
  1573'   22 09CE'              	SHLD	AUTLIN			;SAVE IN INTIAL LINE
  1576'   C1                    	POP	B			;GET RID OF NEWSTT ADDR
  1577'   C3 0CC5'              	JMP	MAIN			;JUMP INTO MAIN CODE (FOR REST SEE AFTER MAIN:)
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-83
AUTO COMMAND

                                
                                	SUBTTL	IF ... THEN CODE
  157A'   CD 191D'              IFS:	CALL	FRMEVL			;EVALUATE A FORMULA
  157D'   7E                    	MOV	A,M			;GET TERMINATING CHARACTER OF FORMULA
                                
  157E'   FE 2C                 	CPI	44
  1580'   CC 1232'              	CZ	CHRGTR			;IF SO SKIP IT
  1583'   FE 89                 	CPI	$GOTO			;ALLOW "GOTO" AS WELL
  1585'   CA 158D'              	JZ	OKGOTO
  1588'   CD 0000*              	CALL	SYNCHR
  158B'   CF                    	DB	THENTK			;MUST HAVE A THEN
  158C'   2B                    	DCX	H
  158D'                         OKGOTO:
  158D'   E5                    	PUSH	H			;SAVE THE TEXT POINTER
  158E'   CD 0000*              	CALL	VSIGN
  1591'   E1                    	POP	H			;GET BACK THE TEXT POINTER
  1592'   CA 15A7'              	JZ	FALSIF			;HANDLE POSSIBLE "ELSE"
  1595'   CD 1232'              DOCOND:	CALL	CHRGTR			;PICK UP THE FIRST LINE # CHARACTER
  1598'   C8                    	RZ				;RETURN FOR "THEN :" OR "ELSE :"
  1599'   FE 0E                 	CPI	LINCON			;LINE NUMBER CONSTANT?
  159B'   CA 13C3'              	JZ	GOTO			;DO A "GOTO"
  159E'   FE 0D                 	CPI	PTRCON			;POINTER CONSTANT
  15A0'   C2 121A'              	JNZ	GONE2			;EXECUTE STATEMENT, NOT GOTO
  15A3'   2A 0991'              	LHLD	CONLO			;GET TEXT POINTER
  15A6'   C9                    	RET				;FETCH NEW STATMENT
                                ;
                                ; "ELSE" HANDLER. HERE ON FALSE "IF" CONDITION
                                ;
  15A7'   16 01                 FALSIF:	MVI	D,1			;NUMBER OF "ELSE"S THAT MUST
                                					;BE SEEN. "DATA" INCREMENTS THIS
                                					;COUNT EVERY TIME AN "IF" IS SEEN
  15A9'   CD 1415'              SKPMRF:	CALL	DATA			;SKIP A STATEMENT
                                					;":" IS STUCK IN FRONT OF "ELSE"S
                                					;SO THAT "DATA" WILL STOP BEFORE "ELSE" CLAUSES
  15AC'   B7                    	ORA	A			;END OF LINE?
  15AD'   C8                    	RZ				;IF SO, NO "ELSE" CLAUSE
  15AE'   CD 1232'              	CALL	CHRGTR			;SEE IF WE HIT AN "ELSE"
  15B1'   FE A2                 	CPI	$ELSE
  15B3'   C2 15A9'              	JNZ	SKPMRF			;NO, STILL IN THE "THEN" CLAUSE
  15B6'   15                    	DCR	D			;DECREMENT THE NUMBER OF "ELSE"S THAT
                                					;MUST BE SEEN
  15B7'   C2 15A9'              	JNZ	SKPMRF			;SKIP MORE IF HAVEN'T SEEN
                                					;ENOUGH
  15BA'   C3 1595'              	JMP	DOCOND			;FOUND THE RIGHT "ELSE" -- GO EXECUTE
                                
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-84
IF ... THEN CODE

                                
                                	SUBTTL	PRINT CODE
                                
  15BD'   3E 01                 LPRINT:	MVI	A,1			;SAY NON ZERO
  15BF'   32 06B0'              	STA	PRTFLG			;SAVE AWAY
  15C2'   C3 15CA'              	JMP	NEWCHR
  15C5'                         PRINT:
  15C5'   0E 02                 	MVI	C,MD.SQO		;SETUP OUTPUT FILE
  15C7'   CD 0000*              	CALL	FILGET
  15CA'   2B                    NEWCHR:	DCX	H
  15CB'   CD 1232'              	CALL	CHRGTR			;GET ANOTHER CHARACTER
  15CE'   CC 0000*              	CZ	CRDO			;PRINT CRLF IF END WITHOUT PUNCTUATION
  15D1'   CA 1713'              PRINTC:	JZ	FINPRT			;FINISH BY RESETTING FLAGS
                                					;FINISH BY RESETTING FLAGS
                                					;IN WHICH CASE A TERMINATOR DOES NOT
                                					;MEAN WE SHOULD TYPE A CRLF
                                					;BUT JUST RETURN
  15D4'   FE D9                 	CPI	USINTK			;IS IT "PRINT USING" ?
  15D6'   CA 0000*              	JZ	PRINUS			;IF SO, USE A SPECIAL HANDLER
  15D9'   FE D0                 	CPI	TABTK
  15DB'   CA 168E'              	JZ	TABER			;THE TAB FUNCTION?
  15DE'   FE D4                 	CPI	SPCTK
  15E0'   CA 168E'              	JZ	TABER			;THE SPC FUNCTION?
  15E3'   E5                    	PUSH	H			;SAVE THE TEXT POINTER
  15E4'   FE 2C                 	CPI	44
  15E6'   CA 164F'              	JZ	COMPRT			;IS IT A COMMA?
  15E9'   FE 3B                 	CPI	59			;IS IT A ";"
  15EB'   CA 170C'              	JZ	NOTABR
  15EE'   C1                    	POP	B			;GET RID OF OLD TEXT POINTER
  15EF'   CD 191D'              	CALL	FRMEVL			;EVALUATE THE FORMULA
  15F2'   E5                    	PUSH	H			;SAVE TEXT POINTER
  15F3'   CD 1C7F'              	CALL	GETYPR			;SEE IF WE HAVE A STRING
  15F6'   CA 1605'              	JZ	STRDON			;IF SO, PRINT SPECIALY
  15F9'   CD 0000*              	CALL	FOUT			;MAKE A NUMBER INTO A STRING
  15FC'   CD 0000*              	CALL	STRLIT			;MAKE IT  A STRING
  15FF'   36 20                 	MVI	M,' '			;PUT A SPACE AT THE END
  1601'   2A 0B27'              	LHLD	FACLO			;AND INCREASE SIZE BY 1
  1604'   34                    	INR	M			;SIZE BYTE IS FIRST IN DESCRIPTOR
                                
  1605'                         STRDON:					;USE FOLDING FOR STRINGS AND #S
  1605'   2A 06B7'              	LHLD	PTRFIL			;DISK OUTPUT?
  1608'   7C                    	MOV	A,H			;IF SO, DON'T EVER FORCE A CRLF
  1609'   B5                    	ORA	L
  160A'   C2 1648'              	JNZ	LINCH2			;TO BE SENT OUT
  160D'   2A 0B27'              	LHLD	FACLO			;GET THE POINTER
  1610'   3A 06B0'              	LDA	PRTFLG
  1613'   B7                    	ORA	A
  1614'   CA 162F'              	JZ	ISTTY			;LPT OR TTY?
  1617'   3A 06B2'              	LDA	LPTSIZ			;GET WIDTH OF PRINTER
  161A'   47                    	MOV	B,A			;SAVE IN [B]
  161B'   3C                    	INR	A			;IS IT INFINITE?
  161C'   CA 1648'              	JZ	LINCH2			;THEN JUST PRINT
  161F'   3A 06AF'              	LDA	LPTPOS
  1622'   B7                    	ORA	A			;DON'T DO A CRLF IF STRING LONGER THAN LINE
  1623'   CA 1648'              	JZ	LINCH2			;LENGTH IF POSITION IS 0
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-85
PRINT CODE

  1626'   86                    	ADD	M
  1627'   3F                    	CMC				;SET NC IF OVERFLOW ON CHECK
  1628'   D2 1645'              	JNC	LINCHK			;START ON A NEW LINE
  162B'   B8                    	CMP	B			;CHECK FOR OVERLAP
  162C'   C3 1645'              	JMP	LINCHK
  162F'                         ISTTY:
  162F'   3A 06B3'              	LDA	LINLEN
  1632'   47                    	MOV	B,A
  1633'   3C                    	INR	A			;NO OVERFLOW LINE WIDTH?
  1634'   CA 1648'              	JZ	LINCH2			;YES
  1637'   3A 0988'              	LDA	TTYPOS			;SEE WHERE WE ARE
                                					;SEE WHERE WE ARE
  163A'   B7                    	ORA	A			;DON'T DO CRLF
  163B'   CA 1648'              	JZ	LINCH2			;IF ALREADY AT 0 EVEN IF STRING IS LONGER THAT LINE LENGTH
  163E'   86                    	ADD	M			;ADD THIS LENGTH
  163F'   3F                    	CMC				;SET NC IF OVERFLOW ON CHECK
  1640'   D2 1645'              	JNC	LINCHK			;(POSSIBLE SINCE STRINGS CAN BE BIG..)
  1643'   3D                    	DCR	A			;ACTUALLY EQUAL TO LINE LENGTH IS OK
  1644'   B8                    	CMP	B
                                	PUBLIC	LINPT3
  1644'                         LINPT3	SET	$-1
  1645'   D4 0000*              LINCHK:	CNC	CRDO			;IF SO CRLF
  1648'   CD 0000*              LINCH2:	CALL	STRPRT			;PRINT THE NUMBER
  164B'   E1                    	POP	H
  164C'   C3 15CA'              	JMP	NEWCHR			;PRINT SOME MORE
  164F'                         COMPRT:
  164F'   2A 06B7'              	LHLD	PTRFIL			;OUTPUTING INTO A FILE?
  1652'   7C                    	MOV	A,H			;IF SO, [PTRFIL] .NE. 0
  1653'   B5                    	ORA	L			;AND SPECIAL PRINT POSITION SHOULD
                                	EXTRN	NMLO.C
  1654'   01 0000*              	LXI	B,NMLO.C		;BE FETCHED FROM FILE DATA
  1657'   09                    	DAD	B			;[H,L] POINT AT POSITION
  1658'   7E                    	MOV	A,M			;IF FILE IS ACTIVE
  1659'   C2 1685'              	JNZ	MORCOM
  165C'   3A 06B0'              	LDA	PRTFLG			;OUTPUT TO THE LINE PRINTER?
  165F'   B7                    	ORA	A			;NON-ZERO MEANS YES
  1660'   CA 1672'              	JZ	ISCTTY			;NO, DO TELETYPE COMMA
  1663'   3A 06B1'              	LDA	NLPPOS			;ARE WE USING INFINITE WIDTH?
  1666'   47                    	MOV	B,A			;ALSO PUT IN [B]
  1667'   3C                    	INR	A			;TEST
  1668'   3A 06AF'              	LDA	LPTPOS			;GET LINE PRINTER POSITION
  166B'   CA 1685'              	JZ	MORCOM			;ALWAYS DO MODULUS IF WIDTH=255
  166E'   B8                    	CMP	B			;CHECK IF NO MORE COMMA FIELDS
  166F'   C3 167F'              	JMP	CHKCOM			;USE TELETYPE CHECK
  1672'                         ISCTTY:
  1672'   3A 06B4'              	LDA	CLMLST
  1675'   47                    	MOV	B,A
  1676'   3A 0988'              	LDA	TTYPOS			;GET TELETYPE POSITION
  0038                          NCMPOS	SET	(((LINLN/CLMWID)-1)*CLMWID);POSITION BEYOND WHICH THERE ARE
  1679'   FE FF                 	CPI	255			;INFINITE WIDTH?
  167B'   CA 1685'              	JZ	MORCOM			;DO MODULUS
                                
  167E'   B8                    	CMP	B
                                	PUBLIC	LINPT4
  167E'                         LINPT4	SET	$-1			;FIXED UP BY "TERMINAL WIDTH" QUESTION
  167F'   D4 0000*              CHKCOM:	CNC	CRDO			;TYPE CRLF
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-86
PRINT CODE

  1682'   D2 170C'              	JNC	NOTABR			;AND QUIT IF BEYOND THE LAST COMMA FIELD
  1685'   D6 0E                 MORCOM:	SUI	CLMWID			;GET [A] MODULUS CLMWID
  1687'   D2 1685'              	JNC	MORCOM
  168A'   2F                    	CMA				;WE WANT TO  FILL
                                					;THE PRINT POSITION OUT
                                					;TO AN EVEN CLMWID, SO
                                					;WE PRINT CLMWID-[A] MOD CLMWID SPACES
  168B'   C3 1701'              	JMP	ASPA2			;GO PRINT [A]+1 SPACES
  168E'                         TABER:
  168E'   F5                    	PUSH	PSW			;REMEMBER IF [A]=SPCTK OR TABTK
  168F'   CD 1232'              	CALL	CHRGTR
  1692'   CD 1F6C'              	CALL	GETIN2			;EVALUATE THE ARGUMENT
  1695'   F1                    	POP	PSW			;SEE IF ITS SPC OR TAB
  1696'   F5                    	PUSH	PSW
  1697'   FE D4                 	CPI	SPCTK			;IF SPACE LEAVE ALONE
  1699'   CA 169D'              	JZ	SPCNDC
  169C'   1B                    	DCX	D			;OFFSET BY 1
  169D'   7A                    SPCNDC:	MOV	A,D
  169E'   B7                    	ORA	A			;MAKE SURE ITS NOT NEGATIVE
  169F'   F2 16A5'              	JP	TBNONG
  16A2'   11 0000               	LXI	D,0
  16A5'   E5                    TBNONG:	PUSH	H			;SAVE THE TEXT POINTER
  16A6'   2A 06B7'              	LHLD	PTRFIL			;SEE IF GOING TO DISK FILE
  16A9'   7C                    	MOV	A,H
  16AA'   B5                    	ORA	L
  16AB'   C2 16C6'              	JNZ	LNOMOD			;DONT MOD
  16AE'   3A 06B0'              	LDA	PRTFLG			;GOING TO PRINTER?
  16B1'   B7                    	ORA	A			;SET FLAGS
  16B2'   3A 06B2'              	LDA	LPTSIZ			;GET SIZE
  16B5'   C2 16BB'              	JNZ	LPTMDF			;WAS LPT, MOD BY ITS SIZE
  16B8'   3A 06B3'              	LDA	LINLEN			;GET THE LINE LENGTH
  16BB'   6F                    LPTMDF:	MOV	L,A
  16BC'   3C                    	INR	A			;TEST FOR WIDTH OF 255 (NO FOLDING)
  16BD'   CA 16C6'              	JZ	LNOMOD			;IF SO, DONT MOD
  16C0'   26 00                 	MVI	H,0			;MOD OUT BY LINE LENGTH
  16C2'   CD 0000*              	CALL	IMOD
  16C5'   EB                    	XCHG				;SET [E] = POSITION TO GO TO 
  16C6'   E1                    LNOMOD:	POP	H			;GET BACK THE TEXT POINTER
  16C7'   CD 0000*              	CALL	SYNCHR
  16CA'   29                    	DB	')'
  16CB'   2B                    	DCX	H
  16CC'   F1                    	POP	PSW			;GET BACK SPCTK OR TABTK
  16CD'   D6 D4                 	SUI	SPCTK			;WAS IT SPCTK?
  16CF'   E5                    	PUSH	H			;SAVE THE TEXT POINTER
  16D0'   CA 16F0'              	JZ	DOSIZT			;VALUE IN [A]
  16D3'   2A 06B7'              	LHLD	PTRFIL			;OUTPUTING INTO A FILE?
  16D6'   7C                    	MOV	A,H			;IF SO, [PTRFIL] .NE. 0
  16D7'   B5                    	ORA	L			;AND SPECIAL PRINT POSITION SHOULD
                                
  16D8'   01 0000*              	LXI	B,NMLO.C		;BE FETCHED FROM FILE DATA
  16DB'   09                    	DAD	B			;[H,L] POINT AT POSITION
  16DC'   7E                    	MOV	A,M			;IF FILE IS ACTIVE
  16DD'   C2 16F0'              	JNZ	DOSIZT			;DO TAB CALCULATION NOW
  16E0'   3A 06B0'              	LDA	PRTFLG			;LINE PRINTER OR TTY?
  16E3'   B7                    	ORA	A			;NON-ZERO MEANS LPT
  16E4'   CA 16ED'              	JZ	TTYIST
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-87
PRINT CODE

  16E7'   3A 06AF'              	LDA	LPTPOS			;GET LINE PRINTER POSITION
  16EA'   C3 16F0'              	JMP	DOSIZT
  16ED'                         TTYIST:
  16ED'   3A 0988'              	LDA	TTYPOS			;GET TELETYPE PRINT POSITION
                                					;SEE WHERE WE ARE
  16F0'   2F                    DOSIZT:	CMA				;PRINT [E]-[A] SPACES
  16F1'   83                    	ADD	E
  16F2'   DA 1701'              	JC	ASPA2			;PRINT IF PAST CURRENT
  16F5'   3C                    	INR	A
  16F6'   CA 170C'              	JZ	NOTABR			;DO NOTHING IF AT CURRENT
  16F9'   CD 0000*              	CALL	CRDO			;GO TO A NEW LINE
  16FC'   7B                    	MOV	A,E			;GET THE POSITION TO GO TO
  16FD'   3D                    	DCR	A
  16FE'   FA 170C'              	JM	NOTABR
                                					;SPACES
  1701'   3C                    ASPA2:	INR	A
  1702'   47                    ASPAC:	MOV	B,A			;[B]=NUMBER OF SPACES TO PRINT
  1703'   3E 20                 	MVI	A,' '			;[A]=SPACE
  1705'   CD 0000*              REPOUT:	CALL	OUTDO			;PRINT [A]
                                					;DECREMENT THE COUNT
  1708'   05                    	DCR	B
  1709'   C2 1705'              	JNZ	REPOUT
  170C'   E1                    NOTABR:	POP	H			;PICK UP TEXT POINTER
  170D'   CD 1232'              	CALL	CHRGTR			;AND THE NEXT CHARACTER
  1710'   C3 15D1'              	JMP	PRINTC			;AND SINCE WE JUST PRINTED
                                					;SPACES, DON'T CALL CRDO
                                					;IF IT'S THE END OF THE LINE
                                	PUBLIC	FINPRT
  1713'                         FINPRT:
  1713'   AF                    	XRA	A
                                
  1714'   32 06B0'              	STA	PRTFLG
  1717'   E5                    	PUSH	H			;SAVE THE TEXT POINTER
  1718'   67                    	MOV	H,A			;[H,L]=0
  1719'   6F                    	MOV	L,A
  171A'   22 06B7'              	SHLD	PTRFIL			;ZERO OUT PTRFIL
  171D'   E1                    	POP	H			;GET BACK THE TEXT POINTER
  171E'   C9                    	RET	
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-88
PRINT CODE

                                
                                	SUBTTL	LINE INPUT, INPUT AND READ CODE
  171F'                         LINE:
  171F'   CD 0000*              	CALL	SYNCHR
  1722'   85                    	DB	$INPUT
  1723'   FE 23                 	CPI	'#'			;SEE IF THERE IS A FILE NUMBER
                                	EXTRN	DLINE
  1725'   CA 0000*              	JZ	DLINE			;DO DISK INPUT LINE
  1728'   CD 0000*              	CALL	SCNSEM			;SCAN SEMICOLON FOR NO-CR
  172B'   CD 1799'              	CALL	QTINP			;PRINT QUOTED STRING IF ONE
  172E'   CD 0000*              	CALL	PTRGET			;READ STRING TO STORE INTO
  1731'   CD 0000*              	CALL	CHKSTR			;MAKE SURE ITS A STRING
  1734'   D5                    	PUSH	D			;SAVE POINTER AT VARIABLE
  1735'   E5                    	PUSH	H			;SAVE TEXT POINTER
                                	EXTRN	SINLIN
  1736'   CD 0000*              	CALL	SINLIN			;READ A LINE OF INPUT
  1739'   D1                    	POP	D			;GET TEXT POINTER
  173A'   C1                    	POP	B			;GET POINTER AT VARIABLE
  173B'   DA 0000*              	JC	STPEND			;IF CONTROL-C, STOP
  173E'   C5                    RELINE:	PUSH	B			;SAVE BACK VARIABLE POINTER
  173F'   D5                    	PUSH	D			;SAVE TEXT POINTER
  1740'   06 00                 	MVI	B,0			;SETUP ZERO AS ONLY TERMINATOR
  1742'   CD 0000*              	CALL	STRLT3			;LITERALIZE THE INPUT
  1745'   E1                    	POP	H			;RESTORE [H,L]=TEXT POINTER
  1746'   3E 03                 	MVI	A,3			;SET THREE FOR STRING
  1748'   C3 1456'              	JMP	LETCN2			;DO THE ASSIGNMENT
  174B'                         TRYAGN:
  174B'   3F 52 65 64           	DB	'?Redo from start'
  174F'   6F 20 66 72           
  1753'   6F 6D 20 73           
  1757'   74 61 72 74           
  175B'   0D                    	DB	13
  175C'   0A                    	DB	10
  175D'   00                    	DB	0
                                ;
                                ; HERE WHEN PASSING OVER STRING LITERAL IN SUBSCRIPT OF VARIABLE IN INPUT LIST
                                ; ON THE FIRST PASS OF INPUT CHECKING FOR TYPE MATCH AND NUMBER
                                ;
  175E'   23                    SCNSTR:	INX	H			;LOOK AT THE NEXT CHARACTER
  175F'   7E                    	MOV	A,M			;FETCH IT
  1760'   B7                    	ORA	A			;END OF LINE?
  1761'   CA 0BEC'              	JZ	SNERR			;ENDING IN STRING IN SUBSCRIPT IS BAD SYNTAX
  1764'   FE 22                 	CPI	34			;ONLY OTHER TERMINATOR IS QUOTE
  1766'   C2 175E'              	JNZ	SCNSTR			;CONTINUE UNTIL QUOTE OR 0 IS FOUND
  1769'   C3 17FB'              	JMP	SCNCON			;CONTINUE MATCHING PARENS SINCE STRING ENDED
                                
  176C'   E1                    INPBAK:	POP	H			;GET RID OF PASS1 DATA POINTER
  176D'   E1                    	POP	H			;GET RID OF PASS2 DATA POINTER
  176E'   C3 1778'              	JMP	RDOIN2			;GET RID OF PASS2 VARLST POINTER AND RETRY
                                ;
                                ; HERE WHEN THE DATA THAT WAS TYPED IN OR IN "DATA" STATEMENTS
                                ; IS IMPROPERLY FORMATTED. FOR "INPUT" WE START AGAIN.
                                ; FOR "READ" WE GIVE A SYNTAX ERROR AT THE DATA LINE
                                ;
  1771'   3A 09C9'              TRMNOK:	LDA	FLGINP			;WAS IT READ OR INPUT?
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-89
LINE INPUT, INPUT AND READ CODE

  1774'   B7                    	ORA	A			;ZERO=INPUT
  1775'   C2 0BE6'              	JNZ	DATSNE			;GIVE ERROR AT DATA LINE
  1778'   C1                    RDOIN2:	POP	B			;GET RID OF THE POINTER INTO THE VARIABLE LIST
  1779'                         RDOINP:
  1779'   21 174B'              	LXI	H,TRYAGN
  177C'   CD 0000*              	CALL	STROUT			;PRINT "?REDO FROM START"
                                					;TO NEWSTT POINTING AT THE START OF
                                
                                					;START ALL OVER
  177F'   2A 09D2'              	LHLD	SAVTXT			;GET SAVED TEXT POINTER
  1782'   C9                    	RET				;GO BACK TO NEWSTT
                                					;OF THE "INPUT" STATEMENT
  1783'   CD 0000*              FILSTI:	CALL	FILINP
  1786'   E5                    	PUSH	H			;PUT THE TEXT POINTER ON THE STACK
  1787'   21 0884'              	LXI	H,BUFMIN		;POINT AT A COMMA
  178A'   C3 1852'              	JMP	INPCN3
  178D'                         INPUT:
                                
  178D'   FE 23                 	CPI	'#'
  178F'   CA 1783'              	JZ	FILSTI
  1792'   CD 0000*              	CALL	SCNSEM			;SCAN SEMICOLON FOR NO-CR
  1795'   01 17C3'              	LXI	B,NOTQTI		;WHERE TO GO
  1798'   C5                    	PUSH	B			;WHEN DONE WITH QUOTED STRING
  1799'   FE 22                 QTINP:	CPI	34			;IS IT A QUOTE?
  179B'   3E 00                 	MVI	A,0			;BE TALKATIVE
  179D'   32 06B6'              	STA	CNTOFL			;FORCE OUTPUT
  17A0'   3E FF                 	MVI	A,255			;MAKE NON-ZERO VALUE
  17A2'   32 0B0A'              	STA	TEMPA+1			;FLAG TO DO "? "
  17A5'   C0                    	RNZ				;JUST RETURN
  17A6'   CD 0000*              	CALL	STRLTI			;MAKE THE MESSAGE A STRING
  17A9'   7E                    	MOV	A,M			;GET CHAR
  17AA'   FE 2C                 	CPI	54O			;COMMA?
  17AC'   C2 17B9'              	JNZ	NTICMA			;NO
  17AF'   AF                    	XRA	A			;FLAG NOT TO DO IT
  17B0'   32 0B0A'              	STA	TEMPA+1
  17B3'   CD 1232'              	CALL	CHRGTR			;FETCH NEXT CHAR
  17B6'   C3 17BD'              	JMP	INPCMA			;CONTINUE
  17B9'                         NTICMA:
  17B9'   CD 0000*              	CALL	SYNCHR
  17BC'   3B                    	DB	59			;MUST END WITH SEMI-COLON
  17BD'                         INPCMA:
  17BD'   E5                    	PUSH	H			;REMEMBER WHERE IT ENDED
  17BE'   CD 0000*              	CALL	STRPRT			;PRINT IT OUT
  17C1'   E1                    	POP	H			;GET BACK SAVED TEXT PTR
  17C2'   C9                    	RET				;ALL DONE
  17C3'                         NOTQTI:
  17C3'   E5                    	PUSH	H
  17C4'                         GETAGN:
  17C4'   3A 0B0A'              	LDA	TEMPA+1			;DO "? "
  17C7'   B7                    	ORA	A
  17C8'   CA 17D5'              	JZ	SUPPRS			;THEN SUPPRESS "?"
  17CB'   3E 3F                 	MVI	A,'?'			;TYPE "?" AND INPUT A LINE OF TEXT
  17CD'   CD 0000*              	CALL	OUTDO
  17D0'   3E 20                 	MVI	A,' '
  17D2'   CD 0000*              	CALL	OUTDO
                                	EXTRN	SINLIN
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-90
LINE INPUT, INPUT AND READ CODE

  17D5'   CD 0000*              SUPPRS:	CALL	SINLIN
  17D8'   C1                    	POP	B			;TAKE OFF SINCE MAYBE LEAVING
  17D9'   DA 0000*              	JC	STPEND			;IF EMPTY LEAVE
  17DC'   C5                    	PUSH	B			;PUT BACK  SINCE DIDN'T LEAVE
                                ;
                                ; THIS IS THE FIRST PASS DICTATED BY ANSI REQUIRMENT THAN NO VALUES BE ASSIGNED 
                                ; BEFORE CHECKING TYPE AND NUMBER. THE VARIABLE LIST IS SCANNED WITHOUT EVALUATING
                                ; SUBSCRIPTS AND THE INPUT IS SCANNED TO GET ITS TYPE. NO ASSIGNMENT
                                ; IS DONE
                                ;
  17DD'   36 2C                 	MVI	M,44			;PUT A COMMA IN FRONT OF BUF
  17DF'   EB                    	XCHG				;SAVE DATA POINTER IN [D,E]
  17E0'   E1                    	POP	H			;GET THE VARLST POINTER INTO [H,L]
  17E1'   E5                    	PUSH	H			;RESAVE THE VARLST POINTER
  17E2'   D5                    	PUSH	D			;SAVE A COPY OF THE DATA POINTER FOR PASS2
  17E3'   D5                    	PUSH	D			;SAVE THE DATA POINTER FOR PASS1
  17E4'   2B                    	DCX	H			;READ THE FIRST VARIABLE NAME
  17E5'   3E 80                 VARLOP:	MVI	A,128			;DON'T ALLOW SUBSCRIPTS -- RETURN POINTING TO "("
  17E7'   32 09C8'              	STA	SUBFLG
  17EA'   CD 1232'              	CALL	CHRGTR			;ADVANCE TEXT POINTER
  17ED'   CD 0000*              	CALL	PTRGET			;SCAN NAME AND RETURN POINTER IN [D,E]
  17F0'   7E                    	MOV	A,M			;SEE IF IT ENDED ON "("
  17F1'   2B                    	DCX	H			;RESCAN THE TERMINATOR
  17F2'   FE 28                 	CPI	'('			;ARRAY OR NOT?
  17F4'   C2 1814'              	JNZ	ENDSCN			;IF NOT, VARIABLE NAME IS DONE
  17F7'   23                    	INX	H			;NOW SCAN THE SUBSCRIPT EXPRESSION
  17F8'   06 00                 	MVI	B,0			;INITIALIZE THE PAREN COUNT
  17FA'   04                    SCNOPN:	INR	B			;UP THE COUNT FOR EVERY "("
  17FB'   CD 1232'              SCNCON:	CALL	CHRGTR			;GET THE NEXT CHARACTER
  17FE'   CA 0BEC'              	JZ	SNERR			;SHOULDN'T END STATEMENT IN EXPRESSION
  1801'   FE 22                 	CPI	34			;IS THERE A QUOTED STRING CONSTANT
  1803'   CA 175E'              	JZ	SCNSTR			;GO SCAN THE ENDTIRE CONSTANT (MAY CONTAIN PARENS)
  1806'   FE 28                 	CPI	'('			;ANOTHER LEVEL OF NESTING?
  1808'   CA 17FA'              	JZ	SCNOPN			;INCREMENT COUTN AND KEEP SCANNING
  180B'   FE 29                 	CPI	')'			;ONE LESS LEVEL OF PARENS?
  180D'   C2 17FB'              	JNZ	SCNCON			;NO, KEEP SCANNING
                                					;DECREMENT PAREN COUNT. OUT OF SUBSCRIPT?
  1810'   05                    	DCR	B
  1811'   C2 17FB'              	JNZ	SCNCON			;IF NOT AT ZERO LEVEL, KEEP SCANNING
  1814'   CD 1232'              ENDSCN:	CALL	CHRGTR			;GET TERMINATING CHARACTER
  1817'   CA 181F'              	JZ	OKVLST			;LAST VARIABLE IN INPUT LIST
  181A'   FE 2C                 	CPI	44			;OTHERWISE IT MUST BE A COMMA
  181C'   C2 0BEC'              	JNZ	SNERR			;BADLY FORMED INPUT -- SYNTAX ERROR
  181F'   E3                    OKVLST:	XTHL				;SAVE THE VARLST POINTER 
                                					;GET THE DATA POINTER INTO [H,L]
  1820'   7E                    	MOV	A,M			;DATA SHOULD ALWAYS HAVE A LEADING COMMA
  1821'   FE 2C                 	CPI	44			;IS IT PROPERLY FORMED?
  1823'   C2 176C'              	JNZ	INPBAK			;NO, ASK FOR COMPLETE REINPUT
  1826'   3E 01                 	MVI	A,1			;SET OVCSTR=1
  1828'   32 0B2D'              	STA	OVCSTR
  182B'   CD 187B'              	CALL	SCNVAL			;GO INTO PASS2 CODE AND SCAN A VALUE
  182E'   3A 0B2D'              	LDA	OVCSTR			;SEE IF IT WAS TOO BIG
  1831'   3D                    	DCR	A
  1832'   C2 176C'              	JNZ	INPBAK
  1835'   E5                    	PUSH	H			;SAVE THE RETURNED DATA POINTER
  1836'   CD 1C7F'              	CALL	GETYPR			;RELEASE STRING
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-91
LINE INPUT, INPUT AND READ CODE

  1839'   CC 0000*              	CZ	FREFAC
  183C'   E1                    	POP	H
  183D'   2B                    	DCX	H			;SKIP OVER SPACES LEFT AFTER VALUE SCAN
  183E'   CD 1232'              	CALL	CHRGTR
                                ;
                                ; NOTE CHECK FOR OVERFLOW OF INPUT VALUE HERE
                                ;
  1841'   E3                    	XTHL				;SAVE THE DATA POINTER
                                					;[H,L]=DATA LIST POINTER
  1842'   7E                    	MOV	A,M			;DID VARIABLE LIST CONTINUE?
  1843'   FE 2C                 	CPI	44			;MUST HAVE HAD A COMMA
  1845'   CA 17E5'              	JZ	VARLOP			;GO CHECK ANOTHER
  1848'   E1                    	POP	H			;GET FINAL DATA POINTER
  1849'   2B                    	DCX	H			;SKIP OVER ANY TRAILING SPACES
  184A'   CD 1232'              	CALL	CHRGTR
  184D'   B7                    	ORA	A			;IS IT A TRUE END?
  184E'   E1                    	POP	H			;GET THE START OF DATA POINTER FOR PASS2
  184F'   C2 1778'              	JNZ	RDOIN2			;IF DATA ENDED BADLY ASK FOR REINPUT
  1852'                         INPCN3:
  1852'   36 2C                 	MVI	M,44			;SETUP COMMA AT BUFMIN
  1854'   C3 185C'              	JMP	INPCON
  1857'                         READ:
  1857'   E5                    	PUSH	H			;SAVE THE TEXT POINTER
  1858'   2A 09EB'              	LHLD	DATPTR			;GET LAST DATA LOCATION
  185B'   F6                    	DB	366Q			;"ORI" TO SET [A] NON-ZERO
  185C'   AF                    INPCON:	XRA	A			;SET FLAG THAT THIS IS AN INPUT
  185D'   32 09C9'              	STA	FLGINP			;STORE THE FLAG
                                ;
                                ; IN THE PROCESSING OF DATA AND READ STATEMENTS:
                                ; ONE POINTER POINTS TO THE DATA (IE THE NUMBERS BEING FETCHED)
                                ; AND ANOTHER POINTS TO THE LIST OF VARIABLES
                                ;
                                ; THE POINTER INTO THE DATA ALWAYS STARTS POINTING TO A
                                ; TERMINATOR -- A , : OR END-OF-LINE
                                ;
  1860'   E3                    	XTHL				;[H,L]=VARIABLE LIST POINTER
                                					;DATA POINTER GOES ON THE STACK
  1861'   C3 1868'              	JMP	LOPDAT
  1864'   CD 0000*              LOPDT2:	CALL	SYNCHR
  1867'   2C                    	DB	44			;MAKE SURE THERE IS A ","
  1868'   CD 0000*              LOPDAT:	CALL	PTRGET			;READ THE VARIABLE LIST
                                					;AND GET THE POINTER TO A VARIABLE INTO [D,E]
  186B'   E3                    	XTHL				;PUT THE VARIABLE LIST POINTER ONTO THE
                                					;STACK AND TAKE THE
                                					;DATA LIST POINTER OFF
                                ;
                                ; NOTE AT THIS POINT WE HAVE A VARIABLE WHICH WANTS DATA
                                ; AND SO WE MUST GET DATA OR COMPLAIN
                                ;
  186C'   D5                    	PUSH	D			;SAVE THE POINTER TO THE VARIABLE WE
                                					;ARE ABOUT TO SET UP WITH A VALUE
  186D'   7E                    	MOV	A,M			;SINCE THE DATA LIST POINTER ALWAYS POINTS
                                					;AT A TERMINATOR LETS READ THE
                                					;TERMINATOR INTO [A] AND SEE WHAT
                                					;IT IS
  186E'   FE 2C                 	CPI	44
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-92
LINE INPUT, INPUT AND READ CODE

  1870'   CA 187A'              	JZ	DATBK			;A COMMA SO A VALUE MUST FOLLOW
  1873'   3A 09C9'              	LDA	FLGINP			;SEE WHAT TYPE OF STATEMENT THIS WAS
  1876'   B7                    	ORA	A
                                					;SEARCH FOR ANOTHER DATA STATEMENT
  1877'   C2 18EE'              	JNZ	DATLOP
                                					;THE DATA NOW STARTS AT THE BEGINNING
                                					;OF THE BUFFER
                                					;AND QINLIN LEAVES [H,L]=BUF
  187A'                         DATBK:
  187A'   F6                    	DB	366Q			;SET A NON-ZERO
  187B'   AF                    SCNVAL:	XRA	A			;SET ZERO FLAG IN [A]
  187C'   32 0ADF'              	STA	INPPAS			;STORE SO EARLY RETURN CHECK WORKS
  187F'   EB                    	XCHG				;SAVE THE DATA POINTER
  1880'   2A 06B7'              	LHLD	PTRFIL			;SEE IF A FILE READ
  1883'   7C                    	MOV	A,H
  1884'   B5                    	ORA	L
  1885'   EB                    	XCHG	
  1886'   C2 0000*              	JNZ	FILIND			;IF SO, SPECIAL HANDLING
  1889'   CD 1C7F'              	CALL	GETYPR			;IS IT A STRING?
  188C'   F5                    	PUSH	PSW			;SAVE THE TYPE INFORMATION
  188D'   C2 18BD'              	JNZ	NUMINS			;IF NUMERIC, USE FIN TO GET IT
                                					;ONLY THE VARAIBLE TYPE IS
                                					;CHECKED SO AN UNQUOTED STRING
                                					;CAN BE ALL DIGITS
  1890'   CD 1232'              	CALL	CHRGTR
  1893'   57                    	MOV	D,A			;ASSUME QUOTED STRING
  1894'   47                    	MOV	B,A			;SETUP TERMINATORS
  1895'   FE 22                 	CPI	34			;QUOTE ?
  1897'   CA 18A7'              	JZ	NOWGET			;TERMINATORS OK
  189A'   3A 09C9'              	LDA	FLGINP			;INPUT SHOULDN'T TERMINATE ON ":"
  189D'   B7                    	ORA	A			;SEE IF READ OR INPUT
  189E'   57                    	MOV	D,A			;SET D TO ZERO FOR INPUT
  189F'   CA 18A4'              	JZ	NCOLST
  18A2'   16 3A                 	MVI	D,':'			;UNQUOTED STRING TERMINATORS
  18A4'   06 2C                 NCOLST:	MVI	B,44			;ARE COLON AND COMMA
                                					;NOTE: ANSI USES [B]=44 AS A FLAG TO 
                                					;TRIGGER TRAILING SPACE SUPPRESSION
  18A6'   2B                    	DCX	H			;BACKUP SINCE START CHARACTER MUST BE INCLUDED
                                					;IN THE QUOTED STRING CASE WE DON'T WANT TO
                                					;INCLUDE THE STARTING OR ENDING QUOTE
  18A7'   CD 0000*              NOWGET:	CALL	STRLT2			;MAKE A STRING DESCRIPTOR FOR THE VALUE
                                					;AND COPY IF NECESSARY
  18AA'   F1                    DOASIG:	POP	PSW			;POP OFF THE TYPE INFORMATION
  18AB'   C6 03                 	ADI	3			;MAKE VALTYPE CORRECT
  18AD'   4F                    	MOV	C,A			;SAVE VALUE TYPE IN [C]
  18AE'   3A 0ADF'              	LDA	INPPAS			;SEE IF SCANNING VALUES FOR PASS1
  18B1'   B7                    	ORA	A			;ZERO FOR PASS1
  18B2'   C8                    	RZ				;GO BACK TO PASS1
  18B3'   79                    	MOV	A,C			;RECOVER VALTYP
  18B4'   EB                    	XCHG				;[D,E]=TEXT POINTER
  18B5'   21 18CC'              	LXI	H,STRDN2		;RETURN LOC
  18B8'   E3                    	XTHL				;[H,L]=PLACE TO STORE VARIABLE VALUE
  18B9'   D5                    	PUSH	D			;TEXT POINTER GOES ON
  18BA'   C3 1457'              	JMP	INPCOM			;DO ASSIGNMENT
  18BD'   CD 1232'              NUMINS:	CALL	CHRGTR
  18C0'   F1                    	POP	PSW			;GET BACK VALTYPE OF SOURCE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-93
LINE INPUT, INPUT AND READ CODE

  18C1'   F5                    	PUSH	PSW			;SAVE BACK
  18C2'   01 18AA'              	LXI	B,DOASIG		;ASSIGNMENT IS COMPLICATED
                                					;EVEN FOR NUMERICS SO USE THE "LET" CODE
  18C5'   C5                    	PUSH	B			;SAVE ON STACK
  18C6'   DA 0000*              	JC	FIN			;IF NOT DOUBLE, CALL USUAL # INPUTTER
  18C9'   C3 0000*              	JMP	FINDBL			;ELSE CALL SPECIAL ROUTINE WHICH EXPECTS DOUBLES
  18CC'                         STRDN2:
  18CC'   2B                    	DCX	H
  18CD'   CD 1232'              	CALL	CHRGTR
  18D0'   CA 18D8'              	JZ	TRMOK
  18D3'   FE 2C                 	CPI	44
  18D5'   C2 1771'              	JNZ	TRMNOK			;ENDED PROPERLY?
  18D8'                         TRMOK:
  18D8'   E3                    	XTHL	
  18D9'   2B                    	DCX	H			;LOOK AT TERMINATOR
  18DA'   CD 1232'              	CALL	CHRGTR			;AND SET UP CONDITION CODES
  18DD'   C2 1864'              	JNZ	LOPDT2			;NOT ENDING, CHECK FOR COMMA
                                					;AND GET ANOTHER VARIABLE
                                					;TO FILL WITH DATA
                                
  18E0'   D1                    	POP	D			;POP OFF THE POINTER INTO DATA
  18E1'   3A 09C9'              	LDA	FLGINP			;FETCH THE STATEMENT TYPE FLAG
  18E4'   B7                    	ORA	A
                                					;INPUT STATEMENT
  18E5'   EB                    	XCHG	
  18E6'   C2 0000*              	JNZ	RESFIN			;UPDATE DATPTR
  18E9'   D5                    	PUSH	D			;SAVE THE TEXT POINTER
  18EA'   E1                    FINPRG:	POP	H			;GET BACK THE TEXT POINTER
  18EB'   C3 1713'              	JMP	FINPRT
                                ;
                                ; THE SEARCH FOR DATA STATMENTS IS MADE BY USING THE EXECUTION CODE
                                ; FOR DATA TO SKIP OVER STATEMENTS. THE START WORD OF EACH STATEMENT
                                ; IS COMPARED WITH $DATA. EACH NEW LINE NUMBER
                                ; IS STORED IN DATLIN SO THAT IF AN ERROR OCCURS WHILE READING
                                ; DATA THE ERROR MESSAGE WILL GIVE THE LINE NUMBER OF THE 
                                ; ILL-FORMATTED DATA
                                ;
  18EE'   CD 1415'              DATLOP:	CALL	DATA
  18F1'   B7                    DATFND:	ORA	A
  18F2'   C2 1907'              	JNZ	NOWLIN
  18F5'   23                    	INX	H
  18F6'   7E                    	MOV	A,M
  18F7'   23                    	INX	H
  18F8'   B6                    	ORA	M
  18F9'   1E 04                 	MVI	E,ERROD			;NO DATA IS ERROR ERROD
  18FB'   CA 0C06'              	JZ	ERROR			;IF SO COMPLAIN
  18FE'   23                    	INX	H			;SKIP PAST LINE #
  18FF'   5E                    	MOV	E,M			;GET DATA LINE #
  1900'   23                    	INX	H
  1901'   56                    	MOV	D,M
  1902'   EB                    	XCHG	
  1903'   22 09C6'              	SHLD	DATLIN
  1906'   EB                    	XCHG				;RESTORE TEXT POINTER
  1907'   CD 1232'              NOWLIN:	CALL	CHRGTR			;GET THE STATEMENT TYPE
  190A'   FE 84                 	CPI	$DATA			;IS IS "DATA"?
  190C'   C2 18EE'              	JNZ	DATLOP			;NOT DATA SO LOOK SOME MORE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-94
LINE INPUT, INPUT AND READ CODE

  190F'   C3 187A'              	JMP	DATBK			;CONTINUE READING
                                
                                
                                
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	1-95
LINE INPUT, INPUT AND READ CODE

                                
                                
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	2
FORMULA EVALUATION CODE

                                	SUBTTL	FORMULA EVALUATION CODE
                                
                                ;
                                ; THE FORMULA EVALUATOR STARTS WITH
                                ; [H,L] POINTING TO THE FIRST CHARACTER OF THE FORMULA.
                                ; AT THE END [H,L] POINTS TO THE TERMINATOR.
                                ; THE RESULT IS LEFT IN THE FAC.
                                ; ON RETURN [A] DOES NOT REFLECT THE TERMINATING CHARACTER
                                ;
                                ; THE FORMULA EVALUATOR USES THE OPERATOR TABLE (OPTAB)
                                ; TO DETERMINE PRECEDENCE AND DISPATCH ADDRESSES FOR
                                ; EACH OPERATOR.
                                ; A TEMPORARY RESULT ON THE STACK HAS THE FOLLOWING FORMAT
                                ;
                                ; THE ADDRESS OF 'RETAOP' -- THE PLACE TO RETURN ON COMPLETION
                                ; OF OPERATOR APPLICATION
                                ;
                                ; THE FLOATING POINT TEMPORARY RESULT
                                ;
                                ; THE ADDRESS OF THE OPERATOR ROUNTINE
                                ;
                                ; THE PRECEDENCE OF THE OPERATOR
                                ;
                                ; TOTAL 10 BYTES
                                ;
  1912'   CD 0000*              FRMEQL:	CALL	SYNCHR
  1915'   F0                    	DB	EQULTK			;CHECK FOR EQUAL SIGN
  1916'   C3 191D'              	JMP	FRMEVL			;EVALUATE FORMULA AND RETURN
  1919'   CD 0000*              FRMPRN:	CALL	SYNCHR
  191C'   28                    	DB	'('			;GET PAREN BEFORE FORMULA
  191D'   2B                    FRMEVL:	DCX	H			;BACK UP CHARACTER POINTER
  191E'   16 00                 FRMCHK:	MVI	D,0			;INITIAL DUMMY PRECEDENCE IS 0
  1920'   D5                    LPOPER:	PUSH	D			;SAVE PRECEDENCE
  1921'   0E 01                 	MVI	C,1			;EXTRA SPACE NEEDED FOR RETURN ADDRESS
  1923'   CD 0000*              	CALL	GETSTK			;MAKE SURE THERE IS ROOM FOR RECURSIVE CALLS
  1926'   CD 1AAE'              	CALL	EVAL			;EVALUATE SOMETHING
                                					;RESET OVERFLOW PRINTING BACK TO NORMAL
  1929'   AF                    	XRA	A			;(SET TO 1 AT FUNDSP TO SUPPRESS
  192A'   32 0B2C'              	STA	FLGOVC			;MULTIPLE OVERFLOW MESSAGES)
  192D'   22 09DF'              TSTOP:	SHLD	TEMP2			;SAVE TEXT POINTER
  1930'   2A 09DF'              RETAOP:	LHLD	TEMP2			;RESTORE TEXT PTR
  1933'   C1                    	POP	B			;POP OFF THE PRECEDENCE OF OLDOP
  1934'   7E                    NOTSTV:	MOV	A,M			;GET NEXT CHARACTER
  1935'   22 09C0'              	SHLD	TEMP3			;SAVE UPDATED CHARACTER POINTER
  1938'   FE EF                 	CPI	GREATK			;IS IT AN OPERATOR?
  193A'   D8                    	RC				;NO, ALL DONE (THIS CAN RESULT IN OPERATOR
                                					;APPLICATION OR ACTUAL RETURN)
  193B'   FE F2                 	CPI	LESSTK+1		;SOME KIND OF RELATIONAL?
  193D'   DA 19AA'              	JC	DORELS			;YES, DO IT
  1940'   D6 F2                 	SUI	PLUSTK			;SUBTRAXDCT OFFSET FOR FIRST ARITHMETIC
  1942'   5F                    	MOV	E,A			;MUST MULTIPLY BY 3 SINCE
                                					;OPTAB ENTRIES ARE 3 LONG
  1943'   C2 194F'              	JNZ	NTPLUS			;NOT ADDITION OP
  1946'   3A 098A'              	LDA	VALTYP			;SEE IF LEFT PART IS STRING
  1949'   FE 03                 	CPI	3			;SEE IF ITS A STRING
  194B'   7B                    	MOV	A,E			;REFETCH OP-VALUE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	2-1
FORMULA EVALUATION CODE

  194C'   CA 0000*              	JZ	CAT			;MUST BE CAT
  194F'                         NTPLUS:
  194F'   FE 0C                 	CPI	LSTOPK			;HIGHER THAN THE LAST OP?
  1951'   D0                    	RNC				;YES, MUST BE TERMINATOR
  1952'   21 037F'              	LXI	H,OPTAB			;CREATE INDEX INTO OPTAB
  1955'   16 00                 	MVI	D,0			;MAKE HIGH BYTE OF OFFSET=0
  1957'   19                    	DAD	D			;ADD IN CALCULATED OFFSET
  1958'   78                    	MOV	A,B			;[A] GETS OLD PRECEDENCE
  1959'   56                    	MOV	D,M			;REMEMBER NEW PRECEDENCE
  195A'   BA                    	CMP	D			;OLD-NEW
  195B'   D0                    	RNC				;MUST APPLY OLD OP
                                					;IF HAS GREATER OR = PRECEDENCE
                                					;NEW OPERATOR
                                
  195C'   C5                    	PUSH	B			;SAVE THE OLD PRECEDENCE
  195D'   01 1930'              	LXI	B,RETAOP		;PUT ON THE ADDRESS OF THE
  1960'   C5                    	PUSH	B			;PLACE TO RETURN TO AFTER OPERATOR APPLICATION
  1961'   7A                    	MOV	A,D			;SEE IF THE OPERATOR IS EXPONENTIATION
  1962'   FE 7F                 	CPI	127			;WHICH HAS PRECEDENCE 127
  1964'   CA 19C8'              	JZ	EXPSTK			;IF SO, "FRCSNG" AND MAKE A SPECIAL STACK ENTRY
  1967'   FE 51                 	CPI	81			;SEE IF THE OPERATOR IS "AND" OR "OR"
  1969'   DA 19D6'              	JC	ANDORD			;AND IF SO "FRCINT" AND
                                					;MAKE A SPECIAL STACK ENTRY
  196C'   E6 FE                 	ANI	254			;MAKE 123 AND 122 BOTH MAP TO 122
  196E'   FE 7A                 	CPI	122			;MAKE A SPECIAL CHECK FOR "MOD" AND "IDIV"
  1970'   CA 19D6'              	JZ	ANDORD			;IF SO, COERCE ARGUMENTS TO INTEGER
                                ; THIS CODE PUSHES THE CURRENT VALUE IN THE FAC
                                ; ONTO THE STACK, EXCEPT IN THE CASE OF STRINGS IN WHICH IT CALLS
                                ; TYPE MISMATCH ERROR. [D] AND [E] ARE PRESERVED.
                                ;
  1973'   21 0B27'              NUMREL:	LXI	H,FACLO			;SAVE THE VALUE OF THE FAC
  1976'   3A 098A'              PUSVAL:	LDA	VALTYP			;FIND OUT WHAT TYPE OF VALUE WE ARE SAVING
  1979'   D6 03                 	SUI	3			;SETUP THE CONDITION CODES
                                					;SET ZERO FOR STRINGS
  197B'   CA 0C04'              	JZ	TMERR
  197E'   B7                    	ORA	A			;SET PARITY -- CARRY UNAFFECTED SINCE OFF
  197F'   4E                    	MOV	C,M
  1980'   23                    	INX	H
  1981'   46                    	MOV	B,M
  1982'   C5                    	PUSH	B			;PUSH FACLO+0,1 ON THE STACK
  1983'   FA 199B'              	JM	VPUSHD			;ALL DONE IF THE DATA WAS AN INTEGER
  1986'   23                    	INX	H
  1987'   4E                    	MOV	C,M
  1988'   23                    	INX	H
  1989'   46                    	MOV	B,M
  198A'   C5                    	PUSH	B			;PUSH FAC-1,0 ON THE STACK
  198B'   E2 199B'              	JPO	VPUSHD			;ALL DONE IF WE HAD A SNG
  198E'   23                    	INX	H
  198F'   21 0B23'              	LXI	H,DFACLO		;WE HAVE A DOUBLE PRECISON NUMBER
  1992'   4E                    	MOV	C,M			;PUSH ITS 4 LO BYTES ON THE STACK
  1993'   23                    	INX	H
  1994'   46                    	MOV	B,M
  1995'   23                    	INX	H
  1996'   C5                    	PUSH	B
  1997'   4E                    	MOV	C,M
  1998'   23                    	INX	H
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	2-2
FORMULA EVALUATION CODE

  1999'   46                    	MOV	B,M
  199A'   C5                    	PUSH	B			;USER-DEFINED FUNCTIONS REQUIRE THAT THE
                                					;[H,L] RETURNED POINTS AT THE LAST VALUE
                                					;BYTE AND NOT BEYOND IT
  199B'                         VPUSHD:
  199B'   C6 03                 	ADI	3			;FIX [A] TO BE THE VALTYP OF THE NUMBER
                                					;JUST PUSHED ON THE STACK
  199D'   4B                    	MOV	C,E			;[C]=OPERATOR NUMBER
  199E'   47                    	MOV	B,A			;[B]=TYPE OF VALUE ON THE STACK
  199F'   C5                    	PUSH	B			;SAVE THESE THINGS FOR APPLOP
  19A0'   01 19FF'              	LXI	B,APPLOP		;GENERAL OPERATOR APPLICATION
                                					;ROUTINE -- DOES TYPE CONVERSIONS
  19A3'   C5                    FINTMP:	PUSH	B			;SAVE PLACE TO GO
  19A4'   2A 09C0'              	LHLD	TEMP3			;REGET THE TEXT POINTER
  19A7'   C3 1920'              	JMP	LPOPER			;PUSH ON THE PRECEDENCE AND READ MORE FORMULA
  19AA'   16 00                 DORELS:	MVI	D,0			;ASSUME NO RELATION OPS
                                					;ALSO SETUP THE HIGH ORDER OF THE INDEX INTO OPTAB
  19AC'   D6 EF                 LOPREL:	SUI	GREATK			;IS THIS ONE RELATION?
  19AE'   DA 19E2'              	JC	FINREL			;RELATIONS ALL THROUGH
  0003                          NMREL	SET	LESSTK-GREATK+1
  19B1'   FE 03                 	CPI	NMREL			;IS IT REALLY RELATIONAL?
  19B3'   D2 19E2'              	JNC	FINREL			;NO JUST BIG
  19B6'   FE 01                 	CPI	1			;SET UP BITS BY MAPPING
  19B8'   17                    	RAL				;0 TO 1 1 TO 2 AND 2 TO 4
  19B9'   AA                    	XRA	D			;BRING IN THE OLD BITS
  19BA'   BA                    	CMP	D			;MAKE SURE RESULT IS BIGGER
  19BB'   57                    	MOV	D,A			;SAVE THE MASK
  19BC'   DA 0BEC'              	JC	SNERR			;DON'T ALLOW TWO OF THE SAME
  19BF'   22 09C0'              	SHLD	TEMP3			;SAVE CHARACTER POINTER
  19C2'   CD 1232'              	CALL	CHRGTR			;GET THE NEXT CANDIDATE
  19C5'   C3 19AC'              	JMP	LOPREL
                                ;
                                ; FOR EXPONENTIATION WE WANT TO FORCE THE CURRENT VALUE IN THE FAC
                                ; TO BE SINGLE PRECISION. WHEN APPLICATION TIME COMES WE FORCE
                                ; THE RIGHT HAND OPERAND TO SINGLE PRECISION AS WELL
                                ;
                                	EXTRN	FPWRQ
  19C8'   CD 0000*              EXPSTK:	CALL	FRCSNG			;COERCE LEFT HAND OPERAND
  19CB'   CD 0000*              	CALL	PUSHF			;PUT IT ON THE STACK
  19CE'   01 0000*              	LXI	B,FPWRQ			;PLACE TO COERCE RIGHT HAND
                                					;OPERAND AND DO EXPONENTIATION
  19D1'   16 7F                 	MVI	D,127			;RESTORE THE PRECEDENCE
  19D3'   C3 19A3'              	JMP	FINTMP			;FINISH ENTRY AND EVALUATE MORE FORMULA
                                ;
                                ; FOR "AND" AND "OR" AND "\" AND "MOD" WE WANT TO FORCE THE CURRENT VALUE
                                ; IN THE FAC TO BE AN INTEGER, AND AT APPLICATION TIME FORCE THE RIGHT
                                ; HAND OPERAND TO BE AN INTEGER
                                ;
  19D6'   D5                    ANDORD:	PUSH	D			;SAVE THE PRECEDENCE
  19D7'   CD 0000*              	CALL	FRCINT
  19DA'   D1                    	POP	D			;[D]=PRECEDENCE
  19DB'   E5                    	PUSH	H			;PUSH THE LEFT HAND OPERAND
  19DC'   01 1C90'              	LXI	B,DANDOR		;"AND" AND "OR" DOER
  19DF'   C3 19A3'              	JMP	FINTMP			;PUSH ON THIS ADDRESS,PRECEDENCE
                                					;AND CONTINUE EVALUATION
                                ;
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	2-3
FORMULA EVALUATION CODE

                                ; HERE TO BUILD AN ENTRY FOR A RELATIONAL OPERATOR
                                ; STRINGS ARE TREATED SPECIALLY. NUMERIC COMPARES ARE DIFFERENT
                                ; FROM MOST OPERATOR ENTRIES ONLY IN THE FACT THAT AT THE
                                ; BOTTOM INSTEAD OF HAVING RETAOP, DOCMP AND THE RELATIONAL
                                ; BITS ARE STORED. STRINGS HAVE STRCMP,THE POINTER AT THE STRING DESCRIPTOR,
                                ; DOCMP AND THE RELATIONAL BITS.
                                ;
  19E2'   78                    FINREL:	MOV	A,B			;[A]=OLD PRECEDENCE
  19E3'   FE 64                 	CPI	100			;RELATIONALS HAVE PRECEDENCE 100
  19E5'   D0                    	RNC				;APPLY EARLIER OPERATOR IF IT HAS
                                					;HIGHER PRECEDENCE
  19E6'   C5                    	PUSH	B			;SAVE THE OLD PRECEDENCE
  19E7'   D5                    	PUSH	D			;SAVE [D]=RELATIONAL BITS
  19E8'   11 6404               	LXI	D,0+256*100+OPCNT	;[D]=PRECEDENCE=100
                                					;[E]=DISPATCH OFFSET FOR
                                					;COMPARES IN APPLOP=4
                                					;IN CASE THIS IS A NUMERIC COMPARE
  19EB'   21 1C5D'              	LXI	H,DOCMP			;ROUTINE TO TAKE COMPARE ROUTINE RESULT
                                					;AND RELATIONAL BITS AND RETURN THE ANSWER
  19EE'   E5                    	PUSH	H			;DOES A JMP TO RETAOP WHEN DONE
  19EF'   CD 1C7F'              	CALL	GETYPR			;SEE IF WE HAVE A NUMERIC COMPARE
  19F2'   C2 1973'              	JNZ	NUMREL			;YES, BUILD AN APPLOP ENTRY
  19F5'   2A 0B27'              	LHLD	FACLO			;GET THE POINTER AT THE STRING DESCRIPTOR
  19F8'   E5                    	PUSH	H			;SAVE IT FOR STRCMP
  19F9'   01 0000*              	LXI	B,STRCMP		;STRING COMPARE ROUTINE
  19FC'   C3 19A3'              	JMP	FINTMP			;PUSH THE ADDRESS, REGET THE TEXT POINTER
                                					;SAVE THE PRECEDENCE AND SCAN
                                					;MORE OF THE FORMULA
                                ;
                                ; APPLOP IS RETURNED TO WHEN IT IS TIME TO APPLY AN ARITHMETIC
                                ; OR NUMERIC COMPARISON OPERATION.
                                ; THE STACK HAS A DOUBLE BYTE ENTRY WITH THE OPERATOR
                                ; NUMBER AND THE VALTYP OF THE VALUE ON THE STACK.
                                ; APPLOP DECIDES WHAT VALUE LEVEL THE OPERATION
                                ; WILL OCCUR AT, AND CONVERTS THE ARGUMENTS. APPLOP
                                ; USES DIFFERENT CALLING CONVENTIONS FOR EACH VALUE TYPE.
                                ; INTEGERS: LEFT IN [D,E] RIGHT IN [H,L]
                                ; SINGLES:  LEFT IN [B,C,D,E] RIGHT IN THE FAC
                                ; DOUBLES:  LEFT IN FAC   RIGHT IN ARG
                                ;
  19FF'   C1                    APPLOP:	POP	B			;[B]=STACK OPERAND VALUE TYPE
                                					;[C]=OPERATOR OFFSET
  1A00'   79                    	MOV	A,C			;SAVE IN MEMORY SINCE THE STACK WILL BE BUSY
  1A01'   32 098B'              	STA	OPRTYP			;A RAM LOCATION
  1A04'   3A 098A'              	LDA	VALTYP			;GET VALTYP OF FAC
  1A07'   B8                    	CMP	B			;ARE VALTYPES THE SAME?
  1A08'   C2 1A18'              	JNZ	VALNSM			;NO
  1A0B'   FE 02                 	CPI	2			;INTEGER?
  1A0D'   CA 1A34'              	JZ	INTDPC			;YES, DISPATCH!!
  1A10'   FE 04                 	CPI	4			;SINGLE?
  1A12'   CA 1A82'              	JZ	SNGDPC			;YES, DISPATCH!!
  1A15'   D2 1A47'              	JNC	DBLDPC			;MUST BE DOUBLE, DISPATCH!!
  1A18'   57                    VALNSM:	MOV	D,A			;SAVE IN [D]
  1A19'   78                    	MOV	A,B			;CHECK FOR DOUBLE
  1A1A'   FE 08                 	CPI	8			;PRECISION ENTRY ON THE STACK
  1A1C'   CA 1A44'              	JZ	STKDBL			;FORCE FAC TO DOUBLE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	2-4
FORMULA EVALUATION CODE

  1A1F'   7A                    	MOV	A,D			;GET VALTYPE OF FAC
  1A20'   FE 08                 	CPI	8			;AND IF SO, CONVERT THE STACK OPERAND
  1A22'   CA 1A6B'              	JZ	FACDBL			;TO DOUBLE PRECISION
  1A25'   78                    	MOV	A,B			;SEE IF THE STACK ENTRY IS SINGLE
  1A26'   FE 04                 	CPI	4			;PRECISION AND IF SO, CONVERT
  1A28'   CA 1A7F'              	JZ	STKSNG			;THE FAC TO SINGLE PRECISION
  1A2B'   7A                    	MOV	A,D			;SEE IF THE FAC IS SINGLE PRECISION
  1A2C'   FE 03                 	CPI	3			;AND IF SO CONVERT THE STACK TO SINGLE
  1A2E'   CA 0C04'              	JZ	TMERR			;BLOW UP ON RIGHT HAND STRING OPERAND
  1A31'   D2 1A8A'              	JNC	FACSNG			;PRECISION
                                					;NOTE: THE STACK MUST BE INTEGER AT THIS POINT
  1A34'   21 03A9'              INTDPC:	LXI	H,INTDSP		;INTEGER INTEGER CASE
  1A37'   06 00                 	MVI	B,0			;SPECIAL DISPATCH FOR SPEED
  1A39'   09                    	DAD	B			;[H,L] POINTS TO THE ADDRESS TO GO TO 
  1A3A'   09                    	DAD	B
  1A3B'   4E                    	MOV	C,M			;[B,C]=ROUTINE ADDRESS
  1A3C'   23                    	INX	H
  1A3D'   46                    	MOV	B,M
  1A3E'   D1                    	POP	D			;[D,E]=LEFT HAND OPERAND
  1A3F'   2A 0B27'              	LHLD	FACLO			;[H,L]=RIGHT HAND OPERAND
  1A42'   C5                    	PUSH	B			;DISPATCH
  1A43'   C9                    	RET	
                                ;
                                ; THE STACK OPERAND IS DOUBLE PRECISION, SO
                                ; THE FAC MUST BE FORCED TO DOUBLE PRECISION, MOVED INTO ARG
                                ; AND THE STACK VALUE POPED INTO THE FAC
                                ;
  1A44'   CD 0000*              STKDBL:	CALL	FRCDBL			;MAKE THE FAC DOUBLE PRECISION
  1A47'   CD 0000*              DBLDPC:	CALL	VMOVAF			;MOVE THE FAC INTO ARG
  1A4A'   E1                    	POP	H			;POP OFF THE STACK OPERAND INTO THE FAC
  1A4B'   22 0B25'              	SHLD	DFACLO+2
  1A4E'   E1                    	POP	H
  1A4F'   22 0B23'              	SHLD	DFACLO			;STORE LOW BYTES AWAY
  1A52'   C1                    SNGDBL:	POP	B
  1A53'   D1                    	POP	D
                                					;POP OFF A FOUR BYTE VALUE
  1A54'   CD 0000*              	CALL	MOVFR			;INTO THE FAC
  1A57'   CD 0000*              SETDBL:	CALL	FRCDBL			;MAKE SURE THE LEFT OPERAND IS
                                					;DOUBLE PRECISION
  1A5A'   21 0395'              	LXI	H,DBLDSP		;DISPATCH TO A DOUBLE PRECISION ROUTINE
  1A5D'   3A 098B'              DODSP:	LDA	OPRTYP			;RECALL WHICH OPERAND IT WAS
  1A60'   07                    	RLC				;CREATE A DISPATCH OFFSET, SINCE
                                					;TABLE ADDRESSES ARE TWO BYTES
  1A61'   85                    	ADD	L			;ADD LOW BYTE OF ADDRESS
  1A62'   6F                    	MOV	L,A			;SAVE BACK
  1A63'   8C                    	ADC	H			;ADD HIGH BYTE
  1A64'   95                    	SUB	L			;SUBTRACT LOW
  1A65'   67                    	MOV	H,A			;RESULT BACK
  1A66'   7E                    	MOV	A,M			;GET THE ADDRESS
  1A67'   23                    	INX	H
  1A68'   66                    	MOV	H,M
  1A69'   6F                    	MOV	L,A
  1A6A'   E9                    	PCHL				;AND PERFORM THE OPERATION, RETURNING
                                					;TO RETAOP, EXCEPT FOR COMPARES WHICH
                                					;RETURN TO DOCMP
                                ;
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	2-5
FORMULA EVALUATION CODE

                                ; THE FAC IS DOUBLE PRECISION AND THE STACK IS EITHER
                                ; INTEGER OR SINGLE PRECISION AND MUST BE CONVERTED
                                ; 
  1A6B'   C5                    FACDBL:	PUSH	B			;SAVE THE STACK VALUE TYPE
  1A6C'   CD 0000*              	CALL	VMOVAF			;MOVE THE FAC INTO ARG
  1A6F'   F1                    	POP	PSW			;POP THE STACK VALUE TYPE INTO [A]
  1A70'   32 098A'              	STA	VALTYP			;PUT IT IN VALTYP FOR THE FORCE
                                					;ROUTINE
  1A73'   FE 04                 	CPI	4			;SEE IF ITS SINGLE, SO WE KNOW
                                					;HOW TO POP THE VALUE OFF
  1A75'   CA 1A52'              	JZ	SNGDBL			;IT'S SINGLE PRECISION
                                					;SO DO A POPR / CALL MOVFR
  1A78'   E1                    	POP	H			;POP OFF THE INTEGER VALUE
  1A79'   22 0B27'              	SHLD	FACLO			;SAVE IT FOR CONVERSION
  1A7C'   C3 1A57'              	JMP	SETDBL			;SET IT UP
                                ;
                                ; THIS IS THE CASE WHERE THE STACK IS SINGLE PRECISION
                                ; AND THE FAC IS EITHER SINGLE PRECISION OR INTEGER
                                ;
  1A7F'   CD 0000*              STKSNG:	CALL	FRCSNG			;CONVERT THE FAC IF NECESSARY
  1A82'   C1                    SNGDPC:	POP	B
  1A83'   D1                    	POP	D
                                					;PUT THE LEFT HAND OPERAND IN THE REGISTERS
  1A84'   21 039F'              SNGDO:	LXI	H,SNGDSP		;SETUP THE DISPATCH ADDRESS
                                					;FOR THE SINGLE PRECISION OPERATOR ROUTINES
  1A87'   C3 1A5D'              	JMP	DODSP			;DISPATCH
                                ;
                                ; THIS IS THE CASE WHERE THE FAC IS SINGLE PRECISION AND THE STACK
                                ; IS AN INTEGER. 
                                ;
  1A8A'   E1                    FACSNG:	POP	H			;POP OFF THE INTEGER ON THE STACK
  1A8B'   CD 0000*              	CALL	PUSHF			;SAVE THE FAC ON THE STACK
  1A8E'   CD 0000*              	CALL	CONSIH			;CONVERT [H,L] TO A SINGLE PRECISION
                                					;NUMBER IN THE FAC
  1A91'   CD 0000*              	CALL	MOVRF			;PUT THE LEFT HAND OPERAND IN THE REGISTERS
  1A94'   E1                    	POP	H			;RESTORE THE FAC
  1A95'   22 0B29'              	SHLD	FAC-1			;FROM THE STACK
  1A98'   E1                    	POP	H
  1A99'   22 0B27'              	SHLD	FACLO
  1A9C'   C3 1A84'              	JMP	SNGDO			;PERFORM THE OPERATION
                                ;
                                ; HERE TO DO INTEGER DIVISION. SINCE WE WANT 1/3 TO BE
                                ; .333333 AND NOT ZERO WE HAVE TO FORCE BOTH ARGUMENTS
                                ; TO BE SINGLE-PRECISION FLOATING POINT NUMBERS
                                ; AND USE FDIV
                                ;
  1A9F'   E5                    INTDIV:	PUSH	H			;SAVE THE RIGHT HAND ARGUMENT
  1AA0'   EB                    	XCHG				;[H,L]=LEFT HAND ARGUMENT
  1AA1'   CD 0000*              	CALL	CONSIH			;CONVERT [H,L] TO A SINGLE-PRECISION
                                					;NUMBER IN THE FAC
  1AA4'   E1                    	POP	H			;GET BACK THE RIGHT HAND ARGUMENT
  1AA5'   CD 0000*              	CALL	PUSHF			;PUSH THE CONVERTED LEFT HAND ARGUMENT
                                					;ONTO THE STACK
  1AA8'   CD 0000*              	CALL	CONSIH			;CONVERT THE RIGHT HAND ARGUMENT TO A
                                					;SINGLE PRECISION NUMBER IN THE FAC
  1AAB'   C3 0000*              	JMP	FDIVT			;DO THE DIVISION AFTER POPING INTO THE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	2-6
FORMULA EVALUATION CODE

                                					;REGISTERS THE LEFT HAND ARGUMENT
                                
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	2-7
FORMULA EVALUATION CODE

                                
                                	SUBTTL	EVAL - EVALUATE VARIABLE, CONSTANT, FUNCTION CALL
  1AAE'                         EVAL:
  1AAE'   CD 1232'              	CALL	CHRGTR
  1AB1'   CA 0C01'              	JZ	MOERR			;TEST FOR MISSING OPERAND - IF NONE GIVE ERROR
  1AB4'   DA 0000*              	JC	FIN			;IF NUMERIC, INTERPRET CONSTANT
  1AB7'   CD 0000*              	CALL	ISLET2			;VARIABLE NAME?
  1ABA'   D2 1B65'              	JNC	ISVAR			;AN ALPHABETIC CHARACTER MEANS YES
  1ABD'   FE 20                 	CPI	DBLCON+1		;IS IT AN EMBEDED CONSTANT
  1ABF'   DA 12B8'              	JC	CONFAC			;RESCAN THE TOKEN & RESTORE OLD TEXT PTR
  1AC2'   3C                    	INR	A			;IS IT A FUNCTION CALL (PRECEDED BY 377)
  1AC3'   CA 1BEE'              	JZ	ISFUN			;YES, DO IT
  1AC6'   3D                    	DCR	A			;FIX A BACK
  1AC7'   FE F2                 	CPI	PLUSTK			;IGNORE "+"
  1AC9'   CA 1AAE'              	JZ	EVAL
  1ACC'   FE F3                 	CPI	MINUTK			;NEGATION?
  1ACE'   CA 1B57'              	JZ	DOMIN
  1AD1'   FE 22                 	CPI	34			;STRING CONSTANT?
  1AD3'   CA 0000*              	JZ	STRLTI			;IF SO BUILD A DESCRIPTOR IN A TEMPORARY
                                					;DESCRIPTOR LOCATION AND PUT A POINTER TO THE
                                					;DESCRIPTOR IN FACLO.
  1AD6'   FE D5                 	CPI	NOTTK			;CHECK FOR "NOT" OPERATOR
  1AD8'   CA 1C6A'              	JZ	NOTER
  1ADB'   FE 26                 	CPI	'&'			;OCTAL CONSTANT?
  1ADD'   CA 1B84'              	JZ	OCTCNS
  1AE0'   FE D7                 	CPI	ERCTK
  1AE2'   C2 1AF1'              	JNZ	NTERC			;NO, TRY OTHER POSSIBILITIES
  1AE5'   CD 1232'              	CALL	CHRGTR			;GRAB FOLLOWING CHAR
                                					;IS IT A DISK ERROR CALL?
  1AE8'   3A 06AD'              	LDA	ERRFLG			;GET THE ERROR CODE.
                                					;"CPI OVER NEXT BYTE
  1AEB'   E5                    NTDERC:	PUSH	H			;SAVE TEXT POINTER
  1AEC'   CD 1CEF'              	CALL	SNGFLT			;RETURN THE VALUE
  1AEF'   E1                    	POP	H			;RESTORE TEXT POINTER
  1AF0'   C9                    	RET				;ALL DONE.
                                
  1AF1'   FE D6                 NTERC:	CPI	ERLTK			;ERROR LINE NUMBER VARIABLE.
  1AF3'   C2 1B02'              	JNZ	NTERL			;NO, TRY MORE THINGS.
  1AF6'   CD 1232'              	CALL	CHRGTR			;GET FOLLOWING CHARACTER
  1AF9'   E5                    	PUSH	H			;SAVE TEXT POINTER
  1AFA'   2A 09D6'              	LHLD	ERRLIN			;GET THE OFFENDING LINE #
  1AFD'   CD 0000*              	CALL	INEG2			;FLOAT 2 BYTE UNSINGED INT
  1B00'   E1                    	POP	H			;RESTORE TEXT POINTER
  1B01'   C9                    	RET				;RETURN
  1B02'                         NTERL:
  1B02'   FE DC                 	CPI	$VARPT			;VARPTR CALL?
  1B04'   C2 1B31'              	JNZ	NTVARP			;NO
  1B07'   CD 1232'              	CALL	CHRGTR			;EAT CHAR AFTER
  1B0A'   CD 0000*              	CALL	SYNCHR
  1B0D'   28                    	DB	'('			;EAT LEFT PAREN
                                	EXTRN	GETPTR
  1B0E'   FE 23                 	CPI	'#'			;WANT POINTER TO FILE?
  1B10'   C2 1B1E'              	JNZ	NVRFIL			;NO, MUST BE VARIABLE
  1B13'   CD 1F88'              	CALL	GTBYTC			;READ FILE #
  1B16'   E5                    	PUSH	H			;SAVE TEXT PTR
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	2-8
EVAL - EVALUATE VARIABLE, CONSTANT, FUNCTION CALL

  1B17'   CD 0000*              	CALL	GETPTR			;GET PTR TO FILE
  1B1A'   E1                    	POP	H			;RESTORE TEXT PTR
  1B1B'   C3 1B21'              	JMP	VARRET
  1B1E'                         NVRFIL:
  1B1E'   CD 0000*              	CALL	PTRGET			;GET ADDRESS OF VARIABLE
                                	PUBLIC	VARRET
  1B21'   CD 0000*              VARRET:	CALL	SYNCHR
  1B24'   29                    	DB	')'			;EAT RIGHT PAREN
  1B25'   E5                    	PUSH	H			;SAVE TEXT POINTER
  1B26'   EB                    	XCHG				;GET VALUE TO RETURN IN [H,L]
  1B27'   7C                    	MOV	A,H			;MAKE SURE NOT UNDEFINED VAR
  1B28'   B5                    	ORA	L			;SET CC'S. ZERO IF UNDEF
  1B29'   CA 134A'              	JZ	FCERR			;ALL OVER IF UNDEF (DONT WANT
                                					;USER POKING INTO ZERO IF HE'S
                                					;TOO LAZY TO CHECK
  1B2C'   CD 0000*              	CALL	MAKINT			;MAKE IT AN INT
  1B2F'   E1                    	POP	H			;RESTORE TEXT POINTER
  1B30'   C9                    	RET	
  1B31'                         NTVARP:
  1B31'   FE D2                 	CPI	USRTK			;USER ASSEMBLY LANGUAGE ROUTINE??
  1B33'   CA 1CF5'              	JZ	USRFN			;GO HANDLE IT
  1B36'   FE DA                 	CPI	INSRTK			;IS IT THE INSTR FUNCTION??
  1B38'   CA 0000*              	JZ	INSTR			;DISPATCH
                                	EXTRN	INKEY
  1B3B'   FE DD                 	CPI	$INKEY			;INKEY$ FUNCTION?
  1B3D'   CA 0000*              	JZ	INKEY			;GO DO IT
  1B40'   FE D8                 	CPI	$STRIN			;STRING FUNCTION?
  1B42'   CA 0000*              	JZ	STRNG$			;YES, GO DO IT
                                	EXTRN	FIXINP
  1B45'   FE 85                 	CPI	$INPUT			;FIXED LENGTH INPUT?
  1B47'   CA 0000*              	JZ	FIXINP			;YES
  1B4A'   FE D3                 	CPI	FNTK			;USER-DEFINED FUNCTION?
  1B4C'   CA 1D6E'              	JZ	FNDOER
                                					;NUMBERED CHARACTERS ALLOWED
                                					;SO THERE IS NO NEED TO CHECK
                                					;THE UPPER BOUND
                                ; ONLY POSSIBILITY LEFT IS A FORMULA IN PARENTHESES
  1B4F'   CD 1919'              PARCHK:	CALL	FRMPRN			;RECURSIVELY EVALUATE THE FORMULA
  1B52'   CD 0000*              	CALL	SYNCHR
  1B55'   29                    	DB	')'
  1B56'   C9                    	RET	
  1B57'                         DOMIN:
  1B57'   16 7D                 	MVI	D,125			;A PRECEDENCE BELOW ^
                                					;BUT ABOVE ALL ELSE
  1B59'   CD 1920'              	CALL	LPOPER			;SO ^ GREATER THAN UNARY MINUS
  1B5C'   2A 09DF'              	LHLD	TEMP2			;GET TEXT POINTER
  1B5F'   E5                    	PUSH	H
  1B60'   CD 0000*              	CALL	VNEG
  1B63'                         LABBCK:					;FUNCTIONS THAT DON'T RETURN
                                					;STRING VALUES COME BACK HERE
  1B63'   E1                    	POP	H
  1B64'   C9                    	RET	
  1B65'   CD 0000*              ISVAR:	CALL	PTRGET			;GET A POINTER TO THE
                                					;VARIABLE IN [D,E]
  1B68'   E5                    RETVAR:	PUSH	H			;SAVE THE TEXT POINTER
  1B69'   EB                    	XCHG				;PUT THE POINTER TO THE VARIABLE VALUE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	2-9
EVAL - EVALUATE VARIABLE, CONSTANT, FUNCTION CALL

                                					;INTO [H,L]. IN THE CASE OF A STRING
                                					;THIS IS A POINTER TO A DESCRIPTOR AND NOT
                                					;AN ACTUAL VALUE
  1B6A'   22 0B27'              	SHLD	FACLO			;IN CASE IT'S STRING STORE THE POINTER
                                					;TO THE DESCRIPTOR IN FACLO.
  1B6D'   CD 1C7F'              	CALL	GETYPR			;FOR STRINGS WE JUST LEAVE
  1B70'   C4 0000*              	CNZ	VMOVFM			;A POINTER IN THE FAC
                                					;THE FAC USING [H,L] AS THE POINTER.
  1B73'   E1                    	POP	H			;RESTORE THE TEXT POINTER
  1B74'   C9                    	RET	
                                	PUBLIC	MAKUPL,MAKUPS
  1B75'   7E                    MAKUPL:	MOV	A,M			;GET CHAR FROM MEMORY
  1B76'   FE 61                 MAKUPS:	CPI	'A'+40O			;IS IT LOWER CASE RANGE
  1B78'   D8                    	RC				;LESS
  1B79'   FE 7B                 	CPI	'Z'+41O			;GREATER
  1B7B'   D0                    	RNC				;TEST
  1B7C'   E6 5F                 	ANI	137O			;MAKE UPPER CASE
  1B7E'   C9                    	RET				;DONE
                                	PUBLIC	CNSGET
  1B7F'                         CNSGET:
  1B7F'   FE 26                 	CPI	'&'			;OCTAL PERHAPS?
  1B81'   C2 135A'              	JNZ	LINGET
                                	PUBLIC	OCTCNS
  1B84'   11 0000               OCTCNS:	LXI	D,0			;INITIALIZE TO ZERO AND IGNORE OVERFLOW
  1B87'   CD 1232'              	CALL	CHRGTR			;GET FIRST CHAR
  1B8A'   CD 1B76'              	CALL	MAKUPS			;MAKE UPPER IF NESC.
  1B8D'   FE 4F                 	CPI	'O'			;OCTAL?
  1B8F'   CA 1BC8'              	JZ	LOPOCT			;IF SO, DO IT
  1B92'   FE 48                 	CPI	'H'			;HEX?
  1B94'   C2 1BC7'              	JNZ	LOPOC2			;THEN DO IT
  1B97'   06 05                 	MVI	B,5			;INIT DIGIT COUNT
  1B99'   23                    LOPHEX:	INX	H			;BUMP POINTER
  1B9A'   7E                    	MOV	A,M			;GET CHAR
  1B9B'   CD 1B76'              	CALL	MAKUPS			;MAKE UPPER CASE
  1B9E'   CD 0000*              	CALL	ISLET2			;FETCH CHAR, SEE IF ALPHA
  1BA1'   EB                    	XCHG				;SAVE [H,L]
  1BA2'   D2 1BB2'              	JNC	ALPTST			;YES, MAKE SURE LEGAL HEC
  1BA5'   FE 3A                 	CPI	'9'+1			;IS IT BIGGER THAN LARGEST DIGIT?
  1BA7'   D2 1BE9'              	JNC	OCTFIN			;YES, BE FORGIVING & RETURN
  1BAA'   D6 30                 	SUI	'0'			;CONVERT DIGIT, MAKE BINARY
  1BAC'   DA 1BE9'              	JC	OCTFIN			;BE FORGIVING IF NOT HEX DIGIT
  1BAF'   C3 1BB9'              	JMP	NXTHEX			;ADD IN OFFSET
  1BB2'   FE 47                 ALPTST:	CPI	'F'+1			;IS IT LEGAL HEX?
  1BB4'   D2 1BE9'              	JNC	HEXFIN			;YES, TERMINATE
  1BB7'   D6 37                 	SUI	'A'-10			;MAKE BINARY VALUE
  1BB9'   29                    NXTHEX:	DAD	H			;SHIFT RIGHT FOUR BITS
  1BBA'   29                    	DAD	H
  1BBB'   29                    	DAD	H
  1BBC'   29                    	DAD	H
  1BBD'   B5                    	ORA	L			;OR ON NEW DIGIT
  1BBE'   6F                    	MOV	L,A			;SAVE BACK
  1BBF'   05                    	DCR	B			;TOO MANY DIGITS?
  1BC0'   CA 0BFE'              	JZ	OVERR			;YUP.
  1BC3'   EB                    	XCHG				;GET TEXT POINTER BACK IN [H,L]
  1BC4'   C3 1B99'              	JMP	LOPHEX			;KEEP EATING
                                
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	2-10
EVAL - EVALUATE VARIABLE, CONSTANT, FUNCTION CALL

                                
  1BC7'   2B                    LOPOC2:	DCX	H			;REGET LAST CHARACTER
  1BC8'   CD 1232'              LOPOCT:	CALL	CHRGTR			;READ A DIGIT
  1BCB'   EB                    	XCHG				;RESULT INTO [H,L]
  1BCC'   D2 1BE9'              	JNC	OCTFIN			;OUT OF DIGITS MEANS DONE
  1BCF'   FE 38                 	CPI	'8'			;IS THIS AN OCTAL DIGIT
  1BD1'   D2 0BEC'              	JNC	SNERR			;NO, TOO BAD YOU WILL LOSE
  1BD4'   01 0BFE'              	LXI	B,OVERR			;WHERE TO GO ON OVERFLOW ERROR
  1BD7'   C5                    	PUSH	B			;SAVE ADDR ON STACK
  1BD8'   29                    	DAD	H			;MULTIPLY BY EIGHT
  1BD9'   D8                    	RC				;OVERFLOW ERROR
  1BDA'   29                    	DAD	H
  1BDB'   D8                    	RC				;OVERFLOW ERROR
  1BDC'   29                    	DAD	H
  1BDD'   D8                    	RC				;OVERFLOW ERROR
  1BDE'   C1                    	POP	B			;GET RID OF OVERR ADDR
  1BDF'   06 00                 	MVI	B,0			;SETUP TO ADD [B,C]
  1BE1'   D6 30                 	SUI	'0'
  1BE3'   4F                    	MOV	C,A
  1BE4'   09                    	DAD	B			;ADD IN THE DIGIT
  1BE5'   EB                    	XCHG				;PUT TEXT POINTER BACK IN [H,L]
  1BE6'   C3 1BC8'              	JMP	LOPOCT			;SCAN MORE DIGITS
  1BE9'                         HEXFIN:
  1BE9'                         OCTFIN:
  1BE9'                         HOCFIN:
  1BE9'   CD 0000*              	CALL	MAKINT			;SAVE AS AN INTEGER
  1BEC'   EB                    	XCHG				;[H,L]-TEXT POINTER
  1BED'   C9                    	RET	
  1BEE'                         ISFUN:
  1BEE'   23                    	INX	H			;BUMP SOURCE TEXT POINTER
  1BEF'   7E                    	MOV	A,M			;GET THE ACTUAL TOKEN FOR FN
  1BF0'   D6 81                 	SUI	ONEFUN			;MAKE INTO OFFSET
                                	EXTRN	RNDMON
  1BF2'   FE 07                 	CPI	$RND-ONEFUN		;IS IT RND?
  1BF4'   C2 1C03'              	JNZ	NTMRND			;IF NOT NO NEED TO CHECK MONADIC
  1BF7'   E5                    	PUSH	H			;SAVE TEXT POINTER
  1BF8'   CD 1232'              	CALL	CHRGTR			;SEE IF NEXT CHAR IS "("
  1BFB'   FE 28                 	CPI	'('
  1BFD'   E1                    	POP	H			;GET BACK THE OLD TEXT POINTER
  1BFE'   C2 0000*              	JNZ	RNDMON			;HANDLE MONADIC CASE
  1C01'   3E 07                 	MVI	A,$RND-ONEFUN
  1C03'                         NTMRND:
  1C03'   06 00                 	MVI	B,0
  1C05'   07                    	RLC				;MULTIPLY BY 2
  1C06'   4F                    	MOV	C,A
  1C07'   C5                    	PUSH	B			;SAVE THE FUNCTION # ON THE STACK
  1C08'   CD 1232'              	CALL	CHRGTR
  1C0B'   79                    	MOV	A,C			;LOOK AT FUNCTION #
  0005                          NUMGFN	SET	2*MIDTK-2*ONEFUN+1
  1C0C'   FE 05                 	CPI	NUMGFN			;IS IT PAST LASNUM?
  1C0E'   D2 1C2A'              	JNC	OKNORM			;NO, MUST BE A NORMAL FUNCTION
                                ;
                                ; MOST FUNCTIONS TAKE A SINGLE ARGUMENT.
                                ; THE RETURN ADDRESS OF THESE FUNCTIONS IS A SMALL ROUTINE
                                ; THAT CHECKS TO MAKE SURE VALTYP IS 0 (NUMERIC) AND POPS OFF
                                ; THE TEXT POINTER. SO NORMAL FUNCTIONS THAT RETURN STRING RESULTS (I.E. CHR$)
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	2-11
EVAL - EVALUATE VARIABLE, CONSTANT, FUNCTION CALL

                                ; MUST POP OFF THE RETURN ADDRESS OF LABBCK, AND POP OFF THE
                                ; TEXT POINTER AND THEN RETURN TO FRMEVL.
                                ;
                                ; THE SO CALLED "FUNNY" FUNCTIONS CAN TAKE MORE THAN ONE ARGUMENT.
                                ; THE FIRST OF WHICH MUST BE STRING AND THE SECOND OF WHICH
                                ; MUST BE A NUMBER BETWEEN 0 AND 256. THE TEXT POINTER IS
                                ; PASSED TO THESE FUNCTIONS SO ADDITIONAL ARGUMENTS
                                ; CAN BE READ. THE TEXT POINTER IS PASSED IN [D,E].
                                ; THE CLOSE PARENTHESIS MUST BE CHECKED AND RETURN IS DIRECTLY
                                ; TO FRMEVL WITH [H,L] SETUP AS THE TEXT POINTER POINTING BEYOND THE ")".
                                ; THE POINTER TO THE DESCRIPTOR OF THE STRING ARGUMENT
                                ; IS STORED ON THE STACK UNDERNEATH THE VALUE OF THE INTEGER
                                ; ARGUMENT (2 BYTES)
                                ;
                                ; FIRST ARGUMENT ALWAYS STRING -- SECOND INTEGER
  1C11'   CD 1919'              	CALL	FRMPRN			;EAT OPEN PAREN AND FIRST ARG
  1C14'   CD 0000*              	CALL	SYNCHR
  1C17'   2C                    	DB	44			;TWO ARGS SO COMMA MUST DELIMIT
  1C18'   CD 0000*              	CALL	CHKSTR			;MAKE SURE THE FIRST ONE WAS STRING
  1C1B'   EB                    	XCHG				;[D,E]=TXTPTR
  1C1C'   2A 0B27'              	LHLD	FACLO			;GET PTR AT STRING DESCRIPTOR
  1C1F'   E3                    	XTHL				;GET FUNCTION #
                                					;SAVE THE STRING PTR
  1C20'   E5                    	PUSH	H			;PUT THE FUNCTION # ON
  1C21'   EB                    	XCHG				;[H,L]=TXTPTR
  1C22'   CD 1F8B'              	CALL	GETBYT			;[E]=VALUE OF FORMULA
  1C25'   EB                    	XCHG				;TEXT POINTER INTO [D,E]
                                					;[H,L]=INT VALUE OF SECOND ARGUMENT
  1C26'   E3                    	XTHL				;SAVE INT VALUE OF SECOND ARG
                                					;[H,L]=FUNCTION NUMBER
  1C27'   C3 1C44'              	JMP	FINGO			;DISPATCH TO FUNCTION
  1C2A'                         OKNORM:
  1C2A'   CD 1B4F'              	CALL	PARCHK			;CHECK OUT THE ARGUMENT
                                					;AND MAKE SURE ITS FOLLOWED BY ")"
  1C2D'   E3                    	XTHL				;[H,L]=FUNCTION # AND SAVE TEXT POINTER
                                ;
                                ; CHECK IF SPECIAL COERCION MUST BE DONE FOR ONE OF THE TRANSCENDENTAL
                                ; FUNCTIONS (RND, SQR, COS, SIN, TAN, ATN, LOG, AND EXP)
                                ; THESE FUNCTIONS DO NOT LOOK AT VALTYP, BUT RATHER ASSUME THE
                                ; ARGUMENT PASSED IN THE FAC IS SINGLE PRECISION, SO FRCSNG
                                ; MUST BE CALLED BEFORE DISPATCHING TO THEM.
                                ;
  1C2E'   7D                    	MOV	A,L			;[A]=FUNCTION NUMBER
  000C                          BOTCON	SET	(SQRTK-ONEFUN)*2
  1C2F'   FE 0C                 	CPI	BOTCON			;LESS THAN SQUARE ROOT?
  1C31'   DA 1C3B'              	JC	NOTFRF			;DON'T FORCE THE ARGUMENT
  001B                          TOPCON	SET	(ATNTK-ONEFUN)*2+1
  1C34'   FE 1B                 	CPI	TOPCON			;BIGGER THAN ARC-TANGENT?
  1C36'   E5                    	PUSH	H			;SAVE THE FUNCTION NUMBER
  1C37'   DC 0000*              	CC	FRCSNG			;IF NOT, FORCE FAC TO SINGLE-PRECISION
  1C3A'   E1                    	POP	H			;RESTORE THE FUNCTION NUMBER
  1C3B'                         NOTFRF:
  1C3B'   11 1B63'              	LXI	D,LABBCK		;RETURN ADDRESS
  1C3E'   D5                    	PUSH	D			;MAKE THEM REALLY COME BACK
  1C3F'   3E 01                 	MVI	A,1			;FUNCTION SHOULD ONLY PRINT OVERFLOW ONCE
  1C41'   32 0B2C'              	STA	FLGOVC
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	2-12
EVAL - EVALUATE VARIABLE, CONSTANT, FUNCTION CALL

  1C44'   01 009F'              FINGO:	LXI	B,FUNDSP		;FUNCTION DISPATCH TABLE
  1C47'   09                    DISPAT:	DAD	B			;ADD ON THE OFFSET
  1C48'   4E                    	MOV	C,M			;FASTER THAN PUSHM
  1C49'   23                    	INX	H
  1C4A'   66                    	MOV	H,M
  1C4B'   69                    	MOV	L,C
  1C4C'   E9                    	PCHL				;GO PERFORM THE FUNCTION
                                
                                
                                ; THE FOLOWING ROUTINE IS CALLED FROM FIN IN F4
                                ; TO SCAN LEADING SIGNS FOR NUMBERS. IT WAS MOVED
                                ; TO F3 TO ELIMINATE BYTE EXTERNALS
                                	PUBLIC	MINPLS
  1C4D'                         MINPLS:
  1C4D'   15                    	DCR	D			;SET SIGN OF EXPONENT FLAG
  1C4E'   FE F3                 	CPI	MINUTK			;NEGATIVE EXPONENT?
  1C50'   C8                    	RZ	
  1C51'   FE 2D                 	CPI	'-'
  1C53'   C8                    	RZ	
  1C54'   14                    	INR	D			;NO, RESET FLAG
  1C55'   FE 2B                 	CPI	'+'
  1C57'   C8                    	RZ	
  1C58'   FE F2                 	CPI	PLUSTK			;IGNORE "+"
  1C5A'   C8                    	RZ	
  1C5B'   2B                    	DCX	H			;CHECK IF LAST CHARACTER WAS A DIGIT
  1C5C'   C9                    	RET				;RETURN WITH NON-ZERO SET
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	2-13
EVAL - EVALUATE VARIABLE, CONSTANT, FUNCTION CALL

                                
                                	SUBTTL	MORE FORMULA EVALUATION - LOGICAL, RELATIONAL OPS
  1C5D'   3C                    DOCMP:	INR	A			;SETUP BITS
  1C5E'   8F                    	ADC	A			;4=LESS 2=EQUAL 1=GREATER
  1C5F'   C1                    	POP	B			;WHAT DID HE WANT?
  1C60'   A0                    	ANA	B			;ANY BITS MATCH?
  1C61'   C6 FF                 	ADI	255			;MAP 0 TO 0
  1C63'   9F                    	SBB	A			;AND ALL OTHERS TO 377
  1C64'   CD 0000*              	CALL	CONIA			;CONVERT [A] TO AN INTEGER SIGNED
  1C67'   C3 1C7C'              	JMP	RETAPG			;RETURN FROM OPERATOR APPLICATION
                                					;PLACE SO THE TEXT POINTER
                                					;WILL GET SET UP TO WHAT IT WAS
                                					;WHEN LPOPER RETURNED.
  1C6A'   16 5A                 NOTER:	MVI	D,90			;"NOT" HAS PRECEDENCE 90, SO
  1C6C'   CD 1920'              	CALL	LPOPER			;FORMULA EVALUATION IS ENTERED WITH A DUMMY
                                					;ENTRY OF 90 ON THE STACK
  1C6F'   CD 0000*              	CALL	FRCINT			;COERCE THE ARGUMENT TO INTEGER
  1C72'   7D                    	MOV	A,L			;COMPLEMENT [H,L]
  1C73'   2F                    	CMA	
  1C74'   6F                    	MOV	L,A
  1C75'   7C                    	MOV	A,H
  1C76'   2F                    	CMA	
  1C77'   67                    	MOV	H,A
  1C78'   22 0B27'              	SHLD	FACLO			;UPDATE THE FAC
  1C7B'   C1                    	POP	B			;FRMEVL, AFTER SEEING THE PRECEDENCE
                                					;OF 90 THINKS IT IS APPLYING AN OPERATOR
                                					;SO IT HAS THE TEXT POINTER IN TEMP2 SO
                                
  1C7C'   C3 1930'              RETAPG:	JMP	RETAOP			;RETURN TO REFETCH IT
  1C7F'   3A 098A'              GETYPR:	LDA	VALTYP			;REPLACEMENT FOR "GETYPE" RST
  1C82'   FE 08                 	CPI	8
                                ;
                                ; CONTINUATION OF GETYPE RST
                                ;
                                
  1C84'   D2 1C8C'              CGETYP:	JNC	NCASE			;SPLIT OFF NO CARRY CASE
  1C87'   D6 03                 	SUI	3			;SET A CORRECTLY
  1C89'   B7                    	ORA	A			;NOW SET LOGICAL'S OK
  1C8A'   37                    	STC				;CARRY MUST BE SET
  1C8B'   C9                    	RET				;ALL DONE
                                
  1C8C'   D6 03                 NCASE:	SUI	3			;SUBTRACT CORRECTLY
  1C8E'   B7                    	ORA	A			;SET CC'S PROPERLY
  1C8F'   C9                    	RET				;RETURN
                                
                                ;
                                ; DANDOR APPLIES THE "AND" AND "OR" OPERATORS
                                ; AND SHOULD BE USED TO IMPLEMENT ALL LOGICAL OPERATORS.
                                ; WHENEVER AN OPERATOR IS APPLIED, ITS PRECEDENCE IS IN [B].
                                ; THIS FACT IS USED TO DISTINGUISH BETWEEN "AND" AND "OR".
                                ; THE RIGHT HAND ARGUMENT IS COERCED TO INTEGER, JUST AS
                                ; THE LEFT HAND ONE WAS WHEN IT WAS PUSHED ON THE STACK.
                                ;
  1C90'   C5                    DANDOR:	PUSH	B			;SAVE THE PRECEDENCE "OR"=70
  1C91'   CD 0000*              	CALL	FRCINT			;COERCE RIGHT HAND ARGUMENT TO INTEGER
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	2-14
MORE FORMULA EVALUATION - LOGICAL, RELATIONAL OPS

  1C94'   F1                    	POP	PSW			;GET BACK THE PRECEDENCE TO DISTINGUISH
                                					;"AND" AND "OR"
  1C95'   D1                    	POP	D			;POP OFF THE LEFT HAND ARGUMENT
  1C96'   FE 7A                 	CPI	122			;IS THE OPERATOR "MOD"?
  1C98'   CA 0000*              	JZ	IMOD			;IF SO, USE MONTE'S SPECIAL ROUTINE
  1C9B'   FE 7B                 	CPI	123			;IS THE OPERATOR "IDIV"?
  1C9D'   CA 0000*              	JZ	IDIV			;LET MONTE HANDLE IT
  1CA0'   01 1CF1'              	LXI	B,GIVINT		;PLACE TO RETURN WHEN DONE
  1CA3'   C5                    	PUSH	B			;SAVE ON STACK
  1CA4'   FE 46                 	CPI	70			;SET ZERO FOR "OR"
  1CA6'   C2 1CAF'              	JNZ	NOTOR
  1CA9'   7B                    	MOV	A,E			;SETUP LOW IN [A]
  1CAA'   B5                    	ORA	L
  1CAB'   6F                    	MOV	L,A
  1CAC'   7C                    	MOV	A,H
  1CAD'   B2                    	ORA	D
  1CAE'   C9                    	RET				;RETURN THE INTEGER [A,L]
  1CAF'                         NOTOR:
  1CAF'   FE 50                 	CPI	80			;AND?
  1CB1'   C2 1CBA'              	JNZ	NOTAND
  1CB4'   7B                    	MOV	A,E
  1CB5'   A5                    	ANA	L
  1CB6'   6F                    	MOV	L,A
  1CB7'   7C                    	MOV	A,H
  1CB8'   A2                    	ANA	D
  1CB9'   C9                    	RET				;RETURN THE INTEGER [A,L]
                                
  1CBA'   FE 3C                 NOTAND:	CPI	60			;XOR?
  1CBC'   C2 1CC5'              	JNZ	NOTXOR			;NO
  1CBF'   7B                    	MOV	A,E
  1CC0'   AD                    	XRA	L
  1CC1'   6F                    	MOV	L,A
  1CC2'   7C                    	MOV	A,H
  1CC3'   AA                    	XRA	D
  1CC4'   C9                    	RET	
                                
  1CC5'   FE 32                 NOTXOR:	CPI	50			;EQV?
  1CC7'   C2 1CD2'              	JNZ	NOTEQV			;NO
  1CCA'   7B                    	MOV	A,E			;LOW PART
  1CCB'   AD                    	XRA	L
  1CCC'   2F                    	CMA	
  1CCD'   6F                    	MOV	L,A
  1CCE'   7C                    	MOV	A,H
  1CCF'   AA                    	XRA	D
  1CD0'   2F                    	CMA	
  1CD1'   C9                    	RET	
                                ;FOR "IMP" USE A IMP B = NOT(A AND NOT(B))
  1CD2'   7D                    NOTEQV:	MOV	A,L			;MUST BE "IMP"
  1CD3'   2F                    	CMA	
  1CD4'   A3                    	ANA	E
  1CD5'   2F                    	CMA	
  1CD6'   6F                    	MOV	L,A
  1CD7'   7C                    	MOV	A,H
  1CD8'   2F                    	CMA	
  1CD9'   A2                    	ANA	D
  1CDA'   2F                    	CMA	
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	2-15
MORE FORMULA EVALUATION - LOGICAL, RELATIONAL OPS

  1CDB'   C9                    	RET	
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	2-16
MORE FORMULA EVALUATION - LOGICAL, RELATIONAL OPS

                                
                                ;
                                ; THIS ROUTINE SUBTRACTS [D,E] FROM [H,L]
                                ; AND FLOATS THE RESULT LEAVING IT IN FAC.
                                ;
  1CDC'   7D                    GIVDBL:	MOV	A,L			;[H,L]=[H,L]-[D,E]
  1CDD'   93                    	SUB	E
  1CDE'   6F                    	MOV	L,A
  1CDF'   7C                    	MOV	A,H
  1CE0'   9A                    	SBB	D
  1CE1'   67                    	MOV	H,A			;SAVE HIGH BYTE IN [H]
  1CE2'   C3 0000*              	JMP	INEG2			;FLOAT 2 BYTE UNSIGNED INT
  1CE5'   3A 06AF'              LPOS:	LDA	LPTPOS
  1CE8'   C3 1CEE'              	JMP	SNGFLI
  1CEB'                         POS:
  1CEB'   3A 0988'              	LDA	TTYPOS			;GET TELETYPE POSITION
                                					;SEE WHERE WE ARE
  1CEE'                         SNGFLI:
                                
                                					;IN ADDS VERSION TAB POSITIONS START AT COLUMN 1.
  1CEE'   3C                    	INR	A
                                	PUBLIC	SNGFLT
  1CEF'   6F                    SNGFLT:	MOV	L,A			;MAKE [A] AN UNSIGNED INTEGER
  1CF0'   AF                    	XRA	A
  1CF1'   67                    GIVINT:	MOV	H,A
  1CF2'   C3 0000*              	JMP	MAKINT
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	2-17
MORE FORMULA EVALUATION - LOGICAL, RELATIONAL OPS

                                
                                	SUBTTL	USER DEFINED (USR) ASSEMBLY LANGUAGE FUNCTION CODE
  1CF5'   CD 1D14'              USRFN:	CALL	SCNUSR			;SCAN THE USR#
  1CF8'   D5                    	PUSH	D			;SAVE POINTER
  1CF9'   CD 1B4F'              	CALL	PARCHK			;EAT LEFT PAREN AND FORMULA
  1CFC'   E3                    	XTHL				;SAVE TEXT POINTER & GET INDEX INTO USRTAB
  1CFD'   4E                    	MOV	C,M			;GET DISPATCH ADRESS
  1CFE'   23                    	INX	H			;BUMP POINTER
  1CFF'   46                    	MOV	B,M			;PICK UP 2ND BYTE OF ADDRESS
  1D00'   21 0000*              	LXI	H,POPHRT		;GET ADDRESS OF POP H RET
  1D03'   E5                    	PUSH	H			;PUSH IT ON
  1D04'   C5                    	PUSH	B			;SAVE ADDRESS OF USR ROUTINE
  1D05'   3A 098A'              	LDA	VALTYP			;GET ARGUMENT TYPE IN [A]
  1D08'   F5                    	PUSH	PSW			;SAVE VALTYP
  1D09'   FE 03                 	CPI	3			;STRING??
  1D0B'   CC 0000*              	CZ	FREFAC			;FREE IT UP
  1D0E'   F1                    	POP	PSW			;GET BACK VALTYP
  1D0F'   EB                    	XCHG				;MOVE POSSIBLE DESC. POINTER TO [D,E]
  1D10'   21 0B27'              	LXI	H,FACLO			;POINTER TO FAC IN [H,L]
  1D13'   C9                    	RET				;CALL USR ROUTINE
  1D14'   CD 1232'              SCNUSR:	CALL	CHRGTR			;GET A CHAR
  1D17'   01 0000               	LXI	B,0			;ASSUME USR0
  1D1A'   FE 1B                 	CPI	ONECON+10		;SINGLE BYTE INT EXPECTED
  1D1C'   D2 1D2D'              	JNC	NOARGU			;NO, MUST BE DEFAULTING TO USR0
  1D1F'   FE 11                 	CPI	ONECON			;IS IT SMALLER THAN ONECON
  1D21'   DA 1D2D'              	JC	NOARGU			;YES, ASSUME TRYING TO DEFAULT TO USR0
  1D24'   CD 1232'              USERCN:	CALL	CHRGTR			;SCAN PAST NEXT CHAR
  1D27'   3A 0991'              	LDA	CONLO			;GET VALUE OF 1 BYTER
                                					;YUP
  1D2A'   B7                    	ORA	A			;MAKE SURE CARRY IS OFF
  1D2B'   17                    	RAL				;MULTIPLY BY 2
  1D2C'   4F                    	MOV	C,A			;SAVE OFFSET IN [C]
  1D2D'   EB                    NOARGU:	XCHG				;SAVE TEXT POINTER IN [D,E]
  1D2E'   21 0697'              	LXI	H,USRTAB		;GET START OF TABLE
  1D31'   09                    	DAD	B			;ADD ON OFFSET
  1D32'   EB                    	XCHG				;RESTORE TEXT POINTER, ADDRESS TO [D,E]
  1D33'   C9                    	RET				;RETURN FROM SCAN ROUTINE
                                
  1D34'   CD 1D14'              DEFUSR:	CALL	SCNUSR			;SCAN THE USR NAME
  1D37'   D5                    	PUSH	D			;SAVE POINTER TO USRTAB ENTRY
  1D38'   CD 0000*              	CALL	SYNCHR
  1D3B'   F0                    	DB	EQULTK			;MUST HAVE EQUAL SIGN
  1D3C'   CD 1F6C'              	CALL	GETIN2			;GET THE ADDRESS
  1D3F'   E3                    	XTHL				;TEXT POINTER TO STACK, GET ADDRESS
  1D40'   73                    	MOV	M,E			;SAVE USR CALL ADDRESS
  1D41'   23                    	INX	H			;BUMP POINTER
  1D42'   72                    	MOV	M,D			;SAVE HIGH BYTE OF ADDRESS
  1D43'   E1                    	POP	H			;RESTORE TEXT POINTER
  1D44'   C9                    	RET				;RETURN TO NEWSTT
                                
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	2-18
USER DEFINED (USR) ASSEMBLY LANGUAGE FUNCTION CODE

                                
                                	SUBTTL	SIMPLE-USER-DEFINED-FUNCTION CODE
                                ;
                                ; IN THE 8K VERSION (SEE LATER COMMENT FOR EXTENDED)
                                ; NOTE ONLY SINGLE ARGUMENTS ARE ALLOWED TO FUNCTIONS
                                ; AND FUNCTIONS MUST BE OF THE SINGLE LINE FORM:
                                ; DEF FNA(X)=X^2+X-2
                                ; NO STRINGS CAN BE INVOLVED WITH THESE FUNCTIONS
                                ;
                                ; IDEA: CREATE A FUNNY SIMPLE VARIABLE ENTRY
                                ; WHOSE FIRST CHARACTER (SECOND WORD IN MEMORY)
                                ; HAS THE 200 BIT SET.
                                ; THE VALUE WILL BE:
                                ;
                                ; 	A TXTPTR TO THE FORMULA
                                ;	THE NAME OF THE PARAMETER VARIABLE
                                ;
                                ; FUNCTION NAMES CAN BE LIKE "FNA4"
                                ;
                                
  1D45'                         DEF:
  1D45'   FE D2                 	CPI	USRTK			;DEFINING THE CALL ADDRESS OF USR ROUTINE?
  1D47'   CA 1D34'              	JZ	DEFUSR			;YES, DO IT
  1D4A'   CD 1EED'              	CALL	GETFNM			;GET A POINTER TO THE FUNCTION NAME
  1D4D'   CD 1EDF'              	CALL	ERRDIR			;DEF IS "ILLEGAL DIRECT"
                                					;MEMORY, RESTORE THE TXTPTR
                                					;AND GO TO "DATA" SKIPPING THE
                                					;REST OF THE FORMULA
  1D50'   EB                    	XCHG				;[D,E] = THE TEXT POINTER AFTER THE FUNCTION
                                					;NAME AND [H,L] = POINTER AT PLACE TO STORE
                                					;VALUE OF THE FUNCTION VARIABLE
  1D51'   73                    	MOV	M,E			;SAVE THE TEXT POINTER AS THE VALUE
  1D52'   23                    	INX	H
  1D53'   72                    	MOV	M,D
  1D54'   EB                    	XCHG				;RESTORE THE TEXT POINTER TO [H,L]
  1D55'   7E                    	MOV	A,M			;GET NEXT CHAR
  1D56'   FE 28                 	CPI	'('			;DOES THIS FUNCTION HAVE ARGS?
  1D58'   C2 1415'              	JNZ	DATA			;NO
  1D5B'   CD 1232'              	CALL	CHRGTR
  1D5E'   CD 0000*              SCNLIS:	CALL	PTRGET			;GET POINTER TO DUMMY VAR(CREATE VAR)
  1D61'   7E                    	MOV	A,M			;GET TERMINATOR
  1D62'   FE 29                 	CPI	')'			;END OF ARG LIST?
  1D64'   CA 1415'              	JZ	DATA			;YES
  1D67'   CD 0000*              	CALL	SYNCHR
  1D6A'   2C                    	DB	44			;"," MUST FOLLOW THEN
  1D6B'   C3 1D5E'              	JMP	SCNLIS
                                
  1D6E'   CD 1EED'              FNDOER:	CALL	GETFNM			;GET A POINTER TO
  1D71'   3A 098A'              	LDA	VALTYP			;FIND OUT WHAT KIND OF FUNCTION IT IS
  1D74'   B7                    	ORA	A			;PUSH THIS [A] ON WITH A PSW WITH CARRY OFF
                                					;SO THAT WHEN VALUES ARE BEING POPPED OFF
                                					;AND RESTORED TO PARAMETERS WE WILL KNOW
                                					;WHEN TO STOP
                                					;WHEN A VALTYP IS POPPED OFF WITH
                                					;CARRY OFF
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	2-19
SIMPLE-USER-DEFINED-FUNCTION CODE

  1D75'   F5                    	PUSH	PSW			;SAVE SO THAT THE FINAL RESULT WILL
                                					;BE COERCED TO THE FUNCTION TYPE
  1D76'   22 09DF'              	SHLD	TEMP2			;SAVE THE TEXT POINTER THAT POINTS PAST
                                					;THE FUNCTION NAME IN THE CALL
  1D79'   EB                    	XCHG				;[H,L]=A POINTER TO THE VALUE OF FUNCTION
  1D7A'   7E                    	MOV	A,M			;[H,L]=VALUE OF THE FUNCTION
  1D7B'   23                    	INX	H			;WHICH IS A TEXT POINTER AT THE FORMAL
  1D7C'   66                    	MOV	H,M			;PARAMETER LIST IN THE DEFINITION
  1D7D'   6F                    	MOV	L,A
  1D7E'   B4                    	ORA	H			;A ZERO TEXT POINTER MEANS THE FUNCTION
                                					;WAS NEVER DEFINED
  1D7F'   CA 0BF8'              	JZ	UFERR			;IF SO, GIVEN AN "UNDEFINED FUNCTION" ERROR
  1D82'   7E                    	MOV	A,M			;SEE IF THERE ARE ANY PARAMETERS
  1D83'   FE 28                 	CPI	'('			;PARAMETER LIST STARTS WITH "(""
  1D85'   C2 1E37'              	JNZ	FINVLS			;SKIP OVER PARAMETER SETUP
  1D88'   CD 1232'              	CALL	CHRGTR			;GO PAST THE "("
  1D8B'   22 09C0'              	SHLD	TEMP3			;SAVE THE TEXT POINTER TO THE START OF THE
  1D8E'   EB                    	XCHG				;PARAMETER LIST.
  1D8F'   2A 09DF'              	LHLD	TEMP2			;NOW GET THE TEXT-POINTER FROM THE CALL
                                					;WHICH IS POINTING JUST PAST THE
                                					;FUNCTION NAME AT THE ARGUMENT LIST
  1D92'   CD 0000*              	CALL	SYNCHR
  1D95'   28                    	DB	'('			;MAKE SURE THE ARGUMENT LIST IS THERE
  1D96'   AF                    	XRA	A			;INDICATE END OF VALUES TO ASSIGN
  1D97'   F5                    	PUSH	PSW
  1D98'   E5                    	PUSH	H			;SAVE THE CALLERS TEXT POINTER
  1D99'   EB                    	XCHG				;GET THE POINTER TO THE BEGINNING OF THE
                                					;PARAMETER LIST
  1D9A'   3E 80                 ASGMOR:	MVI	A,128			;OUTLAW ARRAYS WHEN SCANNING
  1D9C'   32 09C8'              	STA	SUBFLG			;PARAMETERS
  1D9F'   CD 0000*              	CALL	PTRGET			;READ A PARAMETER
  1DA2'   EB                    	XCHG				;[D,E]=PARAMETER LIST TEXT,[H,L]=VARIABLE POINTER
  1DA3'   E3                    	XTHL				;SAVE THE VARIABLES POSITION AND
                                					;GET THE POINTER AT THE ARG LIST
  1DA4'   3A 098A'              	LDA	VALTYP			;AND ITS TYPE (FOR COERCION)
  1DA7'   F5                    	PUSH	PSW
  1DA8'   D5                    	PUSH	D			;SAVE THE TEXT POINTER INTO THE PARAMETER
  1DA9'   CD 191D'              	CALL	FRMEVL			;EVALUATE THE ARGUMENT
  1DAC'   22 09DF'              	SHLD	TEMP2			;SAVE THE ARGUMENT LIST POINTER
  1DAF'   E1                    	POP	H			;AND THE PARAMETER LIST POINTER
  1DB0'   22 09C0'              	SHLD	TEMP3
  1DB3'   F1                    	POP	PSW			;GET THE VALUE TYPE
  1DB4'   CD 1EC5'              	CALL	DOCNVF			;COERCE THE ARGUMENT
  1DB7'   0E 04                 	MVI	C,4			;MAKE SURE THERE IS ROOM FOR THE VALUE
  1DB9'   CD 0000*              	CALL	GETSTK
  1DBC'   21 FFF8               	LXI	H,0-8			;SAVE EIGHT PLACES
  1DBF'   39                    	DAD	SP
  1DC0'   F9                    	SPHL	
  1DC1'   CD 0000*              	CALL	VMOVMF			;PUT VALUE INTO RESERVED PLACE IN STACK
  1DC4'   3A 098A'              	LDA	VALTYP			;SAVE TYPE FOR ASSIGNMENT
  1DC7'   F5                    	PUSH	PSW
  1DC8'   2A 09DF'              	LHLD	TEMP2			;REGET THE ARGUMENT LIST POINTER
  1DCB'   7E                    	MOV	A,M			;SEE WHAT COMES AFTER THE ARGUMENT FORMULA
  1DCC'   FE 29                 	CPI	')'			;IS THE ARGUMENT LIST ENDING?
  1DCE'   CA 1DE4'              	JZ	POPASG			;MAKE SURE THE ARGUMENT LIST ALSO ENDED
  1DD1'   CD 0000*              	CALL	SYNCHR
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	2-20
SIMPLE-USER-DEFINED-FUNCTION CODE

  1DD4'   2C                    	DB	54O			;SKIP OVER ARGUMENT COMMA
  1DD5'   E5                    	PUSH	H			;SAVE THE ARGUMENT LIST TEXT POINTER
  1DD6'   2A 09C0'              	LHLD	TEMP3			;GET THE TEXT POINTER INTO THE DEFINTION'S
                                					;PARAMETER LIST
  1DD9'   CD 0000*              	CALL	SYNCHR
  1DDC'   2C                    	DB	54O			;SKIP OVER THE PARAMETER LIST COMMA
  1DDD'   C3 1D9A'              	JMP	ASGMOR			;AND BIND THE REST OF THE PARAMETERS
  1DE0'   F1                    POPAS2:	POP	PSW			;IF ASSIGNMENT IS SUCESSFUL UPDATE PRMLN2
  1DE1'   32 0A71'              	STA	PRMLN2			;INDICATE NEW VARIABLE IS IN PLACE
  1DE4'   F1                    POPASG:	POP	PSW			;GET THE VALUE TYPE
  1DE5'   B7                    	ORA	A
  1DE6'   CA 1E28'              	JZ	FINASG			;ZERO MEANS NO MORE LEFT TO POP AND ASSIGN
  1DE9'   32 098A'              	STA	VALTYP
  1DEC'   21 0000               	LXI	H,0			;POINT INTO STACK
  1DEF'   39                    	DAD	SP			;TO GET SAVED VALUE
  1DF0'   CD 0000*              	CALL	VMOVFM			;PUT VALUE INTO FAC
  1DF3'   21 0008               	LXI	H,0+8			;FREE UP STACK AREA
  1DF6'   39                    	DAD	SP
  1DF7'   F9                    	SPHL	
  1DF8'   D1                    	POP	D			;GET PLACE TO STORE TO
  1DF9'   2E 03                 	MVI	L,3			;CALCULATE THE SIZE OF THE LOOKS (NAME)
  1DFB'   2C                    LPSIZL:	INR	L			;INCREMENT SIZE
  1DFC'   1B                    	DCX	D			;POINT AT PREVIOUS CHARACTER
  1DFD'   1A                    	LDAX	D			;SEE IF IT IS THE LENGTH OR ANOTHER CHARACTER
  1DFE'   B7                    	ORA	A
  1DFF'   FA 1DFB'              	JM	LPSIZL			;HIGH BIT INDICATES STILL PART OF NAME
  1E02'   1B                    	DCX	D			;BACK UP OVER LOOKS
  1E03'   1B                    	DCX	D
  1E04'   1B                    	DCX	D
  1E05'   3A 098A'              	LDA	VALTYP			;GET SIZE OF VALUE
  1E08'   85                    	ADD	L			;ADD ON SIZE OF NAME
  1E09'   47                    	MOV	B,A			;SAVE TOTAL LENGTH IN [B]
  1E0A'   3A 0A71'              	LDA	PRMLN2			;GET CURRENT SIZE OF BLOCK
  1E0D'   4F                    	MOV	C,A			;SAVE IN [C]
  1E0E'   80                    	ADD	B			;GET POTENTIAL NEW SIZE
  1E0F'   FE 64                 	CPI	PRMSIZ			;CAN'T EXCEED ALLOCATED STORAGE
  1E11'   D2 134A'              	JNC	FCERR
  1E14'   F5                    	PUSH	PSW			;SAVE NEW SIZE
  1E15'   7D                    	MOV	A,L			;[A]=SIZE OF NAME
  1E16'   06 00                 	MVI	B,0			;[B,C]=SIZE OF PARM2
  1E18'   21 0A73'              	LXI	H,PARM2			;BASE OF PLACE TO STORE INTO
  1E1B'   09                    	DAD	B			;[H,L]=PLACE TO START THE NEW VARIABLE
  1E1C'   4F                    	MOV	C,A			;[B,C]=LENGTH OF NAME OF VARIABLE
  1E1D'   CD 1ED9'              	CALL	BCTRAN			;PUT IN THE NEW NAME
  1E20'   01 1DE0'              	LXI	B,POPAS2		;PLACE TO RETURN AFTER ASSIGNMENT
  1E23'   C5                    	PUSH	B
  1E24'   C5                    	PUSH	B			;SAVE EXTRA ENTRY ON STACK
  1E25'   C3 1463'              	JMP	LETCN4			;PERFORM ASSIGNMENT ON [H,L] (EXTRA POP D)
  1E28'   2A 09DF'              FINASG:	LHLD	TEMP2			;GET ARGUMENT LIST POINTER
  1E2B'   CD 1232'              	CALL	CHRGTR			;SKIP OVER THE CLOSING PARENTHESIS
  1E2E'   E5                    	PUSH	H			;SAVE THE ARGUMENT TEXT POINTER
  1E2F'   2A 09C0'              	LHLD	TEMP3			;GET THE PARAMETER LIST TEXT POINTER
  1E32'   CD 0000*              	CALL	SYNCHR
  1E35'   29                    	DB	')'			;MAKE SURE THE PARAMETER LIST
                                					;ENDED AT THE SAME TIME
  1E36'   3E                    	DB	76Q			;SKIP THE NEXT BYTE WITH "MVI AL,"
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	2-21
SIMPLE-USER-DEFINED-FUNCTION CODE

  1E37'   D5                    FINVLS:	PUSH	D			;HERE WHEN THERE WERE NO ARGUMENTS
                                					;OR PARAMETERS
                                					;SAVE THE TEXT POINTER OF THE CALLER
  1E38'   22 09C0'              	SHLD	TEMP3			;SAVE THE TEXT POINTER OF THE FUNCTION
  1E3B'   3A 0A09'              	LDA	PRMLEN			;PUSH PARM1 STUFF ONTO THE STACK
  1E3E'   C6 04                 	ADI	4			;WITH PRMLEN AND PRMSTK (4 BYTES EXTRA)
  1E40'   F5                    	PUSH	PSW			;SAVE THE NUMBER OF BYTES
  1E41'   0F                    	RRC				;NUMBER OF TWO BYTE ENTRIES IN [A]
  1E42'   4F                    	MOV	C,A
  1E43'   CD 0000*              	CALL	GETSTK			;IS THERE ROOM ON THE STACK?
  1E46'   F1                    	POP	PSW			;[A]=AMOUNT TO PUT ONTO STACK
  1E47'   4F                    	MOV	C,A
  1E48'   2F                    	CMA				;COMPLEMENT [A]
  1E49'   3C                    	INR	A
  1E4A'   6F                    	MOV	L,A
  1E4B'   26 FF                 	MVI	H,255
  1E4D'   39                    	DAD	SP
  1E4E'   F9                    	SPHL				;SET UP NEW STACK
  1E4F'   E5                    	PUSH	H			;SAVE THE NEW VALUE FOR PRMSTK
  1E50'   11 0A07'              	LXI	D,PRMSTK		;FETCH DATA FROM HERE
  1E53'   CD 1ED9'              	CALL	BCTRAN
  1E56'   E1                    	POP	H
  1E57'   22 0A07'              	SHLD	PRMSTK			;LINK PARAMETER BLOCK FOR GARBAGE COLLECTION
  1E5A'   2A 0A71'              	LHLD	PRMLN2			;NOW PUT PARM2 INTO PARM1
  1E5D'   22 0A09'              	SHLD	PRMLEN			;SET UP LENGTH
  1E60'   44                    	MOV	B,H
  1E61'   4D                    	MOV	C,L			;[B,C]=TRANSFER COUNT
  1E62'   21 0A0B'              	LXI	H,PARM1
  1E65'   11 0A73'              	LXI	D,PARM2
  1E68'   CD 1ED9'              	CALL	BCTRAN
  1E6B'   67                    	MOV	H,A			;CLEAR OUT PARM2
  1E6C'   6F                    	MOV	L,A
  1E6D'   22 0A71'              	SHLD	PRMLN2
  1E70'   2A 0ADD'              	LHLD	FUNACT			;INCREMENT FUNCTION COUNT
  1E73'   23                    	INX	H
  1E74'   22 0ADD'              	SHLD	FUNACT
  1E77'   7C                    	MOV	A,H
  1E78'   B5                    	ORA	L			;SET UP ACTIVE FLAG NON-ZERO
  1E79'   32 0ADA'              	STA	NOFUNS
  1E7C'   2A 09C0'              	LHLD	TEMP3			;GET BACK THE FUNCTION DEFINITION TEXT POINTER
                                ;	DCX	H		;DETECT A MULTI-LINE FUNCTION
                                ;	CHRGET			;IF THE DEFINITION ENDS NOW
                                ;	JZ	MULFUN		;IF ENDS, ITS A MULTI-LINE FUNCTION
                                					;SKIP OVER THE "=" IN THE DEFINITION
  1E7F'   CD 1912'              	CALL	FRMEQL			;AND EVALUATE THE DEFINITION FORMULA
                                					;CAN HAVE RECURSION AT THIS POINT
  1E82'   2B                    	DCX	H
  1E83'   CD 1232'              	CALL	CHRGTR			;SEE IF THE STATEMENT ENDED RIGHT
  1E86'   C2 0BEC'              	JNZ	SNERR			;THIS IS A CHEAT, SINCE THE LINE
                                					;NUMBER OF THE ERROR WILL BE THE CALLERS
                                					;LINE # INSTEAD OF THE DEFINITIONS LINE #
  1E89'   CD 1C7F'              	CALL	GETYPR			;SEE IT THE RESULT IS A STRING
  1E8C'   C2 1EA1'              	JNZ	NOCPRS			;WHOSE DESCRIPTOR IS ABOUT TO BE WIPED OUT
                                					;BECAUSE IT IS SITTING IN PARM1 (THIS
                                					; HAPPENS IT THE FUNCTION IS A PROJECTION
                                					; FUNCTION ON A STRING ARGUMENT)
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	2-22
SIMPLE-USER-DEFINED-FUNCTION CODE

  1E8F'   11 09BB'              	LXI	D,DSCTMP		;DSCTMP IS PAST ALL THE TEMP AREA
  1E92'   2A 0B27'              	LHLD	FACLO			;GET THE ADDRESS OF THE DESCRIPTOR
  1E95'   CD 0000*              	CALL	DCOMPR
  1E98'   DA 1EA1'              	JC	NOCPRS			;RESULT IS A TEMP - NO COPY NESC
  1E9B'   CD 0000*              	CALL	STRCPY			;MAKE A COPY IN DSCTMP
  1E9E'   CD 0000*              	CALL	PUTTMP			;PUT RESULT IN A TEMP AND MAKE FACLO POINT AT IT
  1EA1'   2A 0A07'              NOCPRS:	LHLD	PRMSTK			;GET PLACE TO RESTORE PARM1 FROM STACK
  1EA4'   54                    	MOV	D,H
  1EA5'   5D                    	MOV	E,L
  1EA6'   23                    	INX	H			;POINT AT LENGTH
  1EA7'   23                    	INX	H
  1EA8'   4E                    	MOV	C,M			;[B,C]=LENGTH
  1EA9'   23                    	INX	H
  1EAA'   46                    	MOV	B,M
  1EAB'   03                    	INX	B			;INCLUDE EXTRA BYTES
  1EAC'   03                    	INX	B
  1EAD'   03                    	INX	B
  1EAE'   03                    	INX	B
  1EAF'   21 0A07'              	LXI	H,PRMSTK		;PLACE TO STORE INTO
  1EB2'   CD 1ED9'              	CALL	BCTRAN
  1EB5'   EB                    	XCHG				;[D,E]=PLACE TO RESTORE STACK TO
  1EB6'   F9                    	SPHL	
  1EB7'   2A 0ADD'              	LHLD	FUNACT			;DECREASE ACTIVE FUNCTION COUNT
  1EBA'   2B                    	DCX	H
  1EBB'   22 0ADD'              	SHLD	FUNACT
  1EBE'   7C                    	MOV	A,H
  1EBF'   B5                    	ORA	L			;SET UP FUNCTION FLAG
  1EC0'   32 0ADA'              	STA	NOFUNS
  1EC3'   E1                    	POP	H			;GET BACK THE CALLERS TEXT POINTER
  1EC4'   F1                    	POP	PSW			;GET BACK THE TYPE OF THE FUNCTION
  1EC5'   E5                    DOCNVF:	PUSH	H			;SAVE THE TEXT POINTER
  1EC6'   E6 07                 	ANI	7			;SETUP DISPATCH TO FORCE
                                					;FORMULA TYPE TO CONFORM
                                					;TO THE VARIABLE ITS BEING ASSIGNED TO
  1EC8'   21 038B'              	LXI	H,FRCTBL		;TABLE OF FORCE ROUTINES
  1ECB'   4F                    	MOV	C,A			;[B,C]=TWO BYTE OFFSET
  1ECC'   06 00                 	MVI	B,0
  1ECE'   09                    	DAD	B
  1ECF'   CD 1C47'              	CALL	DISPAT			;DISPATCH
  1ED2'   E1                    	POP	H			;GET BACK THE TEXT POINTER
  1ED3'   C9                    	RET	
                                ;
                                ; BLOCK TRANSFER ROUTINE WITH SOURCE IN [D,E] DESTINATION IN [H,L]
                                ; AND COUNT IN [B,C]. TRANSFER IS FORWARD.
                                ;
  1ED4'   1A                    BCTRAL:	LDAX	D
  1ED5'   77                    	MOV	M,A
  1ED6'   23                    	INX	H
  1ED7'   13                    	INX	D
  1ED8'   0B                    	DCX	B
  1ED9'   78                    BCTRAN:	MOV	A,B
  1EDA'   B1                    	ORA	C
  1EDB'   C2 1ED4'              	JNZ	BCTRAL
  1EDE'   C9                    	RET	
                                ;
                                ; SUBROUTINE TO SEE IF WE ARE IN DIRECT MODE AND
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	2-23
SIMPLE-USER-DEFINED-FUNCTION CODE

                                ; COMPLAIN IF SO
                                ;
  1EDF'   E5                    ERRDIR:	PUSH	H			;SAVE THEIR [H,L]
  1EE0'   2A 06BB'              	LHLD	CURLIN			;SEE WHAT THE CURRENT LINE IS
  1EE3'   23                    	INX	H			;DIRECT IS 65,535 SO NOW 0
  1EE4'   7C                    	MOV	A,H
  1EE5'   B5                    	ORA	L			;IS IT ZERO NOW?
  1EE6'   E1                    	POP	H
  1EE7'   C0                    	RNZ				;RETURN IF NOT
  1EE8'   1E 0C                 	MVI	E,ERRID			;"ILLEGAL DIRECT" ERROR
  1EEA'   C3 0C06'              	JMP	ERROR
                                ;
                                ; SUBROUTINE TO GET A POINTER TO A FUNCTION NAME
                                ;
  1EED'   CD 0000*              GETFNM:	CALL	SYNCHR
  1EF0'   D3                    	DB	FNTK			;MUST START WITH "FN"
  1EF1'   3E 80                 	MVI	A,128			;DONT ALLOW AN ARRAY
  1EF3'   32 09C8'              	STA	SUBFLG			;DON'T RECOGNIZE THE "(" AS
                                					;THE START OF AN ARRAY REFEREENCE
  1EF6'   B6                    	ORA	M			;PUT FUNCTION BIT ON
  1EF7'   4F                    	MOV	C,A			;GET FIRST CHARACTER INTO [C]
                                
  1EF8'   C3 0000*              	JMP	PTRGT2
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	2-24
SIMPLE-USER-DEFINED-FUNCTION CODE

                                
                                	SUBTTL	STRING FUNCTIONS - LEFT HAND SIDE MID$
  1EFB'   FE 7E                 ISMID$:	CPI	377O-$END		;LHS MID$?
  1EFD'   C2 0BEC'              	JNZ	SNERR			;NO, ERROR.
  1F00'   23                    	INX	H			;POINT TO NEXT CHAR
  1F01'   7E                    	MOV	A,M			;GET FN DESCRIPTOR
  1F02'   FE 83                 	CPI	MIDTK			;IS IT MID?
  1F04'   C2 0BEC'              	JNZ	SNERR			;NO, ERROR
  1F07'   23                    	INX	H			;BUMP POINTER
                                	EXTRN	LHSMID			;CODE IS IN BISTRS.MAC
  1F08'   C3 0000*              	JMP	LHSMID
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	2-25
STRING FUNCTIONS - LEFT HAND SIDE MID$

                                
                                	SUBTTL	INP, OUT, WAIT, CONSOLE, WIDTH
                                ;
                                ; THE FOLLOWING FUNCTIONS ALLOW THE 
                                ; USER FULL ACCESS TO THE ALTAIR I/O PORTS
                                ; INP(CHANNEL#) RETURNS AN INTEGER WHICH IS THE STATUS
                                ; OF THE CHANNEL. OUT CHANNEL#,VALUE PUTS OUT THE INTEGER
                                ; VALUE ON CHANNEL #. IT IS A STATEMENT, NOT A FUNCTION.
                                ;
  1F0B'   CD 1F8E'              FNINP:	CALL	CONINT			;GET INTEGER CHANNEL #
  1F0E'   32 1F12'              	STA	INPWRD+1		;GEN INP INSTR
  1F11'   DB 00                 INPWRD:	IN	0			;THE INP INSTR
  1F13'   C3 1CEF'              	JMP	SNGFLT			;SNGFLT RESULT
                                
  1F16'   CD 1F78'              FNOUT:	CALL	SETIO			;GET READY
                                					;DO THE "OUT" AND RETURN
                                	PUBLIC	OUTWRD
  1F19'   D3 00                 OUTWRD:	OUT	0			;DO IT
  1F1B'   C9                    	RET	
                                ;
                                ; THE WAIT CHANNEL#,MASK,MASK2 WAITS UNTIL THE STATUS
                                ; RETURNED BY CHANNEL# IS NON ZERO WHEN XORED WITH MASK2
                                ; AND THEN ANDED WITH MASK. IF MASK2 IS NOT PRESENT IT IS ASSUMED
                                ; TO BE ZERO.
                                ;
  1F1C'   CD 1F78'              FNWAIT:	CALL	SETIO			;SET UP FOR WAIT
  1F1F'   F5                    	PUSH	PSW			;SAVE THE MASK
  1F20'   1E 00                 	MVI	E,0			;DEFAULT MASK2 TO ZERO
  1F22'   2B                    	DCX	H
  1F23'   CD 1232'              	CALL	CHRGTR			;SEE IF THE STATEMENT ENDED
  1F26'   CA 1F30'              	JZ	NOTTHR			;IF NO THIRD ARGUMENT SKIP THIS
  1F29'   CD 0000*              	CALL	SYNCHR
  1F2C'   2C                    	DB	44			;MAKE SURE THERE IS A ","
  1F2D'   CD 1F8B'              	CALL	GETBYT
  1F30'   C1                    NOTTHR:	POP	B			;REGET THE "AND" MASK
  1F31'                         LOPINP:
  1F31'   DB 00                 STAINP:	IN	0			;THE INPUT INSTR
  1F33'   AB                    	XRA	E			;XOR WITH MASK2
  1F34'   A0                    	ANA	B			;AND WITH MASK
  1F35'   CA 1F31'              	JZ	LOPINP			;LOOP UNTIL RESULT IS NON-ZERO
                                					;NOTE: THIS LOOP CANNOT BE CONTROL-C'ED
                                					;UNLESS THE WAIT IS BEING DONE ON CHANNEL
                                					;ZERO. HOWEVER A RESTART AT 0 IS OK.
  1F38'   C9                    	RET	
  1F39'   C3 0BEC'              CONSOL:	JMP	SNERR
                                ; THIS IS THE WIDTH (TERMINAL WIDTH) COMMAND COMMAND
                                ; ARG MUST BE .GT. 15 AND .LT. 255
                                
  1F3C'                         WIDTH:
  1F3C'   FE 9E                 	CPI	$LPRIN			;WIDTH LPRINT?
  1F3E'   C2 1F51'              	JNZ	NOTWLP			;NO
  1F41'   CD 1232'              	CALL	CHRGTR			;FETCH NEXT CHAR
  1F44'   CD 1F8B'              	CALL	GETBYT			;GET WIDTH
  1F47'   32 06B2'              	STA	LPTSIZ			;SAVE IT
  1F4A'   CD 1F5E'              	CALL	MORCP3			;COMPUTE LAST COMMA COLUMN
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	2-26
INP, OUT, WAIT, CONSOLE, WIDTH

  1F4D'   32 06B1'              	STA	NLPPOS			;SAVE IT
  1F50'   C9                    	RET	
  1F51'                         NOTWLP:
  1F51'   CD 1F8B'              	CALL	GETBYT			;GET THE CHANNEL #
  1F54'   32 06B3'              	STA	LINLEN			;SETUP THE LINE LENGTH
  1F57'                         MORCP2:
  1F57'   CD 1F5E'              	CALL	MORCP3
  1F5A'   32 06B4'              	STA	CLMLST			;SET LAST COMMA POSIT
  1F5D'   C9                    	RET				;DONE
  1F5E'   D6 0E                 MORCP3:	SUI	CLMWID
  1F60'   D2 1F5E'              	JNC	MORCP3
  1F63'   C6 1C                 	ADI	2*CLMWID
  1F65'   2F                    	CMA	
  1F66'   3C                    	INR	A
  1F67'   83                    	ADD	E
  1F68'   C9                    	RET				;BACK TO NEWSTT
                                	PUBLIC	GETIN2,GETINT
  1F69'   CD 1232'              GETINT:	CALL	CHRGTR
  1F6C'   CD 191D'              GETIN2:	CALL	FRMEVL			;EVALUATE A FORMULA
  1F6F'   E5                    INTFR2:	PUSH	H			;SAVE THE TEXT POINTER
  1F70'   CD 0000*              	CALL	FRCINT			;CONVERT THE FORMULA TO AN INTEGER IN [H,L]
  1F73'   EB                    	XCHG				;PUT THE INTEGER INTO [D,E]
  1F74'   E1                    	POP	H			;RETSORE THE TEXT POINTER
  1F75'   7A                    	MOV	A,D			;SET THE CONDITION CODES ON THE HIGH ORDER
  1F76'   B7                    	ORA	A
  1F77'   C9                    	RET	
  1F78'   CD 1F8B'              SETIO:	CALL	GETBYT			;GET INTEGER CHANNEL NUMBER IN [A]
  1F7B'   32 1F32'              	STA	STAINP+1		;SETUP "WAIT"
  1F7E'   32 1F1A'              	STA	OUTWRD+1		;SETUP "OUT"
  1F81'   CD 0000*              	CALL	SYNCHR
  1F84'   2C                    	DB	44			;MAKE SURE THERE IS A COMMA
  1F85'   C3 1F8B'              	JMP	GETBYT
                                					;"MVI B," AROUND THE CHRGET (MVI AH,)
  1F88'   CD 1232'              GTBYTC:	CALL	CHRGTR
                                	PUBLIC	GETBYT,CONINT
  1F8B'   CD 191D'              GETBYT:	CALL	FRMEVL			;EVALUATE A FORMULA
  1F8E'   CD 1F6F'              CONINT:	CALL	INTFR2			;CONVERT THE FAC TO AN INTEGER IN [D,E]
                                					;AND SET THE CONDITION CODES BASED
                                					;ON THE HIGH ORDER
  1F91'   C2 134A'              	JNZ	FCERR			;WASN'T ERROR
  1F94'   2B                    	DCX	H			;ACTUALLY FUNCTIONS CAN GET HERE
                                					;WITH BAD [H,L] BUT NOT SERIOUS
                                					;SET CONDITION CODES ON TERMINATOR
  1F95'   CD 1232'              	CALL	CHRGTR
  1F98'   7B                    	MOV	A,E			;RETURN THE RESULT IN [A] AND [E]
  1F99'   C9                    	RET	
                                
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	2-27
INP, OUT, WAIT, CONSOLE, WIDTH

                                
                                	SUBTTL	EXECUTE BASIC PROGRAM ON PROM
                                					;GO RUN IT
                                
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	2-28
EXECUTE BASIC PROGRAM ON PROM

                                
                                	SUBTTL	EXTENDED LIST, DELETE, LLIST
  1F9A'                         LLIST:
                                
                                					;PRTFLG=1 FOR REGULAR LIST
  1F9A'   3E 01                 	MVI	A,1			;GET NON ZERO VALUE
  1F9C'   32 06B0'              	STA	PRTFLG			;SAVE IN I/O FLAG (END OF LPT)
  1F9F'                         LIST:
  1F9F'   C1                    	POP	B			;GET RID OF NEWSTT RETURN ADDR
  1FA0'   CD 0DFB'              	CALL	SCNLIN			;SCAN LINE RANGE
  1FA3'   C5                    	PUSH	B			;SAVE POINTER TO 1ST LINE
  1FA4'   CD 0000*              	CALL	PROCHK			;DONT EVEN LIST LINE #
  1FA7'   21 FFFF               LIST4:	LXI	H,0+65535		;DONT ALLOW ^C TO CHANGE
  1FAA'   22 06BB'              	SHLD	CURLIN			;CONTINUE PARAMETERS
  1FAD'   E1                    	POP	H			;GET POINTER TO LINE
  1FAE'   D1                    	POP	D			;GET MAX LINE # OFF STACK
  1FAF'   4E                    	MOV	C,M			;[B,C]=THE LINK POINTING TO THE NEXT LINE
  1FB0'   23                    	INX	H
  1FB1'   46                    	MOV	B,M
  1FB2'   23                    	INX	H
  1FB3'   78                    	MOV	A,B			;SEE IF END OF CHAIN
  1FB4'   B1                    	ORA	C
  1FB5'   CA 0CAA'              	JZ	READY			;LAST LINE, STOP.  
  1FB8'   E5                    	PUSH	H			;DON'T ALLOW ^C
  1FB9'   2A 06B7'              	LHLD	PTRFIL
  1FBC'   7C                    	MOV	A,H			;ON FILE OUTPUT
  1FBD'   B5                    	ORA	L
  1FBE'   E1                    	POP	H
  1FBF'   CC 0000*              	CZ	ISCNTC
                                					;CHECK FOR CONTROL-C
  1FC2'   C5                    	PUSH	B			;SAVE LINK
  1FC3'   4E                    	MOV	C,M			;PUSH THE LINE #
  1FC4'   23                    	INX	H
  1FC5'   46                    	MOV	B,M
  1FC6'   23                    	INX	H
  1FC7'   C5                    	PUSH	B
  1FC8'   E3                    	XTHL				;GET LINE # INTO [H,L]
  1FC9'   EB                    	XCHG				;GET MAX LINE IN [H,L]
  1FCA'   CD 0000*              	CALL	DCOMPR			;PAST LAST LINE IN RANGE?
  1FCD'   C1                    	POP	B			;TEXT POINTER TO [B,C]
  1FCE'   DA 0CA9'              	JC	STPRDY			;IF PAST, THEN DONE LISTING.
  1FD1'   E3                    	XTHL				;SAVE MAX ON BOTTOM OF STACK
  1FD2'   E5                    	PUSH	H			;SAVE LINK ON TOP
  1FD3'   C5                    	PUSH	B			;SAVE TEXT POINTER BACK
  1FD4'   EB                    	XCHG				;GET LINE # IN [H,L]
  1FD5'   22 09D8'              	SHLD	DOT			;SAVE FOR LATER EDIT OR LIST
                                					;AND WE WANT [H,L] ON THE STACK
  1FD8'   CD 0000*              	CALL	LINPRT			;PRINT AS INT WITHOUT LEADING SPACE
  1FDB'   E1                    	POP	H
  1FDC'   7E                    	MOV	A,M			;GET BYTE FROM LINE
  1FDD'   FE 09                 	CPI	9			;IS IT A TAB?
  1FDF'   CA 1FE7'              	JZ	NOSPAL			;THEN DONT PRINT SPACE
  1FE2'   3E 20                 	MVI	A,' '
  1FE4'   CD 0000*              	CALL	OUTDO			;PRINT A SPACE AFTER THE LINE #
  1FE7'   CD 2000'              NOSPAL:	CALL	BUFLIN			;UNPACK THE LINE INTO BUF
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	2-29
EXTENDED LIST, DELETE, LLIST

  1FEA'   21 0885'              	LXI	H,BUF			;POINT AT THE START OF THE UNPACKED CHARACTERS
  1FED'   CD 1FF6'              	CALL	LISPRT			;PRINT THE LINE
  1FF0'   CD 0000*              	CALL	CRDO			;PRINT CRLF
  1FF3'   C3 1FA7'              	JMP	LIST4			;GO BACK FOR NEXT LINE
  1FF6'   7E                    LISPRT:	MOV	A,M
  1FF7'   B7                    	ORA	A			;SET CC
  1FF8'   C8                    	RZ				;IF =0 THEN END OF LINE
                                	EXTRN	OUTCH1
  1FF9'   CD 0000*              	CALL	OUTCH1			;OUTPUT CHAR AND CHECK FOR LF
  1FFC'   23                    	INX	H			;INCR POINTER
  1FFD'   C3 1FF6'              	JMP	LISPRT			;PRINT NEXT CHAR
                                
  2000'   01 0885'              BUFLIN:	LXI	B,BUF			;GET START OF TEXT BUFFER
  2003'   16 FF                 	MVI	D,BUFLEN		;GET ITS LENGTH INTO [D]
  2005'   AF                    	XRA	A			;SET ON SPECIAL CHAR FOR SPACE INSERTION
  2006'   32 0B09'              	STA	TEMPA
  2009'   CD 0000*              	CALL	PROCHK			;ONLY PROCEED IF OK
  200C'   C3 2013'              	JMP	PLOOP2			;START HERE
                                
  200F'   03                    PLOOP:	INX	B			;INCREMENT DEPOSIT PTR.
  2010'   23                    	INX	H			;ADVANCE TEXT PTR
  2011'   15                    	DCR	D			;BUMP DOWN COUNT
  2012'   C8                    	RZ				;IF BUFFER FULL, RETURN
  2013'   7E                    PLOOP2:	MOV	A,M			;GET CHAR FROM BUF
  2014'   B7                    	ORA	A			;SET CC'S
  2015'   02                    	STAX	B			;SAVE THIS CHAR
  2016'   C8                    	RZ				;IF END OF SOURCE BUFFER, ALL DONE.
  2017'   FE 0B                 	CPI	OCTCON			;IS IT SMALLER THAN SMALLEST EMBEDDED CONSTANT?
  2019'   DA 2022'              	JC	NTEMBL			;YES, DONT TREAT AS ONE
  201C'   FE 20                 	CPI	DBLCON+1		;IS IT EMBEDED CONSTANT?
  201E'   5F                    	MOV	E,A			;SAVE CHAR IN [E]
  201F'   DA 2036'              	JC	PRTVAR			;PRINT LEADING SPACE IF NESC.
  2022'   B7                    NTEMBL:	ORA	A			;SET CC'S
  2023'   FA 205B'              	JM	PLOOPR			;RESERVED WORD OF SOME KIND
  2026'   5F                    	MOV	E,A			;SAVE CHAR IN [E]
  2027'   FE 2E                 	CPI	'.'			;DOT IS PART OF VAR NAME
  2029'   CA 2036'              	JZ	PRTVAR
  202C'   CD 20ED'              	CALL	TSTANM			;IS CHAR ALPHANUMERIC
  202F'   D2 2036'              	JNC	PRTVAR			;ALPHANUMERIC
  2032'   AF                    	XRA	A			;MAKE SPECIAL
  2033'   C3 2049'              	JMP	PLOOPH
  2036'   3A 0B09'              PRTVAR:	LDA	TEMPA			;WHAT DID WE DO LAST?
  2039'   B7                    	ORA	A			;SET CONDITION CODES
  203A'   CA 2047'              	JZ	PLOOPG			;SPECIAL, NEVER INSERT SPACE
  203D'   3C                    	INR	A			;IN RESERVED WORD?
  203E'   C2 2047'              	JNZ	PLOOPG			;NO
  2041'   3E 20                 	MVI	A,' '			;PUT OUT SPACE BEFORE RESWORD
  2043'   02                    	STAX	B			;STORE IN BUFFER
  2044'   03                    	INX	B			;INCRMENT POINTER INTO BUFFER
  2045'   15                    	DCR	D			;SPACE LEFT?
  2046'   C8                    	RZ				;NO, DONE
  2047'   3E 01                 PLOOPG:	MVI	A,1			;STORE FLAG SAYING IN VAR
  2049'   32 0B09'              PLOOPH:	STA	TEMPA
  204C'   7B                    	MOV	A,E			;GET BACK CHAR WE HAD
  204D'   FE 0B                 	CPI	OCTCON			;IS IT SMALLER THAN SMALLEST EMBEDDED CONSTANT?
  204F'   DA 2057'              	JC	PLOOPZ			;YES, DONT TREAT AS ONE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	2-30
EXTENDED LIST, DELETE, LLIST

  2052'   FE 20                 	CPI	DBLCON+1		;IS IT EMBEDED CONSTANT?
  2054'   DA 20F8'              	JC	NUMLIN			;YES, UNPACK IT
  2057'   02                    PLOOPZ:	STAX	B			;MAKE SURE BYTE STORED AFTER SPACE
  2058'   C3 200F'              	JMP	PLOOP			;STORE IN BUFFER
  205B'                         PLOOPR:
                                
  205B'   3C                    	INR	A			;SET ZERO IF FN TOKEN
  205C'   7E                    	MOV	A,M			;GET CHAR BACK
  205D'   C2 2064'              	JNZ	NTFNTK			;NOT FUNCTION JUST TREAT NORMALLY
  2060'   23                    	INX	H			;BUMP POINTER
  2061'   7E                    	MOV	A,M			;GET CHAR
  2062'   E6 7F                 	ANI	177O			;TURN OFF HIGH BIT
  2064'   23                    NTFNTK:	INX	H			;ADVANCE TO POINT AFTER
  2065'   FE DB                 	CPI	SNGQTK			;SINGLE QUOTE TOKEN?
  2067'   C2 2072'              	JNZ	NTQTTK			;NO, JUMP OUT
  206A'   0B                    	DCX	B			;MOVE DEPOSIT PTR BACK OVER :$REM
  206B'   0B                    	DCX	B
  206C'   0B                    	DCX	B
  206D'   0B                    	DCX	B
  206E'   14                    	INR	D
  206F'   14                    	INR	D
  2070'   14                    	INR	D
  2071'   14                    	INR	D			;FIX UP CHAR COUNT
  2072'   FE A2                 NTQTTK:	CPI	$ELSE			;ELSE?
  2074'   CC 0000*              	CZ	DCXBRT			;MOVE DEPOSIT PTR BACK OVER LEADING COLON.
  2077'   E5                    	PUSH	H			;SAVE TEXT PTR.
  2078'   C5                    	PUSH	B			;SAVE DEPOSIT PTR.
  2079'   D5                    	PUSH	D			;SAVE CHAR COUNT.
  207A'   21 013A'              	LXI	H,RESLST-1		;GET PTR TO START OF RESERVED WORD LIST
  207D'   47                    	MOV	B,A			;SAVE THIS CHAR IN [B]
  207E'   0E 40                 	MVI	C,'A'-1			;INIT LEADING CHAR VALUE
  2080'   0C                    RESSR3:	INR	C			;BUMP LEADING CHAR VALUE.
  2081'   23                    RESSR1:	INX	H			;BUMP POINTER INTO RESLST
  2082'   54                    RESSRC:	MOV	D,H			;SAVE PTR TO START OF THIS RESWRD
  2083'   5D                    	MOV	E,L
  2084'                         RESSR2:
  2084'   7E                    	MOV	A,M			;GET CHAR FROM RESLST
  2085'   B7                    	ORA	A			;SET CC'S
  2086'   CA 2080'              	JZ	RESSR3			;IF END OF THIS CHARS TABLE, GO BACK & BUMP C
  2089'   23                    	INX	H			;BUMP SOURCE PTR
  208A'   F2 2084'              	JP	RESSR2			;IF NOT END OF THIS RESWRD, THEN KEEP LOOKING
  208D'   7E                    	MOV	A,M			;GET PTR TO RESERVED WORD VALUE
  208E'   B8                    	CMP	B			;SAME AS THE ONE WE SEARCH FOR?
  208F'   C2 2081'              	JNZ	RESSR1			;NO, KEEP LOOKING.
  2092'   EB                    	XCHG				;SAVE FOUND PTR IN [H,L]
  2093'   FE D2                 	CPI	$USR			;USR FUNCTION TOKEN?
  2095'   CA 209A'              	JZ	NOISPA			;DONT INSERT SPACE
  2098'   FE D3                 	CPI	$FN			;IS IT FUNCTION TOKEN?
  209A'                         NOISPA:
  209A'   79                    	MOV	A,C			;GET LEADING CHAR
  209B'   D1                    	POP	D			;RESTORE LINE CHAR COUNT
  209C'   C1                    	POP	B			;RESTORE DEPOSIT PTR
  209D'   5F                    	MOV	E,A			;SAVE LEADING CHAR
  209E'   C2 20AD'              	JNZ	NTFNEX			;NOT "FN" EXPANSION
  20A1'   3A 0B09'              	LDA	TEMPA			;SET CC'S ON TEMPA
  20A4'   B7                    	ORA	A
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	2-31
EXTENDED LIST, DELETE, LLIST

  20A5'   3E 00                 	MVI	A,0			;CLEAR RESWRD FLAG - MARK AS SPECIAL
  20A7'   32 0B09'              	STA	TEMPA			;SET FLAG
  20AA'   C3 20C2'              	JMP	MORLNZ			;DO EXPANSION
  20AD'                         NTFNEX:
  20AD'   FE 5B                 	CPI	'Z'+1			;WAS IT A SPECIAL CHAR?
  20AF'   C2 20B9'              	JNZ	NTSPCH			;NON-SPECIAL CHAR
  20B2'   AF                    	XRA	A			;SET NON-SPECIAL
  20B3'   32 0B09'              	STA	TEMPA
  20B6'   C3 20D1'              	JMP	MORPUR			;PRINT IT
  20B9'   3A 0B09'              NTSPCH:	LDA	TEMPA			;WHAT DID WE DO LAST?
  20BC'   B7                    	ORA	A			;SPECIAL?
  20BD'   3E FF                 	MVI	A,255			;FLAG IN RESERVED WORD
  20BF'   32 0B09'              	STA	TEMPA			;CLEAR FLAG
  20C2'   CA 20CD'              MORLNZ:	JZ	MORLN0			;GET CHAR AND PROCEED
  20C5'   3E 20                 	MVI	A,' '			;PUT SPACE IN BUFFER
  20C7'   02                    	STAX	B
  20C8'   03                    	INX	B
  20C9'   15                    	DCR	D			;ANY SPACE LEFT IN BUFFER
  20CA'   CA 0000*              	JZ	PPSWRT			;NO, RETURN
  20CD'   7B                    MORLN0:	MOV	A,E
  20CE'   C3 20D4'              	JMP	MORLN1			;CONTINUE
  20D1'                         MORPUR:
  20D1'   7E                    	MOV	A,M			;GET BYTE FROM RESWRD
  20D2'   23                    	INX	H			;BUMP POINTER
  20D3'   5F                    MORLNP:	MOV	E,A			;SAVE CHAR
  20D4'   E6 7F                 MORLN1:	ANI	177O			;AND OFF HIGH ORDER BIT FOR DISK & EDIT
  20D6'   02                    	STAX	B			;STORE THIS CHAR
  20D7'   03                    	INX	B			;BUMP PTR
  20D8'   15                    	DCR	D			;BUMP DOWN REMAINING CHAR COUNT
  20D9'   CA 0000*              	JZ	PPSWRT			;IF END OF LINE, JUST RETURN
  20DC'   B3                    	ORA	E			;SET CC'S
  20DD'   F2 20D1'              	JP	MORPUR			;END OF RESWRD?
  20E0'   FE A8                 	CPI	'('+128			;SPC( OR TAB( ?
  20E2'   C2 20E9'              	JNZ	NTSPCT			;NO
  20E5'   AF                    	XRA	A			;CLEAR FLAG
  20E6'   32 0B09'              	STA	TEMPA			;TO INSERT SPACE AFTERWARDS
  20E9'                         NTSPCT:
  20E9'   E1                    	POP	H			;RESTORE SOURCE PTR.
  20EA'   C3 2013'              	JMP	PLOOP2			;GET NEXT CHAR FROM LINE
                                
  20ED'   CD 0000*              TSTANM:	CALL	ISLET2			;LETTER?
  20F0'   D0                    	RNC				;YES
  20F1'   FE 30                 	CPI	'0'			;DIGIT?
  20F3'   D8                    	RC				;TOO SMALL
  20F4'   FE 3A                 	CPI	'9'+1			;LAST DIGIT
  20F6'   3F                    	CMC				;MAKE CARRY RIGHT
  20F7'   C9                    	RET				;NO CARRY=DIGIT
  20F8'   2B                    NUMLIN:	DCX	H			;MOVE POINTER BACK AS CHRGET INX'S
  20F9'   CD 1232'              	CALL	CHRGTR			;SCAN THE CONSTANT
  20FC'   D5                    	PUSH	D			;SAVE CHAR COUNT
  20FD'   C5                    	PUSH	B			;SAVE DEPOSIT PTR
  20FE'   F5                    	PUSH	PSW			;SAVE CONSTANT TYPE.
  20FF'   CD 12B8'              	CALL	CONFAC			;MOVE CONSTANT INTO FAC
  2102'   F1                    	POP	PSW			;RESTORE CONSTANT TYPE
  2103'   01 2117'              	LXI	B,CONLIN		;PUT RETURN ADDR ON STACK
  2106'   C5                    	PUSH	B			;SAVE IT
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	2-32
EXTENDED LIST, DELETE, LLIST

  2107'   FE 0B                 	CPI	OCTCON			;OCTAL CONSTANT?
  2109'   CA 0000*              	JZ	FOUTO			;PRINT IT
  210C'   FE 0C                 	CPI	HEXCON			;HEX CONSTANT?
  210E'   CA 0000*              	JZ	FOUTH			;PRINT IN HEX
  2111'   2A 0991'              	LHLD	CONLO			;GET LINE # VALUE IF ONE.
  2114'   C3 0000*              	JMP	FOUT			;PRINT REMAINING POSSIBILITIES.
  2117'   C1                    CONLIN:	POP	B			;RESTORE DEPOSIT PTR.
  2118'   D1                    	POP	D			;RESTORE CHAR COUNT
  2119'   3A 098F'              	LDA	CONSAV			;GET SAVED CONSTANT TOKEN
  211C'   1E 4F                 	MVI	E,'O'			;ASSUME OCTAL CONSTANT
  211E'   FE 0B                 	CPI	OCTCON			;OCTAL CONSTANT?
  2120'   CA 212A'              	JZ	SAVBAS			;YES, PRINT IT
  2123'   FE 0C                 	CPI	HEXCON			;HEX CONSTANT?
  2125'   1E 48                 	MVI	E,'H'			;ASSUME SO.
  2127'   C2 2135'              	JNZ	NUMSLN			;NOT BASE CONSTANT
  212A'                         SAVBAS:
  212A'   3E 26                 	MVI	A,'&'			;PRINT LEADING BASE INDICATOR
  212C'   02                    	STAX	B			;SAVE IT
  212D'   03                    	INX	B			;BUMP PTR
  212E'   15                    	DCR	D			;BUMP DOWN CHAR COUNT
  212F'   C8                    	RZ				;RETURN IF END OF BUFFER
  2130'   7B                    	MOV	A,E			;GET BASE CHAR
  2131'   02                    	STAX	B			;SAVE IT
  2132'   03                    	INX	B			;BUMP PTR
  2133'   15                    	DCR	D			;BUMP DOWN BASE COUNT
  2134'   C8                    	RZ				;END OF BUFFER, DONE
                                					;[E] SET UP
  2135'                         NUMSLN:
  2135'   3A 0990'              	LDA	CONTYP			;GET TYPE OF CONSTANT WE ARE
  2138'   FE 04                 	CPI	4			;IS IT SINGLE OR DOUBLE PREC?
  213A'   1E 00                 	MVI	E,0			;NO, NEVER PRINT TRAILING TYPE INDICATOR
  213C'   DA 2146'              	JC	TYPSET
  213F'   1E 21                 	MVI	E,'!'			;ASSUME SINGLE PREC.
  2141'   CA 2146'              	JZ	TYPSET			;IS CONTYP=4, WAS SINGLE
  2144'   1E 23                 	MVI	E,'#'			;DOUBLE PREC INDICATOR
  2146'                         TYPSET:
  2146'   7E                    	MOV	A,M			;GET LEADING CHAR
  2147'   FE 20                 	CPI	' '			;LEADING SPACE
  2149'   CC 0000*              	CZ	INXHRT			;GO BY IT
  214C'   7E                    NUMSL2:	MOV	A,M			;GET CHAR FROM NUMBER BUFFER
  214D'   23                    	INX	H			;BUMP POINTER
  214E'   B7                    	ORA	A			;SET CC'S
  214F'   CA 2178'              	JZ	NUMDN			;IF ZERO, ALL DONE.
  2152'   02                    	STAX	B			;SAVE CHAR IN BUF.
  2153'   03                    	INX	B			;BUMP PTR
  2154'   15                    	DCR	D			;SEE IF END OF BUFFER
  2155'   C8                    	RZ				;IF END OF BUFFER, RETURN
  2156'   3A 0990'              	LDA	CONTYP			;GET TYPE OF CONSTANT TO BE PRINTED
  2159'   FE 04                 	CPI	4			;TEST FOR SINGLE OR DOUBLE PRECISION
  215B'   DA 214C'              	JC	NUMSL2			;NO, WAS INTEGER
  215E'   0B                    	DCX	B			;PICK UP SAVED CHAR
  215F'   0A                    	LDAX	B			;EASIER THAN PUSHING ON STACK
  2160'   03                    	INX	B			;RESTORE TO POINT WHERE IT SHOULD
  2161'   C2 2169'              	JNZ	DBLSCN			;IF DOUBLE, DONT TEST FOR EMBEDED "."
  2164'   FE 2E                 	CPI	'.'			;TEST FOR FRACTION
  2166'   CA 2173'              	JZ	ZERE			;IF SINGLE & EMBEDED ., THEN DONT PRINT !
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	2-33
EXTENDED LIST, DELETE, LLIST

  2169'   FE 44                 DBLSCN:	CPI	'D'			;DOUBLE PREC. EXPONENT?
  216B'   CA 2173'              	JZ	ZERE			;YES, MARK NO VALUE TYPE INDICATOR NESC.
  216E'   FE 45                 	CPI	'E'			;SINGLE PREC. EXPONENT?
  2170'   C2 214C'              	JNZ	NUMSL2			;NO, PROCEED
  2173'   1E 00                 ZERE:	MVI	E,0			;MARK NO PRINTING OF TYPE INDICATOR
  2175'   C3 214C'              	JMP	NUMSL2			;KEEP MOVING NUMBER CHARS INTO BUF
                                
  2178'                         NUMDN:
  2178'   7B                    	MOV	A,E			;GET FLAG TO INDICATE WHETHER TO INSERT
  2179'   B7                    	ORA	A			;A "D" AFTER DOUBLE PREC. #
  217A'   CA 2181'              	JZ	NOD			;NO, DONT INSERT IT
  217D'   02                    	STAX	B			;SAVE IN BUFFER
  217E'   03                    	INX	B			;BUMP POINTER
  217F'   15                    	DCR	D			;DECRMENT COUNT OF CHARS LEFT IN BUFFER
  2180'   C8                    	RZ				;=0, MUST TRUNCATE LIST OF THIS LINE.
  2181'                         NOD:
  2181'   2A 098D'              	LHLD	CONTXT			;GET BACK TEXT POINTER AFTER CONSTANT
  2184'   C3 2013'              	JMP	PLOOP2			;GET NEXT CHAR
                                ;
                                ; THE FOLLOWING CODE IS FOR THE DELETE RANGE
                                ; COMMAND. BEFORE THE LINES ARE DELETED, 'OK'
                                ; IS TYPED.
                                ;
  2187'                         DELETE:
  2187'   CD 0DFB'              	CALL	SCNLIN			;SCAN LINE RANGE
  218A'   C5                    	PUSH	B
  218B'   CD 2338'              	CALL	DEPTR			;CHANGE POINTERS BACK TO NUMBERS
  218E'   C1                    	POP	B
  218F'   D1                    	POP	D			;POP MAX LINE OFF STACK
  2190'   C5                    	PUSH	B			;SAVE POINTER TO START OF DELETION
                                					;FOR USE BY CHEAD AFTER FINI
  2191'   C5                    	PUSH	B			;SAVE POINTER TO START OF 1ST LINE
  2192'   CD 0E1B'              	CALL	FNDLIN			;FIND THE LAST LINE
  2195'   D2 219F'              	JNC	FCERRG			;MUST HAVE A MATCH ON THE UPPER BOUND
  2198'   54                    	MOV	D,H			;[D,E] =  POINTER AT THE START OF THE LINE
  2199'   5D                    	MOV	E,L			;BEYOND THE LAST LINE IN THE RANGE
  219A'   E3                    	XTHL				;SAVE THE POINTER TO THE NEXT LINE
  219B'   E5                    	PUSH	H			;SAVE THE POINTER TO THE START OF
                                					;THE FIRST LINE IN THE RANGE
  219C'   CD 0000*              	CALL	DCOMPR			;MAKE SURE THE START COMES BEFORE THE END
  219F'   D2 134A'              FCERRG:	JNC	FCERR			;IF NOT, "ILLEGAL FUNCTION CALL"
  21A2'   21 0B68'              	LXI	H,REDDY			;PRINT "OK" PREMATURELY
  21A5'   CD 0000*              	CALL	STROUT
  21A8'   C1                    	POP	B			;GET POINTER TO FIRST IN [B,C]
  21A9'   21 0DAA'              	LXI	H,FINI			;GO BACK TO FINI WHEN DONE
  21AC'   E3                    	XTHL				;[H,L]=POINTER TO THE NEXT LINE
                                	PUBLIC	DEL
                                ; ERASE A LINE FROM MEMORY
                                ; [B,C]=START OF LINE BEING DELETED
                                ; [D,E]=START OF NEXT LINE
  21AD'                         DEL:
  21AD'   EB                    	XCHG				;[D,E] NOW HAVE THE POINTER TO THE LINE
                                					;BEYOND THIS ONE
  21AE'   2A 09E5'              	LHLD	VARTAB			;COMPACTIFYING TO VARTAB
  21B1'   1A                    MLOOP:	LDAX	D
  21B2'   02                    	STAX	B			;SHOVING DOWN TO ELIMINATE A LINE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	2-34
EXTENDED LIST, DELETE, LLIST

  21B3'   03                    	INX	B
  21B4'   13                    	INX	D
  21B5'   CD 0000*              	CALL	DCOMPR
  21B8'   C2 21B1'              	JNZ	MLOOP			;DONE COMPACTIFYING?
  21BB'   60                    	MOV	H,B
  21BC'   69                    	MOV	L,C
  21BD'   22 09E5'              	SHLD	VARTAB
  21C0'   C9                    	RET	
                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	2-35
EXTENDED LIST, DELETE, LLIST

                                
                                	SUBTTL	PEEK AND POKE
                                ;
                                ; NOTE: IN THE 8K PEEK ONLY ACCEPTS POSITIVE NUMBERS UP TO 32767
                                ; POKE WILL ONLY TAKE AN ADDRESS UP TO 32767 , NO
                                ; FUDGING ALLOWED. THE VALUE IS UNSIGNED.
                                ; IN THE EXTENDED VERSION NEGATIVE NUMBERS CAN BE
                                ; USED TO REFER TO LOCATIONS HIGHER THAN 32767.
                                ; THE CORRESPONDENCE IS GIVEN BY SUBTRACTING 65536 FROM LOCATIONS
                                ; HIGHER THAN 32767 OR BY SPECIFYING A POSITIVE NUMBER UP TO 65535.
                                ;
  21C1'   CD 21E0'              PEEK:	CALL	FRQINT			;GET AN INTEGER IN [H,L]
                                	EXTRN	PRODIR
  21C4'   CD 0000*              	CALL	PRODIR			;DONT ALLOW DIRECT IF PROTECTED FILE
  21C7'   7E                    	MOV	A,M			;GET THE VALUE TO RETURN
  21C8'   C3 1CEF'              	JMP	SNGFLT			;AND FLOAT IT
  21CB'   CD 191D'              POKE:	CALL	FRMEVL			;READ A FORMULA
  21CE'   E5                    	PUSH	H			;SAVE TEXT PTR
  21CF'   CD 21E0'              	CALL	FRQINT			;FORCE VALUE INTO INT IN [H,L]
  21D2'   E3                    	XTHL				;PUT VALUE ON STACK & GET TXT PTR BACK
                                					;SAVE VALUE ON STACK
  21D3'   CD 0000*              	CALL	PRODIR			;DONT ALLOW DIRECT IF PROTECTED FILE
  21D6'   CD 0000*              	CALL	SYNCHR
  21D9'   2C                    	DB	44			;CHECK FOR A COMMA
  21DA'   CD 1F8B'              	CALL	GETBYT
  21DD'   D1                    	POP	D			;GET THE ADDRESS BACK
  21DE'   12                    	STAX	D			;STORE IT AWAY
  21DF'   C9                    	RET				;SCANNED EVERYTHING
                                	PUBLIC	FRQINT
  21E0'   01 0000*              FRQINT:	LXI	B,FRCINT		;RETURN HERE
  21E3'   C5                    	PUSH	B			;SAVE ADDR
  21E4'   CD 1C7F'              	CALL	GETYPR			;SET THE CC'S ON VALTYPE
  21E7'   F8                    	RM				;RETURN IF ALREADY INTEGER.
  21E8'   3A 0B2A'              	LDA	FAC			;GET EXPONENT
  21EB'   FE 90                 	CPI	220O			;IS MAGNITUDE .GT. 32767
  21ED'   C0                    	RNZ				;NO, FORCE INTEGER
  21EE'   3A 0B29'              	LDA	FAC-1			;GET SIGN OF NUMBER
  21F1'   B7                    	ORA	A			;IS IT NEGATIVE, ONLY ALLOWABLE # IS -32768
  21F2'   F8                    	RM				;ASSUME THATS WHAT IT IS, ELSE GIVE OVERFLOW
  21F3'   01 9180               	LXI	B,221Q*256+200Q
  21F6'   11 0000               	LXI	D,0*256+0		;GET -65536.
  21F9'   C3 0000*              	JMP	FADD			;SUBTRACT IT, AND THEN FORCE INTEGER
                                					;MAKE THE SAME FOR RADIO SHACK VERSION
                                
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	3
PEEK AND POKE

                                
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	4
PEEK AND POKE

                                	PAGE
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	4-1
PEEK AND POKE

                                
                                	SUBTTL	RENUMBER
                                ; THE RESEQ(UENCE) COMMAND TAKE UP TO THREE ARGUMENTS
                                ; RESEQ [NN[,MM[,INC]]]
                                ; WHERE NN IS THE FIRST DESTINATION LINE OF THE
                                ; LINES BEING RESEQUENCED, LINES LESS THAN MM ARE
                                ; NOT RESEQUENCED, AND INC IS THE INCREMENT.
  21FC'                         RESEQ:
  21FC'   01 000A               	LXI	B,0+10			;ASSUME INC=10
  21FF'   C5                    	PUSH	B			;SAVE ON STACK
  2200'   50                    	MOV	D,B			;RESEQ ALL LINES BY SETTING [D,E]=0
  2201'   58                    	MOV	E,B
  2202'   CA 2232'              	JZ	RESNN			;IF JUST 'RESEQ' RESEQ 10 BY 10
  2205'   FE 2C                 	CPI	54O			;COMMA
  2207'   CA 2214'              	JZ	EATCOM			;DONT USE STARTING # OF ZERO
  220A'   D5                    	PUSH	D			;SAVE [D,E]
  220B'   CD 134F'              	CALL	LINSPC			;GET NEW NN
  220E'   42                    	MOV	B,D			;GET IN IN [B,C] WHERE IT BELONGS
  220F'   4B                    	MOV	C,E
  2210'   D1                    	POP	D			;GET BACK [D,E]
  2211'   CA 2232'              	JZ	RESNN			;IF EOS, DONE
  2214'   CD 0000*              EATCOM:	CALL	SYNCHR
  2217'   2C                    	DB	54O			;EXPECT COMMA
  2218'   CD 134F'              	CALL	LINSPC			;GET NEW MM
  221B'   CA 2232'              	JZ	RESNN			;IF EOS, DONE
  221E'   F1                    	POP	PSW			;GET RID OF OLD INC
  221F'   CD 0000*              	CALL	SYNCHR
  2222'   2C                    	DB	54O			;EXPECT COMMA
  2223'   D5                    	PUSH	D			;SAVE MM
  2224'   CD 135A'              	CALL	LINGET			;GET NEW INC
  2227'   C2 0BEC'              	JNZ	SNERR			;SHOULD HAVE TERMINATED.
  222A'   7A                    	MOV	A,D			;SEE IF INC=0 (ILLEGAL)
  222B'   B3                    	ORA	E
  222C'   CA 134A'              	JZ	FCERR			;YES, BLOW HIM UP NOW
  222F'   EB                    	XCHG				;FLIP NEW INC & [H,L]
  2230'   E3                    	XTHL				;NEW INC ONTO STACK
  2231'   EB                    	XCHG				;GET [H,L] BACK, ORIG [D,E] BACK
  2232'   C5                    RESNN:	PUSH	B			;SAVE NN ON STACK
  2233'   CD 0E1B'              	CALL	FNDLIN			;FIND MM LINE
  2236'   D1                    	POP	D			;GET NN OFF STACK
  2237'   D5                    	PUSH	D			;SAVE NN BACK
  2238'   C5                    	PUSH	B			;SAVE POINTER TO MM LINE
  2239'   CD 0E1B'              	CALL	FNDLIN			;FIND FIRST LINE TO RESEQ.
  223C'   60                    	MOV	H,B			;GET PTR TO THIS LINE IN [H,L]
  223D'   69                    	MOV	L,C
  223E'   D1                    	POP	D			;GET LINE PTD TO BY MM
  223F'   CD 0000*              	CALL	DCOMPR			;COMPARE TO FIRST LINE RESEQED
  2242'   EB                    	XCHG				;GET PTR TO MM LINE IN [H,L]
  2243'   DA 134A'              	JC	FCERR			;CANT ALLOW PROGRAM TO BE RESEQUED
                                					;ON TOP OF ITSELF
  2246'   D1                    	POP	D			;GET NN BACK
  2247'   C1                    	POP	B			;GET INC IN [B,C]
  2248'   F1                    	POP	PSW			;GET RID OF NEWSTT
  2249'   E5                    	PUSH	H			;SAVE PTR TO FIRST LINE TO RESEQ.
  224A'   D5                    	PUSH	D			;SAVE NN ON STACK
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	4-2
RENUMBER

  224B'   C3 225E'              	JMP	NXTRSL
  224E'   09                    NXTRSC:	DAD	B			;ADD INCREMENT INTO
  224F'   DA 134A'              	JC	FCERR			;UH OH, HIS INC WAS TOO LARGE.
  2252'   EB                    	XCHG				;FLIP LINK FIELD, ACCUM.
  2253'   E5                    	PUSH	H			;SAVE LINK FIELD
  2254'   21 FFF9               	LXI	H,0+65529		;TEST FOR TOO LARGE LINE
  2257'   CD 0000*              	CALL	DCOMPR			;COMPARE TO CURRENT #
  225A'   E1                    	POP	H			;RESTORE LINK FIELD
  225B'   DA 134A'              	JC	FCERR			;UH OH, HIS INC WAS TOO LARGE.
  225E'   D5                    NXTRSL:	PUSH	D			;SAVE CURRENT LINE ACCUM
  225F'   5E                    	MOV	E,M			;GET LINK FIELD INTO [D,E]
  2260'   7B                    	MOV	A,E			;GET LOW PART INTO K[A] FOR ZERO TEST
  2261'   23                    	INX	H
  2262'   56                    	MOV	D,M			;GET HIGH PART OF LINK
  2263'   B2                    	ORA	D			;SET CC'S ON LINK FIELD
  2264'   EB                    	XCHG				;SEE IF NEXT LINK ZERO
  2265'   D1                    	POP	D			;GET BACK ACCUM LINE #
  2266'   CA 2271'              	JZ	RESSD1			;ZERO, DONE
  2269'   7E                    	MOV	A,M			;GET FIRST BYTE OF LINK
  226A'   23                    	INX	H			;INC POINTER
  226B'   B6                    	ORA	M			;SET CC'S
  226C'   2B                    	DCX	H			;MOVE POINTER BACK
  226D'   EB                    	XCHG				;BACK IN [D,E]
  226E'   C2 224E'              	JNZ	NXTRSC			;INC COUNT
                                
  2271'   C5                    RESSD1:	PUSH	B			;SAVE INC
  2272'   CD 2294'              	CALL	SCCLIN			;SCAN PROGRAM CONVERTING LINES TO PTRS.
  2275'   C1                    	POP	B			;GET BACK INC
  2276'   D1                    	POP	D			;GET NN
  2277'   E1                    	POP	H			;GET PTR TO FIRST LINE TO RESEQ
                                
  2278'   D5                    RESNX1:	PUSH	D			;SAVE CURRENT LINE
  2279'   5E                    	MOV	E,M			;GET LINK FIELD
  227A'   7B                    	MOV	A,E			;PREPARE FOR ZERO LINK FIELD TEST
  227B'   23                    	INX	H
  227C'   56                    	MOV	D,M
  227D'   B2                    	ORA	D
  227E'   CA 228F'              	JZ	SCCALL			;STOP RESEQING WHEN SEE END OF PGM
  2281'   EB                    	XCHG				;FLIP LINE PTR, LINK FIELD
  2282'   E3                    	XTHL				;PUT LINK ON STACK, GET NEW LINE # OFF
  2283'   EB                    	XCHG				;PUT NEW LINE # IN [D,E], THIS LINE
                                					;PTR IN [H,L]
  2284'   23                    	INX	H			;POINT TO LINE # FIELD.
  2285'   73                    	MOV	M,E			;CHANGE TO NEW LINE #
  2286'   23                    	INX	H
  2287'   72                    	MOV	M,D
  2288'   EB                    	XCHG				;GET THIS LINE # IN [H,L]
  2289'   09                    	DAD	B			;ADD INC
  228A'   EB                    	XCHG				;GET NEW LINE # BACK IN [D,E]
  228B'   E1                    	POP	H			;GET PTR TO NEXT LINE
  228C'   C3 2278'              	JMP	RESNX1			;KEEP RESEQING
  228F'   01 0CA9'              SCCALL:	LXI	B,STPRDY		;WHERE TO GO WHEN DONE
  2292'   C5                    	PUSH	B			;SAVE ON STACK
  2293'   FE                    	DB	376Q			;"CPI AL," CALL SCCPTR
                                ; THE SUBROUTINES SCCLIN AND SCCPTR CONVERT ALL
                                ; LINE #'S TO POINTERS AND VICE-VERSA.
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	4-3
RENUMBER

                                ; THE ONLY SPECIAL CASE IS "ON ERROR GOTO 0" WHERE THE "0"
                                ; IS LEFT AS A LINE NUMBER TOKEN SO IT WONT BE CHANGED BY RESEQUENCE.
                                	PUBLIC	SCCPTR
  2294'   F6                    SCCLIN:	DB	366Q			;"ORI AX," OVER NEXT BYTE
  2295'   AF                    SCCPTR:	XRA	A			;SET A=0
  2296'   32 09CC'              	STA	PTRFLG			;SET TO SAY WHETER LINES OR PTRS EXTANT
  2299'   2A 06BD'              SCNPGM:	LHLD	TXTTAB			;GET PTR TO START OF PGM
  229C'   2B                    	DCX	H			;NOP NEXT INX.
  229D'   23                    SCNPLN:	INX	H			;POINT TO BYTE AFTER ZERO AT END OF LINE
  229E'   7E                    	MOV	A,M			;GET LINK FIELD INTO [D,E]
  229F'   23                    	INX	H			;BUMP PTR
  22A0'   B6                    	ORA	M			;SET CC'S
  22A1'   C8                    	RZ				;RETURN IF ALL DONE.
  22A2'   23                    	INX	H			;POINT PAST LINE #
  22A3'   5E                    	MOV	E,M			;GET LOW BYTE OF LINE #
  22A4'   23                    	INX	H
  22A5'   56                    	MOV	D,M			;GET HIGH BYTE OF LINE #
  22A6'   CD 1232'              SCNEXT:	CALL	CHRGTR			;GET NEXT CHAR FROM LINE
  22A9'   B7                    SCNEX2:	ORA	A			;END OF LINE
  22AA'   CA 229D'              	JZ	SCNPLN			;SCAN NEXT LINE
  22AD'   4F                    	MOV	C,A			;SAVE [A]
  22AE'   3A 09CC'              	LDA	PTRFLG			;CHANGE LINE TOKENS WHICH WAY?
  22B1'   B7                    	ORA	A			;SET CC'S
  22B2'   79                    	MOV	A,C			;GET BACK CURRENT CHAR
  22B3'   CA 2315'              	JZ	SCNPT2			;CHANGING POINTERS TO #'S
  22B6'   FE A8                 	CPI	$ERROR			;IS IT ERROR TOKEN?
  22B8'   C2 22D7'              	JNZ	NTERRG			;NO.
  22BB'   CD 1232'              	CALL	CHRGTR			;SCAN NEXT CHAR
  22BE'   FE 89                 	CPI	$GOTO			;ERROR GOTO?
  22C0'   C2 22A9'              	JNZ	SCNEX2			;GET NEXT ONE
  22C3'   CD 1232'              	CALL	CHRGTR			;GET NEXT CHAR
  22C6'   FE 0E                 	CPI	LINCON			;LINE # CONSTANT?
  22C8'   C2 22A9'              	JNZ	SCNEX2			;NO, IGNORE.
  22CB'   D5                    	PUSH	D			;SAVE [D,E]
  22CC'   CD 1365'              	CALL	LINGT3			;GET IT
  22CF'   7A                    	MOV	A,D			;IS IT LINE # ZERO?
  22D0'   B3                    	ORA	E			;SET CC'S
  22D1'   C2 22E0'              	JNZ	CHGPTR			;CHANGE IT TO A POINTER
  22D4'   C3 2300'              	JMP	SCNEX3			;YES, DONT CHANGE IT
  22D7'   FE 0E                 NTERRG:	CPI	LINCON			;LINE # CONSTANT?
  22D9'   C2 22A6'              	JNZ	SCNEXT			;NOT, KEEP SCANNING
  22DC'   D5                    	PUSH	D			;SAVE CURRENT LINE # FOR POSSIBLE ERROR MSG
  22DD'   CD 1365'              	CALL	LINGT3			;GET LINE # OF LINE CONSTANT INTO [D,E]
  22E0'                         CHGPTR:
  22E0'   E5                    	PUSH	H			;SAVE TEXT POINTER JUST AT END OF LINCON 3 BYTES
  22E1'   CD 0E1B'              	CALL	FNDLIN			;TRY TO FIND LINE IN PGM.
  22E4'   0B                    	DCX	B			;POINT TO ZERO AT END OF PREVIOUS LINE
  22E5'   3E 0D                 	MVI	A,PTRCON		;CHANGE LINE # TO PTR
  22E7'   DA 2328'              	JC	MAKPTR			;IF LINE FOUND CHANE # TO PTR
  22EA'   CD 0000*              	CALL	CRDONZ			;PRINT CRLF IF REQUIRED
  22ED'   21 2305'              	LXI	H,LINM			;PRINT "UNDEFINED LINE" MESSAGE
  22F0'   D5                    	PUSH	D			;SAVE LINE #
  22F1'   CD 0000*              	CALL	STROUT			;PRINT IT
  22F4'   E1                    	POP	H			;GET LINE # IN [H,L]
  22F5'   CD 0000*              	CALL	LINPRT			;PRINT IT
  22F8'   C1                    	POP	B			;GET TEXT PTR OFF STACK
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	4-4
RENUMBER

  22F9'   E1                    	POP	H			;GET CURRENT LINE #
  22FA'   E5                    	PUSH	H			;SAVE BACK
  22FB'   C5                    	PUSH	B			;SAVE BACK TEXT PTR
  22FC'   CD 0000*              	CALL	INPRT			;PRINT IT
  22FF'   E1                    SCNPOP:	POP	H			;POP OFF CURRENT TEXT POINTER
  2300'   D1                    SCNEX3:	POP	D			;GET BACK CURRENT LINE #
  2301'   2B                    	DCX	H			;BACKUP POINTER
  2302'   C3 22A6'              	JMP	SCNEXT			;KEEP SCANNING
                                
  2305'   55 6E 64 65           LINM:	DB	'Undefined line '
  2309'   66 69 6E 65           
  230D'   64 20 6C 69           
  2311'   6E 65 20              
  2314'   00                    	DB	0
                                
  2315'   FE 0D                 SCNPT2:	CPI	PTRCON			;POINTER
  2317'   C2 22A6'              	JNZ	SCNEXT			;NO, KEEP SCANNING
  231A'   D5                    	PUSH	D			;SAVE CURRENT LINE #
  231B'   CD 1365'              	CALL	LINGT3			;GET #
  231E'   E5                    	PUSH	H			;SAVE TEXT POINTER
  231F'   EB                    	XCHG				;FLIP CURRENT TEXT PTR & PTR
  2320'   23                    	INX	H			;BUMP POINTER
  2321'   23                    	INX	H			;POINT TO LINE # FIELD
  2322'   23                    	INX	H
  2323'   4E                    	MOV	C,M			;PICK UP LINE #
  2324'   23                    	INX	H			;POINT TO HIGH PART
  2325'   46                    	MOV	B,M
  2326'   3E 0E                 	MVI	A,LINCON		;CHANGE TO LINE CONSTANT
  2328'   21 22FF'              MAKPTR:	LXI	H,SCNPOP		;PLACE TO RETURN TO AFTER CHANGING CONSTANT
  232B'   E5                    	PUSH	H			;SAVE ON STACK
  232C'   2A 098D'              CONCHG:	LHLD	CONTXT			;GET TXT PTR AFTER CONSTANT IN [H,L]
  232F'   E5                    CONCH2:	PUSH	H			;SAVE PTR TO END OF CONSTANT
  2330'   2B                    	DCX	H
  2331'   70                    	MOV	M,B
  2332'   2B                    	DCX	H
  2333'   71                    	MOV	M,C			;CHANGE TO VALUE IN [B,C]
  2334'   2B                    	DCX	H			;POINT TO CONSTANT TOKEN
  2335'   77                    	MOV	M,A			;CHANGE TO VALUE IN [A]
  2336'   E1                    	POP	H			;RESTORE POINTER TO AFTER CONSTANT
  2337'   C9                    	RET	
                                
                                	PUBLIC	DEPTR
  2338'   3A 09CC'              DEPTR:	LDA	PTRFLG			;DO LINE POINTERS EXIST IN PGM?
  233B'   B7                    	ORA	A			;SET CC'S
  233C'   C8                    	RZ				;NO, JUST RETURN
  233D'   C3 2295'              	JMP	SCCPTR			;CONVERT THEN TO LINE #'S
                                
                                
                                
                                
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	5
ANSI - THE ROUTINES TO HANDLE ANSI FEATURES

                                	SUBTTL	ANSI - THE ROUTINES TO HANDLE ANSI FEATURES
  1415'                         DATAS	SET	DATA
  2340'   CD 0000*              OPTION:	CALL	SYNCHR
  2343'   42                    	DB	'B'
  2344'   CD 0000*              	CALL	SYNCHR
  2347'   41                    	DB	'A'
  2348'   CD 0000*              	CALL	SYNCHR
  234B'   53                    	DB	'S'
  234C'   CD 0000*              	CALL	SYNCHR
  234F'   45                    	DB	'E'
  2350'   3A 0AEA'              	LDA	OPTFLG
  2353'   B7                    	ORA	A			;HAVE WE SEEN OPTION BASE BEFORE
  2354'   C2 0BF5'              	JNZ	DDERR			;IF SO "DOUBLE DIMENSION ERROR"
  2357'   E5                    	PUSH	H			;SAVE THE TEXT POINTER
  2358'   2A 09E7'              	LHLD	ARYTAB			;SEE IF WE HAVE ANY ARRAYS YET
  235B'   EB                    	XCHG	
  235C'   2A 09E9'              	LHLD	STREND
  235F'   CD 0000*              	CALL	DCOMPR			;IF THESE ARE EQUAL WE HAVE NOT
  2362'   C2 0BF5'              	JNZ	DDERR
  2365'   E1                    	POP	H
  2366'   7E                    	MOV	A,M			;GET THE BASE NUMBER
  2367'   D6 30                 	SUI	'0'
  2369'   DA 0BEC'              	JC	SNERR
  236C'   FE 02                 	CPI	2			;ONLY 0 AND 1 ARE LEGAL
  236E'   D2 0BEC'              	JNC	SNERR
  2371'   32 0AE9'              	STA	OPTVAL			;SAVE IF FOR DIM AND PTRGET
  2374'   3C                    	INR	A			;MAKE SURE [A] IS NON ZERO
  2375'   32 0AEA'              	STA	OPTFLG			;FLAG THAT WE HAVE SEEN "OPTION BASE"
  2378'   CD 1232'              	CALL	CHRGTR			;FETCH THE TERMINATOR
  237B'   C9                    	RET	
                                
                                ; THIS ROUTINE IS CALLED BY THE MATH PACKAGE
                                ; TO PRINT ERROR MESSAGES WTOUT DISTURBING PTRFIL, ETC.
  237C'                         STRPRN:
  237C'   7E                    	MOV	A,M			;GET BYTE FROM MESSAGE
  237D'   B7                    	ORA	A			;END OF MESSAGE
  237E'   C8                    	RZ				;YES, DONE
  237F'   CD 2386'              	CALL	CALTTY			;PRINT CHAR
  2382'   23                    	INX	H			;INCREMENT POINTER
  2383'   C3 237C'              	JMP	STRPRN			;PRINT NEXT CHAR
  2386'   F5                    CALTTY:	PUSH	PSW			;SAVE [A] ON STACK
  2387'   C3 0000*              	JMP	TTYCHR			;PUT OUT CHAR
                                					;PRINT CRLF AND RETURN
  238A'   CA 2397'              RANDOM:	JZ	INPRG			;IF NO ARGUMENT ASK FROM TERMINAL
  238D'   CD 191D'              	CALL	FRMEVL			;FETCH THE FORMULA ARGUMENT
  2390'   E5                    	PUSH	H
  2391'   CD 0000*              	CALL	FRCINT			;ALLOW NORMAL INTEGERS
  2394'   C3 23B3'              	JMP	STRNDS			;STORE THE NEW RANDOM SEED
                                	EXTRN	RNDMN2
  2397'   E5                    INPRG:	PUSH	H
  2398'                         INPRAG:
  2398'   21 23BB'              	LXI	H,RANMES		;ASK FOR SOME RANDOM INPUT
  239B'   CD 0000*              	CALL	STROUT
  239E'   CD 0000*              	CALL	QINLIN
  23A1'   D1                    	POP	D			;get back text pointer
  23A2'   DA 0000*              	JC	STPEND			;go away if control c
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	5-1
ANSI - THE ROUTINES TO HANDLE ANSI FEATURES

  23A5'   D5                    	PUSH	D			;resave text pointer
  23A6'   23                    	INX	H			;MOVE PAST BUFMIN TO BUF
  23A7'   7E                    	MOV	A,M			;GET FIRST CHAR OF TYPEIN (FIN EXPECTS IT)
  23A8'   CD 0000*              	CALL	FIN			;READ A NUMBER
  23AB'   7E                    	MOV	A,M			;GET THE TERMINATOR
  23AC'   B7                    	ORA	A
  23AD'   C2 2398'              	JNZ	INPRAG			;DON'T ALLOW BAD FORMAT
  23B0'   CD 0000*              	CALL	FRCINT			;ALLOW NORMAL INTEGERS
  23B3'   22 0001*              STRNDS:	SHLD	RNDX+1
  23B6'   CD 0000*              	CALL	RNDMN2
  23B9'   E1                    	POP	H			;GET BACK THE TEXT POINTER
  23BA'   C9                    	RET	
  23BB'   52 61 6E 64           RANMES:	DB	'Random number seed (-32768- to 32767)'
  23BF'   6F 6D 20 6E           
  23C3'   75 6D 62 65           
  23C7'   72 20 73 65           
  23CB'   65 64 20 28           
  23CF'   2D 33 32 37           
  23D3'   36 38 2D 08           
  23D7'   20 74 6F 20           
  23DB'   33 32 37 36           
  23DF'   37 29                 
  23E1'   00                    	DB	0
                                
                                ;
                                ; THIS CODE SCANS AHEAD TO FIND THE "NEXT" THAT MATCHES A "FOR"
                                ; IN ORDER TO 1) HANDLE EMPTY LOOPS AND 2) MAKE SURE LOOPS
                                ; MATCH UP PROPERLY.
                                ;
                                	PUBLIC	WNDSCN
  23E2'   0E 1D                 WNDSCN:	MVI	C,ERRWH			;SCAN FOR MATCHING WEND THIS IS ERROR IF FAIL
  23E4'   C3 23E9'              	JMP	SCNCNT
  23E7'   0E 1A                 NXTSCN:	MVI	C,ERRFN
  23E9'                         SCNCNT:
  23E9'   06 00                 	MVI	B,0			;SET UP THE COUNT OF "FOR"S SEEN
  23EB'   EB                    	XCHG				;INITIALIZE NXTLIN FOR NEXT ON SAME LINE
  23EC'   2A 06BB'              	LHLD	CURLIN
  23EF'   22 0AE7'              	SHLD	NXTLIN
  23F2'   EB                    	XCHG				;RESTORE THE TEXT POINTER TO [H,L]
  23F3'   04                    FORINC:	INR	B			;INCREMENT THE COUNT WHENEVER "FOR" IS SEEN
  23F4'   2B                    FNLOP:	DCX	H			;** FIX HERE FOR 5.03 CAN'T CALL DATA
  23F5'   CD 1232'              SCANWF:	CALL	CHRGTR			;TO SKIP TO STATEMENT BECAUSE COULD
  23F8'   CA 2405'              	JZ	FORTRM			;HAVE STATEMENT AFTER "THEN"
  23FB'                         NTQTSC:
  23FB'   FE A2                 	CPI	$ELSE			;ELSE STATMENT
  23FD'   CA 241A'              	JZ	FNNWST			;THEN ALLOW NEXT OR WEND AFTER IT
  2400'   FE CF                 	CPI	$THEN			;SO SCAN USING CHRGET WAITING FOR END
  2402'   C2 23F5'              	JNZ	SCANWF			;OF STATEMENT OR $THEN
  2405'   B7                    FORTRM:	ORA	A			;SEE HOW IT ENDED
  2406'   C2 241A'              	JNZ	FNNWST			;JUST NEW STATEMENT -- EXAMINE IT
                                					;OR COULD BE COLON IN STRING BUT NO HARM
                                					;IN NON KANABS (HGHBIT) VERSION SINCE NO RESERVED
                                					;WORDS WILL MATCH THE NEXT CHARACTER
  2409'   23                    	INX	H
  240A'   7E                    	MOV	A,M			;SCAN THE LINK AT THE START OF THE NEXT LINE
  240B'   23                    	INX	H
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	5-2
ANSI - THE ROUTINES TO HANDLE ANSI FEATURES

  240C'   B6                    	ORA	M			;TO SEE IF ITS ZERO (END OF PROGRAM)
  240D'   59                    	MOV	E,C			;SET UP ERROR NUMBER
  240E'   CA 0C06'              	JZ	ERROR
  2411'   23                    	INX	H			;PICK UP THE NEW LINE NUMBER
  2412'   5E                    	MOV	E,M
  2413'   23                    	INX	H
  2414'   56                    	MOV	D,M
  2415'   EB                    	XCHG				;[H,L]= NEW LINE NUMBER
  2416'   22 0AE7'              	SHLD	NXTLIN			;SAVE AS "NEXT" LINE NUMBER
  2419'   EB                    	XCHG	
  241A'   CD 1232'              FNNWST:	CALL	CHRGTR			;GET THE TYPE OF THE NEXT STATEMENT
  241D'   79                    	MOV	A,C			;GET THE ERROR NUMBER TO SEE WHAT WE ARE
  241E'   FE 1A                 	CPI	ERRFN			;SCANNING FOR
  2420'   7E                    	MOV	A,M			;GET BACK THE CHARACTER
  2421'   CA 2433'              	JZ	NXTLOK			;FOR/NEXT SEARCHING
  2424'   FE B4                 	CPI	$WHILE			;ANOTHER WHILE/WEND NEST?
  2426'   CA 23F3'              	JZ	FORINC
  2429'   FE B5                 	CPI	$WEND
  242B'   C2 23F4'              	JNZ	FNLOP
  242E'   05                    	DCR	B
  242F'   C2 23F4'              	JNZ	FNLOP
  2432'   C9                    	RET	
  2433'                         NXTLOK:
  2433'   FE 82                 	CPI	$FOR			;ANOTHER "FOR"?
  2435'   CA 23F3'              	JZ	FORINC			;INCREMENT THE FOR COUNT
  2438'   FE 83                 	CPI	$NEXT			;END WITH NEXT?
  243A'   C2 23F4'              	JNZ	FNLOP			;SKIP OVER THIS STATEMENT
  243D'   05                    DECNXT:	DCR	B			;DECREMENT THE LOOP COUNT
  243E'   C8                    	RZ				;RETURN WITH [H,L] ABOUT TO GET FIRST CHARACTER OF "NEXT" VARIABLE
                                
                                ;
                                ; SCAN  THE VARIABLES LISTED IN A "NEXT" STATEMENT
                                ;
  243F'   CD 1232'              	CALL	CHRGTR			;SEE IF THERE IS A NAME
  2442'   CA 2405'              	JZ	FORTRM			;ONLY ONE SO SCAN MORE STATEMENTS
  2445'   EB                    	XCHG				;SAVE TEXT POINTER IN [D,E]
  2446'   2A 06BB'              	LHLD	CURLIN			;SAVE THE CURRENT LINE NUMBER
  2449'   E5                    	PUSH	H
  244A'   2A 0AE7'              	LHLD	NXTLIN			;MAKE ERROR COME FROM "NEXT"
  244D'   22 06BB'              	SHLD	CURLIN
  2450'   EB                    	XCHG				;[H,L]= TEXT POINTER
  2451'   C5                    	PUSH	B			;SAVE THE "FOR" COUNT
  2452'   CD 0000*              	CALL	PTRGET			;SKIP OVER THE VARIABLE NAME
  2455'   C1                    	POP	B			;GET BACK THE "FOR" COUNT
  2456'   2B                    	DCX	H			;CHECK TERMINATOR
  2457'   CD 1232'              	CALL	CHRGTR
  245A'   11 2405'              	LXI	D,FORTRM		;PLACE TO GO TO
  245D'   CA 2468'              	JZ	TRMNXT			;END OF "NEXT"
  2460'   CD 0000*              	CALL	SYNCHR
  2463'   2C                    	DB	44			;SHOULD HAVE COMMAS IN BETWEEN
  2464'   2B                    	DCX	H			;RESCAN FIRST CHARACTER
  2465'   11 243D'              	LXI	D,DECNXT		;PLACE TO GO BACK TO
  2468'   E3                    TRMNXT:	XTHL				;SAVE THE TEXT POINTER ON THE STACK
  2469'   22 06BB'              	SHLD	CURLIN
  246C'   E1                    	POP	H
  246D'   D5                    	PUSH	D			;GO OFF TO ADDRESS IN [B,C]
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	5-3
ANSI - THE ROUTINES TO HANDLE ANSI FEATURES

  246E'   C9                    	RET	
                                ;
                                ; THIS ROUTINE CLEARS FLGOVC TO RESET TO NORMAL OVERFLOW MODE.
                                ; IN NORMAL MODE, OVERR ALWAYS PRINTS OVERFLOW BECAUSE FLGOVC=0
                                ; FUNCTION DISPATCH, FIN (&FINDBL), AND EXPONENTIATION SET UP AN OVERFLOW
                                ; MODE WHERE FLGOVC=1 AND AFTER ONE OVERFLOW FLGOVC=2 AND NO MORE
                                ; OVERFLOW MESSAGES ARE PRINTED. FIN (&FINDBL) ALSO STORE FLGOVC IN OVCSTR
                                ; BEFORE RESETTING FLGOVC SO A CALLER CAN DETECT OVERFLOW OCCURANCE.
                                ;
                                	PUBLIC	CLROVC,FINOVC
  246F'   F5                    FINOVC:	PUSH	PSW
  2470'   3A 0B2C'              	LDA	FLGOVC			;STORE OVERFLOW FLAG TO INDICATE
  2473'   32 0B2D'              	STA	OVCSTR			;WHETHER AN OVERFLOW OCCURED
  2476'   F1                    	POP	PSW
  2477'   F5                    CLROVC:	PUSH	PSW			;SAVE EVERYTHING
  2478'   AF                    	XRA	A			;NORMAL OVERFLOW MODE
  2479'   32 0B2C'              	STA	FLGOVC
  247C'   F1                    	POP	PSW
  247D'   C9                    	RET	
                                
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	6
ANSI - THE ROUTINES TO HANDLE ANSI FEATURES

                                
                                	END	START
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	S
ANSI - THE ROUTINES TO HANDLE ANSI FEATURES

Macros:

Symbols:
0086 	$ABS            00F7 	$AND            0095 	$ASC            
008E 	$ATN            00AB 	$AUTO           00B6 	$CALL           
009E 	$CDBL           00B9 	$CHAIN          0096 	$CHR$           
009C 	$CINT           0092 	$CLEAR          009C 	$CLOAD          
00C3 	$CLOSE          00B8I 	$COMMO          009A 	$CONT           
008C 	$COS            009B 	$CSAVE          009D 	$CSNG           
00AD 	$CVD            00AB 	$CVI            00AC 	$CVS            
0084 	$DATA           0098 	$DEF            00B0 	$DEFDB          
00AE 	$DEFIN          00AF 	$DEFSN          00AD 	$DEFST          
00AAI 	$DELET          0086 	$DIM            009F 	$DUMMY          
00A7 	$EDIT           00A2 	$ELSE           0081 	$END            
00AF 	$EOF            00FA 	$EQV            00A6 	$ERASE          
00D6 	$ERL            00D7 	$ERR            00A8 	$ERROR          
008B 	$EXP            00C0 	$FIELD          00C6 	$FILES          
009F 	$FIX            00D3 	$FN             0082I 	$FOR            
008F 	$FRE            00C1 	$GET            008D 	$GOSUB          
0089 	$GOTO           009A 	$HEX$           008B 	$IF             
00FB 	$IMP            00DDI 	$INKEY          0090 	$INP            
0085 	$INPUT          00DA 	$INSTR          0085 	$INT            
00C8 	$KILL           0081 	$LEFT$          0092 	$LEN            
0088 	$LET            00B1 	$LINE           0093 	$LIST           
009F 	$LLIST          00C4 	$LOAD           00B0 	$LOC            
00B1 	$LOF            008A 	$LOG            009B 	$LPOS           
009E 	$LPRIN          00C9 	$LSET           00C5I 	$MERGE          
0083 	$MID$           00B4 	$MKD$           00B2 	$MKI$           
00B3 	$MKS$           00FC 	$MOD            00C7 	$NAME           
0094 	$NEW            0083 	$NEXT           00D5 	$NOT            
0096 	$NULL           0099 	$OCT$           0095 	$ON             
00BF 	$OPEN           00BA 	$OPTIO          00F8 	$OR             
009D 	$OUT            0097 	$PEEK           0099 	$POKE           
0091 	$POS            0091 	$PRINT          00C2 	$PUT            
00BB 	$RANDO          0087 	$READ           008F 	$REM            
00AC 	$RENUM          00CC 	$RESET          008C 	$RESTO          
00A9 	$RESUM          008E 	$RETUR          0082 	$RIGHT          
0088 	$RND            00CA 	$RSET           008A 	$RUN            
00CB 	$SAVE           0084 	$SGN            0089 	$SIN            
0098 	$SPACE          00D4 	$SPC            0087 	$SQR            
00D1 	$STEP           0090 	$STOP           0093 	$STR$           
00D8 	$STRIN          00A5 	$SWAP           00BD 	$SYSTE          
00D0 	$TAB            008D 	$TAN            00CF 	$THEN           
00CE 	$TO             00A4 	$TROFF          00A3 	$TRON           
00D9 	$USING          00D2 	$USR            0094 	$VAL            
00DC 	$VARPT          0097 	$WAIT           00B5 	$WEND           
00B4I 	$WHILE          00A1 	$WIDTH          00B7 	$WRITE          
00F9 	$XOR            00A9*	ABS             0E0E'	ALLLST          
0107'	ALPTAB          1BB2'	ALPTST          19D6'	ANDORD          
19FF'	APPLOP          0B37I'	ARG             0B30I'	ARGLO           
0AD8I'	ARYTA2          09E7I'	ARYTAB          00C7*	ASC             
1D9A'	ASGMOR          1701'	ASPA2           1702'	ASPAC           
013B'	ATAB            00B9*	ATN             00B9I'	ATNFIX          
008E 	ATNTK           0CE5'	AUTELN          09CDI'	AUTFLG          
0CFD'	AUTGOD          09D0'	AUTINC          09CE'	AUTLIN          
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	S-1
ANSI - THE ROUTINES TO HANDLE ANSI FEATURES

1544'	AUTO            0CF6'	AUTRES          0D12'	AUTSTR          
10DB'	BAKSP           1ED4'	BCTRAL          1ED9'	BCTRAN          
0D88*	BLTU            0000*	BLTUC           000C 	BOTCON          
0B6DI'	BRKTXT          0000*	BSERR           014C'	BTAB            
0885I'	BUF             00FF 	BUFLEN          2000I'	BUFLIN          
0884I'	BUFMIN          0002 	BUFOFS          0071*	CALLS           
2386I'	CALTTY          194D*	CAT             1C84'	CGETYP          
0077*	CHAIN           06ACI'	CHARC           0DD2'	CHEAD           
22E0'	CHGPTR          167F'	CHKCOM          1C19*	CHKSTR          
0B16I'	CHNFLG          0B17I'	CHNLIN          00C9*	CHR$            
1237I'	CHRCON          1233I'	CHRGT2          1232I'	CHRGTR          
0EA6'	CKGOSU          0F6D'	CKSNGQ          0029*	CLEAR           
13A3*	CLEARC          06B4'	CLMLST          000E 	CLMWID          
0BEC'	CLOAD           008B*	CLOSE           2477I'	CLROVC          
0000*	CLSALL          0B12I'	CMEPTR          0B14I'	CMSPTR          
1B7FI'	CNSGET          11D4*	CNTCCN          06B6I'	CNTOFL          
1052'	COLIS           0000*	COMMON          164F'	COMPRT          
232F'	CONCH2          232C'	CONCHG          0010 	CONCN2          
001E 	CONCON          12B8'	CONFAC          12F2'	CONFDB          
1C65*	CONIA           1F8EI'	CONINT          2117'	CONLIN          
0991'	CONLO           13A2'	CONRUN          098F'	CONSAV          
1255'	CONSCN          1AA9*	CONSIH          1F39'	CONSOL          
11CEI'	CONST2          0039*	CONT            000F 	CONTO           
098D'	CONTXT          0990'	CONTYP          14A8'	COPNUM          
00B5*	COS             00B5I'	COSFIX          0005 	CPMENT          
0743I'	CPMREA          0742I'	CPMVRN          0744I'	CPMWRI          
0000 	CPMWRM          1FF1*	CRDO            1073'	CRDONE          
22EB*	CRDONZ          0E3B'	CRUNCH          0BEC'	CSAVE           
0000I 	CSTS            014D'	CTAB            06BBI'	CURLIN          
00F7*	CVD             00F3*	CVI             00F5*	CVS             
0DF3'	CZLIN           0DDC'	CZLOO2          0DDA'	CZLOOP          
0395*	DADD            1C90'	DANDOR          1415I'	DATA            
1414'	DATAH           1415'	DATAS           187A'	DATBK           
18F1'	DATFND          09C6'	DATLIN          18EE'	DATLOP          
0080 	DATPSC          09EBI'	DATPTR          0BE6'	DATSNE          
001F 	DBLCON          1A47'	DBLDPC          0395'	DBLDSP          
2169'	DBLSCN          0000 	DBLTRN          039D*	DCOMP           
2360*	DCOMPR          2075*	DCXBRT          0BF5I'	DDERR           
039B*	DDIV            243D'	DECNXT          1D45'	DEF             
1306'	DEFCON          1304'	DEFDBL          12FE'	DEFINT          
1301'	DEFREA          12FB'	DEFSTR          09EDI'	DEFTBL          
1D34'	DEFUSR          21ADI'	DEL             2187'	DELETE          
2338I'	DEPTR           0BC3I'	DERBFM          0BC9I'	DERBFN          
0BD8I'	DERBRN          0BBDI'	DERDFL          0BE1I'	DERFAE          
0BD2I'	DERFAO          0BC6I'	DERFNF          0BDBI'	DERFOV          
0BCCI'	DERIER          0BC0I'	DERIOE          0BD5I'	DERNMF          
0BCFI'	DERRPE          0BDEI'	DERTMF          0B23I'	DFACLO          
0011*	DIM             0989I'	DIMFLG          0D41*	DIRDO           
0080I 	DIRTMP          1C47'	DISPAT          0462I'	DIVMSG          
00F5 	DIVTK           1726*	DLINE           0399*	DMULT           
14A4'	DNTCPY          18AAI'	DOASIG          1C5D'	DOCMP           
1EC5I'	DOCNVF          1595'	DOCOND          1A5D'	DODSP           
1B57'	DOMIN           098C'	DONUM           19AA'	DORELS          
098B'	DORES           16F0'	DOSIZT          09D8I'	DOT             
09BCI'	DSCPTR          09BBI'	DSCTMP          0031 	DSKERR          
0613'	DSKLOC          06C4I'	DSKMOD          0397*	DSUB            
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	S-2
ANSI - THE ROUTINES TO HANDLE ANSI FEATURES

0187'	DTAB            0BEFI'	DV0ERR          2214'	EATCOM          
0D37I'	EDENT           0053*	EDIT            0D1A*	EDITRT          
1417'	ELSES           0987I'	ENDBUF          0BBA'	ENDCNJ          
0BBB*	ENDCON          09C4I'	ENDFOR          0007*	ENDS            
1814'	ENDSCN          00FB*	EOF             00F0I 	EQULTK          
0051*	ERASE           00D7 	ERCTK           0C1FI'	ERESET          
00D6 	ERLTK           0036 	ERRBFM          0034I 	ERRBFN          
003F 	ERRBRN          0009I 	ERRBS           0011I 	ERRCN           
000AI 	ERRDD           003D 	ERRDFL          1EDF'	ERRDIR          
000B 	ERRDV0          0CC3*	ERREDT          0C1C'	ERRESM          
003A 	ERRFAE          0037 	ERRFAO          0005 	ERRFC           
0042I 	ERRFDR          0C85I'	ERRFIN          06ADI'	ERRFLG          
001A 	ERRFN           0C92'	ERRFN1          0035I 	ERRFNF          
0032I 	ERRFOV          001F 	ERRGS           000C 	ERRID           
0033I 	ERRIER          0039 	ERRIOE          0017I 	ERRLBO          
09D6I'	ERRLIN          000FI 	ERRLS           0041 	ERRMMM          
0016 	ERRMO           0C25'	ERRMOR          0001 	ERRNF           
0040 	ERRNMF          0013 	ERRNR           0004 	ERROD           
0007I 	ERROM           0C06I'	ERROR           1539'	ERRORS          
0006 	ERROV           0014 	ERRRE           0003 	ERRRG           
003E 	ERRRPE          0002 	ERRSN           000EI 	ERRSO           
0010I 	ERRST           03B3'	ERRTAB          000D 	ERRTM           
0043 	ERRTMF          09DA'	ERRTXT          0015 	ERRUE           
0012 	ERRUF           0008 	ERRUS           001EI 	ERRWE           
001DI 	ERRWH           01B0'	ETAB            1AAEI'	EVAL            
141B'	EXCHQT          00B3*	EXP             19C8'	EXPSTK          
00F6 	EXPTK           0B2AI'	FAC             1A6B'	FACDBL          
0B27I'	FACLO           1A8A'	FACSNG          21FA*	FADD            
0000*	FADDS           15A7'	FALSIF          0B2EI'	FANSII          
0B38I'	FBUFFR          134AI'	FCERR           219F'	FCERRG          
03A7*	FCOMP           03A5*	FDIV            1AAC*	FDIVT           
0085*	FIELD           0091*	FILES           15C8*	FILGET          
1887*	FILIND          1784*	FILINP          0711I'	FILNA2          
0721I'	FILNAM          0000*	FILOUT          06C5I'	FILPT1          
06C7I'	FILPTR          1783'	FILSTI          23A9*	FIN             
1E28'	FINASG          18CA*	FINDBL          1C44'	FINGO           
0DAAI'	FINI            12A2'	FININ1          0000*	FININL          
0CAB*	FINLPT          246FI'	FINOVC          18EA'	FINPRG          
1713I'	FINPRT          19E2'	FINREL          19A3'	FINTMP          
1E37'	FINVLS          00DB*	FIXER           1B48*	FIXINP          
09C9'	FLGINP          0B2CI'	FLGOVC          0000*	FLOAT           
0000*	FLOATR          0FBC'	FLTGET          12D2'	FLTLIN          
0B60I'	FMLTT1          0B61I'	FMLTT2          03A3*	FMULT           
0B73I'	FNDFOR          0E1BI'	FNDLIN          0E19'	FNDLN1          
1D6E'	FNDOER          1F0B'	FNINP           23F4'	FNLOP           
241A'	FNNWST          1F16'	FNOUT           00D3 	FNTK            
1F1C'	FNWAIT          10EE'	FOR             23F3'	FORINC          
0010 	FORSIZ          0010I 	FORSZC          2405'	FORTRM          
2115*	FOUT            210F*	FOUTH           210A*	FOUTO           
0000*	FPWR            19CF*	FPWRQ           1A58*	FRCDBL          
1285'	FRCINC          23B1*	FRCINT          1C38*	FRCSNG          
0000*	FRCSTR          038B'	FRCTBL          00BB*	FRE             
1D0C*	FREFAC          0000*	FRESTR          0000*	FRETMP          
14A5*	FRETMS          09BEI'	FRETOP          191EI'	FRMCHK          
1912I'	FRMEQL          191DI'	FRMEVL          1919I'	FRMPRN          
21E0I'	FRQINT          03A1*	FSUB            01D5'	FTAB            
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	S-3
ANSI - THE ROUTINES TO HANDLE ANSI FEATURES

0ADDI'	FUNACT          009F'	FUNDSP          0AE3I'	FVALSV          
0000*	GARBA2          0087*	GET             17C4'	GETAGN          
0000*	GETBCD          1F8BI'	GETBYT          1EED'	GETFNM          
1F6CI'	GETIN2          1F69I'	GETINT          1B18*	GETPTR          
0000*	GETSPA          1E44*	GETSTK          1C7FI'	GETYPR          
1CDCI'	GIVDBL          1CF1I'	GIVINT          1541'	GOERR           
1212I'	GONE            121A'	GONE2           1219'	GONE3           
11ED'	GONE4           13AB'	GOSUB           13C3'	GOTO            
13C6'	GOTO2           0EB4'	GPUTRS          00EF 	GREATK          
0E8B'	GSKPSP          01EB'	GTAB            1F88I'	GTBYTC          
0000*	GTMPRT          000C 	HEXCON          1BE9'	HEXFIN          
1BE9'	HOCFIN          01FD'	HTAB            03A9*	IADD            
03B1*	ICOMP           1C9E*	IDIV            00FD 	IDIVTK          
157A'	IFS             1C99*	IMOD            03AD*	IMULT           
000F 	IN2CON          149C'	INBUFC          0000*	INCHRI          
0000*	INDSKC          0000*	INEG            1CE3*	INEG2           
0001*	INIT            1B3E*	INKEY           0D1D*	INLIN           
176C'	INPBAK          17BD'	INPCMA          1852'	INPCN3          
1457'	INPCOM          185C'	INPCON          0ADFI'	INPPAS          
2398'	INPRAG          2397'	INPRG           22FD*	INPRT           
178D'	INPUT           1F11'	INPWRD          0000*	INRART          
00DA 	INSRTK          1B39*	INSTR           0000*	INT             
001C 	INTCON          1A9F'	INTDIV          1A34'	INTDPC          
03A9'	INTDSP          1F6F'	INTFR2          1346I'	INTID2          
1343I'	INTIDX          0B63I'	INTXT           214A*	INXHRT          
0045I'	IOGOR           1FC0*	ISCNTC          1672'	ISCTTY          
1BEE'	ISFUN           14ED'	ISGOSU          1176*	ISIGN           
131E*	ISLET           20EE*	ISLET2          1EFB'	ISMID$          
0F05'	ISRESW          162F'	ISTTY           03AB*	ISUB            
1B65'	ISVAR           0F00'	ISVARS          0202'	ITAB            
10BA'	JKLOOP          0000I'	JMPINI          10D8'	JNTRS6          
021E'	JTAB            013E 	KBFLEN          0746'	KBUF            
0095*	KILL            0E48'	KLOOP           1088'	KRNSAV          
1086'	KRNSVC          109E'	KRNVAR          021F'	KTAB            
1B63'	LABBCK          009B 	LASNUM          108EI'	LBOERR          
009F*	LEFT$           00C1*	LEN             0C78'	LEPSKP          
00F1 	LESSTK          1441'	LET             1456'	LETCN2          
1463'	LETCN4          1466'	LETCN5          1471'	LETCN6          
143BI'	LETCON          0D7F'	LEVFRE          0D5E'	LEXIST          
1F09*	LHSMID          1648'	LINCH2          1645'	LINCHK          
000E 	LINCON          171F'	LINE            135AI'	LINGET          
135B'	LINGT2          1365'	LINGT3          0DCEI'	LINKER          
06B3I'	LINLEN          0050 	LINLN           2305'	LINM            
22F6*	LINPRT          1644I'	LINPT3          167EI'	LINPT4          
134FI'	LINSPC          1FF6I'	LISPRT          1F9FI'	LIST            
1FA7'	LIST4           1F9A'	LLIST           0070 	LNCMPS          
16C6'	LNOMOD          008D*	LOAD            00FD*	LOC             
00FF*	LOF             00B1*	LOG             0E1E'	LOOP            
0B77'	LOOPER          14EE'	LOOPON          1868'	LOPDAT          
1864'	LOPDT2          1B99'	LOPHEX          1F31'	LOPINP          
1BC7'	LOPOC2          1BC8'	LOPOCT          0ECF'	LOPPSI          
19AC'	LOPREL          0F21'	LOPSK2          0F20'	LOPSKP          
1332'	LPDCHG          1120'	LPFORM          1920'	LPOPER          
1CE5'	LPOS            15BD'	LPRINT          1DFB'	LPSIZL          
0084 	LPTLEN          06AEI'	LPTLST          16BB'	LPTMDF          
06AFI'	LPTPOS          06B2I'	LPTSIZ          13A0*	LRUN            
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	S-4
ANSI - THE ROUTINES TO HANDLE ANSI FEATURES

0097*	LSET            0044 	LSTERR          06C1I'	LSTFRE          
000C 	LSTOPK          0224'	LTAB            0CC5I'	MAIN            
1CF3*	MAKINT          2328'	MAKPTR          1290'	MAKTKN          
1B75I'	MAKUPL          1B76I'	MAKUPS          06E7I'	MAXFIL          
0B0DI'	MAXREC          06C3I'	MAXTRK          0003 	MD.RND          
0001 	MD.SQI          0002 	MD.SQO          0B11I'	MDLFLG          
0999I'	MEMSIZ          008F*	MERGE           00A3*	MID$            
0083 	MIDTK           1C4DI'	MINPLS          00F3I 	MINUTK          
0105*	MKD$            0101*	MKI$            0103*	MKS$            
21B1'	MLOOP           0DA0'	MLOOPR          0C01'	MOERR           
1685'	MORCOM          1F57'	MORCP2          1F5E'	MORCP3          
1371'	MORLIN          20CD'	MORLN0          20D4'	MORLN1          
20D3'	MORLNP          20C2'	MORLNZ          20D1'	MORPUR          
0FFC'	MOVCON          0000*	MOVE            129D*	MOVE1           
0000*	MOVFM           1A55*	MOVFR           1110*	MOVMF           
1A92*	MOVRF           0000*	MOVRM           0B10I'	MRGFLG          
0258'	MTAB            00F4 	MULTK           06E9I'	NAMBUF          
06E8I'	NAMCNT          0093*	NAME            0028 	NAMLEN          
070FI'	NAMTMP          1C8C'	NCASE           0038 	NCMPOS          
18A4'	NCOLST          0000*	NEG             15CA'	NEWCHR          
11CDI'	NEWSTT          000B*	NEXT            11C7*	NEXTS           
0BF2I'	NFERR           06B1I'	NLPPOS          16D9*	NMLO.C          
0003 	NMREL           1D2D'	NOARGU          1EA1'	NOCPRS          
2181'	NOD             1058'	NODATT          0D6B'	NODEL           
0ADAI'	NOFUNS          209A'	NOISPA          001F 	NONDSK          
1FE7'	NOSPAL          170C'	NOTABR          1CBA'	NOTAND          
1535'	NOTBGL          12AB'	NOTCON          1CD2'	NOTEQV          
1C6A'	NOTER           0F2C'	NOTFN2          0F2B'	NOTFNT          
1C3B'	NOTFRF          0EBA'	NOTGOS          12B0'	NOTLFT          
113F'	NOTOL           1CAF'	NOTOR           17C3'	NOTQTI          
0C57'	NOTRAP          1093'	NOTRES          1327'	NOTRNG          
10CF'	NOTRS1          0F5E'	NOTRS2          10BD'	NOTRS5          
0F60'	NOTRS6          1934'	NOTSTV          1F30'	NOTTHR          
00D5 	NOTTK           1211'	NOTTRC          1F51'	NOTWLP          
1CC5'	NOTXOR          18A7'	NOWGET          1907'	NOWLIN          
0271'	NTAB            0D1C'	NTAUTO          0FFB'	NTDBL           
0C75'	NTDER2          1AEB'	NTDERC          0C78'	NTDERR          
2022'	NTEMBL          1AF1'	NTERC           1B02'	NTERL           
22D7'	NTERRG          20AD'	NTFNEX          2064'	NTFNTK          
17B9'	NTICMA          0FE8'	NTINTG          12D8'	NTLINE          
0C42'	NTMDCN          1C03'	NTMRND          14DE'	NTOERR          
194F'	NTPLUS          23FB'	NTQTSC          2072'	NTQTTK          
125B'	NTRSC2          1250'	NTRSCC          101E'	NTSNGT          
20B9'	NTSPCH          20E9'	NTSPCT          1B31'	NTVARP          
06ABI'	NULCNT          0031*	NULL            004C 	NUMCMD          
12B6'	NUMCON          2178'	NUMDN           0005 	NUMGFN          
18BD'	NUMINS          001D 	NUMLEV          20F8'	NUMLIN          
1973'	NUMREL          214C'	NUMSL2          2135'	NUMSLN          
000A 	NUMTMP          0F90'	NUMTRY          1B1E'	NVRFIL          
11C9I'	NXTCON          0AE2I'	NXTFLG          1BB9'	NXTHEX          
0AE7I'	NXTLIN          2433'	NXTLOK          224E'	NXTRSC          
225E'	NXTRSL          23E7'	NXTSCN          0AE0I'	NXTTXT          
1B84I'	OCTCNS          000B 	OCTCON          1BE9'	OCTFIN          
158D'	OKGOTO          1C2A'	OKNORM          181F'	OKVLST          
09E1I'	OLDLIN          09E3I'	OLDTXT          0000*	OMERR           
0011 	ONECON          09DEI'	ONEFLG          0081 	ONEFUN          
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	S-5
ANSI - THE ROUTINES TO HANDLE ANSI FEATURES

1271'	ONEI            1276'	ONEI2           09DCI'	ONELIN          
119F'	ONEON           14AE'	ONGOTO          0004 	OPCNT           
0083*	OPEN            098B'	OPRTYP          037F'	OPTAB           
0AEAI'	OPTFLG          2340'	OPTION          0AE9I'	OPTVAL          
0284'	OTAB            1FFA*	OUTCH1          1FE5*	OUTDO           
1F19I'	OUTWRD          0B2DI'	OVCSTR          0BFEI'	OVERR           
06BFI'	OVERRI          0409I'	OVRMSG          1B4F'	PARCHK          
0A0BI'	PARM1           0A73'	PARM2           0AEBI'	PATCH           
21C1'	PEEK            200F'	PLOOP           2013'	PLOOP2          
2047'	PLOOPG          2049'	PLOOPH          205B'	PLOOPR          
2057'	PLOOPZ          00F2I 	PLUSTK          21CB'	POKE            
1DE0'	POPAS2          1DE4'	POPASG          0B99'	POPGOF          
1D01*	POPHRT          1392'	POPHSR          0FB5'	POPSTF          
1CEB'	POS             20DA*	PPSWRT          0BA8'	PRGEND          
0CB2*	PRGFIN          15C5'	PRINT           15D1'	PRINTC          
15D7*	PRINUS          0AD7I'	PRMFLG          0A09I'	PRMLEN          
0A71I'	PRMLN2          0A6FI'	PRMPRV          0064 	PRMSIZ          
0A07I'	PRMSTK          200A*	PROCHK          21D4*	PRODIR          
0B0FI'	PROFLG          06B0I'	PRTFLG          2036'	PRTVAR          
029A'	PTAB            000D 	PTRCON          06B7I'	PTRFIL          
09CCI'	PTRFLG          2453*	PTRGET          1EF9*	PTRGT2          
0000*	PUFOUT          1AA6*	PUSHF           1976'	PUSVAL          
0089*	PUT             0000*	PUTNEW          1E9F*	PUTTMP          
0043 	Q               239F*	QINLIN          0000*	QINT            
02AE'	QTAB            1799'	QTINP           238A'	RANDOM          
23BB'	RANMES          1778'	RDOIN2          1779'	RDOINP          
1857'	READ            0CAAI'	READY           0BA2I'	READYR          
0000*	REASON          0B68I'	REDDY           144D'	REDINP          
0BFB'	REERR           173E'	RELINE          1417'	REM             
141E'	REMER           141F'	REMER1          1419'	REMZER          
0CBAI'	REPINI          1705'	REPOUT          21FC'	RESEQ           
009D*	RESET           18E7*	RESFIN          013B'	RESLST          
2232'	RESNN           2278'	RESNX1          151C'	RESNXT          
2271'	RESSD1          2081'	RESSR1          2084'	RESSR2          
2080'	RESSR3          2082'	RESSRC          001D*	RESTORE         
14CB'	RESTRP          1520'	RESTXT          14FC'	RESUME          
1930'	RETAOP          1C7C'	RETAPG          13FA'	RETURN          
1B68I'	RETVAR          00A1*	RIGHT$          00AD*	RND             
23B7*	RNDMN2          1BFF*	RNDMON          23B4*	RNDX            
0099*	RSET            02AF'	RTAB            06B5I'	RUBSW           
1395'	RUN             1396*	RUNC            13C2'	RUNC2           
212A'	SAVBAS          009B*	SAVE            0B0BI'	SAVFRE          
0FB0'	SAVI            0FAE'	SAVINT          09D4I'	SAVSTK          
09D2I'	SAVTXT          23F5'	SCANWF          228F'	SCCALL          
2294'	SCCLIN          2295I'	SCCPTR          23E9'	SCNCNT          
17FB'	SCNCON          22A9'	SCNEX2          2300'	SCNEX3          
22A6'	SCNEXT          0DFBI'	SCNLIN          1D5E'	SCNLIS          
17FA'	SCNOPN          2299'	SCNPGM          229D'	SCNPLN          
22FF'	SCNPOP          2315'	SCNPT2          1793*	SCNSEM          
175E'	SCNSTR          1D14'	SCNUSR          187B'	SCNVAL          
002D*	SCRATH          0000*	SCRTCH          1A57'	SETDBL          
1F78'	SETIO           00A5*	SGN             119C*	SIGN            
0000*	SIGNC           0000*	SIGNS           00AF*	SIN             
00AFI'	SINFIX          17D6*	SINLIN          15A9'	SKPMRF          
0BECI'	SNERR           1567'	SNGAU1          1566'	SNGAUT          
001D 	SNGCON          1A52'	SNGDBL          1A84'	SNGDO           
BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen	MACRO-80 3.44	09-Dec-81	PAGE	S-6
ANSI - THE ROUTINES TO HANDLE ANSI FEATURES

1A82'	SNGDPC          039F'	SNGDSP          1CEE'	SNGFLI          
1CEFI'	SNGFLT          117B'	SNGFOR          0E17'	SNGLIN          
00DB 	SNGQTK          00CD*	SPACE$          169D'	SPCNDC          
036A'	SPCTAB          00D4 	SPCTK           00AB*	SQR             
00AB'	SQRFIX          0087 	SQRTK           100E'	SRCSP2          
100B'	SRCSPC          02ED'	STAB            1F31'	STAINP          
0000I'	START           00D1 	STEPTK          1A44'	STKDBL          
0C23*	STKERR          0000*	STKINI          1A7F'	STKSNG          
0B85'	STKSRC          0007'	STMDSP          0025*	STOP            
23A3*	STPEND          0CA9I'	STPRDY          119E'	STPSGN          
00C3*	STR$            105E'	STR1            19FA*	STRCMP          
1E9C*	STRCPY          18CC'	STRDN2          1605'	STRDON          
09E9I'	STREND          00D1*	STRH$           15FD*	STRLIT          
18A8*	STRLT2          1743*	STRLT3          1AD4*	STRLTI          
23B3'	STRNDS          106A'	STRNG           1B43*	STRNG$          
106C'	STRNG2          00CF*	STRO$           0000*	STROUI          
239C*	STROUT          237CI'	STRPRN          17BF*	STRPRT          
0003 	STRSIZ          1040'	STUFFH          09C8I'	SUBFLG          
17D5'	SUPPRS          004F*	SWAP            0B19I'	SWPTMP          
2461*	SYNCHR          007F*	SYSTEM          0CA0*	SYSTME          
168E'	TABER           00D0 	TABTK           00B7*	TAN             
00B7I'	TANFIX          16A5'	TBNONG          09CAI'	TEMP            
09DFI'	TEMP2           09C0I'	TEMP3           09C2I'	TEMP8           
0ADBI'	TEMP9           0B09I'	TEMPA           099BI'	TEMPPT          
099DI'	TEMPST          00CF 	THENTK          0C04I'	TMERR           
004D*	TOFF            004B*	TON             001B 	TOPCON          
06B9I'	TOPMEM          0B21I'	TRCFLG          1771'	TRMNOK          
2468'	TRMNXT          18D8'	TRMOK           0000 	TRUROM          
0ECE'	TRYAGA          174B'	TRYAGN          06BD*	TSTACK          
20ED'	TSTANM          0F80'	TSTNUM          192DI'	TSTOP           
0322'	TTAB            2388*	TTYCHR          16ED'	TTYIST          
0988I'	TTYPOS          06BDI'	TXTTAB          2146'	TYPSET          
0BF8'	UFERR           0000*	UMULT           0C73'	UPERR           
1D24'	USERCN          13F5I'	USERR           09C9I'	USFLG           
00D9 	USINTK          1CF5'	USRFN           0697'	USRTAB          
00D2 	USRTK           0339'	UTAB            00C5*	VAL             
0000*	VALINT          1A18'	VALNSM          0000*	VALSNG          
098AI'	VALTYP          17E5'	VARLOP          1B21I'	VARRET          
09E5I'	VARTAB          0000*	VDFACS          00A7*	VINT            
1A6D*	VMOVAF          14A9*	VMOVE           0000*	VMOVFA          
1DF1*	VMOVFM          1DC2*	VMOVMF          1B61*	VNEG            
199B'	VPUSHD          158F*	VSIGN           0342'	VTAB            
006F*	WEND            006D*	WHILE           0006 	WHLSIZ          
1F3C'	WIDTH           23E2I'	WNDSCN          0073*	WRITE           
034C'	WTAB            1034'	WUZOCT          0364'	XTAB            
0368'	YTAB            2173'	ZERE            0000*	ZERO            
0369'	ZTAB            



No Fatal error(s)


   14A9*	VMOVE           0000*	VMOVFA          
1DF