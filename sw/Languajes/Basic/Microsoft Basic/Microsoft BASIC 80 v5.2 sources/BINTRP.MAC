	SUBTTL	Common file for BASIC interpreter
	.SALL	

CONTO	SET	15			;CHARACTER TO SUPRESS OUTPUT (USUALLY CONTROL-O)
DBLTRN	SET	0			;FOR DOUBLE PRECISION TRANSCENDENTALS
	IF2	

	.PRINTX	/EXTENDED/


	.PRINTX	/LPT/

	.PRINTX	/CPM DISK/


	.PRINTX	/Z80/

	.PRINTX	/FAST/

	.PRINTX	/5.0 FEATURES/

	.PRINTX	/ANSI COMPATIBLE/
	ENDIF

CLMWID	SET	14			;MAKE COMMA COLUMNS FOURTEEN CHARACTERS
DATPSC	SET	128			;NUMBER OF DATA BYTES IN DISK SECTOR
LINLN	SET	80			;TERMINAL LINE LENGTH 
LPTLEN	SET	132
BUFLEN	SET	255			;LONG LINES
NAMLEN	SET	40			;MAXIMUM LENGTH NAME -- 3 TO 127

NUMLEV	SET	0*20+19+2*5		;NUMBER OF STACK LEVELS RESERVED
					;BY AN EXPLICIT CALL TO GETSTK

STRSIZ	SET	4

STRSIZ	SET	3
NUMTMP	SET	3			;NUMBER OF STRING TEMPORARIES

NUMTMP	SET	10

MD.RND	SET	3			;THE MODE NUMBER FOR RANDOM FILES
MD.SQI	SET	1			;THE MODE NUMBER FOR SEQUENTIAL INPUT FILES
					;NEVER WRITTEN INTO A FILE
MD.SQO	SET	2			;THE MODE FOR SEQUENTIAL OUTPUT FILES
					;AND PROGRAM FILES
CPMWRM	SET	0			;CP/M WARM BOOT ADDR
CPMENT	SET	CPMWRM+5		;CP/M BDOS CALL ADDR
	CSEG	
TRUROM	SET	0
	PAGE
	TITLE	BASIC Mpu 8080/8085/Z80/8086 (5.11)   /Bill Gates/Paul Allen
	SUBTTL	VERSION 5.11 -- NOT MANY FEATURES TO GO
;
;
;--------- ---- -- ---- ----- --- ---- -----
;COPYRIGHT 1975 BY BILL GATES AND PAUL ALLEN
;--------- ---- -- ---- ----- --- ---- -----
;
;ORIGINALLY WRITTEN ON THE PDP-10 FROM
;FEBRUARY 9 TO  APRIL 9 1975
;
;BILL GATES WROTE A LOT OF STUFF.
;PAUL ALLEN WROTE OTHER STUFF AND FAST CODE.
;MONTE DAVIDOFF WROTE THE MATH PACKAGE (F4I.MAC).
;
;*

	.XLIST	
	.LIST	
	EXTRN	SIN,LOG,EXP,COS,TAN,ATN
	PUBLIC	FRMEQL

BUFOFS	SET	0
BUFOFS	SET	2			;MUST CRUNCH INTO EARLIER PLACE FOR SINGLE QUOTE
KBFLEN	SET	BUFLEN+(BUFLEN/4)	;MAKE KRUNCH BUFFER SOMEWHAT
					;LARGER THAN SOURCE BUFFER (BUF)
	EXTRN	NAME
	PUBLIC	MAIN,LIST,FRMEVL,NXTCON
	PUBLIC	GIVINT
	PUBLIC	GTBYTC,EQULTK,OLDTXT
	PUBLIC	VARTAB,GONE,DOCNVF
	PUBLIC	DOASIG
	PUBLIC	FNDFOR
	PUBLIC	READY,SNERR,REPINI,INTIDX,INTID2
	PUBLIC	NXTCON,DATPTR,ERRFIN,USERR,SAVTXT,NFERR,OLDTXT
	EXTRN	OUTDO,INCHRI,INLIN,CRDO,CRDONZ,STRCMP,FININL,PPSWRT
	EXTRN	BLTU,BLTUC,CLEAR,CLEARC,GTMPRT,ISLET,ISLET2,PTRGET
	EXTRN	QINLIN,SCRTCH,STKINI,RUNC,RESFIN,PTRGT2,STPEND,DIM
	EXTRN	DCOMPR,SYNCHR
	PUBLIC	GETYPR
	PUBLIC	ENDBUF,BUF
	PUBLIC	STREND,CURLIN,DV0ERR,CHRGTR
	PUBLIC	ERRST,ERRDD,ERRBS,TEMP2,ARYTA2,DIMFLG,ARYTAB,TSTOP
	PUBLIC	ERRCN
	PUBLIC	FRMEVL,GIVDBL,EVAL,FRMPRN,ERRLS,SUBFLG,TEMP3,ERRSO
	PUBLIC	VARTAB,TEMP8
	EXTRN	SIGN
	EXTRN	OPEN,CLOSE,PRGFIN,FILIND
	EXTRN	FILINP,CLSALL,FILOUT,INDSKC
	EXTRN	LRUN
	EXTRN	FILGET
	PUBLIC	ATNFIX,COSFIX,SINFIX,TANFIX
	EXTRN	FPWR
	EXTRN	INXHRT
	EXTRN	SGN,ABS,SQR,FDIV,FSUB,FMULT,RND;MATHPK INTERNALS
	EXTRN	QINT,ZERO,MOVE,FOUT,FIN,FCOMP,FADD,PUSHF,INT
	EXTRN	ENDS,NEXT,RESTORE,SCRATH,CONT,FRE
	EXTRN	MOVFR,MOVRF,MOVRM,INPRT,LINPRT,FDIVT
	EXTRN	MOVFM,MOVMF,FLOATR,FADDS
	PUBLIC	FAC,FACLO,OVERR,NEWSTT,RETVAR,OLDLIN,FRMCHK,BRKTXT,CHRCON
	PUBLIC	FNDLIN,ARYTAB,FINI
	EXTRN	INRART,NEG,FLOAT
	EXTRN	STROUI,BSERR
	PUBLIC	ERROR,FCERR
	PUBLIC	TOPMEM
	PUBLIC	VALTYP
	PUBLIC	TEMPST,TEMPPT
	PUBLIC	TMERR
	PUBLIC	MEMSIZ,FRETOP
	EXTRN	CAT,FREFAC,FRESTR,FRETMP,FRETMS,GARBA2,STRCPY,GETSTK
	EXTRN	STRLIT,STRLT2,STRLT3,STRLTI,STROUT,STRPRT,STROUI
	EXTRN	GETSPA,PUTNEW,STOP,OMERR,REASON
	EXTRN	INSTR
	EXTRN	PRINUS,PUTTMP
	EXTRN	FOUTH,FOUTO,STRO$,STRH$
	EXTRN	STR$,LEN,ASC,CHR$,LEFT$,RIGHT$,MID$,VAL
	PUBLIC	ERRLIN,ONELIN,ONEFLG,TRCFLG,BUFLIN,LISPRT
	EXTRN	STRNG$,SPACE$,TON,TOFF
	EXTRN	SIGNS
	PUBLIC	FBUFFR,MINUTK,PLUSTK,LINGET,INTXT,REDDY
	EXTRN	TTYCHR
	PUBLIC	TXTTAB
	EXTRN	INIT
	EXTRN	TSTACK
	EXTRN	RNDX
	EXTRN	UMULT
	EXTRN	SIGNC,POPHRT
	PUBLIC	CNTOFL
	EXTRN	FINLPT
	PUBLIC	LPTPOS,PRTFLG
	EXTRN	CONSIH,VMOVFA,VMOVAF,ISIGN,CONIA,GETBCD,VSIGN,VDFACS
	EXTRN	VMOVMF,VMOVFM,FRCINT,FRCSNG,FRCDBL,VNEG,PUFOUT,DCXBRT,IADD
	EXTRN	ISUB,IMULT,ICOMP,INEG,DADD,DSUB,DMULT,DDIV,DCOMP,VINT
	EXTRN	FINDBL,INEG2

	EXTRN	IDIV,IMOD
	EXTRN	VMOVE,VALINT,VALSNG,FRCSTR,CHKSTR,MAKINT
	PUBLIC	PRMLEN,PRMLN2,PRMFLG,NOFUNS,PARM1,TEMP9
	PUBLIC	DFACLO,ARG,ARGLO,TEMP2,TEMP3,DEFTBL,FUNACT
	EXTRN	MOVE1
	PUBLIC	STRPRN
	PUBLIC	CALTTY
	EXTRN	SCNSEM
	PUBLIC	$FOR,$WHILE,ERRWE,ERRWH,ENDFOR
	EXTRN	WHILE,WEND
	EXTRN	CALLS
	EXTRN	PROCHK

	EXTRN	WRITE
	PUBLIC	DATA,USERR,SUBFLG,TEMP9,$MERGE,SCNLIN
	PUBLIC	$COMMO
	PUBLIC	$DELET
	EXTRN	CHAIN,COMMON

					;READER INPUT

	PUBLIC	START
START:
	PUBLIC	JMPINI
JMPINI:	JMP	INIT			;INIT IS THE INTIALIZATION ROUTINE
					;IT SETS UP CERTAIN
					;LOCATIONS DELETES FUNCTIONS IF
					;DESIRED AND
					;CHANGES THIS TO JMP READY
					;WARM START FOR ISIS

					;OF THE ROUTINE TO CONVERT [A,B]
					;TO A FLOATING POINT NUMBER IN THE FAC
	DW	FRCINT			;TURN FAC INTO AN INTEGER IN [H,L]
	DW	MAKINT			;TURN [H,L] INTO A VALUE IN THE FAC
					;SET VALTYP FOR INTEGER

	PAGE
	SUBTTL	ROM VERSION INITALIZATION, AND CONSTANTS
	PAGE
	SUBTTL	DISPATCH TABLES, RESERVED WORD TABLES

;DEFINE SOME EQUIVALENCES IN CASE LPTSW & CASSW OFF
CLOAD	SET	SNERR
CSAVE	SET	SNERR


; THESE MACRO CALLS DEFINE THE RESWRD VALUES
; AND THE TABLE DISPATCH FOR STATEMENTS AND FUNCTIONS

; STATEMENTS:
STMDSP:					;MARKS START OF STATEMENT LIST
Q	SET	128
	DW	ENDS
Q	SET	Q+1
$END	SET	Q
	DW	FOR
Q	SET	Q+1
$FOR	SET	Q
	DW	NEXT
Q	SET	Q+1
$NEXT	SET	Q
	DW	DATAS
Q	SET	Q+1
$DATA	SET	Q
	DW	INPUT
Q	SET	Q+1
$INPUT	SET	Q
	DW	DIM
Q	SET	Q+1
$DIM	SET	Q
	DW	READ
Q	SET	Q+1
$READ	SET	Q
	DW	LET
Q	SET	Q+1
$LET	SET	Q
	DW	GOTO
Q	SET	Q+1
$GOTO	SET	Q
	DW	RUN
Q	SET	Q+1
$RUN	SET	Q
	DW	IFS
Q	SET	Q+1
$IF	SET	Q
	DW	RESTORE
Q	SET	Q+1
$RESTO	SET	Q
	DW	GOSUB
Q	SET	Q+1
$GOSUB	SET	Q
	DW	RETURN
Q	SET	Q+1
$RETUR	SET	Q
	DW	REM
Q	SET	Q+1
$REM	SET	Q
	DW	STOP
Q	SET	Q+1
$STOP	SET	Q
	DW	PRINT
Q	SET	Q+1
$PRINT	SET	Q
	DW	CLEAR
Q	SET	Q+1
$CLEAR	SET	Q
	DW	LIST
Q	SET	Q+1
$LIST	SET	Q
	DW	SCRATH
Q	SET	Q+1
$NEW	SET	Q

; 8K AND ABOVE STATEMENTS

	DW	ONGOTO
Q	SET	Q+1
$ON	SET	Q
	EXTRN	NULL
	DW	NULL
Q	SET	Q+1
$NULL	SET	Q

	DW	FNWAIT
Q	SET	Q+1
$WAIT	SET	Q
	DW	DEF
Q	SET	Q+1
$DEF	SET	Q
	DW	POKE
Q	SET	Q+1
$POKE	SET	Q
	DW	CONT
Q	SET	Q+1
$CONT	SET	Q
	DW	CSAVE
Q	SET	Q+1
$CSAVE	SET	Q
	DW	CLOAD
Q	SET	Q+1
$CLOAD	SET	Q

	DW	FNOUT
Q	SET	Q+1
$OUT	SET	Q
	DW	LPRINT
Q	SET	Q+1
$LPRIN	SET	Q
	DW	LLIST
Q	SET	Q+1
$LLIST	SET	Q

; LEN2 AND ABOVE STATEMENTS

	PUBLIC	IOGOR
IOGOR:					;DONT ALLOW CONSOLE IF CODE DELETED
	DS	2
Q	SET	Q+1			;PAD THE HOLE
	DW	WIDTH
Q	SET	Q+1
$WIDTH	SET	Q
	DW	ELSES
Q	SET	Q+1
$ELSE	SET	Q
	DW	TON
Q	SET	Q+1
$TRON	SET	Q
	DW	TOFF
Q	SET	Q+1
$TROFF	SET	Q
	EXTRN	SWAP
	DW	SWAP
Q	SET	Q+1
$SWAP	SET	Q
	DW	ERASE
Q	SET	Q+1
$ERASE	SET	Q
	EXTRN	ERASE
	EXTRN	EDIT
	DW	EDIT
Q	SET	Q+1
$EDIT	SET	Q
	DW	ERRORS
Q	SET	Q+1
$ERROR	SET	Q
	DW	RESUME
Q	SET	Q+1
$RESUM	SET	Q
	DW	DELETE
Q	SET	Q+1
$DELET	SET	Q
	DW	AUTO
Q	SET	Q+1
$AUTO	SET	Q
	DW	RESEQ
Q	SET	Q+1
$RENUM	SET	Q

; EXTENDED AND ABOVE

	DW	DEFSTR
Q	SET	Q+1
$DEFST	SET	Q
	DW	DEFINT
Q	SET	Q+1
$DEFIN	SET	Q
	DW	DEFREA
Q	SET	Q+1
$DEFSN	SET	Q
	DW	DEFDBL
Q	SET	Q+1
$DEFDB	SET	Q
	DW	LINE
Q	SET	Q+1
$LINE	SET	Q


;***********
; PADDING INITIALLY SET TO 10
Q	SET	Q+2
	DS	4
	DW	WHILE
Q	SET	Q+1
$WHILE	SET	Q
	DW	WEND
Q	SET	Q+1
$WEND	SET	Q
	DW	CALLS
Q	SET	Q+1
$CALL	SET	Q
	DW	WRITE
Q	SET	Q+1
$WRITE	SET	Q
	DW	DATAS
Q	SET	Q+1
$COMMO	SET	Q
	DW	CHAIN
Q	SET	Q+1
$CHAIN	SET	Q
	DW	OPTION
Q	SET	Q+1
$OPTIO	SET	Q
	DW	RANDOM
Q	SET	Q+1
$RANDO	SET	Q

; DISK AND ABOVE

	DS	2
Q	SET	Q+1
	EXTRN	SYSTEM
	DW	SYSTEM
Q	SET	Q+1
$SYSTE	SET	Q
Q	SET	Q+1
	DS	2
	EXTRN	FIELD,GET,PUT,LOAD,MERGE
	DW	OPEN
Q	SET	Q+1
$OPEN	SET	Q
	DW	FIELD
Q	SET	Q+1
$FIELD	SET	Q
	DW	GET
Q	SET	Q+1
$GET	SET	Q
	DW	PUT
Q	SET	Q+1
$PUT	SET	Q
	DW	CLOSE
Q	SET	Q+1
$CLOSE	SET	Q
	DW	LOAD
Q	SET	Q+1
$LOAD	SET	Q
	DW	MERGE
Q	SET	Q+1
$MERGE	SET	Q
	EXTRN	FILES
	DW	FILES
Q	SET	Q+1
$FILES	SET	Q
	EXTRN	NAME
	DW	NAME
Q	SET	Q+1
$NAME	SET	Q
	EXTRN	KILL,LSET,RSET,SAVE
	DW	KILL
Q	SET	Q+1
$KILL	SET	Q
	DW	LSET
Q	SET	Q+1
$LSET	SET	Q
	DW	RSET
Q	SET	Q+1
$RSET	SET	Q
	DW	SAVE
Q	SET	Q+1
$SAVE	SET	Q
	EXTRN	RESET
	DW	RESET
Q	SET	Q+1
$RESET	SET	Q
; NCR VERSION ONES.

NUMCMD	SET	Q-$END+1
; TOKENS
;**********
;PADDING INITIALLY SET TO 2 BETWEEN LAST DISK STATEMENT AND TOKENS
;PADDING SET TO 1 - FEB 4, 1977
Q	SET	Q+1
;Q MUST BE SET SO TOKENS START AT RIGHT PLACE


Q	SET	Q+1
$TO	SET	Q
$TO	SET	Q
Q	SET	Q+1
$THEN	SET	Q
THENTK	SET	Q
Q	SET	Q+1
$TAB	SET	Q
TABTK	SET	Q
Q	SET	Q+1
$STEP	SET	Q
STEPTK	SET	Q

Q	SET	Q+1
$USR	SET	Q
USRTK	SET	Q
; 8K FUNCTIONS

Q	SET	Q+1
$FN	SET	Q
FNTK	SET	Q
Q	SET	Q+1
$SPC	SET	Q
SPCTK	SET	Q
Q	SET	Q+1
$NOT	SET	Q
NOTTK	SET	Q

; LEN2 TOKENS

Q	SET	Q+1
$ERL	SET	Q
ERLTK	SET	Q
Q	SET	Q+1
$ERR	SET	Q
ERCTK	SET	Q

; EXTENDED TOKENS

Q	SET	Q+1
$STRIN	SET	Q
Q	SET	Q+1
$USING	SET	Q
USINTK	SET	Q
Q	SET	Q+1
$INSTR	SET	Q
INSRTK	SET	Q
Q	SET	Q+1
$DUMMY	SET	Q
SNGQTK	SET	Q
Q	SET	Q+1
$VARPT	SET	Q

;NCR VERSION TOKENS

;SPCDSK TOKENS
Q	SET	Q+1
$INKEY	SET	Q
	PUBLIC	$INKEY
Q	SET	Q-1			;MAKE SURE DOESNT INTERFERE WITH RESWRDS BELOW
;*********
;PADDING INITIALLY SET TO 18
Q	SET	Q+18

; OPERATORS

Q	SET	Q+1
$DUMMY	SET	Q
GREATK	SET	Q
Q	SET	Q+1
$DUMMY	SET	Q
EQULTK	SET	Q
Q	SET	Q+1
$DUMMY	SET	Q
LESSTK	SET	Q
Q	SET	Q+1
$DUMMY	SET	Q
PLUSTK	SET	Q
Q	SET	Q+1
$DUMMY	SET	Q
MINUTK	SET	Q
Q	SET	Q+1
$DUMMY	SET	Q
MULTK	SET	Q
Q	SET	Q+1
$DUMMY	SET	Q
DIVTK	SET	Q


; 8K OPERATORS

Q	SET	Q+1
$DUMMY	SET	Q
EXPTK	SET	Q
Q	SET	Q+1
$AND	SET	Q
Q	SET	Q+1
$OR	SET	Q

; EXTENDED OPERATORS

Q	SET	Q+1
$XOR	SET	Q
Q	SET	Q+1
$EQV	SET	Q
Q	SET	Q+1
$IMP	SET	Q
Q	SET	Q+1
$MOD	SET	Q
Q	SET	Q+1
$DUMMY	SET	Q
IDIVTK	SET	Q
LSTOPK	SET	Q+1-PLUSTK

; FUNCTIONS

Q	SET	128
FUNDSP:
	DW	LEFT$
Q	SET	Q+1
$LEFT$	SET	Q
ONEFUN	SET	Q
	DW	RIGHT$
Q	SET	Q+1
$RIGHT	SET	Q
	DW	MID$
Q	SET	Q+1
$MID$	SET	Q
MIDTK	SET	Q
	DW	SGN
Q	SET	Q+1
$SGN	SET	Q
	DW	VINT
Q	SET	Q+1
$INT	SET	Q
	DW	ABS
Q	SET	Q+1
$ABS	SET	Q
SQRFIX:
	DW	SQR
Q	SET	Q+1
$SQR	SET	Q
SQRTK	SET	Q
	DW	RND
Q	SET	Q+1
$RND	SET	Q
SINFIX:
	DW	SIN
Q	SET	Q+1
$SIN	SET	Q

; 8K FUNCTIONS

	DW	LOG
Q	SET	Q+1
$LOG	SET	Q
	DW	EXP
Q	SET	Q+1
$EXP	SET	Q
COSFIX:
	DW	COS
Q	SET	Q+1
$COS	SET	Q
TANFIX:
	DW	TAN
Q	SET	Q+1
$TAN	SET	Q
ATNFIX:
	DW	ATN
Q	SET	Q+1
$ATN	SET	Q
ATNTK	SET	Q
	DW	FRE
Q	SET	Q+1
$FRE	SET	Q

	DW	FNINP
Q	SET	Q+1
$INP	SET	Q
	DW	POS
Q	SET	Q+1
$POS	SET	Q
	DW	LEN
Q	SET	Q+1
$LEN	SET	Q
	DW	STR$
Q	SET	Q+1
$STR$	SET	Q
	DW	VAL
Q	SET	Q+1
$VAL	SET	Q
	DW	ASC
Q	SET	Q+1
$ASC	SET	Q
	DW	CHR$
Q	SET	Q+1
$CHR$	SET	Q
	DW	PEEK
Q	SET	Q+1
$PEEK	SET	Q
	DW	SPACE$
Q	SET	Q+1
$SPACE	SET	Q
	DW	STRO$
Q	SET	Q+1
$OCT$	SET	Q
	DW	STRH$
Q	SET	Q+1
$HEX$	SET	Q
	DW	LPOS
Q	SET	Q+1
$LPOS	SET	Q
LASNUM	SET	Q

; EXTENDED FUNCTIONS

	DW	FRCINT
Q	SET	Q+1
$CINT	SET	Q
	DW	FRCSNG
Q	SET	Q+1
$CSNG	SET	Q
	DW	FRCDBL
Q	SET	Q+1
$CDBL	SET	Q
	EXTRN	FIXER
	DW	FIXER
Q	SET	Q+1
$DUMMY	SET	Q
$FIX	SET	Q

;NCR VERSION FUNCTIONS


; DISK FUNCTIONS

;**********
;PADDING INITIALLY SET TO 10
Q	SET	Q+10
	DS	20
	DS	2			;PAD IN THE HOLE
Q	SET	Q+1
	EXTRN	CVI,CVS,CVD
	DW	CVI
Q	SET	Q+1
$CVI	SET	Q
	DW	CVS
Q	SET	Q+1
$CVS	SET	Q
	DW	CVD
Q	SET	Q+1
$CVD	SET	Q
	DS	2			;PAD IN THE HOLE
Q	SET	Q+1
	EXTRN	EOF,LOC
	DW	EOF
Q	SET	Q+1
$EOF	SET	Q
	DW	LOC
Q	SET	Q+1
$LOC	SET	Q
	EXTRN	LOF
	DW	LOF
Q	SET	Q+1
$LOF	SET	Q
	EXTRN	MKI$,MKS$,MKD$
	DW	MKI$
Q	SET	Q+1
$MKI$	SET	Q
	DW	MKS$
Q	SET	Q+1
$MKS$	SET	Q
	DW	MKD$
Q	SET	Q+1
$MKD$	SET	Q
					;END DISK FUNCTIONS
; SPCDSK FUNCTIONS
; THE FOLLOWING TABLES ARE THE ALPHABETIC DISPATCH TABLE
; FOLLOWED BY THE RESERVED WORD TABLE ITSELF

ALPTAB:

	DW	ATAB
	DW	BTAB
	DW	CTAB
	DW	DTAB
	DW	ETAB
	DW	FTAB
	DW	GTAB
	DW	HTAB
	DW	ITAB
	DW	JTAB
	DW	KTAB
	DW	LTAB
	DW	MTAB
	DW	NTAB
	DW	OTAB
	DW	PTAB
	DW	QTAB
	DW	RTAB
	DW	STAB
	DW	TTAB
	DW	UTAB
	DW	VTAB
	DW	WTAB
	DW	XTAB
	DW	YTAB
	DW	ZTAB


; THE FOLLOWING MACRO IS FOR FUNCTIONS. IT DOESNT TURN THE TOKEN BIT 7 ON.

RESLST:

ATAB:
	DB	'N'
	DB	'D' OR 128
	DB	$AND
	DB	'B'
	DB	'S' OR 128
	DB	$ABS-128
	DB	'T'
	DB	'N' OR 128
	DB	$ATN-128
	DB	'S'
	DB	'C' OR 128
	DB	$ASC-128
	DB	'UT'
	DB	'O' OR 128
	DB	$AUTO
	DB	0

BTAB:
	DB	0

CTAB:
	DB	'LOS'
	DB	'E' OR 128
	DB	$CLOSE
	DB	'ON'
	DB	'T' OR 128
	DB	$CONT
	DB	'LEA'
	DB	'R' OR 128
	DB	$CLEAR
	DB	'IN'
	DB	'T' OR 128
	DB	$CINT-128
	DB	'SN'
	DB	'G' OR 128
	DB	$CSNG-128
	DB	'DB'
	DB	'L' OR 128
	DB	$CDBL-128
	DB	'V'
	DB	'I' OR 128
	DB	$CVI-128
	DB	'V'
	DB	'S' OR 128
	DB	$CVS-128
	DB	'V'
	DB	'D' OR 128
	DB	$CVD-128
	DB	'O'
	DB	'S' OR 128
	DB	$COS-128
	DB	'HR'
	DB	'$' OR 128
	DB	$CHR$-128
	DB	'AL'
	DB	'L' OR 128
	DB	$CALL
	DB	'OMMO'
	DB	'N' OR 128
	DB	$COMMO
	DB	'HAI'
	DB	'N' OR 128
	DB	$CHAIN
	DB	0

DTAB:

	DB	'AT'
	DB	'A' OR 128
	DB	$DATA
	DB	'I'
	DB	'M' OR 128
	DB	$DIM
	DB	'EFST'
	DB	'R' OR 128
	DB	$DEFST
	DB	'EFIN'
	DB	'T' OR 128
	DB	$DEFIN
	DB	'EFSN'
	DB	'G' OR 128
	DB	$DEFSN
	DB	'EFDB'
	DB	'L' OR 128
	DB	$DEFDB
	DB	'E'
	DB	'F' OR 128
	DB	$DEF
	DB	'ELET'
	DB	'E' OR 128
	DB	$DELET


	DB	0

ETAB:
	DB	'N'
	DB	'D' OR 128
	DB	$END
	DB	'LS'
	DB	'E' OR 128
	DB	$ELSE
	DB	'RAS'
	DB	'E' OR 128
	DB	$ERASE
	DB	'DI'
	DB	'T' OR 128
	DB	$EDIT
	DB	'RRO'
	DB	'R' OR 128
	DB	$ERROR
	DB	'R'
	DB	'L' OR 128
	DB	$ERL
	DB	'R'
	DB	'R' OR 128
	DB	$ERR
	DB	'X'
	DB	'P' OR 128
	DB	$EXP-128
	DB	'O'
	DB	'F' OR 128
	DB	$EOF-128
	DB	'Q'
	DB	'V' OR 128
	DB	$EQV
	DB	0

FTAB:
	DB	'O'
	DB	'R' OR 128
	DB	$FOR
	DB	'IEL'
	DB	'D' OR 128
	DB	$FIELD
	DB	'ILE'
	DB	'S' OR 128
	DB	$FILES
	DB	''
	DB	'N' OR 128
	DB	$FN
	DB	'R'
	DB	'E' OR 128
	DB	$FRE-128
	DB	'I'
	DB	'X' OR 128
	DB	$FIX-128



	DB	0

GTAB:
	DB	'OT'
	DB	'O' OR 128
	DB	$GOTO
	DB	'O'
	DB	' '
	DB	'T'
	DB	'O'+128
	DB	$GOTO
	DB	'OSU'
	DB	'B' OR 128
	DB	$GOSUB
	DB	'E'
	DB	'T' OR 128
	DB	$GET
	DB	0

HTAB:
	DB	'EX'
	DB	'$' OR 128
	DB	$HEX$-128
	DB	0

ITAB:
	DB	'NPU'
	DB	'T' OR 128
	DB	$INPUT
	DB	''
	DB	'F' OR 128
	DB	$IF
	DB	'NST'
	DB	'R' OR 128
	DB	$INSTR
	DB	'N'
	DB	'T' OR 128
	DB	$INT-128
	DB	'N'
	DB	'P' OR 128
	DB	$INP-128
	DB	'M'
	DB	'P' OR 128
	DB	$IMP
	DB	'NKEY'
	DB	'$' OR 128
	DB	$INKEY
	DB	0

JTAB:
	DB	0

KTAB:
	DB	'IL'
	DB	'L' OR 128
	DB	$KILL
	DB	0

LTAB:
	DB	'E'
	DB	'T' OR 128
	DB	$LET
	DB	'IN'
	DB	'E' OR 128
	DB	$LINE
	DB	'OA'
	DB	'D' OR 128
	DB	$LOAD
	DB	'SE'
	DB	'T' OR 128
	DB	$LSET
	DB	'PRIN'
	DB	'T' OR 128
	DB	$LPRIN
	DB	'LIS'
	DB	'T' OR 128
	DB	$LLIST
	DB	'PO'
	DB	'S' OR 128
	DB	$LPOS-128
	DB	'IS'
	DB	'T' OR 128
	DB	$LIST
	DB	'O'
	DB	'G' OR 128
	DB	$LOG-128
	DB	'O'
	DB	'C' OR 128
	DB	$LOC-128
	DB	'E'
	DB	'N' OR 128
	DB	$LEN-128
	DB	'EFT'
	DB	'$' OR 128
	DB	$LEFT$-128
	DB	'O'
	DB	'F' OR 128
	DB	$LOF-128
	DB	0

MTAB:
	DB	'ERG'
	DB	'E' OR 128
	DB	$MERGE
	DB	'O'
	DB	'D' OR 128
	DB	$MOD
	DB	'KI'
	DB	'$' OR 128
	DB	$MKI$-128
	DB	'KS'
	DB	'$' OR 128
	DB	$MKS$-128
	DB	'KD'
	DB	'$' OR 128
	DB	$MKD$-128
	DB	'ID'
	DB	'$' OR 128
	DB	$MID$-128
	DB	0

NTAB:
	DB	'EX'
	DB	'T' OR 128
	DB	$NEXT
	DB	'UL'
	DB	'L' OR 128
	DB	$NULL
	DB	'AM'
	DB	'E' OR 128
	DB	$NAME
	DB	'E'
	DB	'W' OR 128
	DB	$NEW
	DB	'O'
	DB	'T' OR 128
	DB	$NOT
	DB	0

OTAB:
	DB	'U'
	DB	'T' OR 128
	DB	$OUT
	DB	''
	DB	'N' OR 128
	DB	$ON
	DB	'PE'
	DB	'N' OR 128
	DB	$OPEN
	DB	''
	DB	'R' OR 128
	DB	$OR
	DB	'CT'
	DB	'$' OR 128
	DB	$OCT$-128

	DB	'PTIO'
	DB	'N' OR 128
	DB	$OPTIO

	DB	0

PTAB:
	DB	'U'
	DB	'T' OR 128
	DB	$PUT
	DB	'OK'
	DB	'E' OR 128
	DB	$POKE
	DB	'RIN'
	DB	'T' OR 128
	DB	$PRINT
	DB	'O'
	DB	'S' OR 128
	DB	$POS-128
	DB	'EE'
	DB	'K' OR 128
	DB	$PEEK-128
	DB	0
QTAB:
	DB	0

RTAB:
	DB	'EA'
	DB	'D' OR 128
	DB	$READ
	DB	'U'
	DB	'N' OR 128
	DB	$RUN
	DB	'ESTOR'
	DB	'E' OR 128
	DB	$RESTO
	DB	'ETUR'
	DB	'N' OR 128
	DB	$RETUR
	DB	'E'
	DB	'M' OR 128
	DB	$REM
	DB	'ESUM'
	DB	'E' OR 128
	DB	$RESUM
	DB	'SE'
	DB	'T' OR 128
	DB	$RSET
	DB	'IGHT'
	DB	'$' OR 128
	DB	$RIGHT-128
	DB	'N'
	DB	'D' OR 128
	DB	$RND-128
	DB	'ENU'
	DB	'M' OR 128
	DB	$RENUM
	DB	'ESE'
	DB	'T' OR 128
	DB	$RESET
	DB	'ANDOMIZ'
	DB	'E' OR 128
	DB	$RANDO
	DB	0

STAB:
	DB	'TO'
	DB	'P' OR 128
	DB	$STOP
	DB	'WA'
	DB	'P' OR 128
	DB	$SWAP
	DB	'AV'
	DB	'E' OR 128
	DB	$SAVE
	DB	'P'
	DB	'C'
	DB	'('+128
	DB	SPCTK
	DB	'TE'
	DB	'P' OR 128
	DB	$STEP
	DB	'G'
	DB	'N' OR 128
	DB	$SGN-128
	DB	'Q'
	DB	'R' OR 128
	DB	$SQR-128
	DB	'I'
	DB	'N' OR 128
	DB	$SIN-128
	DB	'TR'
	DB	'$' OR 128
	DB	$STR$-128
	DB	'TRING'
	DB	'$' OR 128
	DB	$STRIN
	DB	'PACE'
	DB	'$' OR 128
	DB	$SPACE-128

	DB	'YSTE'
	DB	'M' OR 128
	DB	$SYSTE
	DB	0

TTAB:
	DB	'RO'
	DB	'N' OR 128
	DB	$TRON
	DB	'ROF'
	DB	'F' OR 128
	DB	$TROFF
	DB	'A'
	DB	'B'
	DB	'('+128
	DB	TABTK
	DB	''
	DB	'O' OR 128
	DB	$TO
	DB	'HE'
	DB	'N' OR 128
	DB	$THEN
	DB	'A'
	DB	'N' OR 128
	DB	$TAN-128
	DB	0

UTAB:
	DB	'SIN'
	DB	'G' OR 128
	DB	$USING
	DB	'S'
	DB	'R' OR 128
	DB	$USR
	DB	0

VTAB:
	DB	'A'
	DB	'L' OR 128
	DB	$VAL-128
	DB	'ARPT'
	DB	'R' OR 128
	DB	$VARPT
	DB	0

WTAB:
	DB	'IDT'
	DB	'H' OR 128
	DB	$WIDTH
	DB	'AI'
	DB	'T' OR 128
	DB	$WAIT
	DB	'HIL'
	DB	'E' OR 128
	DB	$WHILE
	DB	'EN'
	DB	'D' OR 128
	DB	$WEND
	DB	'RIT'
	DB	'E' OR 128
	DB	$WRITE
	DB	0

XTAB:
	DB	'O'
	DB	'R' OR 128
	DB	$XOR
	DB	0
YTAB:
	DB	0
ZTAB:
	DB	0

SPCTAB:
	DB	'+'+128
	DB	PLUSTK
	DB	'-'+128
	DB	MINUTK
	DB	'*'+128
	DB	MULTK
	DB	'/'+128
	DB	DIVTK
	DB	'^'+128
	DB	EXPTK
	DB	'\'+128
	DB	IDIVTK
	DB	''''+128
	DB	SNGQTK
	DB	62+128
	DB	GREATK
	DB	'='+128
	DB	EQULTK
	DB	60+128
	DB	LESSTK
	DB	0

OPTAB:	DB	121			;OPERATOR TABLE CONTAINS
					;PRECEDENCE FOLLOWED BY
					;THE ROUTINE ADDRESS
	DB	121
	DB	124
	DB	124
	DB	127
	DB	80
	DB	70
	DB	60			;PRECEDENCE OF "XOR"
	DB	50			;PRECEDENCE OF "EQV"
	DB	40			;PRECEDENCE OF "IMP"
	DB	122			;PRECEDENCE OF "MOD"
	DB	123			;PRECEDENCE OF "IDIV"

;
; USED BY ASSIGNMENT CODE TO FORCE THE RIGHT HAND VALUE
; TO CORRESPOND TO THE VALUE TYPE OF THE VARIABLE BEING
; ASSIGNED TO.
;
FRCTBL:	DW	FRCDBL
	DS	2
	DW	FRCINT
	DW	CHKSTR
	DW	FRCSNG
;
; THESE TABLES ARE USED AFTER THE DECISION HAS BEEN MADE
; TO APPLY AN OPERATOR AND ALL THE NECESSARY CONVERSION HAS
; BEEN DONE TO MATCH THE TWO ARGUMENT TYPES (APPLOP)
;
DBLDSP:	DW	DADD			;DOUBLE PRECISION ROUTINES
	DW	DSUB
	DW	DMULT
	DW	DDIV
	DW	DCOMP
OPCNT	SET	(($-DBLDSP)/2)-1
SNGDSP:	DW	FADD			;SINGLE PRECISION ROUTINES
	DW	FSUB
	DW	FMULT
	DW	FDIV
	DW	FCOMP
INTDSP:	DW	IADD			;INTEGER ROUTINES
	DW	ISUB
	DW	IMULT
	DW	INTDIV
	DW	ICOMP
	PAGE
	SUBTTL	ERROR MESSAGE TABLE

Q	SET	-2

ERRTAB:
	DB	0
Q	SET	0
Q	SET	Q+1
	DB	'NEXT without FOR',0
ERRNF	SET	Q
Q	SET	Q+1
	DB	'Syntax error',0
ERRSN	SET	Q
Q	SET	Q+1
	DB	'RETURN without GOSUB',0
ERRRG	SET	Q
Q	SET	Q+1
	DB	'Out of DATA',0
ERROD	SET	Q
Q	SET	Q+1
	DB	'Illegal function call',0
ERRFC	SET	Q
	PUBLIC	OVRMSG
OVRMSG:
Q	SET	Q+1
	DB	'Overflow',0
ERROV	SET	Q
Q	SET	Q+1
	DB	'Out of memory',0
	PUBLIC	ERROM
ERROM	SET	Q
Q	SET	Q+1
	DB	'Undefined line number',0
ERRUS	SET	Q
Q	SET	Q+1
	DB	'Subscript out of range',0
ERRBS	SET	Q
Q	SET	Q+1
	DB	'Duplicate Definition',0
ERRDD	SET	Q
	PUBLIC	DIVMSG
DIVMSG:
Q	SET	Q+1
	DB	'Division by zero',0
ERRDV0	SET	Q
Q	SET	Q+1
	DB	'Illegal direct',0
ERRID	SET	Q
Q	SET	Q+1
	DB	'Type mismatch',0
ERRTM	SET	Q
Q	SET	Q+1
	DB	'Out of string space',0
ERRSO	SET	Q
Q	SET	Q+1
	DB	'String too long',0
ERRLS	SET	Q
Q	SET	Q+1
	DB	'String formula too complex',0
ERRST	SET	Q
Q	SET	Q+1
	DB	'Can''t continue',0
ERRCN	SET	Q
Q	SET	Q+1
	DB	'Undefined user function',0
ERRUF	SET	Q
Q	SET	Q+1
	DB	'No RESUME',0
ERRNR	SET	Q
Q	SET	Q+1
	DB	'RESUME without error',0
ERRRE	SET	Q
Q	SET	Q+1
	DB	'Unprintable error',0
ERRUE	SET	Q
Q	SET	Q+1
	DB	'Missing operand',0
ERRMO	SET	Q
	PUBLIC	ERRLBO
Q	SET	Q+1
	DB	'Line buffer overflow',0
ERRLBO	SET	Q

Q	SET	Q+1
	DB	'?',0
Q	SET	Q+1
	DB	'?',0
Q	SET	Q+1
	DB	'FOR Without NEXT',0
ERRFN	SET	Q
Q	SET	Q+1
	DB	'?',0
Q	SET	Q+1
	DB	'?',0
Q	SET	Q+1
	DB	'WHILE without WEND',0
ERRWH	SET	Q
Q	SET	Q+1
	DB	'WEND without WHILE',0
ERRWE	SET	Q
Q	SET	Q+1
	DB	'Graphics statement not implemented',0
ERRGS	SET	Q
NONDSK	SET	Q			;LAST NON DISK ERROR.

Q	SET	49			;DISK ERRORS START AT 50.
DSKERR	SET	Q			;FIRST DISK ERROR
Q	SET	Q+1
	DB	'FIELD overflow',0
	PUBLIC	ERRFOV
ERRFOV	SET	Q
Q	SET	Q+1
	DB	'Internal error',0
	PUBLIC	ERRIER
ERRIER	SET	Q
Q	SET	Q+1
	DB	'Bad file number',0
	PUBLIC	ERRBFN
ERRBFN	SET	Q
Q	SET	Q+1
	DB	'File not found',0
	PUBLIC	ERRFNF
ERRFNF	SET	Q
Q	SET	Q+1
	DB	'Bad file mode',0
ERRBFM	SET	Q
Q	SET	Q+1
	DB	'File already open',0
ERRFAO	SET	Q
Q	SET	Q+1
	DB	'?',0			;PAD IN HOLE
DSKLOC	SET	$+6
Q	SET	Q+1
	DB	'Disk I/O error',0
ERRIOE	SET	Q
Q	SET	Q+1
	DB	'File already exists',0
ERRFAE	SET	Q
Q	SET	Q+1
	DB	'?',0
Q	SET	Q+1
	DB	'?',0			;PAD IN HOLE
Q	SET	Q+1
	DB	'Disk full',0
ERRDFL	SET	Q
Q	SET	Q+1
	DB	'Input past end',0
ERRRPE	SET	Q
Q	SET	Q+1
	DB	'Bad record number',0
ERRBRN	SET	Q
Q	SET	Q+1
	DB	'Bad file name',0
ERRNMF	SET	Q
Q	SET	Q+1
	DB	'?',0
ERRMMM	SET	Q
Q	SET	Q+1
	DB	'Direct statement in file',0
	PUBLIC	ERRFDR
ERRFDR	SET	Q
Q	SET	Q+1
	DB	'Too many files',0
ERRTMF	SET	Q

LSTERR	SET	Q+1			;LAST ERROR USED FOR RANGE CHECKS IN LEN2
	PAGE
	SUBTTL	CONSTANTS FOR ROM BASIC I/O, RNDX, FDIV, USRGO
	PAGE
	SUBTTL	LOW SEGMENT -- RAM -- IE THIS STUFF IS NOT CONSTANT
;
; THIS IS THE "VOLATILE" STORAGE AREA AND NONE OF IT
; CAN BE KEPT IN ROM. ANY CONSTANTS IN THIS AREA CANNOT
; BE KEPT IN A ROM, BUT MUST BE LOADED IN BY THE 
; PROGRAM INSTRUCTIONS IN ROM.
;

USRTAB:
	DW	FCERR
	DW	FCERR
	DW	FCERR
	DW	FCERR
	DW	FCERR
	DW	FCERR
	DW	FCERR
	DW	FCERR
	DW	FCERR
	DW	FCERR			;SET UP DISPATCHES
	PUBLIC	NULCNT
NULCNT:	DB	1			;STORE HERE THE NUMBER OF NULLS
					;TO PRINT AFTER CRLF
	PUBLIC	CHARC
CHARC:	DB	0			;ISCNTC STORES EATEN CHAR HERE WHEN NOT A ^C
	PUBLIC	ERRFLG
ERRFLG:	DB	0			;USED TO SAVE THE ERROR NUMBER SO EDIT CAN BE
					;CALLED ON "SYNTAX ERROR"
	PUBLIC	LPTLST
LPTLST:	DB	0			;LAST LINE PRINTER OPERATION. ZERO MEANS LINEFEED
					;NON-ZERO MEANS PRINT COMMAND (OKIA ONLY)
LPTPOS:	DB	1			;POSITION OF LPT PRINT HEAD
PRTFLG:	DB	0			;WHETHER OUTPUT GOES TO LPT
	PUBLIC	NLPPOS,LPTSIZ
LNCMPS	SET	(((LPTLEN/CLMWID)-1)*CLMWID);LAST COMMA FIELD POSIT
NLPPOS:	DB	LNCMPS			;LAST COL # BEYOND WHICH NO MORE COMMA FIELDS
LPTSIZ:	DB	LPTLEN			;DEFAULT LINE PRINTER WIDTH
	PUBLIC	LINLEN
LINLEN:	DB	LINLN			;LINE LENGTH
NCMPOS	SET	(((LINLN/CLMWID)-1)*CLMWID);POSITION BEYOND WHICH THERE ARE
					;NO MORE COMMA FIELDS	
CLMLST:	DB	NCMPOS			;POSITION OF LAST COMMA COLUMN
					;NON-ZERO MEANS SEND OUTPUT TO LPT
	PUBLIC	RUBSW
RUBSW:	DB	0			;RUBOUT SWITCH =1 INSIDE
					;THE PROCESSING OF A RUBOUT (INLIN)
CNTOFL:	DB	0			;SUPRESS OUTPUT FLAG
					;NON-ZERO MEANS SUPRESS
					;RESET BY "INPUT",READY AND ERRORS
					;COMPLEMENTED BY INPUT OF ^O
	PUBLIC	PTRFIL
PTRFIL:	DW	0			;POINTER TO DATA BLOCK OF CURRENT FILE
					;USED BY DISK AND NCR CASSETTE CODE

TOPMEM:
	DW	TSTACK+100		;TOP LOCATION TO USE FOR THE STACK
					;INITIALLY SET UP BY INIT
					;ACCORDING TO MEMORY SIZE
					;TO ALLOW FOR 50 BYTES OF STRING SPACE.
					;CHANGED BY A CLEAR COMMAND WITH
					;AN ARGUMENT.
CURLIN:	DW	0+65534			;CURRENT LINE #
					;SET TO 65534 IN PURE VERSION DURING INIT EXECUTION
					;SET TO 65535 WHEN DIRECT STATEMENTS EXECUTE
TXTTAB:	DW	TSTACK+1		;POINTER TO BEGINNING OF TEXT
					;DOESN'T CHANGE AFTER BEING
					;SETUP BY INIT.
	PUBLIC	OVERRI
OVERRI:	DW	OVRMSG			;ADDRESS OF MESSAGE TO PRINT (OVERFLOW)
					;DATA SEGMENT AGAIN
;
;	END OF INITIALIZED PART OF RAM
;
;
; DISK DATA STORAGE AREA
;
	PUBLIC	LSTFRE,MAXTRK,DSKMOD,FILPT1,FILPTR,MAXFIL
LSTFRE:	DS	2			;FREE PLACE IN DIRECTORY
MAXTRK:	DS	1			;ALLOCATE INSIDE THIS TRACK
DSKMOD:	DS	1			;MODE OF FILE JUST LOOKED UP
					;ZERO IF FILE WAS JUST CREATED
FILPT1:	DS	2			;[FILPTR] ALWAYS REFETCHED FROM HERE
FILPTR:	DS	32			;POINTERS TO DATA BLOCKS FOR EACH FILE
MAXFIL:	DS	1			;HIGHEST FILE NUMBER ALLOWED
	PUBLIC	NAMCNT,NAMBUF,NAMTMP
NAMCNT:	DS	1			;THE NUMBER OF CHARACTER BEYOND #2 IN A VAR NAME
NAMBUF:	DS	NAMLEN-2		;STORAGE FOR CHARS BEYOND #2. USED IN PTRGET
NAMTMP:	DS	2			;TEMP STORAGE DURING NAME SAVE AT INDLOP
	PUBLIC	DIRTMP,FILNA2,FILNAM
DIRTMP	SET	CPMWRM+128		;USE CPM DEFAULT BUFFER IN LOW MEMORY
FILNA2:	DS	16			;USED BY NAME CODE
FILNAM:	DS	33			;BECAUSE CPM MUST HAVE BUFFER FOR DIRECTORY READS

;	CP/M 1.4 and 2.x Support

	PUBLIC	CPMVRN,CPMREA,CPMWRI

CPMVRN:	DS	1			;CP/M Version Number (#0 is 2.x)
CPMREA:	DS	1			;CP/M Read Call
CPMWRI:	DS	1			;CP/M Write Call
	DB	':'			;a colon for restarting input
KBUF:	DS	KBFLEN			;THIS IS THE KRUNCH BUFFER
	PUBLIC	BUFMIN
BUFMIN:	DB	44			;A COMMA (PRELOAD OR ROM)
					;USED BY INPUT STATEMENT SINCE THE
					;DATA POINTER ALWAYS STARTS ON A
					;COMMA OR TERMINATOR
BUF:	DS	BUFLEN+1		;TYPE IN STORED HERE
					;DIRECT STATEMENTS EXECUTE OUT OF
					;HERE. REMEMBER "INPUT" SMASHES BUF.
					;MUST BE AT A LOWER ADDRESS
					;THAN DSCTMP OR ASSIGNMENT OF STRING
					;VALUES IN DIRECT STATEMENTS WON'T COPY
					;INTO STRING SPACE -- WHICH IT MUST
	DS	2			;ALLOW FOR SINGLE QUOTE IN BIG LINE
ENDBUF:	DS	1			;PLACE TO STOP BIG LINES
	PUBLIC	TTYPOS
TTYPOS:	DS	1			;STORE TERMINAL POSITION HERE
DIMFLG:	DS	1			;IN GETTING A POINTER TO A VARIABLE
					;IT IS IMPORTANT TO REMEMBER WHETHER IT
					;IS BEING DONE FOR "DIM" OR NOT
					;DIMFLG AND VALTYP MUST BE
					;CONSECUTIVE LOCATIONS
VALTYP:	DS	1			;THE TYPE INDICATOR
					;IN THE 8K 0=NUMERIC 1=STRING
OPRTYP:					;USED TO STORE OPERATOR NUMBER
					;IN THE EXTENDED MOMENTARILY BEFORE
					;OPERATOR APPLICATION (APPLOP)
DORES:	DS	1			;WHETHER CAN OR CAN'T CRUNCH RES'D WORDS
					;TURNED ON IN THE 8K WHEN "DATA"
					;BEING SCANNED BY CRUNCH SO UNQUOTED
					;STRINGS WON'T BE CRUNCHED.
DONUM:	DS	1			;FLAG FOR CRUNCH =0 MEANS
					;NUMBERS ALLOWED, (FLOATING,INT, DBL)
					;1 MEANS NUMBERS ALLOWED, KRUNCH BY CALLING LINGET
					;-1 (377) MEANS NUMBERS DISALLOWED 
					;(SCANNING VARIABLE NAME)
CONTXT:	DS	2			;SAVED TEXT POINTER USED BY CHRGET
					;TO SAVE THE TEXT POINTER AFTER CONSTANT
					;HAS BEEN SCANNED.
CONSAV:	DS	1			;THE SAVED TOKEN FOR A CONSTANT
					;AFTER CHRGET HAS BEEN CALLED
CONTYP:	DS	1			;SAVED CONSTANT VALTYPE
CONLO:	DS	4			;SAVED CONSTANT VALUE
	DS	4			;EXTRA FOUR BYTES FOR DOUBLE PRECISION
MEMSIZ:	DS	2			;HIGHEST LOCATION IN MEMORY
TEMPPT:	DS	2			;POINTER AT FIRST FREE TEMP DESCRIPTOR
					;INITIALIZED TO POINT TO TEMPST
TEMPST:	DS	STRSIZ*NUMTMP		;STORAGE FOR NUMTMP TEMP DESCRIPTORS
	PUBLIC	DSCTMP,DSCPTR
DSCTMP:	DS	STRSIZ			;STRING FUNCTIONS BUILD ANSWER DESCRIPTOR HERE
					;MUST BE AFTER TEMPST AND BEFORE PARM1
DSCPTR	SET	$-2			;WHERE STRING ADDRESS IS STORE IN DSCTMP
FRETOP:	DS	2			;TOP OF STRING FREE SPACE
TEMP3:	DS	2			;USED TO STORE THE ADDRESS OF THE END OF
					;STRING ARRAYS IN GARBAGE COLLECTION
					;AND USED MOMENTARILY BY FRMEVL
					;USED IN EXTENDED BY FOUT AND
					;USER DEFINED FUNCTIONS
					;ARRAY VARIABLE HANDLING TEMPORARY
TEMP8:	DS	2			;7/3/79 Now used by garbage collection
					;not TEMP3 due to conflict
ENDFOR:	DS	2			;SAVED TEXT POINTER AT END OF "FOR" STATEMENT
DATLIN:	DS	2			;DATA LINE # -- REMEMBER FOR ERRORS
SUBFLG:	DS	1			;FLAG WHETHER SUBSCRIPTED VARIABLE ALLOWED
					;"FOR" AND USER-DEFINED FUNCTION
					;POINTER FETCHING TURN
					;THIS ON BEFORE CALLING PTRGET
					;SO ARRAYS WON'T BE DETECTED.
					;STKINI AND PTRGET CLEAR IT.
	PUBLIC	USFLG
USFLG:
FLGINP:	DS	1			;FLAGS WHETHER WE ARE DOING "INPUT"
					;OR A READ
	PUBLIC	TEMP
TEMP:	DS	2			;TEMPORARY FOR STATEMENT CODE
					;NEWSTT SAVES [H,L] HERE FOR INPUT AND ^C
					;"LET" SAVES VARIABLE
					;POINTERS HERE FOR "FOR"
					;"NEXT" SAVES ITS TEXT POINTER HERE
					;CLEARC SAVES [H,L] HERE
	PUBLIC	PTRFLG
PTRFLG:	DS	1			;=0 IF NO LINE NUMBERS CONVERTED
					;TO POINTERS, NON ZERO IF POINTERS EXIST.
	PUBLIC	AUTFLG
AUTFLG:	DS	1			;FLAG TO INICATE AUTO COMMAND IN
					;PROGRESS =0 IF NOT, NON-ZERO IF SO.
AUTLIN:	DS	2			;CURRENT LINE BEING INSERTED BY AUTO
AUTINC:	DS	2			;THE AUTO INCREMENT
SAVTXT:	DS	2			;PLACE WHERE NEWSTT SAVES TEXT POINTER
					;FOR "RESUME" STATEMENT
	PUBLIC	SAVSTK,ERRLIN
SAVSTK:	DS	2			;NEWSTT SAVES STACK HERE BEFORE
					;SO THAT ERROR REVERY CAN
					;CAN RESTORE THE STACK WHEN AN
					;ERROR OCCURS
ERRLIN:	DS	2			;LINE NUMBER WHERE LAST ERROR OCCURED.
	PUBLIC	DOT
DOT:	DS	2			;KEEPS CURRENT LINE FOR EDIT & LIST
ERRTXT:	DS	2			;TEXT POINTER FOR USE BY "RESUME"
	PUBLIC	ONELIN
ONELIN:	DS	2			;THE LINE TO GOTO WHEN AN ERROR 
					;OCCURS
ONEFLG:	DS	1			;ONEFLG=1 IF WERE ARE EXECUTING
					;AN ERROR TRAP ROUTINE, OTHERWISE 0
TEMP2:	DS	2			;FORMULA EVALUATOR TEMP
					;MUST BE PRESERVED BY OPERATORS
					;USED IN EXTENDED BY FOUT AND
					;USER-DEFINED FUNCTIONS
					;ARRAY VARIABLE HANDLER TEMPORARY
OLDLIN:	DS	2			;OLD LINE NUMBER (SETUP BY ^C,"STOP"
					;OR "END" IN A PROGRAM)
OLDTXT:	DS	2			;OLD TEXT POINTER
					;POINTS AT STATEMENT TO BE EXECUTED NEXT
VARTAB:	DS	2			;POINTER TO START OF SIMPLE
					;VARIABLE SPACE
					;UPDATED WHENEVER THE SIZE OF THE
					;PROGRAM CHANGES, SET TO [TXTTAB]
					;BY SCRATCH ("NEW").
ARYTAB:	DS	2			;POINTER TO BEGINNING OF ARRAY
					;TABLE
					;INCREMENTED BY 6 WHENEVER
					;A NEW SIMPLE VARIABLE IS FOUND, AND
					;SET TO [VARTAB] BY CLEARC.
STREND:	DS	2			;END OF STORAGE IN USE
					;INCREASED WHENEVER A NEW ARRAY
					;OR SIMPLE VARIABLE IS ENCOUNTERED
					;SET TO [VARTAB] BY CLEARC.
DATPTR:	DS	2			;POINTER TO DATA. INITIALIZED TO POINT
					;AT THE ZERO IN FRONT OF [TXTTAB]
					;BY "RESTORE" WHICH IS CALLED BY CLEARC
					;UPDATED BY EXECUTION OF A "READ"
DEFTBL:	DS	26			;THIS GIVES THE DEFAULT VALTYP FOR EACH
					;LETTER OF THE ALPHABET
					;IT IS SET UP BY "CLEAR" AND CHANGED BY
					;"DEFSTR" "DEFINT" "DEFSNG" "DEFDBL" AND USED
					;BY PTRGET WHEN ! # % OR $ DON'T FOLLOW
					;A VARAIBLE NAME
;
; RAM STORAGE FOR USER DEFINED FUNCTION PARAMETER INFORMATION
;
PRMSIZ	SET	100			;NUMBER OF BYTES FOR DEFINITION BLOCK
PRMSTK:	DW	0			;PREVIOUS DEFINITION BLOCK ON STACK
					;BLOCK (FOR GARBAGE COLLECTION)
PRMLEN:	DS	2			;THE NUMBER OF BYTES IN THE ACTIVE TABLE
PARM1:	DS	PRMSIZ			;THE ACTIVE PARAMETER DEFINITION TABLE
	PUBLIC	PRMPRV,PRMSTK		;ALLOW INIT TO INITIALIZE THIS CONSTANT
PRMPRV:	DW	PRMSTK			;THE POINTER AT THE PREVIOUS PARAMETER
					;BLOCK (FOR GARBAGE COLLECTION)
PRMLN2:	DS	2			;SIZE OF PARAMETER BLOCK BEING BUILT
PARM2:	DS	PRMSIZ			;PLACE TO KEEP PARAMETERS BEING MADE
PRMFLG:	DS	1			;USED BY PTRGET TO FLAG IF PARM1 HAS BEEN SEARCHED
ARYTA2:	DS	2			;STOPPING POINT FOR SIMPLE SEARCH
					;(EITHER [ARYTAB] OR PARM1+[PRMLEN])
NOFUNS:	DS	1			;ZERO IF NO FUNCTIONS ACTIVE. SAVES TIME IN SIMPLE SEARCH
TEMP9:	DS	2			;GARBAGE COLLECTION TEMP TO CHAIN THROUGH PARAMETER BLOCKS
FUNACT:	DS	2			;COUNT OF ACTIVE FUNCTIONS
	PUBLIC	INPPAS,NXTTXT,NXTFLG,FVALSV,NXTLIN,OPTVAL,OPTFLG
INPPAS:	DS	1			;FLAG TELLING WHETHER INPUT IS SCANNING FIRST OR
					;SECOND TIME. ZERO IF FIRST.
NXTTXT:	DS	2			;USED TO SAVE TEXT POINTER AT START OF NEXT
NXTFLG:	DS	1			;ZERO IF "FOR" IS USING NEXT CODE
					;TO CHECK FOR EMPTY LOOP
FVALSV:	DS	4			;USE TO STORE THE START VALUE OF THE LOOP VARIABLE
					;SINCE ANSI SAYS START AND END ARE EVALUATED
					;BEFORE ASSIGNMENT TAKES PLACE
NXTLIN:	DS	2			;THE LINE NUMBER DURING SCAN FOR "NEXT"
OPTVAL:	DS	1			;ZERO FOR OPTION BASE 0 ONE FOR OPTION BASE 1
OPTFLG:	DS	1			;NON-ZERO IF "OPTION BASE" HAS BEEN SCANNED
	PUBLIC	PATCH
PATCH:	DS	30			;THIRTY BYTES OF PATCH SPACE
	PUBLIC	TEMPA
TEMPA:	DS	2			;MISC TEMP USED BY CALL AND LIST
	PUBLIC	SAVFRE
SAVFRE:	DS	2			;FRETOP SAVED HERE BY CHAIN
	PUBLIC	MAXREC
MAXREC:	DS	2			;MAXIMUM RECORD SIZE
	PUBLIC	PROFLG
PROFLG:	DS	1			;NON-ZERO IF WE HAVE LOADED A PROTECTED FILE W/O PASSWRD
	PUBLIC	CHNFLG,CHNLIN,MDLFLG,MRGFLG,CMEPTR,CMSPTR
MRGFLG:	DS	1			;NON-ZERO IF CHAIN W/ MERGE IN PROGRESS
MDLFLG:	DS	1			;NON-ZERO I CHAIN W/ MERGE AND DELETE IN PROGRESS
CMEPTR:	DS	2			;POINTER TTO END LINE TO DELETE
CMSPTR:	DS	2			;POINTER TO START LINE TO DELETE
CHNFLG:	DS	1			;NON-ZERO IF CHAIN IN PROGRESS
CHNLIN:	DS	2			;DESTINATION LINE IN NEW PROGRAM
	PUBLIC	SWPTMP
SWPTMP:	DS	4			;VALUE OF FIRST "SWAP" VARIABLE STORED HERE
	DS	4			;ENOUGH ROOM FOR DOUBLE PRECISION
TRCFLG:	DS	1			;ZERO MEANS NO TRACE IN PROGRESS

; THIS IS THE RAM TERMPORARY AREA FOR THE MATH PACKAGE ROUTINES
;
;THE FLOATING ACCUMULATOR
	DS	1			;[TEMPORARY LEAST SIGNIFICANT BYTE]
DFACLO:	DS	4			;[FOUR LOWEST ORDERS FOR DOUBLE PRECISION]
FACLO:	DS	2
	DS	1
					;[MIDDLE ORDER OF MANTISSA]
					;[HIGH ORDER OF MANTISSA]
FAC:	DS	2			;[EXPONENT]
					;[TEMPORARY COMPLEMENT OF SIGN IN MSB]
	PUBLIC	FANSII
	PUBLIC	FLGOVC,OVCSTR
FLGOVC:	DS	1			;OVERFLOW PRINT FLAG,=0,1 PRINT 
					;FURTHER =1 CHANGE TO 2
OVCSTR:	DS	1			;PLACE TO STORE OVERFLOW FLAG AFTER FIN
FANSII:	DS	1			;FLAG TO FORCE FIXED OUTPUT (SEE ANSI)
	DS	1			;[TEMPORARY LEAST SIGNIFICANT BYTE]
ARGLO:	DS	7			;[LOCATION OF SECOND ARGUMENT FOR DOUBLE
ARG:	DS	1			; PRECISION]
					;FOR INTEL FORMATS MUST HAVE SPACE FOR
					;11 BITS OF EXPONENT
FBUFFR:	DS	13			;BUFFER FOR FOUT

	DS	43-13			;THE LAST 3 LOCATIONS ARE TEMP FOR ROM FMULT
	PUBLIC	FMLTT1,FMLTT2
FMLTT1	SET	FBUFFR+40
FMLTT2	SET	FBUFFR+41
	PAGE
	SUBTTL	TEXT CONSTANTS FOR PRINT OUT
;
; NEEDED FOR MESSAGES IN ALL VERSIONS
;
INTXT:	DB	' in '
	DB	0
REDDY:
	DB	'Ok'
	DB	13
	DB	10
	DB	0
BRKTXT:	DB	'Break'
	DB	0

	PAGE
	SUBTTL	GENERAL STORAGE MANAGEMENT ROUTINES - FNDFOR, BLTU, GETSTK
;
; FIND A "FOR" ENTRY ON THE STACK WITH THE VARIABLE POINTER
; PASSED IN [D,E].
;
FNDFOR:	LXI	H,4+0			;IGNORING EVERYONES "NEWSTT"
					;AND THE RETURN ADDRESS OF THIS
	DAD	SP			;SUBROUTINE, SET [H,L]=SP
LOOPER:
	MOV	A,M			;SEE WHAT TYPE OF THING IS ON THE STACK
	INX	H
WHLSIZ	SET	6
	CPI	$WHILE
	JNZ	STKSRC
	LXI	B,0+WHLSIZ
	DAD	B
	JMP	LOOPER
STKSRC:
	CPI	$FOR			;IS THIS STACK ENTRY A "FOR"?
	RNZ				;NO SO OK
	MOV	C,M
	INX	H			;DO EQUIVALENT OF PUSHM / XTHL
	MOV	B,M
	INX	H
	PUSH	H			;PUT H  ON
	MOV	L,C			;PUSH B / XTHL IS SLOWER
	MOV	H,B
	MOV	A,D			;FOR THE "NEXT" STATMENT WITHOUT AN ARGUMENT
	ORA	E			;WE MATCH ON ANYTHING
	XCHG				;MAKE SURE WE RETURN [D,E]
	JZ	POPGOF			;POINTING TO THE VARIABLE
	XCHG	
	CALL	DCOMPR
FORSIZ	SET	13

FORSIZ	SET	14

FORSIZ	SET	FORSIZ+2
	PUBLIC	FORSZC
FORSZC	SET	0+FORSIZ
POPGOF:	LXI	B,FORSZC		;TO WIPE OUT A "FOR" ENTRY
	POP	H
	RZ				;IF VARIABLE IN THIS ENTRY MATCHES
					;RETURN WITH [H,L] POINTING THE BOTTOM
					;OF THE ENTRY
	DAD	B
	JMP	LOOPER			;NOW POINTING TO THE START OF THE NEXT
					;ENTRY. SEE IF ITS A "FOR" ENTRY
					;AND IF THE VARIABLE MATCHES
	PAGE
	SUBTTL	ERROR HANDLING
; THIS ROUTINE IS CALLED TO RESET THE STACK IF BASIC IS
; EXTERNALLY STOPPED AND THEN RESTARTED.
	PUBLIC	READYR
READYR:	LXI	B,STPRDY		;ADDRESS GO TO, ALSO POP OFF GARBAGE STACK ENTRY.
	JMP	ERESET			;RESET STACK, GOTO READY.

PRGEND:	LHLD	CURLIN			;GET CURRENT LINE #
	MOV	A,H			;SEE IF DIRECT
	ANA	L			;AND TOGETHER
	INR	A			;SET CC'S
	JZ	ENDCNJ			;IF DIRECT DONE, ALLOW FOR DEBUGGING PURPOSES
	LDA	ONEFLG			;SEE IF IN ON ERROR
	ORA	A			;SET CC
	MVI	E,ERRNR			;"NO RESUME" ERROR
	JNZ	ERROR			;YES, FORGOT RESUME
	EXTRN	ENDCON
ENDCNJ:	JMP	ENDCON			;NO, LET IT END
DERDFL:	MVI	E,ERRDFL
	PUBLIC	DERDFL
	DB	1			;"DISK FULL"
DERIOE:	MVI	E,ERRIOE
	PUBLIC	DERIOE
	DB	1			;"DISK I/O ERROR"
DERBFM:	MVI	E,ERRBFM
	PUBLIC	DERBFM
	DB	1			;"BAD FILE MODE"
DERFNF:	MVI	E,ERRFNF
	PUBLIC	DERFNF
	DB	1			;"FILE NOT FOUND"
DERBFN:	MVI	E,ERRBFN
	PUBLIC	DERBFN
	DB	1			;"BAD FILE NUMBER"
DERIER:	MVI	E,ERRIER
	PUBLIC	DERIER
	DB	1			;"INTERNAL ERROR"
DERRPE:	MVI	E,ERRRPE
	PUBLIC	DERRPE
	DB	1			;"READ PAST END"
DERFAO:	MVI	E,ERRFAO
	PUBLIC	DERFAO
	DB	1			;"FILE ALREADY OPEN"
DERNMF:	MVI	E,ERRNMF
	PUBLIC	DERNMF
	DB	1			;"BAD FILE NAME"
DERBRN:	MVI	E,ERRBRN
	PUBLIC	DERBRN
	DB	1			;"BAD RECORD NUMBER"
DERFOV:	MVI	E,ERRFOV
	PUBLIC	DERFOV
	DB	1			;"FIELD OVERFLOW"
DERTMF:	MVI	E,ERRTMF
	PUBLIC	DERTMF
	DB	1			;"TOO MANY FILES"
DERFAE:	MVI	E,ERRFAE
	PUBLIC	DERFAE
	DB	1			;"FILE ALREADY EXISTS"
	ORG	$-1
	JMP	ERROR
DATSNE:	LHLD	DATLIN			;GET DATA LINE
	SHLD	CURLIN			;MAKE IT CURRENT LINE
SNERR:	MVI	E,ERRSN			;"SYNTAX ERROR"
	DB	1Q			;"LXI B," OVER THE NEXT 2
DV0ERR:	MVI	E,ERRDV0		;DIVISION BY ZERO
	DB	1Q			;"LXI B," OVER THE NEXT 2
NFERR:	MVI	E,ERRNF			;"NEXT WITHOUT FOR" ERROR
	PUBLIC	DDERR
	DB	1Q			;"LXI B," OVER THE NEXT TWO BYTES
DDERR:	MVI	E,ERRDD			;"REDIMENSIONED VARIABLE"
	DB	1Q			;"LXI B," OVER THE NEXT 2 BYTES
UFERR:	MVI	E,ERRUF			;"UNDEFINED FUNCTION" ERROR
	DB	1Q			;"LXI B," OVER THE NEXT TWO
REERR:	MVI	E,ERRRE			;"RESUME WITHOUT ERROR"
	DB	1Q			;"LXI B," OVER THE NEXT TWO
OVERR:	MVI	E,ERROV			;SET OVERFLOW ERROR CODE
	DB	1Q			;"LXI B," OVER NEXT TWO
MOERR:	MVI	E,ERRMO			;TYPE MISMATCH ERROR
	DB	1Q			;"LXI	B," OVER THE NEXT TWO
TMERR:	MVI	E,ERRTM			;TYPE MISMATCH ERROR
ERROR:
	LHLD	CURLIN			;GET CURRENT LINE NUMBER
	SHLD	ERRLIN			;SAVE IT FOR ERL VARIABLE
	XRA	A			;CLEAR CHAIN FLAG IN CASE OF ERROR
	STA	MRGFLG			;ALSO MERGE FLAG
	STA	CHNFLG			;SO IT DOESNT TRY TO CHAIN
	MOV	A,H			;ONLY SET UP DOT IF IT ISNT DIRECT
	ANA	L
	INR	A
	JZ	ERRESM
	SHLD	DOT			;SAVE IT FOR EDIT OR LIST
ERRESM:	LXI	B,ERRMOR		;GET RETURN ADDRESS IN [B,C]
	PUBLIC	ERESET
	EXTRN	STKERR
ERESET:	LHLD	SAVSTK			;GET A GOOD STACK BACK
	JMP	STKERR			;JUMP INTO STKINI
ERRMOR:	POP	B			;POP OFF FNDFOR STOPPER
	MOV	A,E			;[A]=ERROR NUMBER
	MOV	C,E			;ALSO SAVE IT FOR LATER RESTORE
	STA	ERRFLG			;SAVE IT SO WE KNOW WHETHER TO CALL "EDIT"
	LHLD	SAVTXT			;GET SAVED TEXT POINTER
	SHLD	ERRTXT			;SAVE FOR RESUME.
	XCHG				;SAVE SAVTXT PTR
	LHLD	ERRLIN			;GET ERROR LINE #
	MOV	A,H			;TEST IF DIRECT LINE
	ANA	L			;SET CC'S
	INR	A			;SETS ZERO IF DIRECT LINE (65535)
	JZ	NTMDCN			;IF DIRECT, DONT MODIFY OLDTXT & OLDLIN
	SHLD	OLDLIN			;SET OLDLIN=ERRLIN.
	XCHG				;GET BACK SAVTXT
	SHLD	OLDTXT			;SAVE IN OLDTXT.
NTMDCN:	LHLD	ONELIN			;SEE IF WE ARE TRAPPING ERRORS.
	MOV	A,H			;BY CHECKING FOR LINE ZERO.
	ORA	L			;IS IT?
	XCHG				;PUT LINE TO GO TO IN [D,E]
	LXI	H,ONEFLG		;POINT TO ERROR FLAG
	JZ	NOTRAP			;SORRY, NO TRAPPING...
	ANA	M			;A IS NON-ZERO, SETZERO IF ONEFLG ZERO
	JNZ	NOTRAP			;IF FLAG ALREADY SET, FORCE ERROR
	DCR	M			;IF ALREADY IN ERROR ROUTINE, FORCE ERROR
	XCHG				;GET LINE POINTER IN [H,L]
	JMP	GONE4			;GO DIRECTLY TO NEWSTT CODE
NOTRAP:	XRA	A			;A MUST BE ZERO FOR CONTRO
	MOV	M,A			;RESET ONEFLG
	MOV	E,C			;GET BACK ERROR CODE
	STA	CNTOFL			;FORCE OUTPUT
	CALL	CRDONZ			;CRLF
	LXI	H,ERRTAB		;GET START OF ERROR TABLE
	MOV	A,E			;GET ERROR CODE
	CPI	LSTERR			;IS IT PAST LAST ERROR?
	JNC	UPERR			;YES, TOO BIG TO PRINT
	CPI	DSKERR+1		;DISK ERROR?
	JNC	NTDER2			;YES
	CPI	NONDSK+1		;IS IT BETWEEN LAST NORMAL & FIRST DISK?
	JC	NTDERR			;YES, OK TO PRINT IT
UPERR:	MVI	A,ERRUE+DSKERR-NONDSK	;PRINT "UNPRINTABLE ERROR"
NTDER2:	SUI	DSKERR-NONDSK		;FIX OFFSET INTO TABLE OF MESSAGES
	MOV	E,A			;SAVE BACK ERROR CODE
NTDERR:
					;ON "SYNTAX ERROR"S
LEPSKP:	CALL	REM			;SKIP AN ERROR MESSAGE
	INX	H			;SKIP OVER THIS ERROR MESSAGE
	DCR	E			;DECREMENT ERROR COUNT
	JNZ	LEPSKP			;SKIP SOME MORE
	PUSH	H			;SAVE TEXT POINTER
	LHLD	ERRLIN			;GET ERROR LINE NUMBER
	XTHL				;GET BACK ERROR TEXT POINTER
ERRFIN:
	MOV	A,M			;GET 1ST CHAR OF ERROR
	CPI	'?'			;PADDED ERROR?
	JNZ	ERRFN1			;NO,PRINT
	POP	H			;GET LINE # OFF STACK
	LXI	H,ERRTAB
	JMP	UPERR			;MAKE UNPRINTABLE ERROR

ERRFN1:
	CALL	STROUT			;PRINT MESSAGE
	POP	H			;RESTORE LINE NUMBER
	LXI	D,0+65534		;IS INIT EXECUTING?
	CALL	DCOMPR
	CZ	CRDO			;DO CRLF
	EXTRN	SYSTME
	JZ	SYSTME			;SYSTEM error exit
					;EXIT TO OS
					;IF SO, RESTART IT
	MOV	A,H			;SEE IF IN DIRECT MODE
	ANA	L
	INR	A			;ZERO SAYS DIRECT MODE
	CNZ	INPRT			;PRINT LINE NUMBER IN [H,L]
; NOW FALL INTO MAIN INTERPRETER LOOP
	PAGE
	SUBTTL	STPRDY, READY, MAIN, CHEAD
;
; FOR "LIST" COMMAND STOPPING
; AND FOR RETURNING FROM A FAILED "CVER"
; AND TO CORRECT A DIRECT GOSUB WHICH DOES INPUT
;
	PUBLIC	STPRDY
	DB	76Q			;SKIP THE NEXT BYTE WITH "MVI A,0"
STPRDY:	POP	B
READY:
	CALL	FINLPT			;PRINT ANY LEFT OVERS
	XRA	A
	STA	CNTOFL			;FORCE OUTPUT
	CALL	PRGFIN			;FINISH OUTPUT OF A FILE
	CALL	CRDONZ			;IF NOT ALREADY AT LEFT, SEND CRLF
	LXI	H,REDDY			;"OK" CRLF CRLF
REPINI:
					;BY THE INIT CODE. THIS IS HERE SO AFTER
					;ERRORS DURING INIT, INIT IS RESTARTED
	CALL	CPMWRM			;ERRORS IN CP/M INITIALIZATION, RETURN TO CP/M
	LDA	ERRFLG			;SEE IF IT WAS A "SYNTAX ERROR"
	SUI	ERRSN
	EXTRN	ERREDT
	CZ	ERREDT			;"EDIT" THE BAD LINE
MAIN:	LXI	H,0+65535
	SHLD	CURLIN			;SETUP CURLIN FOR DIRECT MODE
	LDA	AUTFLG			;IN AN AUTO COMMAND?
	ORA	A			;SET CC'S
	JZ	NTAUTO			;NO, REUGLAR MODE
	LHLD	AUTLIN			;GET CURRENT AUTO LINE
	PUSH	H			;SAVE AWAY FOR LATER USE
	CALL	LINPRT			;PRINT THE LINE #
	POP	D			;GET IT BACK
	PUSH	D			;SAVE BACK AGAIN
	CALL	FNDLIN			;SEE IF IT EXISTS
	MVI	A,'*'			;CHAR TO PRINT IF LINE ALREADY EXISTS
	JC	AUTELN			;DOESNT EXIST
	MVI	A,' '			;PRINT SPACE
AUTELN:	CALL	OUTDO			;PRINT CHAR
	CALL	INLIN			;READ A LINE
	POP	D			;GET LINE # OFF STACK
	JNC	AUTGOD			;IF NO CONTROL-C, PROCEED
	XRA	A			;CLEAR AUTFLG
	STA	AUTFLG			;BY SETTING IT TO ZERO
	JMP	READY			;PRINT READY MESSAGE

AUTRES:	XRA	A
	STA	AUTFLG			;Clear auto flag
	JMP	AUTSTR			;And enter line

AUTGOD:	LHLD	AUTINC			;GET INCREMENT
	DAD	D			;ADD INCREMENT TO THIS LINE
	JC	AUTRES			;CHECK FOR PATHETIC CASE
	PUSH	D			;SAVE LINE NUMBER #
	LXI	D,0+65529		;CHECK FOR LINE # TOO BIG
	CALL	DCOMPR
	POP	D			;GET BACK LINE #
	JNC	AUTRES			;IF TOO BIG, QUIT
	SHLD	AUTLIN			;SAVE IN NEXT LINE
AUTSTR:
					;SET NON-ZERO CONDITION CODES (SEE EDIT)
	LDA	BUF			;GET CHAR FROM BUFFER
	ORA	A			;IS IT NULL LINE?
	JZ	MAIN			;YES, LEAVE LINE ALONE
	EXTRN	EDITRT
	JMP	EDITRT			;JUMP INTO EDIT CODE
NTAUTO:
	CALL	INLIN			;GET A LINE FROM TTY
	JC	MAIN			;IGNORE ^C S
	CALL	CHRGTR			;GET THE FIRST
	INR	A			;SEE IF 0 SAVING THE CARRY FLAG
	DCR	A
	JZ	MAIN			;IF SO, A BLANK LINE WAS INPUT
	PUSH	PSW			;SAVE STATUS INDICATOR FOR 1ST CHARACTER
	CALL	LINGET			;READ IN A LINE #
	CALL	BAKSP			;BACK UP THE POINTER
	MOV	A,M			;GET THE CHAR
	CPI	' '			;CHARACTER A SPACE?
	CZ	INXHRT			;THEN EAT PAST IT
					;ONE SPACE ALWAYS PRINTED AFTER LINE #
	PUBLIC	EDENT
EDENT:	PUSH	D			;SAVE LINE #
	CALL	CRUNCH			;CRUNCH THE LINE DOWN
	POP	D			;RESTORE LINE #
	POP	PSW			;WAS THERE A LINE #?
	SHLD	SAVTXT			;FOR RESUMING A DIRECT STMT
					;RESTORE TEXT POINTER
	EXTRN	DIRDO
	JNC	DIRDO			;MAKE SURE WE'RE NOT READING A FILE
	PUSH	D
	PUSH	B			;SAVE LINE # AND CHARACTER COUNT
	CALL	PROCHK			;DONT ALLOW ANY FUNNY BUSINESS WITH EXISTING PGM
	CALL	CHRGTR			;REMEMBER IF THIS LINE IS
	ORA	A			;SET THE ZERO FLAG ON ZERO
					;LINES THAT START WITH ":" SHOULD NOT BE
					;IGNORED
	PUSH	PSW			;BLANK SO WE DON'T INSERT IT
	XCHG				;SAVE THIS LINE # IN DOT
	SHLD	DOT
	XCHG	
	CALL	FNDLIN			;GET A POINTER TO THE LINE
	JC	LEXIST			;LINE EXISTS, DELETE IT
	POP	PSW			;GET FLAG SAYS WHETHER LINE BLANK
	PUSH	PSW			;SAVE BACK
	JZ	USERR			;TRYING TO DELETE NON-EXISTANT LINE, ERROR
	ORA	A			;CLEAR FLAG THAT SAYS LINE EXISTS
LEXIST:	PUSH	B			;SAVE THE POINTER
	PUSH	PSW			;SAVE REGISTERS
	PUSH	H			;SAVE [H,L]
	CALL	DEPTR			;GET RID OF PTRS IN PGM
	POP	H			;GET BACK POINTER TO NEXT LINE
	POP	PSW			;GET BACK PSW
	POP	B			;RESTORE POINTER TO THIS LINE
	PUSH	B			;SAVE BACK AGAIN
	CC	DEL			;DELETE THE LINE
NODEL:	POP	D			;POP POINTER AT PLACE TO INSERT
	POP	PSW			;SEE IF THIS LINE HAD
					;ANYTHING ON IT
	PUSH	D			;SAVE PLACE TO START FIXING LINKS
	JZ	FINI			;IF NOT DON'T INSERT
	POP	D			;GET RID OF START OF LINK FIX
	LDA	CHNFLG			;ONLY CHANGET FRETOP IF NOT CHAINING
	ORA	A
	JNZ	LEVFRE			;LEAVE FRETOP ALONE
	LHLD	MEMSIZ			;DELETE ALL STRINGS
	SHLD	FRETOP			;SO REASON DOESNT USE THEM
LEVFRE:
	LHLD	VARTAB			;CURRENT END
	XTHL				;[H,L]=CHARACTER COUNT. VARTAB
					;ONTO THE STACK
	POP	B			;[B,C]=OLD VARTAB
	PUSH	H			;SAVE COUNT OF CHARS TO MOVE
	DAD	B
	PUSH	H			;SAVE NEW VARTAB
	CALL	BLTU
	POP	H			;POP OFF VARTAB
	SHLD	VARTAB			;UPDATE VARTAB
	XCHG	
	MOV	M,H			;FOOL CHEAD WITH NON-ZERO LINK
	POP	B			;RESTORE COUNT OF CHARS TO MOVE
	POP	D			;GET LINE # OFF STACK
	PUSH	H			;SAVE START OF PLACE TO FIX LINKS
	INX	H			;SO IT DOESN'T THINK
					;THIS LINK IS THE
					;END OF THE PROGRAM
	INX	H
	MOV	M,E
	INX	H			;PUT DOWN LINE #
	MOV	M,D
	INX	H
	LXI	D,KBUF			;MOVE LINE FRM KBUF TO PROGRAM AREA
	DCX	B			;FIX UP COUNT OF CHARS TO MOVE
	DCX	B			;(DONT INCLUDE LINE # & LINK)
	DCX	B			;
	DCX	B
MLOOPR:	LDAX	D			;NOW TRANSFERING LINE
					;IN FROM BUF
	MOV	M,A
	INX	H
	INX	D
	DCX	B			;DECREMENT CHAR COUNT BY 1
	MOV	A,C			;TEST FOR COUNT EXHAUSTED
	ORA	B			;BY SEEING IF [B,C]=0
	JNZ	MLOOPR
FINI:
	POP	D			;GET START OF LINK FIXING AREA
	CALL	CHEAD			;FIX LINKS
	LXI	H,DIRTMP		;DON'T ALLOW ZERO TO BE CLOSED
	MVI	M,0			;NOT SEQUENTIAL OUTPUT
	SHLD	FILPTR
	LHLD	PTRFIL			;GET FILE POINTER, COULD BE ZERO
	SHLD	TEMP2			;SAVE IT
	CALL	RUNC			;DO CLEAR & SET UP STACK 
	LHLD	FILPT1			;RESET [FILPTR]
	SHLD	FILPTR
	LHLD	TEMP2			;RESET [PTRFIL]
	SHLD	PTRFIL
	JMP	MAIN			;GO TO MAIN CODE
	PUBLIC	LINKER
LINKER:
	LHLD	TXTTAB
	XCHG	
;
; CHEAD GOES THROUGH PROGRAM STORAGE AND FIXES
; UP ALL THE LINKS. THE END OF EACH
; LINE IS FOUND BY SEARCHING FOR THE ZERO AT THE END.
; THE DOUBLE ZERO LINK IS USED TO DETECT THE END OF THE PROGRAM
;
CHEAD:	MOV	H,D			;[H,L]=[D,E]
	MOV	L,E
	MOV	A,M			;SEE IF END OF CHAIN
	INX	H			;BUMP POINTER
	ORA	M			;2ND BYTE

	RZ	
	INX	H			;FIX H TO START OF TEXT
	INX	H
CZLOOP:	INX	H			;BUMP POINTER
	MOV	A,M			;GET BYTE
CZLOO2:	ORA	A			;SET CC'S
	JZ	CZLIN			;END OF LINE, DONE.
	CPI	DBLCON+1		;EMBEDDED CONSTANT?
	JNC	CZLOOP			;NO, GET NEXT
	CPI	11			;IS IT LINEFEED OR BELOW?
	JC	CZLOOP			;THEN SKIP PAST
	CALL	CHRGT2			;GET CONSTANT
	CALL	CHRGTR			;GET OVER IT
	JMP	CZLOO2			;GO BACK FOR MORE
CZLIN:	INX	H			;MAKE [H,L] POINT AFTER TEXT
	XCHG				;SWITCH TEMP
	MOV	M,E			;DO FIRST BYTE OF FIXUP
	INX	H			;ADVANCE POINTER
	MOV	M,D			;2ND BYTE OF FIXUP
	JMP	CHEAD			;KEEP CHAINING TIL DONE
	PAGE
	SUBTTL	SCNLIN, FNDLIN - SCAN LINE RANGE AND FIND LINE # IN PROGRAM
;
; SCNLIN SCANS A LINE RANGE OF
; THE FORM  #-# OR # OR #- OR -# OR BLANK
; AND THEN FINDS THE FIRST LINE IN THE RANGE
;
SCNLIN:	LXI	D,0			;ASSUME START LIST AT ZERO
	PUSH	D			;SAVE INITIAL ASSUMPTION
	JZ	ALLLST			;IF FINISHED, LIST IT ALL
	POP	D			;WE ARE GOING TO GRAB A #
	CALL	LINSPC			;GET A LINE #. IF NONE, RETURNS ZERO
	PUSH	D			;SAVE FIRST
	JZ	SNGLIN			;IF ONLY # THEN DONE.
	CALL	SYNCHR
	DB	MINUTK			;MUST BE A DASH.
ALLLST:	LXI	D,0+65530		;ASSUME MAX END OF RANGE
	CNZ	LINSPC			;GET THE END OF RANGE
	JNZ	SNERR			;MUST BE TERMINATOR
SNGLIN:	XCHG				;[H,L] = FINAL
	POP	D			;GET INITIAL IN [D,E]
FNDLN1:	XTHL				;PUT MAX ON STACK, RETURN ADDR TO [H,L]
	PUSH	H			;SAVE RETURN ADDRESS BACK
;
; FNDLIN SEARCHES THE PROGRAM TEXT FOR THE LINE
; WHOSE LINE # IS PASSED IN [D,E]. [D,E] IS PRESERVED.
; THERE ARE THREE POSSIBLE RETURNS:
;
;	1) ZERO FLAG SET. CARRY NOT SET.  LINE NOT FOUND.
;	   NO LINE IN PROGRAM GREATER THAN ONE SOUGHT.
;	   [B,C] POINTS TO TWO ZERO BYTES AT END OF PROGRAM.
;	   [H,L]=[B,C]
;
;	2) ZERO, CARRY SET. 
;	   [B,C] POINTS TO THE LINK FIELD IN THE LINE
;	   WHICH IS THE LINE SEARCHED FOR.
;	   [H,L] POINTS TO THE LINK FIELD IN THE NEXT LINE.
;
;	3) NON-ZERO, CARRY NOT SET.
;	   LINE NOT FOUND, [B,C]  POINTS TO LINE IN PROGRAM
;	   GREATER THAN ONE SEARCHED FOR.
;	   [H,L] POINTS TO THE LINK FIELD IN THE NEXT LINE.
;
FNDLIN:
	LHLD	TXTTAB			;GET POINTER TO START OF TEXT
LOOP:
	MOV	B,H			;IF EXITING BECAUSE OF END OF PROGRAM,
					;SET [B,C] TO POINT TO DOUBLE ZEROES.
	MOV	C,L
	MOV	A,M			;GET WORD POINTER TO
	INX	H			;BUMP POINTER
	ORA	M			;GET 2ND BYTE
	DCX	H			;GO BACK
	RZ				;IF ZERO THEN DONE
	INX	H			;SKIP PAST AND GET THE LINE #
	INX	H
	MOV	A,M			;INTO [H,L] FOR COMPARISON WITH
	INX	H			;THE LINE # BEING SEARCHED FOR
	MOV	H,M			;WHICH IS IN [D,E]
	MOV	L,A
	CALL	DCOMPR			;SEE IF IT MATCHES OR IF WE'VE GONE TOO FAR
	MOV	H,B			;MAKE [H,L] POINT TO THE START OF THE
	MOV	L,C			;LINE BEYOND THIS ONE, BY PICKING
	MOV	A,M			;UP THE LINK THAT [B,C] POINTS AT
	INX	H
	MOV	H,M
	MOV	L,A
	CMC				;TURN CARRY ON
	RZ				;EQUAL RETURN
	CMC				;MAKE CARRY ZERO
	RNC				;NO MATCH RETURN (GREATER)
	JMP	LOOP			;KEEP LOOPING
	PAGE
	SUBTTL	PRE FAST CRUNCH - COMPACTIFICATION
	PAGE
	PAGE
	SUBTTL	FAST CRUNCH - COMPACTIFICATION
;
; ALL "RESERVED" WORDS ARE TRANSLATED INTO SINGLE
; ONE OR TWO (IF TWO, FIRST IS ALWAYS 377 OCTAL)
; BYTES WITH THE MSB ON. THIS SAVES SPACE AND TIME
; BY ALLOWING FOR TABLE DISPATCH DURING EXECUTION.
; THEREFORE ALL STATEMENTS APPEAR TOGETHER IN THE
; RESERVED WORD LIST IN THE SAME
; ORDER THEY APPEAR IN IN STMDSP.
;
; NUMERIC CONSTANTS ARE ALSO CONVERTED TO THEIR INTERNAL
; BINARY REPRESENTATION TO IMPROVE EXECUTION SPEED
; LINE NUMBERS ARE ALSO PRECEEDED BY A SPECIAL TOKEN
; SO THAT LINE NUMBERS CAN BE CONVERTED TO POINTERS AT EXECUTION
; TIME.
CRUNCH:	XRA	A			;SAY EXPECTING FLOATING NUMBERS
	STA	DONUM			;SET FLAG ACORDINGLY
	STA	DORES			;ALLOW CRUNCHING
	LXI	B,0+KBFLEN-3		;GET LENGTH OF KRUNCH BUFFER
					;MINUS THREE BECAUSE OF ZEROS AT END
	LXI	D,KBUF			;SETUP DESTINATION POINTER
KLOOP:	MOV	A,M			;GET CHARACTER FROM BUF
					;SETUP B WITH A QUOTE IF IT IS A STRING
	CPI	34			;QUOTE SIGN? 
	JZ	STRNG			;YES, GO TO SPECIAL STRING HANDLING
	CPI	' '			;SPACE?
	JZ	STUFFH			;JUST STUFF AWAY
	ORA	A			;END OF LINE?
	JZ	CRDONE			;YES, DONE CRUNCHING
	LDA	DORES			;IN DATA STATEMENT AND NO CRUNCH?
	ORA	A
	MOV	A,M			;GET THE CHARACTER AGAIN
	JNZ	STUFFH			;IF NO CRUNCHING JUST STORE
					;THE CHARACTER
	CPI	'?'			;A QMARK?
	MVI	A,$PRINT
	PUSH	D			;SAVE STORE POINTER
	PUSH	B			;SAVE CHAR COUNT
	JZ	NOTFN2			;THEN USE A "PRINT" TOKEN
					;***5.11 DONT ALLOW FOLLOWING LINE #***
	LXI	D,SPCTAB		;ASSUME WE'LL SEARCH SPECIAL CHAR TABLE
	CALL	MAKUPL			;TRANSLATE THIS CHAR TO UPPER CASE
	CALL	ISLET2			;LETTER?
	JC	TSTNUM			;NOT A LETTER, TEST FOR NUMBER
	PUSH	H			;SAVE TEXT POINTER
	LXI	B,NOTGOS		;PLACE TO RETURN IF NOT FUNNY GO
	PUSH	B
	CPI	'G'			;FIRST CHECK FOR "GO "
	RNZ	
	INX	H
	CALL	MAKUPL
	CPI	'O'
	RNZ	
	INX	H
	CALL	MAKUPL
	CPI	' '
	RNZ	
	INX	H
GSKPSP:	CALL	MAKUPL			;NOW SKIP ANY NUMBER OF SPACES
	INX	H
	CPI	' '
	JZ	GSKPSP
	CPI	'S'
	JZ	CKGOSU			;LOOKS LIKE "GO SUB" NOT "GO TO"
	CPI	'T'
	RNZ	
	CALL	MAKUPL
	CPI	'O'
	MVI	A,$GOTO			;RESWRD TO USE IF MATCHED
	JMP	GPUTRS			;MERGE WITH "GO SUB"
CKGOSU:	CALL	MAKUPL
	CPI	'U'
	RNZ	
	INX	H
	CALL	MAKUPL
	CPI	'B'
	MVI	A,$GOSUB
GPUTRS:	RNZ	
	POP	B			;POP OFF THE RETURN ADDRESS SINCE MATCHED
	POP	B			;POP OFF THE OLD TEXT POINTER
	JMP	NOTFN2			;STORE THE RESERVED WORD
NOTGOS:	POP	H
	CALL	MAKUPL			;GET BACK THE CHARACTER
	PUSH	H			;RESAVE THE TEXT POINTER
	LXI	H,ALPTAB		;GET POINTER TO ALPHA DISPATCH TABLE
	SUI	'A'			;SUBTRACT ALPHA OFFSET
	ADD	A			;MULTIPLY BY TWO
	MOV	C,A			;SAVE OFFSET IN [C] FOR DAD.
	MVI	B,0			;MAKE HIGH PART OF OFFSET ZERO
	DAD	B			;ADD TO TABLE ADDRESS
	MOV	E,M			;SET UP POINTER IN [D,E]
	INX	H
	MOV	D,M			;GET HIGH PART OF ADDRESS
	POP	H			;GET BACK SOURCE POINTER
	INX	H			;POINT TO CHAR AFTER FIRST ALPHA
TRYAGA:	PUSH	H			;SAVE TXTPTR TO START OF SEARCH AREA
LOPPSI:
	CALL	MAKUPL			;TRANSLATE THIS CHAR TO UPPER CASE
	MOV	C,A			;SAVE CHAR IN [C]
	LDAX	D			;GET BYTE FROM RESERVED WORD LIST
	ANI	127			;GET RID OF HIGH BIT
	JZ	NOTRES			;IF=0 THEN END OF THIS CHARS RESLT
	INX	H			;BUMP SOURCE POINTER
	CMP	C			;COMPARE TO CHAR FROM SOURCE LINE
	JNZ	LOPSKP			;IF NO MATCH, SEARCH FOR NEXT RESWRD
	LDAX	D			;GET RESWRD BYTE AGAIN
	INX	D			;BUMP RESLST POINTER
	ORA	A			;SET CC'S
	JP	LOPPSI			;SEE IF REST OFCHARS MATCH
	MOV	A,C			;GET LAST CHAR OF RESWRD
	CPI	'('			;IF TAB( OR SPC(, SPACE NEED NOT FOLLOW
	JZ	ISRESW			;IS A RESWORD
	LDAX	D			;LOOK AFTER CHAR
	CPI	$FN			;FUNCTION?
	JZ	ISRESW			;THEN NO SPACE NEED AFTERWARD
	CPI	$USR			;OR USR DEFINITION?
	JZ	ISRESW
	CALL	MAKUPL			;GET NEXT CHAR IN LINE (MC 6/22/80)
	CPI	'.'			;IS IT A DOT
	JZ	ISVARS			;YES
	CALL	TSTANM			;IS IT A LETTER IMMEDIATELY FOLLOWING RESWRD
ISVARS:	MVI	A,0			;SET DONUM TO -1
	JNC	NOTRES			;IF ALPHA, CANT BE RESERVED WORD
ISRESW:
	POP	PSW			;GET RID OF SAVED [H,L]
	LDAX	D			;GET RESWRD VALUE
	ORA	A			;SET CC'S
	JM	NOTFNT			;IF MINUS, WASNT FUNCTION TOKEN
	POP	B			;GET CHAR COUNT OFF STACK
	POP	D			;GET DEPOSIT POINTER OFF STACK
	ORI	200O			;MAKE HIGH ORDER BIT ONE
	PUSH	PSW			;SAVE FN CHAR
	MVI	A,377O			;GET BYTE WHICH PRECEEDS FNS
	CALL	KRNSAV			;SAVE IN KRUNCH BUFFER
	XRA	A			;MAKE A ZERO
	STA	DONUM			;TO RESET DONUM (FLOATINGS ALLOWED)
	POP	PSW			;GET FUNCTION TOKEN
	CALL	KRNSAV			;STORE IT
	JMP	KLOOP			;KEEP KRUNCHING

LOPSKP:	POP	H			;RESTORE UNDEFILED TEXT POINTER
LOPSK2:	LDAX	D			;GET A BYTE FROM RESWRD LIST
	INX	D			;BUMP RESLST POINTER
	ORA	A			;SET CC'S
	JP	LOPSK2			;NOT END OF RESWRD, KEEP SKIPPING
	INX	D			;POINT AFTER TOKEN
	JMP	TRYAGA			;TRY ANOTHER RESWRD

NOTFNT:	DCX	H			;FIX TEXT POINTER
NOTFN2:	PUSH	PSW			;SAVE CHAR TO BE SAVE D IN KRUNCH BUFFER
	LXI	B,NOTRS2		;WHERE TO GO IF NOT LINE NUMBER RESWRD
	PUSH	B			;SAVE LABEL ADDRESS ON STACK
	CPI	$RESTO 			;RESTORE CAN HAVE FOLLOWING LINE NUMBER
	RZ	
	CPI	$AUTO			;AUTO COMMAND
	RZ				;SCAN LINE RANGE &CRUNCH
	CPI	$RENUM			;RENUMBER?
	RZ	
	CPI	$DELET 			;DELETE?
	RZ				;IF SO, CRUNCH FOLLOWING LINE #
	CPI	$EDIT			;EDIT?
	RZ	
	CPI	$RESUM			;RESUME?
	RZ				;CRUNCH FOLLOWING LINE NUMBER
	CPI	$ERL			;ERROR LINE
	RZ				;CRUNCH FOLLOWING LINE NUMBER
					;SO THAT IF "ERL=...THEN"
					;WILL RESEQUENCE PROPERLY
					;THIS CAN MAKE STATEMENTS LIKE 
					;"PRINT ERL,1E20" DO STRANGE THINGS
	CPI	$ELSE
	RZ				;IF ELSE, CRUNCH FOLLOWING LINE #
	CPI	$RUN			;RUN?
	RZ				;CRUNCH FOLLOWING LINE #
	CPI	$LIST			;LIST?
	RZ	
	CPI	$LLIST			;LPT LIST?
	RZ				;CRUNCH FOLLOWING LINE #'S
	CPI	$GOTO			;IF GOTO, CRUNCH LINE #
	RZ	
	CPI	$THEN			;CRUNCH LINE #'S AFTER 'THEN'
	RZ	
	CPI	$GOSUB			;IF GOSUB, CRUNCH LINE #'S
	RZ	
	POP	PSW			;GET RID OF NOTRS2 RETURN ADDRESS
	XRA	A			;GET A ZERO (EXPECT USUALL NUMBERS)
	DB	302Q			;"JNZ" OVER NEXT TWO BYTES
NOTRS2:	MVI	A,1			;SAY LINE #'S ALLOWED.
NOTRS6:	STA	DONUM			;SAVE IN FLAG
	POP	PSW			;RESTORE CHARACTER TO SAVE IN KRUNCH BUFFER
	POP	B			;GET BACK THE CHARACTER COUNT
	POP	D			;GET STUFF POINTER BACK
	CPI	$ELSE			;HAVE TO PUT A HIDDEN
					;COLON IN FRONT OF "ELSE"S
	PUSH	PSW			;SAVE CURRENT CHAR ($ELSE)
	CZ	KRNSVC			;SAVE ":" IN CRUNCH BUFFER
	POP	PSW			;GET BACK TOKEN
CKSNGQ:	CPI	SNGQTK			;SINGLE QUOATATION MARK?
	JNZ	NTSNGT
	PUSH	PSW			;SAVE SNGQTK
	CALL	KRNSVC			;SAVE ":" IN CRUNCH BUFFER
	MVI	A,$REM			;STORE ":$REM" IN FRONT FOR EXECUTION
	CALL	KRNSAV			;SAVE IT
	POP	PSW			;GET SNGQTK BACK
	PUSH	PSW			;SAVE BACK AS TERMINATOR FOR STRNG
	JMP	STRNG2			;STUFF THE REST OF THE LINE WITHOUT CRUNCHING
TSTNUM:	MOV	A,M			;GET CHAR
	CPI	'.'			;TEST FOR START OF FLOATING #
	JZ	NUMTRY			;TRY INPUTTING IT AS CONSTANT
	CPI	'9'+1			;IS IT A DIGIT?
	JNC	SRCSPC			;NO, TRY OTHER THINGS
	CPI	'0'			;TRY LOWER END
	JC	SRCSPC			;NO TRY OTHER POSSIBILITIES
NUMTRY:	LDA	DONUM			;TEST FOR NUMBERS ALLOWED
	ORA	A			;SET CC'S
	MOV	A,M			;GET CHAR IF GOING TO STUFFH
	POP	B			;RESTORE CHAR COUNT
	POP	D			;RESTORE DEP. POINTER
	JM	STUFFH			;NO, JUST STUFF IT (!)
	JZ	FLTGET			;IF DONUM=0 THEN FLOATING #'S ALLOWED
	CPI	'.'			;IS IT DOT?
	JZ	STUFFH			;YES, STUFF IT FOR HEAVENS SAKE! (EDIT .)
	MVI	A,LINCON		;GET LINE # TOKEN
	CALL	KRNSAV			;SAVE IT
	PUSH	D			;SAVE DEPOSIT POINTER
	CALL	LINGET			;GET THE LINE #.
	CALL	BAKSP			;BACK UP POINTER TO AFTER LAST DIGIT
SAVINT:	XTHL				;EXCHANGE CURRENT [H,L] WITH SAVED [D,E]
	XCHG				;GET SAVED [D,E] IN [D,E]
SAVI:	MOV	A,L			;GET LOW BYTE OF VALUE RETURNED BY LINGET
	CALL	KRNSAV			;SAVE THE LOW BYTE OF LINE #
	MOV	A,H			;GET HIGH BYTE
POPSTF:	POP	H			;RESTORE [H,L]
	CALL	KRNSAV			;SAVE IT TOO
	JMP	KLOOP			;EAT SOME MORE

FLTGET:	PUSH	D			;SAVE DEPOSIT POINTER
	PUSH	B			;SAVE CHAR COUNT
	MOV	A,M			;FIN ASSUMES CHAR IN [A]
	CALL	FIN			;READ THE #
	CALL	BAKSP			;BACK UP POINTER TO AFTER LAST DIGIT
	POP	B			;RESTORE CHAR COUNT
	POP	D			;RESTORE DEPOSIT POINTER
	PUSH	H			;SAVE TEXT POINTER
	LDA	VALTYP			;GET VALUE TYPE
	CPI	2			;INTEGER?
	JNZ	NTINTG			;NO
	LHLD	FACLO			;GET IT
	MOV	A,H			;GET HIGH PART
	ORA	A			;IS IT ZERO?
	MVI	A,2			;RESTORE INT VALTYP
	JNZ	NTINTG			;THEN ISNT SINGLE BYTE INT
	MOV	A,L			;GET LOW BYTE
	MOV	H,L			;GET LOW BYTE IN HIGH BYTE TO STORE
	MVI	L,IN2CON		;GET CONSTANT FOR 1 BYTE INTS
	CPI	10			;IS IT TOO BIG FOR A SINGLE BYTE CONSTANT?
	JNC	SAVI			;TOO BIG, USE SINGLE BYTE INT
	ADI	ONECON			;MAKE SINGLE BYTE CONSTANT
	JMP	POPSTF			;POP H & STUFF AWAY CHAR
NTINTG:	PUSH	PSW			;SAVE FOR LATER
	RRC				;DIVIDE BY TWO
	ADI	INTCON-1		;ADD OFFSET TO GET TOKEN
	CALL	KRNSAV			;SAVE THE TOKEN
	LXI	H,FACLO			;GET START POINTER
	CALL	GETYPR			;SET CC'S ON VALTYPE
	JC	NTDBL			;IF NOT DOUBLE, START MOVING AT FACLO
	LXI	H,DFACLO		;DOUBLE, START MOVING AT DFACLO
NTDBL:	POP	PSW			;RESTORE COUNT OF BYTES TO MOVE
MOVCON:	PUSH	PSW			;SAVE BYTE MOVE COUNT
	MOV	A,M			;GET A BYTE
	CALL	KRNSAV			;SAVE IT IN KRUNCH BUFFER
	POP	PSW			;GET BACK COUNT
	INX	H			;BUMP POINTER INTO FAC
	DCR	A			;MOVE IT DOWN
	JNZ	MOVCON			;KEEP MOVING IT
	POP	H			;GET BACK SAVED TEXT POINTER
	JMP	KLOOP			;KEEP LOOPING

SRCSPC:	LXI	D,SPCTAB-1		;GET POINTER TO SPECIAL CHARACTER TABLE
SRCSP2:	INX	D			;MOVE POINTER AHEAD
	LDAX	D			;GET BYTE FROM TABLE
	ANI	177O			;MASK OFF HIGH BIT
	JZ	NOTRS5			;IF END OF TABLE, STUFF AWAY, DONT CHANGE DONUM
	INX	D			;BUMP POINTER
	CMP	M			;IS THIS SPECIAL CHAR SAME AS CURRENT TEXT CHAR?
	LDAX	D			;GET NEXT RESWRD
	JNZ	SRCSP2			;IF NO MATCH, KEEP LOOKING
	JMP	NOTRS1			;FOUND, SAVE AWAY AND SET DONUM=1.

NTSNGT:
	CPI	'&'			;OCTAL CONSTANT?
	JNZ	STUFFH			;JUST STUFF IT AWAY
	PUSH	H			;SAVE TEXT POINTER
	CALL	CHRGTR			;GET NEXT CHAR
	POP	H			;RESTORE TEXT POINTER
	CALL	MAKUPS			;MAKE CHAR UPPER CASE
	CPI	'H'			;HEX CONSTANT?
	MVI	A,OCTCON		;ASSUME OCTAL CONSTANT
	JNZ	WUZOCT			;YES, IT WAS
	MVI	A,HEXCON		;NO, WAS HEX
WUZOCT:	CALL	KRNSAV			;SAVE IT
	PUSH	D			;SAVE CURRENT DEPOSIT POINTER
	PUSH	B			;SAVE COUNT
	CALL	OCTCNS			;GET THE VALUE
	POP	B			;RESTORE [B,C]
	JMP	SAVINT			;SAVE THE INTEGER IN THE KRUNCH BUFFER
STUFFH:	INX	H			;ENTRY TO BUMP [H,L]
	PUSH	PSW			;SAVE CHAR AS KRNSAV CLOBBERS
	CALL	KRNSAV			;SAVE CHAR IN KRUNCH BUFFER
	POP	PSW			;RESTORE CHAR
	SUI	':'			;SEE IF IT IS A COLON
	JZ	COLIS			;IF SO ALLOW CRUNCHING AGAIN
	CPI	$DATA-':'
	JNZ	NODATT			;SEE IF IT IS A DATA TOKEN
	MVI	A,1			;SET LINE NUMBER ALLOWED FLAG
					;KLUDGE AS HAS TO BE NON-ZERO.
COLIS:	STA	DORES			;SETUP FLAG
	STA	DONUM			;SET NUMBER ALLOWED FLAG
NODATT:	SUI	$REM-':'
	JNZ	KLOOP			;KEEP LOOPING
	PUSH	PSW			;SAVE TERMINATOR ON STACK
STR1:	MOV	A,M			;GET A CHAR
	ORA	A			;SET CONDITION CODES
	XTHL				;GET SAVED TERMINATOR OFF STACK, SAVE [H,L]
	MOV	A,H			;GET TERMINATOR INTO [A] WITHOUT AFFECTING PSW
	POP	H			;RESTORE [H,L]
	JZ	CRDONE			;IF END OF LINE THEN DONE
	CMP	M			;COMPARE CHAR WITH THIS TERMINATOR
	JZ	STUFFH			;IF YES, DONE WITH STRING
STRNG:
	PUSH	PSW			;SAVE TERMINATOR
	MOV	A,M			;GET BACK LINE CHAR
STRNG2:	INX	H			;INCREMENT TEXT POINTER
	CALL	KRNSAV			;SAVE CHAR IN KRUNCH BUFFER
	JMP	STR1			;KEEP LOOPING

CRDONE:

					;ADD 5 TO LINE COUNT & FOR IN [B,C]
	LXI	H,0+KBFLEN+2		;GET OFFSET
	MOV	A,L			;GET COUNT TO SUBTRACT FROM
	SUB	C			;SUBTRACT
	MOV	C,A
	MOV	A,H
	SBB	B
	MOV	B,A
	LXI	H,KBUF-1		;GET POINTER TO CHAR BEFORE KBUF
					;AS "GONE" DOES A CHRGET
	XRA	A			;GET A ZERO
	STAX	D			;NEED THREE 0'S ON THE END
	INX	D			;ONE FOR END-OF-LINE
	STAX	D			;AND 2 FOR A ZERO LINK
	INX	D			;SINCE IF THIS IS A DIRECT STATEMENT
	STAX	D			;ITS END MUST LOOK LIKE THE END OF A PROGRAM
	RET				;END OF CRUNCHING

KRNSVC:	MVI	A,':'			;GET COLON
KRNSAV:
					;IN KRUNCH BUFFER
	STAX	D			;SAVE BYTE IN KRUNCH BUFFER
	INX	D			;BUMP POINTER
	DCX	B			;DECREMENT COUNT OF BYTES LEFT IN BUFFER
	MOV	A,C			;TEST IF IT WENT TO ZERO
	ORA	B			;BY SEEING IF DOUBLE BYTE ZERO.
	RNZ				;ALL DONE IF STILL SPACE LEFT
	PUBLIC	LBOERR
LBOERR:	MVI	E,ERRLBO		;GET ERROR CODE
	JMP	ERROR			;JUMP TO ERROR ROUTINE

NOTRES:	POP	H			;GET BACK POINTER TO ORIGINAL CHAR
	DCX	H			;NOW POINT TO FIRST ALPHA CHAR
	DCR	A			;SET A TO MINUS ONE
	STA	DONUM			;FLAG WERE IN VARIABLE NAME
	POP	B			;GET BACK CHAR COUNT
	POP	D			;GET BACK DEPOSIT POINTER
	CALL	MAKUPL			;GET CHAR FROM LINE, MAKE UPPER CASE
KRNVAR:	CALL	KRNSAV			;SAVE CHAR
	INX	H			;INCRMENT SOURCE POINTER
	CALL	MAKUPL			;MAKE UPPER CASE (?)
	CALL	ISLET2			;IS IT A LETTER?
	JNC	KRNVAR			;YES, EAT
	CPI	'9'+1			;DIGIT?
	JNC	JKLOOP			;NO, TOO LARGE
	CPI	'0'
	JNC	KRNVAR			;YES, EAT
	CPI	'.'			;IS IT DOT
	JZ	KRNVAR			;YES, DOTS OK IN VAR NAMES
JKLOOP:	JMP	KLOOP			;DONE LOOKING AT VARIABLE NAME
NOTRS5:	MOV	A,M			;GET CHAR FROM LINE
	CPI	32			;SPACE OR HIGHER ?
	JNC	NOTRS1			;YES = SAVE IT
	CPI	9			;TAB ?
	JZ	NOTRS1			;YES = THAT'S OK
	CPI	10			;ALSO ALLOW...
	JZ	NOTRS1			;...LINE FEEDS
	MVI	A,32			;FORCE REST TO SPACES
NOTRS1:	PUSH	PSW			;SAVE THIS CHAR
	LDA	DONUM			;GET NUMBER OK FLAG
	INR	A			;SEE IF IN A VARIABLE NAME.
	JZ	JNTRS6			;IF SO & SPECIAL CHAR SEEN, RESET DONUM
	DCR	A			;OTHERWISE LEAVE DONUM UNCHANGED.
JNTRS6:	JMP	NOTRS6

; ROUTINE TO BACK UP POINTER AFTER # EATEN
BAKSP:	DCX	H			;POINT TO PREVIOUS CHAR
	MOV	A,M			;GET THE CHAR
	CPI	' '			;A SPACE?
	JZ	BAKSP			;YES, KEEP BACKING UP
	CPI	9			;TAB?
	JZ	BAKSP			;YES, BACK UP
	CPI	10			;LF?
	JZ	BAKSP
	INX	H			;POINT TO CHAR AFTER LAST NON-SPACE
	RET				;ALL DONE.
	PAGE
	PAGE
	SUBTTL	THE NON-EXTENDED "LIST" COMMAND



	PAGE
	SUBTTL	"FOR" STATEMENT
;
; A "FOR" ENTRY ON THE STACK HAS THE FOLLOWING FORMAT:
;
; LOW ADDRESS
;	TOKEN ($FOR IN HIGH BYTE)  1 BYTE
;	A POINTER TO THE LOOP VARIABLE  2 BYTES
;	A BYTE REFLECTING THE SIGN OF THE INCREMENT 1 BYTE
;	THE STEP 4 BYTES
;	THE UPPER VALUE 4 BYTES
;	THE LINE # OF THE "FOR" STATEMENT 2 BYTES
;	A TEXT POINTER INTO THE "FOR" STATEMENT 2 BYTES
; HIGH ADDRESS
;
; TOTAL 16 BYTES
;

FOR:	MVI	A,100
	STA	SUBFLG			;DONT RECOGNIZE SUBSCRIPTED VARIABLES
	CALL	PTRGET			;GET POINTER TO LOOP VARIABLE
	CALL	SYNCHR
	DB	EQULTK			;SKIP OVER ASSIGNMENT "="
	PUSH	D			;SAVE THE VARIABLE POINTER
	XCHG				;SAVE THE LOOP VARIABLE IN TEMP
	SHLD	TEMP			;FOR USE LATER ON
	XCHG	
	LDA	VALTYP			;REMEMBER THE LOOP VARIABLE TYPE
	PUSH	PSW
	CALL	FRMEVL			;GET THE START VALUE
	POP	PSW			;REGET THE LOOP TYPE
	PUSH	H			;SAVE THE TEXT POINTER
	CALL	DOCNVF			;FORCE CONVERSION TO LOOP TYPE
	LXI	H,FVALSV		;PLACE TO SAVE THE VALUE
	CALL	MOVMF			;STORE FOR USE IN "NEXT"
	POP	H			;GET BACK THE TEXT POINTER
	POP	D			;GET BACK THE VARIABLE POINTER
					;THE CORRECT INTIAL VALUE
					;AND STORE A POINTER
					;TO THE VARIABLE IN [TEMP]
	POP	B			;GET RID OF THE NEWSTT RETURN
	PUSH	H			;SAVE THE TEXT POINTER
	CALL	DATA			;SET [H,L]=END OF STATEMENT
	SHLD	ENDFOR			;SAVE FOR COMPARISON
	LXI	H,0+2			;SET UP POINTER INTO STACK
	DAD	SP
LPFORM:	CALL	LOOPER			;MUST HAVE VARIABLE POINTER IN [D,E]
	POP	D			;[D,E]=TEXT POINTER
	JNZ	NOTOL			;IF NO MATCHING ENTRY, DON'T
					;ELIMINATE ANYTHING
	DAD	B			;IN THE CASE OF "FOR"
					;WE ELIMINATE THE MATCHING ENTRY
					;AS WELL AS EVERYTHING AFTER IT
	PUSH	D			;SAVE THE TEXT POINTER
	DCX	H			;SEE IF END TEXT POINTER OF MATCHING ENTRY
	MOV	D,M			;MATCHES THE FOR WE ARE HANDLING
	DCX	H			;PICK UP THE END OF THE "FOR" TEXT POINTER
	MOV	E,M			;FOR THE ENTRY ON THE STACK
	INX	H			;WITHOUT CHANGING [H,L]
	INX	H
	PUSH	H			;SAVE THE STACK POINTER FOR THE COMPARISON
	LHLD	ENDFOR			;GET ENDING TEXT POINTER FOR THIS "FOR"
	CALL	DCOMPR			;SEE IF THEY MATCH
	POP	H			;GET BACK THE STACK POINTER
	JNZ	LPFORM			;KEEP SEARCHING IF NO MATCH
	POP	D			;GET BACK THE TEXT POINTER
	SPHL				;DO THE ELIMINATION
	SHLD	SAVSTK			;UPDATE SAVED STACK
					;SINCE A MATCHING ENTRY WAS FOUND
NOTOL:	XCHG				;[H,L]=TEXT POINTER
	MVI	C,8			;MAKE SURE 16 BYTES ARE AVAILABLE
					;OFF OF THE STACK
	CALL	GETSTK
	PUSH	H			;REALLY SAVE THE TEXT POINTER
	LHLD	ENDFOR			;PICK UP POINTER AT END OF "FOR"
					;JUST BEYOND THE TERMINATOR
	XTHL				;PUT [H,L] POINTER TO TERMINATOR ON THE STACK
					;AND RESTORE [H,L] AS TEXT POINTER AT
					;VARIABLE NAME
	PUSH	H			;PUSH THE TEXT POINTER ONTO THE STACK
	LHLD	CURLIN			;[H,L] GET THE CURRENT LINE #
	XTHL				;NOW THE CURRENT LINE # IS ON THE STACK AND
					;[H,L] IS THE TEXT POINTER
	CALL	SYNCHR
	DB	$TO			;"TO" IS NECESSARY
	CALL	GETYPR			;SEE WHAT TYPE THIS VALUE HAS
	JZ	TMERR			;GIVE STRINGS A "TYPE MISMATCH"
	JNC	TMERR			;AS WELL AS DOUBLE-PRECISION
	PUSH	PSW			;SAVE THE INTEGER/FLOATING FLAG
	CALL	FRMEVL			;EVALUATE THE TARGET VALUE FORMULA
	POP	PSW			;POP OFF THE FLAG
	PUSH	H			;SAVE THE TEXT POINTER
	JP	SNGFOR			;POSITIVE MEANS SINGLE PRECISION "FOR"-LOOP
	CALL	FRCINT			;COERCE THE FINAL VALUE
	XTHL				;SAVE IT ON THE STACK AND REGET THE
					;TEXT POINTER
	LXI	D,0+1			;DEFAULT THE STEP TO BE 1
	MOV	A,M			;SEE WHAT CHARACTER IS NEXT
	CPI	STEPTK			;IS THERE A "STEP" CLAUSE?
	CZ	GETINT			;IF SO, READ THE STEP INTO [D,E]
	PUSH	D			;PUT THE STEP ONTO THE STACK
	PUSH	H			;SAVE THE TEXT POINTER
	XCHG				;STEP INTO [H,L]
	CALL	ISIGN			;THE SIGN OF THE STEP INTO [A]
	JMP	STPSGN			;FINISH UP THE ENTRY
					;BY PUTTING THE SIGN OF THE STEP
					;AND THE DUMMY ENTRIES ON THE STACK
SNGFOR:	CALL	FRCSNG
	CALL	MOVRF			;GET THE STUFF
	POP	H			;REGAIN TEXT POINTER
	PUSH	B			;OPPOSITE OF PUSHR
	PUSH	D			;SAVE THE SIGN OF THE INCREMENT
	LXI	B,0+201O*256
	MOV	D,C
	MOV	E,D			;GET 1.0 IN THE REGISTERS
	MOV	A,M			;GET TERMINATING CHARACTER
	CPI	STEPTK			;DO WE HAVE "STEP" ?
	MVI	A,1			;SETUP DEFAULT SIGN
	JNZ	ONEON			;PUSH SOME CONSTANTS ON IF NOT
	CALL	FRMCHK			;DON'T NEED TO CHECK THE TYPE
	PUSH	H
	CALL	FRCSNG
	CALL	MOVRF			;SET UP THE REGISTERS
	CALL	SIGN			;GET THE SIGN OF THE INCREMENT
STPSGN:	POP	H			;POP OFF THE TEXT POINTER
ONEON:	PUSH	B			;PUT VALUE ON BACKWARDS
	PUSH	D			;OPPOSITE OF PUSHR
	MOV	C,A			;[C]=SIGN OF STEP
	CALL	GETYPR			;MUST PUT ON INTEGER/SINGLE-PRECISION FLAG
					;MINUS IS SET FOR INTEGER CASE
	MOV	B,A			;HIGH BYTE = INTEGER/SINGLE PRECISION FLAG
	PUSH	B			;SAVE FLAG AND SIGN OF STEP BOTH
	DCX	H			;MAKE SURE THE "FOR" ENDED PROPERLY
	CALL	CHRGTR
	JNZ	SNERR
	CALL	NXTSCN			;SCAN UNTIL THE MATCHING "NEXT" IS FOUND
	CALL	CHRGTR			;FETCH FIRST CHARACTER OF "NEXT"
	PUSH	H			;MAKE THE NEXT TXTPTR PART OF THE ENTRY
	PUSH	H
	LHLD	NXTLIN			;GET THE LINE NUMBER OF NEXT
	SHLD	CURLIN			;MAKE IT THE CURRENT LINE
	LHLD	TEMP			;GET THE POINTER TO THE VARIABLE BACK
	XTHL				;PUT THE POINTER TO THE VARIABLE
					;ONTO THE STACK AND RESTORE THE TEXT POINTER
	MVI	B,$FOR			;FINISH UP "FOR"
	PUSH	B
	INX	SP
	PUSH	PSW			;SAVE THE CHARACTER
	PUSH	PSW			;MAKE A STACK ENTRY TO SUBSTITUTE FOR "NEWSTT"
	EXTRN	NEXTS
	JMP	NEXTS			;GO EXECUTE "NEXT" WITH NXTFLG ZERO
NXTCON:	MVI	B,$FOR			;PUT A 'FOR' TOKEN ONTO THE STACK
	PUSH	B
	INX	SP			;THE "TOKEN" ONLY TAKES ONE BYTE OF
					;STACK SPACE
;	JMP	NEWSTT		;ALL DONE
	PAGE
	SUBTTL	NEW STATEMENT FETCHER
;
; BACK HERE FOR NEW STATEMENT. CHARACTER POINTED TO BY [H,L]
; ":" OR END-OF-LINE. THE ADDRESS OF THIS LOCATION IS
; LEFT ON THE STACK WHEN A STATEMENT IS EXECUTED SO
; IT CAN MERELY DO A RETURN WHEN IT IS DONE.
;
NEWSTT:
	EXTRN	CNTCCN,ISCNTC
	PUSH	H
	PUBLIC	CONST2,CSTS
CSTS	SET	0
CONST2:	CALL	CSTS			;GET CONSOLE STATUS
	POP	H			;RESTORE ALL REGISTERS
	ORA	A			;SET CC'S - 0 FALSE - NO CHAR TYPED
	CNZ	CNTCCN			;SEE IF ITS CONTROL-C
					;IF SO, CHECK FOR CONTRL-C
	SHLD	SAVTXT			;USED BY CONTINUE AND INPUT AND CLEAR AND PRINT USING
	XCHG				;SAVE TEXT POINTER
	LXI	H,0			;SAVE STACK POINTER
	DAD	SP			;COPY TO [H,L]
	SHLD	SAVSTK			;SAVE IT
					;TO REMEMBER HOW TO RESTART THIS
					;STATEMENT
	XCHG				;GET CURRENT TEXT POINTER BACK IN [H,L]
					;TO SAVE BYTES & SPEED
	MOV	A,M			;GET CURRENT CHARACTER
					;WHICH TERMINATED THE LAST STATEMENT
	CPI	':'			;IS IT A COLON?
	JZ	GONE
	ORA	A
	JNZ	SNERR			;MUST BE A ZERO
	INX	H
GONE4:	MOV	A,M			;CHECK POINTER TO SEE IF
					;IT IS ZERO, IF SO WE ARE AT THE
					;END OF THE PROGRAM
	INX	H
	ORA	M			;OR IN HIGH PART
	JZ	PRGEND			;FIX SYNTAX ERROR IN UNENDED ERROR ROUTINE
	INX	H
	MOV	E,M
	INX	H
	MOV	D,M			;GET LINE # IN [D,E]
	XCHG				;[H,L]=LINE #
	SHLD	CURLIN			;SETUP CURLIN WITH THE CURRENT LINE #
	LDA	TRCFLG			;SEE IF TRACE IS ON
	ORA	A			;NON-ZERO MEANS YES
	JZ	NOTTRC			;SKIP THIS PRINTING
	PUSH	D			;SAVE THE TEXT POINTER
	MVI	A,'['			;FORMAT THE LINE NUMBER
	CALL	OUTDO			;OUTPUT IT
	CALL	LINPRT			;PRINT THE LINE # IN [H,L]
	MVI	A,']'			;SOME MORE FORMATING
	CALL	OUTDO
	POP	D			;[D,E]=TEXT POINTER
NOTTRC:
	XCHG				;RESTORE THE TEXT POINTER
GONE:	CALL	CHRGTR			;GET THE STATEMENT TYPE
	LXI	D,NEWSTT		;PUSH ON A RETURN ADDRESS OF NEWSTT
	PUSH	D			;STATEMENT
GONE3:	RZ				;IF A TERMINATOR TRY AGAIN
					;"IF" COMES HERE
GONE2:	SUI	$END			;"ON ... GOTO" AND "ON ... GOSUB" COME HERE
	JC	LET			;MUST BE A LET
	CPI	NUMCMD
					;A STATEMENT RESERVED WORD
	JNC	ISMID$			;SEE IF LHS MID$ CASE
	RLC				;MULTIPLY BY 2
	MOV	C,A
	MVI	B,0
	XCHG	
	LXI	H,STMDSP		;STATEMENT DISPATCH TABLE
	DAD	B			;ADD ON OFFSET 
	MOV	C,M			;PUSH THE ADDRESS TO GO TO ONTO
	INX	H			;THE STACK
	MOV	B,M			;PUSHM SAVES BYTES BUT NOT SPEED
	PUSH	B
	XCHG				;RESTORE THE TEXT POINTER
; NEWSTT FALLS INTO CHRGET. THIS FETCHES THE FIRST CHAR AFTER
; THE STATEMENT TOKEN AND THE CHRGET'S "RET" DISPATCHES TO STATEMENT
	PAGE
	SUBTTL	CHRGET - THE NEXT CHARACTER SCAN ROUTINE
CHRGTR:	INX	H			;DUPLICATION OF CHRGET RST FOR SPEED
	PUBLIC	CHRGT2
CHRGT2:	MOV	A,M			;SEE CHRGET RST FOR EXPLANATION
	CPI	':'
	RNC	
;
; CHRCON IS THE CONTINUATION OF THE CHRGET RST
;
; IN EXTENDED, CHECK FOR INLINE CONSTANT AND IF ONE
; MOVE IT INTO THE FAC & SET VALTYP APPROPRIATELY
OCTCON	SET	11			;EMBEDED OCTAL CONSTANT
HEXCON	SET	12			;EMBEDED CONSTANT
PTRCON	SET	13			;A LINE REFERENCE CONSTANT
LINCON	SET	14			;A LINE NUMBER UNCONVERTED TO POINTER
IN2CON	SET	15			;SINGLE BYTE (TWO BYTE WITH TOKEN) INTEGER
CONCN2	SET	16			;TOKEN RETURNED SECOND TYPE CONSTANT IS SCANNED.
ONECON	SET	17			;FIRST OF 10 (0-9) INTEGER SPECIAL TOKENS
INTCON	SET	28			;REGULAR 16 BIT TWO'S COMPLEMENT INT
SNGCON	SET	29			;SINGLE PREC (4 BYTE) CONSTANT
CONCON	SET	30			;TOKEN RETURNED BY CHRGET AFTER CONSTANT SCANNED
DBLCON	SET	31			;DOUBLE PREC (8 BYTE) CONSTANT
CHRCON:	CPI	' '			;MUST SKIP SPACES
	JZ	CHRGTR			;GET ANOTHER CHARACTER
	JNC	NOTLFT			;NOT SPECIAL TRY OTHER POSSIB.
	ORA	A			;NULL AT EOL?
	RZ				;YES, ALL DONE
	CPI	OCTCON			;IS IT INLINE CONSTANT
	JC	NOTCON			;NO, SHOULD BE TAB OR LF
	CPI	CONCON			;ARE WE TRYING TO RE-SCAN A CONSTANT?
	JNZ	NTRSCC			;NO.
	LDA	CONSAV			;GET THE SAVED CONSTANT TOKEN
	ORA	A			;SET NON-ZERO, NON CARRY CC'S
	RET				;ALL DONE

NTRSCC:	CPI	CONCN2			;GOING TO SCAN PAST EMBEDDED CONSTANT?
	JNZ	NTRSC2			;NO, TRY OTHER CASES
CONSCN:	LHLD	CONTXT			;GET SAVED TEXT POINTER
	JMP	CHRGT2			;AND SCAN THING AFTER CONSTANT
NTRSC2:	PUSH	PSW			;SAVE TOKEN TO RETURN
	INX	H			;POINT TO NUMBER
	STA	CONSAV			;SAVE CURRENT TOKEN
	SUI	INTCON			;IS IT LESS THAN INTEGER CONSTANT?
	JNC	MAKTKN			;NO, NOT LINE NUMBER CONSTANT
	SUI	365O			;<ONECON-INTCON>&^O377
					;LESS THAN EMBEDDED 1 BYTER
	JNC	ONEI			;WAS ONE BYTER
	CPI	IN2CON-ONECON		;IS IT TWO BYTER?
	JNZ	FRCINC			;NOPE, NORMAL INT
	MOV	A,M			;GET EMBEDED INT
	INX	H			;POINT AFTER CONSTANT
ONEI:	SHLD	CONTXT			;SAVE TEXT POINTER
	MVI	H,0			;GET UPPER BYTE OF ZERO
ONEI2:	MOV	L,A			;GET VALUE
	SHLD	CONLO			;SAVE CONSTANT VALUE
	MVI	A,2			;GET VALTYPE
	STA	CONTYP			;SET IT UP IN SAVE PLACE
	LXI	H,NUMCON		;POINT TO NUMBER RE-SCANNER
	POP	PSW			;GET BACK TOKEN
	ORA	A			;MAKE SURE NUMBER FLAG RE-SET
	RET				;RETURN TO CALLER

FRCINC:	MOV	A,M			;GET LOW BYTE OF CONSTANT
	INX	H			;POINT PAST IT
	INX	H			;TO NEXT THING
	SHLD	CONTXT			;SAVE POINTER PAST
	DCX	H			;BACK TO HIGH BYTE
	MOV	H,M			;GET HIGH BYTE
	JMP	ONEI2			;FINISH SCANNING
MAKTKN:	INR	A			;CALCULATE VALTYPE
	RLC				;*2 TO GET VALTYPE 0=2, 1=4, 3=8
	STA	CONTYP			;CONTYPE NOW SETUP
	PUSH	D			;SAVE SOME RGS
	PUSH	B
	LXI	D,CONLO			;PLACE TO STORE SAVED CONSTANT
	XCHG				;GET TEXT POINTER IN [D,E]
	MOV	B,A			;SETUP COUNTER IN [B]
	CALL	MOVE1			;MOVE DATA IN
	XCHG				;GET TEXT POINTER BACK
	POP	B			;RESTORE [B,C]
	POP	D
FININ1:	SHLD	CONTXT			;SAVE THE GOOD TEXT POINTER
	POP	PSW			;RESTORE TOKEN
	LXI	H,NUMCON		;GET POINTER TO FAKE TEXT
	ORA	A			;CLEAR CARRY SO OTHERS DONT THINK ITS A NUMBER
					;AND SET NON-ZERO SO NOT TERMINATOR
	RET				;ALL DONE
NOTCON:
	CPI	9			;LINE FEED OR TAB?
	JNC	CHRGTR			;YES, EAT.
NOTLFT:	CPI	'0'			;ALL CHARACTERS GREATER THAN
					;"9" HAVE RETURNED, SO SEE IF NUMERIC
	CMC				;MAKE NUMERICS HAVE CARRY ON
	INR	A			;SET ZERO IF [A]=0
	DCR	A
	RET	

NUMCON:	DB	CONCON			;THESE FAKE TOKENS FORCE CHRGET
	DB	CONCN2			;TO EFFECTIVELY RE-SCAN THE EMBEDED CONSTANT

; THIS ROUTINE MOVES THE SAVED CONSTANT INTO THE FAC
CONFAC:
	LDA	CONSAV			;GET CONSTANT TOKEN
	CPI	LINCON+1		;LINE# CONSTANT? (ERL=#)
	JNC	NTLINE			;NO
	CPI	PTRCON			;LINE POINTER CONSTANT?
	JC	NTLINE			;NO
	LHLD	CONLO			;GET VALUE
	JNZ	FLTLIN			;MUST BE LINE NUMBER, NOT POINTER
	INX	H			;POINT TO LINE #
	INX	H
	INX	H
	MOV	E,M			;GET LINE # IN [D,E]
	INX	H
	MOV	D,M			;GET HIGH PART
	XCHG				;VALUE TO [H,L]
FLTLIN:	CALL	INEG2			;FLOAT IT
	JMP	CONSCN			;RESTORE TEXT PTR
NTLINE:
	LDA	CONTYP			;GET SAVED CONSTANT VALTYP
	STA	VALTYP			;SAVE IN REAL VALTYP
	CPI	8			;DOUBLE PRECISION
	JZ	CONFDB			;YES
	LHLD	CONLO			;GET LOW TWO BYTES OF FAC
	SHLD	FACLO			;SAVE THEM
	LHLD	CONLO+2			;GET NEXT TWO BYTES
	SHLD	FACLO+2			;SAVE THEM
	JMP	CONSCN			;SCAN FURTHUR
CONFDB:	LXI	H,CONLO			;GET POINTER TO SAVED CONSTANT AREA
	CALL	VMOVFM			;MOVE INTO FAC
	JMP	CONSCN			;RESTORE TEXT PTR & SCAN FOLLOWING CHARACTER
	PAGE
	SUBTTL	DEFSTR, DEFINT, DEFSNG, DEFDBL, INTIDX
DEFSTR:	MVI	E,3			;DEFAULT SOME LETTERS TO STRING
	DB	1Q			;"LXI B," OVER THE NEXT 2 BYTES
DEFINT:	MVI	E,2			;DEFAULT SOME LETTERS TO INTEGER
	DB	1Q			;"LXI B," OVER THE NEXT 2 BYTES
DEFREA:	MVI	E,4			;DEFAULT SOME LETTERS TO SINGLE PRECISION
	DB	1Q			;"LXI B," OVER THE NEXT 2 BYTES
DEFDBL:	MVI	E,8			;DEFAULT SOME LETTERS TO DOUBLE PRECISION
DEFCON:	CALL	ISLET			;MAKE SURE THE ARGUMENT IS A LETTER
	LXI	B,SNERR			;PREPARE "SYNTAX ERROR" RETURN
	PUSH	B
	RC				;RETURN IF THERES NO LETTER
	SUI	'A'			;MAKE AN OFFSET INTO DEFTBL
	MOV	C,A			;SAVE THE INITIAL OFFSET
	MOV	B,A			;ASSUME IT WILL BE THE FINAL OFFSET
	CALL	CHRGTR			;GET THE POSSIBLE DASH
	CPI	MINUTK			;A RANGE ARGUMENT?
	JNZ	NOTRNG			;IF NOT, JUST ONE LETTER
	CALL	CHRGTR			;GET THE FINAL POSITION
	CALL	ISLET			;CHECK FOR A LETTER
	RC				;GIVE A SYNTAX ERROR IF IMPROPER
	SUI	'A'			;MAKE IT AN OFFSET
	MOV	B,A			;PUT THE FINAL IN [B]
	CALL	CHRGTR			;GET THE TERMINATOR
NOTRNG:	MOV	A,B			;GET THE FINAL CHARACTER
	SUB	C			;SUBTRACT THE START
	RC				;IF IT'S LESS THATS NONSENSE
	INR	A			;SETUP THE COUNT RIGHT
	XTHL				;SAVE THE TEXT POINTER AND GET RID
					;OF THE "SYNTAX ERROR" RETURN
	LXI	H,DEFTBL		;POINT TO THE TABLE OF DEFAULTS
	MVI	B,0			;SETUP A TWO-BYTE STARTING OFFSET
	DAD	B			;MAKE [H,L] POINT TO THE FIRST ENTRY
					;TO BE MODIFIED
LPDCHG:	MOV	M,E			;MODIFY THE DEFAULT TABLE
	INX	H
	DCR	A			;COUNT DOUNT THE NUMBER OF CHANGES TO MAKE
	JNZ	LPDCHG
	POP	H			;GET BACK THE TEXT POINTER
	MOV	A,M			;GET LAST CHARACTER
	CPI	44			;IS IT A COMMA?
	RNZ				;IF NOT STATEMENT SHOULD HAVE ENDED
	CALL	CHRGTR			;OTHERWISE SET UP TO SCAN NEW RANGE
	JMP	DEFCON
;
; INTIDX READS A FORMULA FROM THE CURRENT POSITION AND
; TURNS IT INTO A POSITIVE INTEGER
; LEAVING THE RESULT IN [D,E].  NEGATIVE ARGUMENTS
; ARE NOT ALLOWED. [H,L] POINTS TO THE TERMINATING
; CHARACTER OF THE FORMULA ON RETURN.
;
INTIDX:	CALL	CHRGTR
INTID2:	CALL	GETIN2			;READ A FORMULA AND GET THE
					;RESULT AS AN INTEGER IN [D,E]
					;ALSO SET THE CONDITION CODES BASED ON
					;THE HIGH ORDER OF THE RESULT
	RP				;DON'T ALLOW NEGATIVE NUMBERS
FCERR:	MVI	E,ERRFC			;TOO BIG. FUNCTION CALL ERROR
	JMP	ERROR
	PAGE
	SUBTTL	LINSPC, LINGET
;
; LINSPC IS THE SAME AS LINGET EXCEPT IN ALLOWS THE
; CURRENT LINE (.) SPECIFIER
;
	PUBLIC	LINSPC
LINSPC:	MOV	A,M			;GET CHAR FROM MEMORY
	CPI	'.'			;IS IT CURRENT LINE SPECIFIER
	XCHG				;SAVE TEXT POINTER
	LHLD	DOT			;GET CURRENT LINE #
	XCHG				;GET BACK TEXT POINTER
	JZ	CHRGTR			;ALL DONE.

;
; LINGET READS A LINE # FROM THE CURRENT TEXT POSITION
;
; LINE NUMBERS RANGE FROM 0 TO 65529
;
; THE ANSWER IS RETURNED IN [D,E].
; [H,L] IS UPDATED TO POINT TO THE TERMINATING CHARACTER
; AND [A] CONTAINS THE TERMINATING CHARACTER WITH CONDITION
; CODES SET UP TO REFLECT ITS VALUE.
;
LINGET:	DCX	H			;BACKSPACE PTR
LINGT2:	CALL	CHRGTR			;FETCH CHAR (GOBBLE LINE CONSTANTS)
	CPI	LINCON			;EMBEDDED LINE CONSTANT?
	JZ	LINGT3			;YES, RETURN DOUBLE BYTE VALUE
	CPI	PTRCON			;ALSO CHECK FOR POINTER
LINGT3:	XCHG				;SAVE TEXT PTR IN [D,E]
	LHLD	CONLO			;GET EMBEDDED LINE #
	XCHG				;RESTORE TEXT PTR.
	JZ	CHRGTR			;EAT FOLLOWING CHAR
	DCX	H			;BACK UP POINTER
	LXI	D,0			;ZERO ACCUMULATED LINE #
MORLIN:	CALL	CHRGTR
	RNC				;WAS IT A DIGIT
	PUSH	H
	PUSH	PSW
	LXI	H,0+6552		;SEE IF THE LINE # IS TOO BIG
	CALL	DCOMPR
	JC	POPHSR			;YES, DON'T SCAN ANY MORE DIGITS IF SO
					;FORCE CALLER TO SEE DIGIT AND GIVE SYNTAX ERROR
					;CAN'T JUST GO TO SYNTAX ERROR BECAUSE OF NON-FAST
					;RENUM WHICH CAN'T TERMINATE
	MOV	H,D			;SAVE [D,E]
	MOV	L,E
	DAD	D
	DAD	H
	DAD	D
	DAD	H			;PUTTING [D,E]*10 INTO [H,L]
	POP	PSW
	SUI	'0'
	MOV	E,A
	MVI	D,0
	DAD	D			;ADD THE NEW DIGIT
	XCHG	
	POP	H			;GET BACK TEXT POINTER
	JMP	MORLIN
POPHSR:	POP	PSW			;GET OFF TERMINATING DIGIT
	POP	H			;GET BACK OLD TEXT POINTER
	RET	
	PAGE
	SUBTTL	RUN, GOTO, GOSUB, RETURN, DATA, REM
RUN:	JZ	RUNC			;NO LINE # ARGUMENT
	CPI	LINCON			;LINE NUMBER CONSTANT?
	JZ	CONRUN			;YES
	CPI	PTRCON			;LINE POINTER (RATHER UNLIKELY)
	JNZ	LRUN
CONRUN:
					;CLEAN UP,SET [H,L]=[TXTTAB]-1 AND
					;RETURN TO NEWSTT
	CALL	CLEARC			;CLEAN UP -- RESET THE STACK
					;DATPTR,VARIABLES ...
					;[H,L] IS THE ONLY THING PRESERVED
	LXI	B,NEWSTT
	JMP	RUNC2			;PUT "NEWSTT" ON AND FALL INTO "GOTO"
; A "GOSUB" ENTRY ON THE STACK HAS THE FOLLOWING FORMAT
;
; LOW ADDRESS
;
;	A TOKEN EQUAL TO $GOSUB 1 BYTE
;	THE LINE # OF THE THE "GOSUB" STATEMENT 2 BYTES
;	A POINTER INTO THE TEXT OF THE "GOSUB" 2 BYTES
;
; HIGH ADDRESS
;
; TOTAL 5 BYTES
;
GOSUB:	MVI	C,3			;"GOSUB" ENTRIES ARE 5 BYTES LONG
	CALL	GETSTK			;MAKE SURE THERE IS ROOM
	CALL	LINGET			;MUST SCAN LINE NUMBER NOW
	POP	B			;POP OFF RETURN ADDRESS OF "NEWSTT"
	PUSH	H			;REALLY PUSH THE TEXT POINTER
	PUSH	H			;SAVE TEXT POINTER
	LHLD	CURLIN			;GET THE CURRENT LINE #
	XTHL				;PUT CURLIN ON THE STACK AND [H,L]=TEXT PTR
	MVI	A,$GOSUB
	PUSH	PSW			;PUT GOSUB TOKEN ON THE STACK
	INX	SP			;THE GOSUB TOKEN TAKES ONLY ONE BYTE
	PUSH	B			;SAVE NEWSTT ON STACK
	JMP	GOTO2			;HAVE NOW GRAB LINE # PROPERLY
					;CONTINUE WITH SUBROUTINE
RUNC2:	PUSH	B			;RESTORE RETURN ADDRESS
					;OF "NEWSTT"
; AND SEARCH. IN THE 8K WE START WHERE WE
; ARE IF WE ARE  GOING TO A FORWARD LOCATION.
;
GOTO:	CALL	LINGET			;PICK UP THE LINE #
					;AND PUT IT IN [D,E]
GOTO2:
	LDA	CONSAV			;GET TOKEN FOR LINE # BACK
	CPI	PTRCON			;WAS IT A POINTER
	XCHG				;ASSUME SO
	RZ				;IF IT WAS, GO BACK TO NEWSTT
					;WITH [H,L] AS TEXT PTR
	XCHG				;FLIP BACK IF NOT
	PUSH	H			;SAVE CURRENT TEXT PTR ON STACK
	LHLD	CONTXT			;GET POINTER TO RIGHT AFTER CONSTANT
	XTHL				;SAVE ON STACK, RESTORE CURRENT TEXT PTR
	CALL	REM			;SKIP TO THE END OF THIS LINE
	INX	H			;POINT AT THE LINK BEYOND IT
	PUSH	H			;SAVE THE POINTER
	LHLD	CURLIN			;GET THE CURRENT LINE #
	CALL	DCOMPR			;[D,E] CONTAINS WHERE WE ARE GOING
					;[H,L] CONTAINS THE CURRENT LINE #
					;SO COMPARING THEM TELLS US WHETHER TO
					;START SEARCHING FROM WHERE WE ARE OR
					;TO START SEARCHING FROM THE BEGINNING
					;OF TXTTAB
	POP	H			;[H,L]=CURRENT POINTER
	CC	LOOP			;SEARCH FROM THIS POINT
	CNC	FNDLIN			;SEARCH FROM THE BEGINNING -- ACTUALLY
					;SEARCH AGAIN IF ABOVE SEARCH FAILED
	JNC	USERR			;LINE NOT FOUND, DEATH
	DCX	B			;POINT TO ZERO AT END OF PREVIOUS LINE
	MVI	A,PTRCON		;POINTER CONSTANT
	STA	PTRFLG			;SET PTRFLG
	POP	H			;GET SAVED POINTER TO RIGHT AFTER CONSTANT
	CALL	CONCH2			;CHANGE LINE # TO PTR
	MOV	H,B			;[H,L]= POINTER TO THE START OF THE
					;MATCHED LINE
	MOV	L,C			;NOW POINTING AT THE FIRST BYTE OF THE POINTER
					;TO THE START OF THE NEXT LINE
	RET				;GO TO NEWSTT
USERR:	MVI	E,ERRUS
	JMP	ERROR			;C=MATCH, SO IF NO MATCH WE
					;GIVE A "US" ERROR
;
; SEE "GOSUB" FOR THE FORMAT OF THE STACK ENTRY
; "RETURN" RESTORES THE LINE NUMBER AND TEXT POINTER ON THE STACK
; AFTER ELIMINATING ALL THE "FOR" ENTRIES IN FRONT OF THE "GOSUB"
; ENTRY
;
RETURN:	RNZ				;BLOW HIM UP IF THERE ISN'T A TERMINATOR
	MVI	D,255			;MAKE SURE THIS VARIABLE POINTER
					;IN [D,E] NEVER GETS MATCHED
	CALL	FNDFOR			;GO PAST ALL THE "FOR" ENTRIES
	SPHL				;UPDATE THE STACK
	SHLD	SAVSTK			;UPDATE SAVED STACK
	CPI	$GOSUB
	MVI	E,ERRRG			;ERROR ERRRG IS "RETURN WITHOUT GOSUB"
	JNZ	ERROR
	POP	H			;GET LINE # "GOSUB" WAS FROM
	SHLD	CURLIN			;PUT IT INTO CURLIN
	LXI	H,NEWSTT
	XTHL				;PUT RETURN ADDRESS OF "NEWSTT"
					;BACK ONTO THE STACK. GET TEXT POINTER
					;FROM "GOSUB"
					;SKIP OVER SOME CHARACTERS
					;SINCE WHEN "GOSUB" STUCK THE TEXT POINTER
					;ONTO THE STACK THE LINE # ARGUMENT HADN'T
					;BEEN READ IN YET.

	DB	76Q			;"MVI A," AROUND POP H.
DATAH:	POP	H			;GET TEXT POINTER OFF STACK

DATA:	DB	1Q			;"LXI B," TO PICK UP ":" INTO C AND SKIP
	DB	':'			;"DATA" TERMINATES ON ":"
					;AND 0. ":" ONLY APPLIES IF
					;QUOTES HAVE MATCHED UP

ELSES:					;EXECUTED "ELSE"S ARE SKIPPED
;
; NOTE: REM MUST PRESERVE [D,E] BECAUSE OF "GO TO" AND ERROR
;
REM:	DB	16Q			;"MVI C,"   THE ONLY TERMINATOR IS ZERO
	DB	0			;NO-OPERATION
					;"DATA" ACTUALLY EXECUTES THIS 0
REMZER:	MVI	B,0			;INSIDE QUOTES THE ONLY TERMINATOR IS ZERO
EXCHQT:	MOV	A,C			;WHEN A QUOTE IS SEEN THE SECOND
	MOV	C,B			;TERMINATOR IS TRADED, SO IN "DATA"
	MOV	B,A			;COLONS INSIDE QUOTATIONS WILL HAVE NO EFFECT
REMER:
	DCX	H			;NOP THE INX H IN CHRGET
REMER1:	CALL	CHRGTR			;GET A CHAR
	ORA	A			;ZERO IS ALWAYS A TERMINATOR
	RZ	
	CMP	B			;TEST FOR THE OTHER TERMINATOR
	RZ	
	INX	H
	CPI	34			;IS IT A QUOTE?
	JZ	EXCHQT			;IF SO TIME TO TRADE
;
; WHEN AN "IF" TAKES A FALSE BRANCH IT MUST FIND THE APPROPRIATE "ELSE"
; TO START EXECUTION AT. "DATA" COUNTS THE NUMBER OF "IF"S
; IT SEES SO THAT THE "ELSE" CODE CAN MATCH "ELSE"S WITH
; "IF"S. THE COUNT IS KEPT IN [D]
					;BECAUSE THEN S HAVE TNO COLON
					;MULTIPLE IFS CAN BE FOUND IN A SINGLE
					;STATEMENT SCAN
					;THIS CAUSES A PROBLEM FOR 8-BIT DATA
					;IN UNQUOTED STRING DATA BECAUSE $IF MIGHT
					;BE MATCHED. FIX IS TO HAVE FALSIF IGNORE CHANGES
					;IN [D] IF ITS A DATA STATEMENT
;
	INR	A			;FUNCTION TOKEN?
	JZ	REMER1			;THEN IGNORE FOLLOWING FN NUMBER
	SUI	$IF+1			;IS IT AN "IF"
	JNZ	REMER			;IF NOT, CONTINUE ON
	CMP	B			;SINCE "REM" CAN'T SMASH
					;[D,E] WE HAVE TO BE CAREFUL
					;SO ONLY IF B DOESN'T EQUAL
					;ZERO WE INCREMENT D. (THE "IF" COUNT)
	ADC	D			;CARRY ON IF [B] NOT ZERO
	MOV	D,A			;UPDATE [D]
	JMP	REMER
	PAGE
	SUBTTL	"LET"
	PUBLIC	LETCON

; LETCON IS LET ENTRY POINT WITH VALTYP-3 IN [A]
; BECAUSE GETYPR HAS BEEN CALLED
LETCON:	POP	PSW			;GET VALTYPE OFF STACK
	ADI	3			;MAKE VALTYPE CORRECT
	JMP	LETCN2			;CONTINUE

LET:	CALL	PTRGET			;GET THE POINTER TO THE VARIABLE
					;NAMED IN TEXT AND PUT
					;IT INTO [D,E]
	CALL	SYNCHR
	DB	EQULTK			;CHECK FOR "="
	XCHG				;MUST SET UP TEMP FOR "FOR"
	SHLD	TEMP			;UP HERE SO WHEN USER-FUNCTIONS
	XCHG				;CALL REDINP, TEMP DOESN'T GET CHANGED
REDINP:	PUSH	D
	LDA	VALTYP
	PUSH	PSW
	CALL	FRMEVL			;GET THE VALUE OF THE FORMULA
	POP	PSW			;GET THE VALTYP OF THE
					;VARIABLE INTO [A]
					;INTO FAC
LETCN2:	XTHL				;[H,L]=POINTER TO VARIABLE
					;TEXT POINTER TO ON TOP OF STACK
INPCOM:	MOV	B,A			;SAVE VALTYP
	LDA	VALTYP			;GET PRESENT VALTYPE
	CMP	B			;COMPARE THE TWO
	MOV	A,B			;GET BACK CURRENT
	JZ	LETCN5			;VALTYPE ALREADY SET UP, GO!
	CALL	DOCNVF			;FORCE VALTPES TO BE [A]'S
LETCN4:	LDA	VALTYP			;GET VALTYPE
LETCN5:	LXI	D,FACLO			;ASSUME THIS IS WHERE TO START MOVEING
	CPI	5			;IS IT?
	JC	LETCN6			;YES
	LXI	D,DFACLO		;NO, USE D.P. FAC
LETCN6:	PUSH	H			;SAVE THE POINTER AT THE VALUE POSITION
	CPI	3			;STRING?
	JNZ	COPNUM			;NUMERIC, SO FORCE IT AND COPY
	LHLD	FACLO			;GET POINTER TO THE DESCRIPTOR OF THE RESULT
	PUSH	H			;SAVE THE POINTER AT THE DESCRIPTOR
	INX	H
	MOV	E,M
	INX	H
	MOV	D,M
	LHLD	TXTTAB			;IF THE DATA IS IN BUF, OR IN DISK
					;RANDOM BUFFER, COPY.
	CALL	DCOMPR			;SINCE BUF CHANGES ALL THE TIME
	JNC	INBUFC			;GO COPY, IF DATA REALLY IS IN BUF
	LHLD	STREND			;SEE IF IT POINTS INTO STRING SPACE
	CALL	DCOMPR			;IF NOT DON'T COPY
	POP	D			;GET BACK THE POINTER AT THE DESCRIPTOR
	JNC	DNTCPY			;DON'T COPY LITERALS
	LXI	H,DSCTMP		;NOW, SEE IF ITS A VARIABLE
	CALL	DCOMPR			;BY SEEING IF THE DESCRIPTOR
					;IS IN THE TEMPORARY STORAGE AREA (BELOW DSCTMP)
	JNC	DNTCPY			;DON'T COPY IF ITS NOT A VARIABLE
	DB	76Q			;SKIP THE NEXT BYTE WITH A "MVI A,"
INBUFC:	POP	D			;GET THE POINTER TO THE DESCRIPTOR
					;IN [D,E]
	CALL	FRETMS			;FREE UP A TEMORARY POINTING INTO BUF
	XCHG				;STRCPY COPIES [H,L]
	CALL	STRCPY			;COPY VARIABLES IN STRING SPACE OR
					;STRINGS WITH DATA IN BUF
DNTCPY:	CALL	FRETMS			;FREE UP THE TEMPORARY WITHOUT
					;FREEING UP ANY STRING SPACE
	XTHL				;[H,L]=PLACE TO STORE THE DESCRIPTOR
					;LEAVE A NONSENSE ENTRY ON THE STACK,
					;SINCE THE "POP	D" DOESN'T EVER
					;MATTER IN THIS CASE
COPNUM:	CALL	VMOVE			;COPY A DESCRIPTOR OR A VALUE
	POP	D			;FOR "FOR" POP OFF A POINTER
					;AT THE LOOP VARIABLE INTO [D,E]
	POP	H			;GET THE TEXT POINTER BACK
	RET	
	PAGE
	SUBTTL	ON..GOTO, ON ERROR GOTO CODE

ONGOTO:
	CPI	$ERROR			;"ON...ERROR"?
	JNZ	NTOERR			;NO.
	CALL	CHRGTR			;GET NEXT THING
	CALL	SYNCHR
	DB	$GOTO			;MUST HAVE ...GOTO
	CALL	LINGET			;GET FOLLOWING LINE #
	MOV	A,D			;IS LINE NUMBER ZERO?
	ORA	E			;SEE
	JZ	RESTRP			;IF ON ERROR GOTO 0, RESET TRAP
	CALL	FNDLN1			;SEE IF LINE EXISTS (SAVE [H,L] ON STACK)
	MOV	D,B			;GET POINTER TO LINE IN [D,E]
	MOV	E,C			;(LINK FIELD OF LINE)
	POP	H			;RESTORE [H,L]
	JNC	USERR			;ERROR IF LINE NOT FOUND
RESTRP:	XCHG				;GET LINE POINTER IN [H,L]
	SHLD	ONELIN			;SAVE POINTER TO LINE OR ZERO IF 0.
	XCHG				;BACK TO NORMAL
	RC				;YOU WOULDN'T BELIEVE IT IF I TOLD YOU
	LDA	ONEFLG			;ARE WE IN AN "ON...ERROR" ROUTINE?
	ORA	A			;SET CONDITION CODES
	MOV	A,E			;WANT AN EVEN STACK PTR. FOR 8086
	RZ				;IF NOT, HAVE ALREADY DISABLED TRAPPING.
	LDA	ERRFLG			;GET ERROR CODE
	MOV	E,A			;INTO E.
	JMP	ERRESM			;FORCE THE ERROR TO HAPPEN
NTOERR:

	CALL	GETBYT			;GET VALUE INTO [E]
	MOV	A,M			;GET THE TERMINATOR BACK
	MOV	B,A			;SAVE THIS CHARACTER FOR LATER
	CPI	$GOSUB			;AN "ON ... GOSUB" PERHAPS?
	JZ	ISGOSU			;YES, SOME FEATURE USE
	CALL	SYNCHR
	DB	$GOTO			;OTHERWISE MUST BE "GOTO"
	DCX	H			;BACK UP CHARACTER POINTER
ISGOSU:	MOV	C,E			;GET COUNT INTO  [C]
LOOPON:	DCR	C			;SEE IF ENOUGH SKIPS
	MOV	A,B			;PUT DISPATCH CHARACTER IN PLACE
	JZ	GONE2			;IF DONE, GO OFF
	CALL	LINGT2			;SKIP OVER A LINE #
	CPI	44			;A COMMA
	RNZ				;IF A COMMA DOESN'T DELIMIT THE END OF
					;THE CURRENT LINE # WE MUST BE THE END OF THE LINE
	JMP	LOOPON			;CONTINUE GOBBLING LINE #S

	PAGE
	SUBTTL	RESUME, ERROR STATEMENT CODE
RESUME:	LXI	D,ONEFLG		;POINT TO FLAG
	LDAX	D			;GET FLAG
	ORA	A			;TRAP ROUTINE.
	JZ	REERR			;GIVE RESUME WITHOUT ERROR ERROR	
	INR	A			;MAKE A=0
	STA	ERRFLG			;CLEAR ERROR FLAG SO ^C DOESN'T GIVE ERROR
	STAX	D			;RESET FLAG
	MOV	A,M			;GET CURRENT CHAR BACK
	CPI	$NEXT			;RESUME NEXT?
	JZ	RESNXT			;YUP.
	CALL	LINGET			;GET FOLLOWING LINE #
	RNZ				;SHOULD TERMINATE
	MOV	A,D			;IS LINE NUMBER ZERO?
	ORA	E			;TEST
	JNZ	GOTO2			;DO A GOTO THAT LINE.
	INR	A			;SET NON ZERO CONDITION CODES
	JMP	RESTXT			;GO TO IT
RESNXT:	CALL	CHRGTR			;MUST TERMINATE
	RNZ				;BLOW HIM UP
RESTXT:	LHLD	ERRTXT			;GET POINTER INTO LINE.
	XCHG				;SAVE ERRTXT IN [D,E]
	LHLD	ERRLIN			;GET LINE #
	SHLD	CURLIN			;SAVE IN CURRENT LINE #
	XCHG	
	RNZ				;GO TO NEWSTT IF JUST "RESUME"
	MOV	A,M			;GET ":" OR LINE HEADER
	ORA	A			;SET CC
	JNZ	NOTBGL			;#0 MEANS MUST BE ":"
	INX	H			;SKIP HEADER
	INX	H
	INX	H
	INX	H
NOTBGL:	INX	H			;POINT TO START OF THIS STATEMENT
	JMP	DATA			;GET NEXT STMT

; THIS IS THE ERROR <CODE> STATEMENT WHICH FORCES
; AN ERROR OF TYPE <CODE> TO OCCUR
; <CODE> MUST BE .GE. 0 AND .LE. 255
ERRORS:	CALL	GETBYT			;GET THE PARAM
	RNZ				;SHOULD HAVE TERMINATED
	ORA	A			;ERROR CODE 0?
	JZ	FCERR			;YES, ERROR IN ITSELF
GOERR:	JMP	ERROR			;FORCE AN ERROR
	PAGE
	SUBTTL	AUTO COMMAND
; THE AUTO [BEGGINNING LINE[,[INCREMENT]]]
; COMMAND IS USED TO AUTOMATICALLY GENERATE LINE NUMBERS
; FOR LINES TO BE INSERTED. BEGINNING LINE IS
; USED TO SPECIFY THE INITAL LINE (10 IS ASSUMED IF OMMITED)
; AND THE INCREMENT IS USED TO SPECIFY THE INCREMENT USED
; TO GENERATE THE NEXT LINE #. IF ONLY A COMMA IS USED AFTER THE
; BEGGINING LINE, THE OLD INCREMENT IS USED.
AUTO:	LXI	D,0+10			;ASSUME INITIAL LINE # OF 10
	PUSH	D			;SAVE IT
	JZ	SNGAUT			;IF END OF COMMAND USE 10,10
	CALL	LINSPC			;GET LINE #, ALLOW USE OF . FOR CURRENT LINE
	XCHG				;GET TXT PTR IN [D,E]
	XTHL				;PUT INIT ON STACK, GET 10 IN [H,L]
	JZ	SNGAU1			;IF TERMINATOR, USE INC OF 10
	XCHG				;GET TEXT PTR BACK IN [H,L]
	CALL	SYNCHR
	DB	54O			;COMMA MUST FOLLOW
	XCHG				;SAVE TEXT PTR IN [D,E]
	LHLD	AUTINC			;GET PREVIOUS INC
	XCHG				;GET BACK TEXT PTR; GET IN IN[D,E]
	JZ	SNGAUT			;USE PREVIOUS INC IF TERMINATOR
	CALL	LINGET			;GET INC
	JNZ	SNERR			;SHOULD HAVE FINISHED.
SNGAUT:	XCHG				;GET INC IN [H,L]
SNGAU1:	MOV	A,H			;SEE IF ZERO
	ORA	L
	JZ	FCERR			;ZERO INC GIVES FCERR
	SHLD	AUTINC			;SAVE INCREMENT
	STA	AUTFLG			;SET FLAG TO USE AUTO IN MAIN CODE.
	POP	H			;GET INITIAL LINE #
	SHLD	AUTLIN			;SAVE IN INTIAL LINE
	POP	B			;GET RID OF NEWSTT ADDR
	JMP	MAIN			;JUMP INTO MAIN CODE (FOR REST SEE AFTER MAIN:)
	PAGE
	SUBTTL	IF ... THEN CODE
IFS:	CALL	FRMEVL			;EVALUATE A FORMULA
	MOV	A,M			;GET TERMINATING CHARACTER OF FORMULA

	CPI	44
	CZ	CHRGTR			;IF SO SKIP IT
	CPI	$GOTO			;ALLOW "GOTO" AS WELL
	JZ	OKGOTO
	CALL	SYNCHR
	DB	THENTK			;MUST HAVE A THEN
	DCX	H
OKGOTO:
	PUSH	H			;SAVE THE TEXT POINTER
	CALL	VSIGN
	POP	H			;GET BACK THE TEXT POINTER
	JZ	FALSIF			;HANDLE POSSIBLE "ELSE"
DOCOND:	CALL	CHRGTR			;PICK UP THE FIRST LINE # CHARACTER
	RZ				;RETURN FOR "THEN :" OR "ELSE :"
	CPI	LINCON			;LINE NUMBER CONSTANT?
	JZ	GOTO			;DO A "GOTO"
	CPI	PTRCON			;POINTER CONSTANT
	JNZ	GONE2			;EXECUTE STATEMENT, NOT GOTO
	LHLD	CONLO			;GET TEXT POINTER
	RET				;FETCH NEW STATMENT
;
; "ELSE" HANDLER. HERE ON FALSE "IF" CONDITION
;
FALSIF:	MVI	D,1			;NUMBER OF "ELSE"S THAT MUST
					;BE SEEN. "DATA" INCREMENTS THIS
					;COUNT EVERY TIME AN "IF" IS SEEN
SKPMRF:	CALL	DATA			;SKIP A STATEMENT
					;":" IS STUCK IN FRONT OF "ELSE"S
					;SO THAT "DATA" WILL STOP BEFORE "ELSE" CLAUSES
	ORA	A			;END OF LINE?
	RZ				;IF SO, NO "ELSE" CLAUSE
	CALL	CHRGTR			;SEE IF WE HIT AN "ELSE"
	CPI	$ELSE
	JNZ	SKPMRF			;NO, STILL IN THE "THEN" CLAUSE
	DCR	D			;DECREMENT THE NUMBER OF "ELSE"S THAT
					;MUST BE SEEN
	JNZ	SKPMRF			;SKIP MORE IF HAVEN'T SEEN
					;ENOUGH
	JMP	DOCOND			;FOUND THE RIGHT "ELSE" -- GO EXECUTE

	PAGE
	SUBTTL	PRINT CODE

LPRINT:	MVI	A,1			;SAY NON ZERO
	STA	PRTFLG			;SAVE AWAY
	JMP	NEWCHR
PRINT:
	MVI	C,MD.SQO		;SETUP OUTPUT FILE
	CALL	FILGET
NEWCHR:	DCX	H
	CALL	CHRGTR			;GET ANOTHER CHARACTER
	CZ	CRDO			;PRINT CRLF IF END WITHOUT PUNCTUATION
PRINTC:	JZ	FINPRT			;FINISH BY RESETTING FLAGS
					;FINISH BY RESETTING FLAGS
					;IN WHICH CASE A TERMINATOR DOES NOT
					;MEAN WE SHOULD TYPE A CRLF
					;BUT JUST RETURN
	CPI	USINTK			;IS IT "PRINT USING" ?
	JZ	PRINUS			;IF SO, USE A SPECIAL HANDLER
	CPI	TABTK
	JZ	TABER			;THE TAB FUNCTION?
	CPI	SPCTK
	JZ	TABER			;THE SPC FUNCTION?
	PUSH	H			;SAVE THE TEXT POINTER
	CPI	44
	JZ	COMPRT			;IS IT A COMMA?
	CPI	59			;IS IT A ";"
	JZ	NOTABR
	POP	B			;GET RID OF OLD TEXT POINTER
	CALL	FRMEVL			;EVALUATE THE FORMULA
	PUSH	H			;SAVE TEXT POINTER
	CALL	GETYPR			;SEE IF WE HAVE A STRING
	JZ	STRDON			;IF SO, PRINT SPECIALY
	CALL	FOUT			;MAKE A NUMBER INTO A STRING
	CALL	STRLIT			;MAKE IT  A STRING
	MVI	M,' '			;PUT A SPACE AT THE END
	LHLD	FACLO			;AND INCREASE SIZE BY 1
	INR	M			;SIZE BYTE IS FIRST IN DESCRIPTOR

STRDON:					;USE FOLDING FOR STRINGS AND #S
	LHLD	PTRFIL			;DISK OUTPUT?
	MOV	A,H			;IF SO, DON'T EVER FORCE A CRLF
	ORA	L
	JNZ	LINCH2			;TO BE SENT OUT
	LHLD	FACLO			;GET THE POINTER
	LDA	PRTFLG
	ORA	A
	JZ	ISTTY			;LPT OR TTY?
	LDA	LPTSIZ			;GET WIDTH OF PRINTER
	MOV	B,A			;SAVE IN [B]
	INR	A			;IS IT INFINITE?
	JZ	LINCH2			;THEN JUST PRINT
	LDA	LPTPOS
	ORA	A			;DON'T DO A CRLF IF STRING LONGER THAN LINE
	JZ	LINCH2			;LENGTH IF POSITION IS 0
	ADD	M
	CMC				;SET NC IF OVERFLOW ON CHECK
	JNC	LINCHK			;START ON A NEW LINE
	CMP	B			;CHECK FOR OVERLAP
	JMP	LINCHK
ISTTY:
	LDA	LINLEN
	MOV	B,A
	INR	A			;NO OVERFLOW LINE WIDTH?
	JZ	LINCH2			;YES
	LDA	TTYPOS			;SEE WHERE WE ARE
					;SEE WHERE WE ARE
	ORA	A			;DON'T DO CRLF
	JZ	LINCH2			;IF ALREADY AT 0 EVEN IF STRING IS LONGER THAT LINE LENGTH
	ADD	M			;ADD THIS LENGTH
	CMC				;SET NC IF OVERFLOW ON CHECK
	JNC	LINCHK			;(POSSIBLE SINCE STRINGS CAN BE BIG..)
	DCR	A			;ACTUALLY EQUAL TO LINE LENGTH IS OK
	CMP	B
	PUBLIC	LINPT3
LINPT3	SET	$-1
LINCHK:	CNC	CRDO			;IF SO CRLF
LINCH2:	CALL	STRPRT			;PRINT THE NUMBER
	POP	H
	JMP	NEWCHR			;PRINT SOME MORE
COMPRT:
	LHLD	PTRFIL			;OUTPUTING INTO A FILE?
	MOV	A,H			;IF SO, [PTRFIL] .NE. 0
	ORA	L			;AND SPECIAL PRINT POSITION SHOULD
	EXTRN	NMLO.C
	LXI	B,NMLO.C		;BE FETCHED FROM FILE DATA
	DAD	B			;[H,L] POINT AT POSITION
	MOV	A,M			;IF FILE IS ACTIVE
	JNZ	MORCOM
	LDA	PRTFLG			;OUTPUT TO THE LINE PRINTER?
	ORA	A			;NON-ZERO MEANS YES
	JZ	ISCTTY			;NO, DO TELETYPE COMMA
	LDA	NLPPOS			;ARE WE USING INFINITE WIDTH?
	MOV	B,A			;ALSO PUT IN [B]
	INR	A			;TEST
	LDA	LPTPOS			;GET LINE PRINTER POSITION
	JZ	MORCOM			;ALWAYS DO MODULUS IF WIDTH=255
	CMP	B			;CHECK IF NO MORE COMMA FIELDS
	JMP	CHKCOM			;USE TELETYPE CHECK
ISCTTY:
	LDA	CLMLST
	MOV	B,A
	LDA	TTYPOS			;GET TELETYPE POSITION
NCMPOS	SET	(((LINLN/CLMWID)-1)*CLMWID);POSITION BEYOND WHICH THERE ARE
	CPI	255			;INFINITE WIDTH?
	JZ	MORCOM			;DO MODULUS

	CMP	B
	PUBLIC	LINPT4
LINPT4	SET	$-1			;FIXED UP BY "TERMINAL WIDTH" QUESTION
CHKCOM:	CNC	CRDO			;TYPE CRLF
	JNC	NOTABR			;AND QUIT IF BEYOND THE LAST COMMA FIELD
MORCOM:	SUI	CLMWID			;GET [A] MODULUS CLMWID
	JNC	MORCOM
	CMA				;WE WANT TO  FILL
					;THE PRINT POSITION OUT
					;TO AN EVEN CLMWID, SO
					;WE PRINT CLMWID-[A] MOD CLMWID SPACES
	JMP	ASPA2			;GO PRINT [A]+1 SPACES
TABER:
	PUSH	PSW			;REMEMBER IF [A]=SPCTK OR TABTK
	CALL	CHRGTR
	CALL	GETIN2			;EVALUATE THE ARGUMENT
	POP	PSW			;SEE IF ITS SPC OR TAB
	PUSH	PSW
	CPI	SPCTK			;IF SPACE LEAVE ALONE
	JZ	SPCNDC
	DCX	D			;OFFSET BY 1
SPCNDC:	MOV	A,D
	ORA	A			;MAKE SURE ITS NOT NEGATIVE
	JP	TBNONG
	LXI	D,0
TBNONG:	PUSH	H			;SAVE THE TEXT POINTER
	LHLD	PTRFIL			;SEE IF GOING TO DISK FILE
	MOV	A,H
	ORA	L
	JNZ	LNOMOD			;DONT MOD
	LDA	PRTFLG			;GOING TO PRINTER?
	ORA	A			;SET FLAGS
	LDA	LPTSIZ			;GET SIZE
	JNZ	LPTMDF			;WAS LPT, MOD BY ITS SIZE
	LDA	LINLEN			;GET THE LINE LENGTH
LPTMDF:	MOV	L,A
	INR	A			;TEST FOR WIDTH OF 255 (NO FOLDING)
	JZ	LNOMOD			;IF SO, DONT MOD
	MVI	H,0			;MOD OUT BY LINE LENGTH
	CALL	IMOD
	XCHG				;SET [E] = POSITION TO GO TO 
LNOMOD:	POP	H			;GET BACK THE TEXT POINTER
	CALL	SYNCHR
	DB	')'
	DCX	H
	POP	PSW			;GET BACK SPCTK OR TABTK
	SUI	SPCTK			;WAS IT SPCTK?
	PUSH	H			;SAVE THE TEXT POINTER
	JZ	DOSIZT			;VALUE IN [A]
	LHLD	PTRFIL			;OUTPUTING INTO A FILE?
	MOV	A,H			;IF SO, [PTRFIL] .NE. 0
	ORA	L			;AND SPECIAL PRINT POSITION SHOULD

	LXI	B,NMLO.C		;BE FETCHED FROM FILE DATA
	DAD	B			;[H,L] POINT AT POSITION
	MOV	A,M			;IF FILE IS ACTIVE
	JNZ	DOSIZT			;DO TAB CALCULATION NOW
	LDA	PRTFLG			;LINE PRINTER OR TTY?
	ORA	A			;NON-ZERO MEANS LPT
	JZ	TTYIST
	LDA	LPTPOS			;GET LINE PRINTER POSITION
	JMP	DOSIZT
TTYIST:
	LDA	TTYPOS			;GET TELETYPE PRINT POSITION
					;SEE WHERE WE ARE
DOSIZT:	CMA				;PRINT [E]-[A] SPACES
	ADD	E
	JC	ASPA2			;PRINT IF PAST CURRENT
	INR	A
	JZ	NOTABR			;DO NOTHING IF AT CURRENT
	CALL	CRDO			;GO TO A NEW LINE
	MOV	A,E			;GET THE POSITION TO GO TO
	DCR	A
	JM	NOTABR
					;SPACES
ASPA2:	INR	A
ASPAC:	MOV	B,A			;[B]=NUMBER OF SPACES TO PRINT
	MVI	A,' '			;[A]=SPACE
REPOUT:	CALL	OUTDO			;PRINT [A]
					;DECREMENT THE COUNT
	DCR	B
	JNZ	REPOUT
NOTABR:	POP	H			;PICK UP TEXT POINTER
	CALL	CHRGTR			;AND THE NEXT CHARACTER
	JMP	PRINTC			;AND SINCE WE JUST PRINTED
					;SPACES, DON'T CALL CRDO
					;IF IT'S THE END OF THE LINE
	PUBLIC	FINPRT
FINPRT:
	XRA	A

	STA	PRTFLG
	PUSH	H			;SAVE THE TEXT POINTER
	MOV	H,A			;[H,L]=0
	MOV	L,A
	SHLD	PTRFIL			;ZERO OUT PTRFIL
	POP	H			;GET BACK THE TEXT POINTER
	RET	
	PAGE
	SUBTTL	LINE INPUT, INPUT AND READ CODE
LINE:
	CALL	SYNCHR
	DB	$INPUT
	CPI	'#'			;SEE IF THERE IS A FILE NUMBER
	EXTRN	DLINE
	JZ	DLINE			;DO DISK INPUT LINE
	CALL	SCNSEM			;SCAN SEMICOLON FOR NO-CR
	CALL	QTINP			;PRINT QUOTED STRING IF ONE
	CALL	PTRGET			;READ STRING TO STORE INTO
	CALL	CHKSTR			;MAKE SURE ITS A STRING
	PUSH	D			;SAVE POINTER AT VARIABLE
	PUSH	H			;SAVE TEXT POINTER
	EXTRN	SINLIN
	CALL	SINLIN			;READ A LINE OF INPUT
	POP	D			;GET TEXT POINTER
	POP	B			;GET POINTER AT VARIABLE
	JC	STPEND			;IF CONTROL-C, STOP
RELINE:	PUSH	B			;SAVE BACK VARIABLE POINTER
	PUSH	D			;SAVE TEXT POINTER
	MVI	B,0			;SETUP ZERO AS ONLY TERMINATOR
	CALL	STRLT3			;LITERALIZE THE INPUT
	POP	H			;RESTORE [H,L]=TEXT POINTER
	MVI	A,3			;SET THREE FOR STRING
	JMP	LETCN2			;DO THE ASSIGNMENT
TRYAGN:
	DB	'?Redo from start'
	DB	13
	DB	10
	DB	0
;
; HERE WHEN PASSING OVER STRING LITERAL IN SUBSCRIPT OF VARIABLE IN INPUT LIST
; ON THE FIRST PASS OF INPUT CHECKING FOR TYPE MATCH AND NUMBER
;
SCNSTR:	INX	H			;LOOK AT THE NEXT CHARACTER
	MOV	A,M			;FETCH IT
	ORA	A			;END OF LINE?
	JZ	SNERR			;ENDING IN STRING IN SUBSCRIPT IS BAD SYNTAX
	CPI	34			;ONLY OTHER TERMINATOR IS QUOTE
	JNZ	SCNSTR			;CONTINUE UNTIL QUOTE OR 0 IS FOUND
	JMP	SCNCON			;CONTINUE MATCHING PARENS SINCE STRING ENDED

INPBAK:	POP	H			;GET RID OF PASS1 DATA POINTER
	POP	H			;GET RID OF PASS2 DATA POINTER
	JMP	RDOIN2			;GET RID OF PASS2 VARLST POINTER AND RETRY
;
; HERE WHEN THE DATA THAT WAS TYPED IN OR IN "DATA" STATEMENTS
; IS IMPROPERLY FORMATTED. FOR "INPUT" WE START AGAIN.
; FOR "READ" WE GIVE A SYNTAX ERROR AT THE DATA LINE
;
TRMNOK:	LDA	FLGINP			;WAS IT READ OR INPUT?
	ORA	A			;ZERO=INPUT
	JNZ	DATSNE			;GIVE ERROR AT DATA LINE
RDOIN2:	POP	B			;GET RID OF THE POINTER INTO THE VARIABLE LIST
RDOINP:
	LXI	H,TRYAGN
	CALL	STROUT			;PRINT "?REDO FROM START"
					;TO NEWSTT POINTING AT THE START OF

					;START ALL OVER
	LHLD	SAVTXT			;GET SAVED TEXT POINTER
	RET				;GO BACK TO NEWSTT
					;OF THE "INPUT" STATEMENT
FILSTI:	CALL	FILINP
	PUSH	H			;PUT THE TEXT POINTER ON THE STACK
	LXI	H,BUFMIN		;POINT AT A COMMA
	JMP	INPCN3
INPUT:

	CPI	'#'
	JZ	FILSTI
	CALL	SCNSEM			;SCAN SEMICOLON FOR NO-CR
	LXI	B,NOTQTI		;WHERE TO GO
	PUSH	B			;WHEN DONE WITH QUOTED STRING
QTINP:	CPI	34			;IS IT A QUOTE?
	MVI	A,0			;BE TALKATIVE
	STA	CNTOFL			;FORCE OUTPUT
	MVI	A,255			;MAKE NON-ZERO VALUE
	STA	TEMPA+1			;FLAG TO DO "? "
	RNZ				;JUST RETURN
	CALL	STRLTI			;MAKE THE MESSAGE A STRING
	MOV	A,M			;GET CHAR
	CPI	54O			;COMMA?
	JNZ	NTICMA			;NO
	XRA	A			;FLAG NOT TO DO IT
	STA	TEMPA+1
	CALL	CHRGTR			;FETCH NEXT CHAR
	JMP	INPCMA			;CONTINUE
NTICMA:
	CALL	SYNCHR
	DB	59			;MUST END WITH SEMI-COLON
INPCMA:
	PUSH	H			;REMEMBER WHERE IT ENDED
	CALL	STRPRT			;PRINT IT OUT
	POP	H			;GET BACK SAVED TEXT PTR
	RET				;ALL DONE
NOTQTI:
	PUSH	H
GETAGN:
	LDA	TEMPA+1			;DO "? "
	ORA	A
	JZ	SUPPRS			;THEN SUPPRESS "?"
	MVI	A,'?'			;TYPE "?" AND INPUT A LINE OF TEXT
	CALL	OUTDO
	MVI	A,' '
	CALL	OUTDO
	EXTRN	SINLIN
SUPPRS:	CALL	SINLIN
	POP	B			;TAKE OFF SINCE MAYBE LEAVING
	JC	STPEND			;IF EMPTY LEAVE
	PUSH	B			;PUT BACK  SINCE DIDN'T LEAVE
;
; THIS IS THE FIRST PASS DICTATED BY ANSI REQUIRMENT THAN NO VALUES BE ASSIGNED 
; BEFORE CHECKING TYPE AND NUMBER. THE VARIABLE LIST IS SCANNED WITHOUT EVALUATING
; SUBSCRIPTS AND THE INPUT IS SCANNED TO GET ITS TYPE. NO ASSIGNMENT
; IS DONE
;
	MVI	M,44			;PUT A COMMA IN FRONT OF BUF
	XCHG				;SAVE DATA POINTER IN [D,E]
	POP	H			;GET THE VARLST POINTER INTO [H,L]
	PUSH	H			;RESAVE THE VARLST POINTER
	PUSH	D			;SAVE A COPY OF THE DATA POINTER FOR PASS2
	PUSH	D			;SAVE THE DATA POINTER FOR PASS1
	DCX	H			;READ THE FIRST VARIABLE NAME
VARLOP:	MVI	A,128			;DON'T ALLOW SUBSCRIPTS -- RETURN POINTING TO "("
	STA	SUBFLG
	CALL	CHRGTR			;ADVANCE TEXT POINTER
	CALL	PTRGET			;SCAN NAME AND RETURN POINTER IN [D,E]
	MOV	A,M			;SEE IF IT ENDED ON "("
	DCX	H			;RESCAN THE TERMINATOR
	CPI	'('			;ARRAY OR NOT?
	JNZ	ENDSCN			;IF NOT, VARIABLE NAME IS DONE
	INX	H			;NOW SCAN THE SUBSCRIPT EXPRESSION
	MVI	B,0			;INITIALIZE THE PAREN COUNT
SCNOPN:	INR	B			;UP THE COUNT FOR EVERY "("
SCNCON:	CALL	CHRGTR			;GET THE NEXT CHARACTER
	JZ	SNERR			;SHOULDN'T END STATEMENT IN EXPRESSION
	CPI	34			;IS THERE A QUOTED STRING CONSTANT
	JZ	SCNSTR			;GO SCAN THE ENDTIRE CONSTANT (MAY CONTAIN PARENS)
	CPI	'('			;ANOTHER LEVEL OF NESTING?
	JZ	SCNOPN			;INCREMENT COUTN AND KEEP SCANNING
	CPI	')'			;ONE LESS LEVEL OF PARENS?
	JNZ	SCNCON			;NO, KEEP SCANNING
					;DECREMENT PAREN COUNT. OUT OF SUBSCRIPT?
	DCR	B
	JNZ	SCNCON			;IF NOT AT ZERO LEVEL, KEEP SCANNING
ENDSCN:	CALL	CHRGTR			;GET TERMINATING CHARACTER
	JZ	OKVLST			;LAST VARIABLE IN INPUT LIST
	CPI	44			;OTHERWISE IT MUST BE A COMMA
	JNZ	SNERR			;BADLY FORMED INPUT -- SYNTAX ERROR
OKVLST:	XTHL				;SAVE THE VARLST POINTER 
					;GET THE DATA POINTER INTO [H,L]
	MOV	A,M			;DATA SHOULD ALWAYS HAVE A LEADING COMMA
	CPI	44			;IS IT PROPERLY FORMED?
	JNZ	INPBAK			;NO, ASK FOR COMPLETE REINPUT
	MVI	A,1			;SET OVCSTR=1
	STA	OVCSTR
	CALL	SCNVAL			;GO INTO PASS2 CODE AND SCAN A VALUE
	LDA	OVCSTR			;SEE IF IT WAS TOO BIG
	DCR	A
	JNZ	INPBAK
	PUSH	H			;SAVE THE RETURNED DATA POINTER
	CALL	GETYPR			;RELEASE STRING
	CZ	FREFAC
	POP	H
	DCX	H			;SKIP OVER SPACES LEFT AFTER VALUE SCAN
	CALL	CHRGTR
;
; NOTE CHECK FOR OVERFLOW OF INPUT VALUE HERE
;
	XTHL				;SAVE THE DATA POINTER
					;[H,L]=DATA LIST POINTER
	MOV	A,M			;DID VARIABLE LIST CONTINUE?
	CPI	44			;MUST HAVE HAD A COMMA
	JZ	VARLOP			;GO CHECK ANOTHER
	POP	H			;GET FINAL DATA POINTER
	DCX	H			;SKIP OVER ANY TRAILING SPACES
	CALL	CHRGTR
	ORA	A			;IS IT A TRUE END?
	POP	H			;GET THE START OF DATA POINTER FOR PASS2
	JNZ	RDOIN2			;IF DATA ENDED BADLY ASK FOR REINPUT
INPCN3:
	MVI	M,44			;SETUP COMMA AT BUFMIN
	JMP	INPCON
READ:
	PUSH	H			;SAVE THE TEXT POINTER
	LHLD	DATPTR			;GET LAST DATA LOCATION
	DB	366Q			;"ORI" TO SET [A] NON-ZERO
INPCON:	XRA	A			;SET FLAG THAT THIS IS AN INPUT
	STA	FLGINP			;STORE THE FLAG
;
; IN THE PROCESSING OF DATA AND READ STATEMENTS:
; ONE POINTER POINTS TO THE DATA (IE THE NUMBERS BEING FETCHED)
; AND ANOTHER POINTS TO THE LIST OF VARIABLES
;
; THE POINTER INTO THE DATA ALWAYS STARTS POINTING TO A
; TERMINATOR -- A , : OR END-OF-LINE
;
	XTHL				;[H,L]=VARIABLE LIST POINTER
					;DATA POINTER GOES ON THE STACK
	JMP	LOPDAT
LOPDT2:	CALL	SYNCHR
	DB	44			;MAKE SURE THERE IS A ","
LOPDAT:	CALL	PTRGET			;READ THE VARIABLE LIST
					;AND GET THE POINTER TO A VARIABLE INTO [D,E]
	XTHL				;PUT THE VARIABLE LIST POINTER ONTO THE
					;STACK AND TAKE THE
					;DATA LIST POINTER OFF
;
; NOTE AT THIS POINT WE HAVE A VARIABLE WHICH WANTS DATA
; AND SO WE MUST GET DATA OR COMPLAIN
;
	PUSH	D			;SAVE THE POINTER TO THE VARIABLE WE
					;ARE ABOUT TO SET UP WITH A VALUE
	MOV	A,M			;SINCE THE DATA LIST POINTER ALWAYS POINTS
					;AT A TERMINATOR LETS READ THE
					;TERMINATOR INTO [A] AND SEE WHAT
					;IT IS
	CPI	44
	JZ	DATBK			;A COMMA SO A VALUE MUST FOLLOW
	LDA	FLGINP			;SEE WHAT TYPE OF STATEMENT THIS WAS
	ORA	A
					;SEARCH FOR ANOTHER DATA STATEMENT
	JNZ	DATLOP
					;THE DATA NOW STARTS AT THE BEGINNING
					;OF THE BUFFER
					;AND QINLIN LEAVES [H,L]=BUF
DATBK:
	DB	366Q			;SET A NON-ZERO
SCNVAL:	XRA	A			;SET ZERO FLAG IN [A]
	STA	INPPAS			;STORE SO EARLY RETURN CHECK WORKS
	XCHG				;SAVE THE DATA POINTER
	LHLD	PTRFIL			;SEE IF A FILE READ
	MOV	A,H
	ORA	L
	XCHG	
	JNZ	FILIND			;IF SO, SPECIAL HANDLING
	CALL	GETYPR			;IS IT A STRING?
	PUSH	PSW			;SAVE THE TYPE INFORMATION
	JNZ	NUMINS			;IF NUMERIC, USE FIN TO GET IT
					;ONLY THE VARAIBLE TYPE IS
					;CHECKED SO AN UNQUOTED STRING
					;CAN BE ALL DIGITS
	CALL	CHRGTR
	MOV	D,A			;ASSUME QUOTED STRING
	MOV	B,A			;SETUP TERMINATORS
	CPI	34			;QUOTE ?
	JZ	NOWGET			;TERMINATORS OK
	LDA	FLGINP			;INPUT SHOULDN'T TERMINATE ON ":"
	ORA	A			;SEE IF READ OR INPUT
	MOV	D,A			;SET D TO ZERO FOR INPUT
	JZ	NCOLST
	MVI	D,':'			;UNQUOTED STRING TERMINATORS
NCOLST:	MVI	B,44			;ARE COLON AND COMMA
					;NOTE: ANSI USES [B]=44 AS A FLAG TO 
					;TRIGGER TRAILING SPACE SUPPRESSION
	DCX	H			;BACKUP SINCE START CHARACTER MUST BE INCLUDED
					;IN THE QUOTED STRING CASE WE DON'T WANT TO
					;INCLUDE THE STARTING OR ENDING QUOTE
NOWGET:	CALL	STRLT2			;MAKE A STRING DESCRIPTOR FOR THE VALUE
					;AND COPY IF NECESSARY
DOASIG:	POP	PSW			;POP OFF THE TYPE INFORMATION
	ADI	3			;MAKE VALTYPE CORRECT
	MOV	C,A			;SAVE VALUE TYPE IN [C]
	LDA	INPPAS			;SEE IF SCANNING VALUES FOR PASS1
	ORA	A			;ZERO FOR PASS1
	RZ				;GO BACK TO PASS1
	MOV	A,C			;RECOVER VALTYP
	XCHG				;[D,E]=TEXT POINTER
	LXI	H,STRDN2		;RETURN LOC
	XTHL				;[H,L]=PLACE TO STORE VARIABLE VALUE
	PUSH	D			;TEXT POINTER GOES ON
	JMP	INPCOM			;DO ASSIGNMENT
NUMINS:	CALL	CHRGTR
	POP	PSW			;GET BACK VALTYPE OF SOURCE
	PUSH	PSW			;SAVE BACK
	LXI	B,DOASIG		;ASSIGNMENT IS COMPLICATED
					;EVEN FOR NUMERICS SO USE THE "LET" CODE
	PUSH	B			;SAVE ON STACK
	JC	FIN			;IF NOT DOUBLE, CALL USUAL # INPUTTER
	JMP	FINDBL			;ELSE CALL SPECIAL ROUTINE WHICH EXPECTS DOUBLES
STRDN2:
	DCX	H
	CALL	CHRGTR
	JZ	TRMOK
	CPI	44
	JNZ	TRMNOK			;ENDED PROPERLY?
TRMOK:
	XTHL	
	DCX	H			;LOOK AT TERMINATOR
	CALL	CHRGTR			;AND SET UP CONDITION CODES
	JNZ	LOPDT2			;NOT ENDING, CHECK FOR COMMA
					;AND GET ANOTHER VARIABLE
					;TO FILL WITH DATA

	POP	D			;POP OFF THE POINTER INTO DATA
	LDA	FLGINP			;FETCH THE STATEMENT TYPE FLAG
	ORA	A
					;INPUT STATEMENT
	XCHG	
	JNZ	RESFIN			;UPDATE DATPTR
	PUSH	D			;SAVE THE TEXT POINTER
FINPRG:	POP	H			;GET BACK THE TEXT POINTER
	JMP	FINPRT
;
; THE SEARCH FOR DATA STATMENTS IS MADE BY USING THE EXECUTION CODE
; FOR DATA TO SKIP OVER STATEMENTS. THE START WORD OF EACH STATEMENT
; IS COMPARED WITH $DATA. EACH NEW LINE NUMBER
; IS STORED IN DATLIN SO THAT IF AN ERROR OCCURS WHILE READING
; DATA THE ERROR MESSAGE WILL GIVE THE LINE NUMBER OF THE 
; ILL-FORMATTED DATA
;
DATLOP:	CALL	DATA
DATFND:	ORA	A
	JNZ	NOWLIN
	INX	H
	MOV	A,M
	INX	H
	ORA	M
	MVI	E,ERROD			;NO DATA IS ERROR ERROD
	JZ	ERROR			;IF SO COMPLAIN
	INX	H			;SKIP PAST LINE #
	MOV	E,M			;GET DATA LINE #
	INX	H
	MOV	D,M
	XCHG	
	SHLD	DATLIN
	XCHG				;RESTORE TEXT POINTER
NOWLIN:	CALL	CHRGTR			;GET THE STATEMENT TYPE
	CPI	$DATA			;IS IS "DATA"?
	JNZ	DATLOP			;NOT DATA SO LOOK SOME MORE
	JMP	DATBK			;CONTINUE READING



	PAGE

	SUBTTL	FORMULA EVALUATION CODE

;
; THE FORMULA EVALUATOR STARTS WITH
; [H,L] POINTING TO THE FIRST CHARACTER OF THE FORMULA.
; AT THE END [H,L] POINTS TO THE TERMINATOR.
; THE RESULT IS LEFT IN THE FAC.
; ON RETURN [A] DOES NOT REFLECT THE TERMINATING CHARACTER
;
; THE FORMULA EVALUATOR USES THE OPERATOR TABLE (OPTAB)
; TO DETERMINE PRECEDENCE AND DISPATCH ADDRESSES FOR
; EACH OPERATOR.
; A TEMPORARY RESULT ON THE STACK HAS THE FOLLOWING FORMAT
;
; THE ADDRESS OF 'RETAOP' -- THE PLACE TO RETURN ON COMPLETION
; OF OPERATOR APPLICATION
;
; THE FLOATING POINT TEMPORARY RESULT
;
; THE ADDRESS OF THE OPERATOR ROUNTINE
;
; THE PRECEDENCE OF THE OPERATOR
;
; TOTAL 10 BYTES
;
FRMEQL:	CALL	SYNCHR
	DB	EQULTK			;CHECK FOR EQUAL SIGN
	JMP	FRMEVL			;EVALUATE FORMULA AND RETURN
FRMPRN:	CALL	SYNCHR
	DB	'('			;GET PAREN BEFORE FORMULA
FRMEVL:	DCX	H			;BACK UP CHARACTER POINTER
FRMCHK:	MVI	D,0			;INITIAL DUMMY PRECEDENCE IS 0
LPOPER:	PUSH	D			;SAVE PRECEDENCE
	MVI	C,1			;EXTRA SPACE NEEDED FOR RETURN ADDRESS
	CALL	GETSTK			;MAKE SURE THERE IS ROOM FOR RECURSIVE CALLS
	CALL	EVAL			;EVALUATE SOMETHING
					;RESET OVERFLOW PRINTING BACK TO NORMAL
	XRA	A			;(SET TO 1 AT FUNDSP TO SUPPRESS
	STA	FLGOVC			;MULTIPLE OVERFLOW MESSAGES)
TSTOP:	SHLD	TEMP2			;SAVE TEXT POINTER
RETAOP:	LHLD	TEMP2			;RESTORE TEXT PTR
	POP	B			;POP OFF THE PRECEDENCE OF OLDOP
NOTSTV:	MOV	A,M			;GET NEXT CHARACTER
	SHLD	TEMP3			;SAVE UPDATED CHARACTER POINTER
	CPI	GREATK			;IS IT AN OPERATOR?
	RC				;NO, ALL DONE (THIS CAN RESULT IN OPERATOR
					;APPLICATION OR ACTUAL RETURN)
	CPI	LESSTK+1		;SOME KIND OF RELATIONAL?
	JC	DORELS			;YES, DO IT
	SUI	PLUSTK			;SUBTRAXDCT OFFSET FOR FIRST ARITHMETIC
	MOV	E,A			;MUST MULTIPLY BY 3 SINCE
					;OPTAB ENTRIES ARE 3 LONG
	JNZ	NTPLUS			;NOT ADDITION OP
	LDA	VALTYP			;SEE IF LEFT PART IS STRING
	CPI	3			;SEE IF ITS A STRING
	MOV	A,E			;REFETCH OP-VALUE
	JZ	CAT			;MUST BE CAT
NTPLUS:
	CPI	LSTOPK			;HIGHER THAN THE LAST OP?
	RNC				;YES, MUST BE TERMINATOR
	LXI	H,OPTAB			;CREATE INDEX INTO OPTAB
	MVI	D,0			;MAKE HIGH BYTE OF OFFSET=0
	DAD	D			;ADD IN CALCULATED OFFSET
	MOV	A,B			;[A] GETS OLD PRECEDENCE
	MOV	D,M			;REMEMBER NEW PRECEDENCE
	CMP	D			;OLD-NEW
	RNC				;MUST APPLY OLD OP
					;IF HAS GREATER OR = PRECEDENCE
					;NEW OPERATOR

	PUSH	B			;SAVE THE OLD PRECEDENCE
	LXI	B,RETAOP		;PUT ON THE ADDRESS OF THE
	PUSH	B			;PLACE TO RETURN TO AFTER OPERATOR APPLICATION
	MOV	A,D			;SEE IF THE OPERATOR IS EXPONENTIATION
	CPI	127			;WHICH HAS PRECEDENCE 127
	JZ	EXPSTK			;IF SO, "FRCSNG" AND MAKE A SPECIAL STACK ENTRY
	CPI	81			;SEE IF THE OPERATOR IS "AND" OR "OR"
	JC	ANDORD			;AND IF SO "FRCINT" AND
					;MAKE A SPECIAL STACK ENTRY
	ANI	254			;MAKE 123 AND 122 BOTH MAP TO 122
	CPI	122			;MAKE A SPECIAL CHECK FOR "MOD" AND "IDIV"
	JZ	ANDORD			;IF SO, COERCE ARGUMENTS TO INTEGER
; THIS CODE PUSHES THE CURRENT VALUE IN THE FAC
; ONTO THE STACK, EXCEPT IN THE CASE OF STRINGS IN WHICH IT CALLS
; TYPE MISMATCH ERROR. [D] AND [E] ARE PRESERVED.
;
NUMREL:	LXI	H,FACLO			;SAVE THE VALUE OF THE FAC
PUSVAL:	LDA	VALTYP			;FIND OUT WHAT TYPE OF VALUE WE ARE SAVING
	SUI	3			;SETUP THE CONDITION CODES
					;SET ZERO FOR STRINGS
	JZ	TMERR
	ORA	A			;SET PARITY -- CARRY UNAFFECTED SINCE OFF
	MOV	C,M
	INX	H
	MOV	B,M
	PUSH	B			;PUSH FACLO+0,1 ON THE STACK
	JM	VPUSHD			;ALL DONE IF THE DATA WAS AN INTEGER
	INX	H
	MOV	C,M
	INX	H
	MOV	B,M
	PUSH	B			;PUSH FAC-1,0 ON THE STACK
	JPO	VPUSHD			;ALL DONE IF WE HAD A SNG
	INX	H
	LXI	H,DFACLO		;WE HAVE A DOUBLE PRECISON NUMBER
	MOV	C,M			;PUSH ITS 4 LO BYTES ON THE STACK
	INX	H
	MOV	B,M
	INX	H
	PUSH	B
	MOV	C,M
	INX	H
	MOV	B,M
	PUSH	B			;USER-DEFINED FUNCTIONS REQUIRE THAT THE
					;[H,L] RETURNED POINTS AT THE LAST VALUE
					;BYTE AND NOT BEYOND IT
VPUSHD:
	ADI	3			;FIX [A] TO BE THE VALTYP OF THE NUMBER
					;JUST PUSHED ON THE STACK
	MOV	C,E			;[C]=OPERATOR NUMBER
	MOV	B,A			;[B]=TYPE OF VALUE ON THE STACK
	PUSH	B			;SAVE THESE THINGS FOR APPLOP
	LXI	B,APPLOP		;GENERAL OPERATOR APPLICATION
					;ROUTINE -- DOES TYPE CONVERSIONS
FINTMP:	PUSH	B			;SAVE PLACE TO GO
	LHLD	TEMP3			;REGET THE TEXT POINTER
	JMP	LPOPER			;PUSH ON THE PRECEDENCE AND READ MORE FORMULA
DORELS:	MVI	D,0			;ASSUME NO RELATION OPS
					;ALSO SETUP THE HIGH ORDER OF THE INDEX INTO OPTAB
LOPREL:	SUI	GREATK			;IS THIS ONE RELATION?
	JC	FINREL			;RELATIONS ALL THROUGH
NMREL	SET	LESSTK-GREATK+1
	CPI	NMREL			;IS IT REALLY RELATIONAL?
	JNC	FINREL			;NO JUST BIG
	CPI	1			;SET UP BITS BY MAPPING
	RAL				;0 TO 1 1 TO 2 AND 2 TO 4
	XRA	D			;BRING IN THE OLD BITS
	CMP	D			;MAKE SURE RESULT IS BIGGER
	MOV	D,A			;SAVE THE MASK
	JC	SNERR			;DON'T ALLOW TWO OF THE SAME
	SHLD	TEMP3			;SAVE CHARACTER POINTER
	CALL	CHRGTR			;GET THE NEXT CANDIDATE
	JMP	LOPREL
;
; FOR EXPONENTIATION WE WANT TO FORCE THE CURRENT VALUE IN THE FAC
; TO BE SINGLE PRECISION. WHEN APPLICATION TIME COMES WE FORCE
; THE RIGHT HAND OPERAND TO SINGLE PRECISION AS WELL
;
	EXTRN	FPWRQ
EXPSTK:	CALL	FRCSNG			;COERCE LEFT HAND OPERAND
	CALL	PUSHF			;PUT IT ON THE STACK
	LXI	B,FPWRQ			;PLACE TO COERCE RIGHT HAND
					;OPERAND AND DO EXPONENTIATION
	MVI	D,127			;RESTORE THE PRECEDENCE
	JMP	FINTMP			;FINISH ENTRY AND EVALUATE MORE FORMULA
;
; FOR "AND" AND "OR" AND "\" AND "MOD" WE WANT TO FORCE THE CURRENT VALUE
; IN THE FAC TO BE AN INTEGER, AND AT APPLICATION TIME FORCE THE RIGHT
; HAND OPERAND TO BE AN INTEGER
;
ANDORD:	PUSH	D			;SAVE THE PRECEDENCE
	CALL	FRCINT
	POP	D			;[D]=PRECEDENCE
	PUSH	H			;PUSH THE LEFT HAND OPERAND
	LXI	B,DANDOR		;"AND" AND "OR" DOER
	JMP	FINTMP			;PUSH ON THIS ADDRESS,PRECEDENCE
					;AND CONTINUE EVALUATION
;
; HERE TO BUILD AN ENTRY FOR A RELATIONAL OPERATOR
; STRINGS ARE TREATED SPECIALLY. NUMERIC COMPARES ARE DIFFERENT
; FROM MOST OPERATOR ENTRIES ONLY IN THE FACT THAT AT THE
; BOTTOM INSTEAD OF HAVING RETAOP, DOCMP AND THE RELATIONAL
; BITS ARE STORED. STRINGS HAVE STRCMP,THE POINTER AT THE STRING DESCRIPTOR,
; DOCMP AND THE RELATIONAL BITS.
;
FINREL:	MOV	A,B			;[A]=OLD PRECEDENCE
	CPI	100			;RELATIONALS HAVE PRECEDENCE 100
	RNC				;APPLY EARLIER OPERATOR IF IT HAS
					;HIGHER PRECEDENCE
	PUSH	B			;SAVE THE OLD PRECEDENCE
	PUSH	D			;SAVE [D]=RELATIONAL BITS
	LXI	D,0+256*100+OPCNT	;[D]=PRECEDENCE=100
					;[E]=DISPATCH OFFSET FOR
					;COMPARES IN APPLOP=4
					;IN CASE THIS IS A NUMERIC COMPARE
	LXI	H,DOCMP			;ROUTINE TO TAKE COMPARE ROUTINE RESULT
					;AND RELATIONAL BITS AND RETURN THE ANSWER
	PUSH	H			;DOES A JMP TO RETAOP WHEN DONE
	CALL	GETYPR			;SEE IF WE HAVE A NUMERIC COMPARE
	JNZ	NUMREL			;YES, BUILD AN APPLOP ENTRY
	LHLD	FACLO			;GET THE POINTER AT THE STRING DESCRIPTOR
	PUSH	H			;SAVE IT FOR STRCMP
	LXI	B,STRCMP		;STRING COMPARE ROUTINE
	JMP	FINTMP			;PUSH THE ADDRESS, REGET THE TEXT POINTER
					;SAVE THE PRECEDENCE AND SCAN
					;MORE OF THE FORMULA
;
; APPLOP IS RETURNED TO WHEN IT IS TIME TO APPLY AN ARITHMETIC
; OR NUMERIC COMPARISON OPERATION.
; THE STACK HAS A DOUBLE BYTE ENTRY WITH THE OPERATOR
; NUMBER AND THE VALTYP OF THE VALUE ON THE STACK.
; APPLOP DECIDES WHAT VALUE LEVEL THE OPERATION
; WILL OCCUR AT, AND CONVERTS THE ARGUMENTS. APPLOP
; USES DIFFERENT CALLING CONVENTIONS FOR EACH VALUE TYPE.
; INTEGERS: LEFT IN [D,E] RIGHT IN [H,L]
; SINGLES:  LEFT IN [B,C,D,E] RIGHT IN THE FAC
; DOUBLES:  LEFT IN FAC   RIGHT IN ARG
;
APPLOP:	POP	B			;[B]=STACK OPERAND VALUE TYPE
					;[C]=OPERATOR OFFSET
	MOV	A,C			;SAVE IN MEMORY SINCE THE STACK WILL BE BUSY
	STA	OPRTYP			;A RAM LOCATION
	LDA	VALTYP			;GET VALTYP OF FAC
	CMP	B			;ARE VALTYPES THE SAME?
	JNZ	VALNSM			;NO
	CPI	2			;INTEGER?
	JZ	INTDPC			;YES, DISPATCH!!
	CPI	4			;SINGLE?
	JZ	SNGDPC			;YES, DISPATCH!!
	JNC	DBLDPC			;MUST BE DOUBLE, DISPATCH!!
VALNSM:	MOV	D,A			;SAVE IN [D]
	MOV	A,B			;CHECK FOR DOUBLE
	CPI	8			;PRECISION ENTRY ON THE STACK
	JZ	STKDBL			;FORCE FAC TO DOUBLE
	MOV	A,D			;GET VALTYPE OF FAC
	CPI	8			;AND IF SO, CONVERT THE STACK OPERAND
	JZ	FACDBL			;TO DOUBLE PRECISION
	MOV	A,B			;SEE IF THE STACK ENTRY IS SINGLE
	CPI	4			;PRECISION AND IF SO, CONVERT
	JZ	STKSNG			;THE FAC TO SINGLE PRECISION
	MOV	A,D			;SEE IF THE FAC IS SINGLE PRECISION
	CPI	3			;AND IF SO CONVERT THE STACK TO SINGLE
	JZ	TMERR			;BLOW UP ON RIGHT HAND STRING OPERAND
	JNC	FACSNG			;PRECISION
					;NOTE: THE STACK MUST BE INTEGER AT THIS POINT
INTDPC:	LXI	H,INTDSP		;INTEGER INTEGER CASE
	MVI	B,0			;SPECIAL DISPATCH FOR SPEED
	DAD	B			;[H,L] POINTS TO THE ADDRESS TO GO TO 
	DAD	B
	MOV	C,M			;[B,C]=ROUTINE ADDRESS
	INX	H
	MOV	B,M
	POP	D			;[D,E]=LEFT HAND OPERAND
	LHLD	FACLO			;[H,L]=RIGHT HAND OPERAND
	PUSH	B			;DISPATCH
	RET	
;
; THE STACK OPERAND IS DOUBLE PRECISION, SO
; THE FAC MUST BE FORCED TO DOUBLE PRECISION, MOVED INTO ARG
; AND THE STACK VALUE POPED INTO THE FAC
;
STKDBL:	CALL	FRCDBL			;MAKE THE FAC DOUBLE PRECISION
DBLDPC:	CALL	VMOVAF			;MOVE THE FAC INTO ARG
	POP	H			;POP OFF THE STACK OPERAND INTO THE FAC
	SHLD	DFACLO+2
	POP	H
	SHLD	DFACLO			;STORE LOW BYTES AWAY
SNGDBL:	POP	B
	POP	D
					;POP OFF A FOUR BYTE VALUE
	CALL	MOVFR			;INTO THE FAC
SETDBL:	CALL	FRCDBL			;MAKE SURE THE LEFT OPERAND IS
					;DOUBLE PRECISION
	LXI	H,DBLDSP		;DISPATCH TO A DOUBLE PRECISION ROUTINE
DODSP:	LDA	OPRTYP			;RECALL WHICH OPERAND IT WAS
	RLC				;CREATE A DISPATCH OFFSET, SINCE
					;TABLE ADDRESSES ARE TWO BYTES
	ADD	L			;ADD LOW BYTE OF ADDRESS
	MOV	L,A			;SAVE BACK
	ADC	H			;ADD HIGH BYTE
	SUB	L			;SUBTRACT LOW
	MOV	H,A			;RESULT BACK
	MOV	A,M			;GET THE ADDRESS
	INX	H
	MOV	H,M
	MOV	L,A
	PCHL				;AND PERFORM THE OPERATION, RETURNING
					;TO RETAOP, EXCEPT FOR COMPARES WHICH
					;RETURN TO DOCMP
;
; THE FAC IS DOUBLE PRECISION AND THE STACK IS EITHER
; INTEGER OR SINGLE PRECISION AND MUST BE CONVERTED
; 
FACDBL:	PUSH	B			;SAVE THE STACK VALUE TYPE
	CALL	VMOVAF			;MOVE THE FAC INTO ARG
	POP	PSW			;POP THE STACK VALUE TYPE INTO [A]
	STA	VALTYP			;PUT IT IN VALTYP FOR THE FORCE
					;ROUTINE
	CPI	4			;SEE IF ITS SINGLE, SO WE KNOW
					;HOW TO POP THE VALUE OFF
	JZ	SNGDBL			;IT'S SINGLE PRECISION
					;SO DO A POPR / CALL MOVFR
	POP	H			;POP OFF THE INTEGER VALUE
	SHLD	FACLO			;SAVE IT FOR CONVERSION
	JMP	SETDBL			;SET IT UP
;
; THIS IS THE CASE WHERE THE STACK IS SINGLE PRECISION
; AND THE FAC IS EITHER SINGLE PRECISION OR INTEGER
;
STKSNG:	CALL	FRCSNG			;CONVERT THE FAC IF NECESSARY
SNGDPC:	POP	B
	POP	D
					;PUT THE LEFT HAND OPERAND IN THE REGISTERS
SNGDO:	LXI	H,SNGDSP		;SETUP THE DISPATCH ADDRESS
					;FOR THE SINGLE PRECISION OPERATOR ROUTINES
	JMP	DODSP			;DISPATCH
;
; THIS IS THE CASE WHERE THE FAC IS SINGLE PRECISION AND THE STACK
; IS AN INTEGER. 
;
FACSNG:	POP	H			;POP OFF THE INTEGER ON THE STACK
	CALL	PUSHF			;SAVE THE FAC ON THE STACK
	CALL	CONSIH			;CONVERT [H,L] TO A SINGLE PRECISION
					;NUMBER IN THE FAC
	CALL	MOVRF			;PUT THE LEFT HAND OPERAND IN THE REGISTERS
	POP	H			;RESTORE THE FAC
	SHLD	FAC-1			;FROM THE STACK
	POP	H
	SHLD	FACLO
	JMP	SNGDO			;PERFORM THE OPERATION
;
; HERE TO DO INTEGER DIVISION. SINCE WE WANT 1/3 TO BE
; .333333 AND NOT ZERO WE HAVE TO FORCE BOTH ARGUMENTS
; TO BE SINGLE-PRECISION FLOATING POINT NUMBERS
; AND USE FDIV
;
INTDIV:	PUSH	H			;SAVE THE RIGHT HAND ARGUMENT
	XCHG				;[H,L]=LEFT HAND ARGUMENT
	CALL	CONSIH			;CONVERT [H,L] TO A SINGLE-PRECISION
					;NUMBER IN THE FAC
	POP	H			;GET BACK THE RIGHT HAND ARGUMENT
	CALL	PUSHF			;PUSH THE CONVERTED LEFT HAND ARGUMENT
					;ONTO THE STACK
	CALL	CONSIH			;CONVERT THE RIGHT HAND ARGUMENT TO A
					;SINGLE PRECISION NUMBER IN THE FAC
	JMP	FDIVT			;DO THE DIVISION AFTER POPING INTO THE
					;REGISTERS THE LEFT HAND ARGUMENT

	PAGE
	SUBTTL	EVAL - EVALUATE VARIABLE, CONSTANT, FUNCTION CALL
EVAL:
	CALL	CHRGTR
	JZ	MOERR			;TEST FOR MISSING OPERAND - IF NONE GIVE ERROR
	JC	FIN			;IF NUMERIC, INTERPRET CONSTANT
	CALL	ISLET2			;VARIABLE NAME?
	JNC	ISVAR			;AN ALPHABETIC CHARACTER MEANS YES
	CPI	DBLCON+1		;IS IT AN EMBEDED CONSTANT
	JC	CONFAC			;RESCAN THE TOKEN & RESTORE OLD TEXT PTR
	INR	A			;IS IT A FUNCTION CALL (PRECEDED BY 377)
	JZ	ISFUN			;YES, DO IT
	DCR	A			;FIX A BACK
	CPI	PLUSTK			;IGNORE "+"
	JZ	EVAL
	CPI	MINUTK			;NEGATION?
	JZ	DOMIN
	CPI	34			;STRING CONSTANT?
	JZ	STRLTI			;IF SO BUILD A DESCRIPTOR IN A TEMPORARY
					;DESCRIPTOR LOCATION AND PUT A POINTER TO THE
					;DESCRIPTOR IN FACLO.
	CPI	NOTTK			;CHECK FOR "NOT" OPERATOR
	JZ	NOTER
	CPI	'&'			;OCTAL CONSTANT?
	JZ	OCTCNS
	CPI	ERCTK
	JNZ	NTERC			;NO, TRY OTHER POSSIBILITIES
	CALL	CHRGTR			;GRAB FOLLOWING CHAR
					;IS IT A DISK ERROR CALL?
	LDA	ERRFLG			;GET THE ERROR CODE.
					;"CPI OVER NEXT BYTE
NTDERC:	PUSH	H			;SAVE TEXT POINTER
	CALL	SNGFLT			;RETURN THE VALUE
	POP	H			;RESTORE TEXT POINTER
	RET				;ALL DONE.

NTERC:	CPI	ERLTK			;ERROR LINE NUMBER VARIABLE.
	JNZ	NTERL			;NO, TRY MORE THINGS.
	CALL	CHRGTR			;GET FOLLOWING CHARACTER
	PUSH	H			;SAVE TEXT POINTER
	LHLD	ERRLIN			;GET THE OFFENDING LINE #
	CALL	INEG2			;FLOAT 2 BYTE UNSINGED INT
	POP	H			;RESTORE TEXT POINTER
	RET				;RETURN
NTERL:
	CPI	$VARPT			;VARPTR CALL?
	JNZ	NTVARP			;NO
	CALL	CHRGTR			;EAT CHAR AFTER
	CALL	SYNCHR
	DB	'('			;EAT LEFT PAREN
	EXTRN	GETPTR
	CPI	'#'			;WANT POINTER TO FILE?
	JNZ	NVRFIL			;NO, MUST BE VARIABLE
	CALL	GTBYTC			;READ FILE #
	PUSH	H			;SAVE TEXT PTR
	CALL	GETPTR			;GET PTR TO FILE
	POP	H			;RESTORE TEXT PTR
	JMP	VARRET
NVRFIL:
	CALL	PTRGET			;GET ADDRESS OF VARIABLE
	PUBLIC	VARRET
VARRET:	CALL	SYNCHR
	DB	')'			;EAT RIGHT PAREN
	PUSH	H			;SAVE TEXT POINTER
	XCHG				;GET VALUE TO RETURN IN [H,L]
	MOV	A,H			;MAKE SURE NOT UNDEFINED VAR
	ORA	L			;SET CC'S. ZERO IF UNDEF
	JZ	FCERR			;ALL OVER IF UNDEF (DONT WANT
					;USER POKING INTO ZERO IF HE'S
					;TOO LAZY TO CHECK
	CALL	MAKINT			;MAKE IT AN INT
	POP	H			;RESTORE TEXT POINTER
	RET	
NTVARP:
	CPI	USRTK			;USER ASSEMBLY LANGUAGE ROUTINE??
	JZ	USRFN			;GO HANDLE IT
	CPI	INSRTK			;IS IT THE INSTR FUNCTION??
	JZ	INSTR			;DISPATCH
	EXTRN	INKEY
	CPI	$INKEY			;INKEY$ FUNCTION?
	JZ	INKEY			;GO DO IT
	CPI	$STRIN			;STRING FUNCTION?
	JZ	STRNG$			;YES, GO DO IT
	EXTRN	FIXINP
	CPI	$INPUT			;FIXED LENGTH INPUT?
	JZ	FIXINP			;YES
	CPI	FNTK			;USER-DEFINED FUNCTION?
	JZ	FNDOER
					;NUMBERED CHARACTERS ALLOWED
					;SO THERE IS NO NEED TO CHECK
					;THE UPPER BOUND
; ONLY POSSIBILITY LEFT IS A FORMULA IN PARENTHESES
PARCHK:	CALL	FRMPRN			;RECURSIVELY EVALUATE THE FORMULA
	CALL	SYNCHR
	DB	')'
	RET	
DOMIN:
	MVI	D,125			;A PRECEDENCE BELOW ^
					;BUT ABOVE ALL ELSE
	CALL	LPOPER			;SO ^ GREATER THAN UNARY MINUS
	LHLD	TEMP2			;GET TEXT POINTER
	PUSH	H
	CALL	VNEG
LABBCK:					;FUNCTIONS THAT DON'T RETURN
					;STRING VALUES COME BACK HERE
	POP	H
	RET	
ISVAR:	CALL	PTRGET			;GET A POINTER TO THE
					;VARIABLE IN [D,E]
RETVAR:	PUSH	H			;SAVE THE TEXT POINTER
	XCHG				;PUT THE POINTER TO THE VARIABLE VALUE
					;INTO [H,L]. IN THE CASE OF A STRING
					;THIS IS A POINTER TO A DESCRIPTOR AND NOT
					;AN ACTUAL VALUE
	SHLD	FACLO			;IN CASE IT'S STRING STORE THE POINTER
					;TO THE DESCRIPTOR IN FACLO.
	CALL	GETYPR			;FOR STRINGS WE JUST LEAVE
	CNZ	VMOVFM			;A POINTER IN THE FAC
					;THE FAC USING [H,L] AS THE POINTER.
	POP	H			;RESTORE THE TEXT POINTER
	RET	
	PUBLIC	MAKUPL,MAKUPS
MAKUPL:	MOV	A,M			;GET CHAR FROM MEMORY
MAKUPS:	CPI	'A'+40O			;IS IT LOWER CASE RANGE
	RC				;LESS
	CPI	'Z'+41O			;GREATER
	RNC				;TEST
	ANI	137O			;MAKE UPPER CASE
	RET				;DONE
	PUBLIC	CNSGET
CNSGET:
	CPI	'&'			;OCTAL PERHAPS?
	JNZ	LINGET
	PUBLIC	OCTCNS
OCTCNS:	LXI	D,0			;INITIALIZE TO ZERO AND IGNORE OVERFLOW
	CALL	CHRGTR			;GET FIRST CHAR
	CALL	MAKUPS			;MAKE UPPER IF NESC.
	CPI	'O'			;OCTAL?
	JZ	LOPOCT			;IF SO, DO IT
	CPI	'H'			;HEX?
	JNZ	LOPOC2			;THEN DO IT
	MVI	B,5			;INIT DIGIT COUNT
LOPHEX:	INX	H			;BUMP POINTER
	MOV	A,M			;GET CHAR
	CALL	MAKUPS			;MAKE UPPER CASE
	CALL	ISLET2			;FETCH CHAR, SEE IF ALPHA
	XCHG				;SAVE [H,L]
	JNC	ALPTST			;YES, MAKE SURE LEGAL HEC
	CPI	'9'+1			;IS IT BIGGER THAN LARGEST DIGIT?
	JNC	OCTFIN			;YES, BE FORGIVING & RETURN
	SUI	'0'			;CONVERT DIGIT, MAKE BINARY
	JC	OCTFIN			;BE FORGIVING IF NOT HEX DIGIT
	JMP	NXTHEX			;ADD IN OFFSET
ALPTST:	CPI	'F'+1			;IS IT LEGAL HEX?
	JNC	HEXFIN			;YES, TERMINATE
	SUI	'A'-10			;MAKE BINARY VALUE
NXTHEX:	DAD	H			;SHIFT RIGHT FOUR BITS
	DAD	H
	DAD	H
	DAD	H
	ORA	L			;OR ON NEW DIGIT
	MOV	L,A			;SAVE BACK
	DCR	B			;TOO MANY DIGITS?
	JZ	OVERR			;YUP.
	XCHG				;GET TEXT POINTER BACK IN [H,L]
	JMP	LOPHEX			;KEEP EATING


LOPOC2:	DCX	H			;REGET LAST CHARACTER
LOPOCT:	CALL	CHRGTR			;READ A DIGIT
	XCHG				;RESULT INTO [H,L]
	JNC	OCTFIN			;OUT OF DIGITS MEANS DONE
	CPI	'8'			;IS THIS AN OCTAL DIGIT
	JNC	SNERR			;NO, TOO BAD YOU WILL LOSE
	LXI	B,OVERR			;WHERE TO GO ON OVERFLOW ERROR
	PUSH	B			;SAVE ADDR ON STACK
	DAD	H			;MULTIPLY BY EIGHT
	RC				;OVERFLOW ERROR
	DAD	H
	RC				;OVERFLOW ERROR
	DAD	H
	RC				;OVERFLOW ERROR
	POP	B			;GET RID OF OVERR ADDR
	MVI	B,0			;SETUP TO ADD [B,C]
	SUI	'0'
	MOV	C,A
	DAD	B			;ADD IN THE DIGIT
	XCHG				;PUT TEXT POINTER BACK IN [H,L]
	JMP	LOPOCT			;SCAN MORE DIGITS
HEXFIN:
OCTFIN:
HOCFIN:
	CALL	MAKINT			;SAVE AS AN INTEGER
	XCHG				;[H,L]-TEXT POINTER
	RET	
ISFUN:
	INX	H			;BUMP SOURCE TEXT POINTER
	MOV	A,M			;GET THE ACTUAL TOKEN FOR FN
	SUI	ONEFUN			;MAKE INTO OFFSET
	EXTRN	RNDMON
	CPI	$RND-ONEFUN		;IS IT RND?
	JNZ	NTMRND			;IF NOT NO NEED TO CHECK MONADIC
	PUSH	H			;SAVE TEXT POINTER
	CALL	CHRGTR			;SEE IF NEXT CHAR IS "("
	CPI	'('
	POP	H			;GET BACK THE OLD TEXT POINTER
	JNZ	RNDMON			;HANDLE MONADIC CASE
	MVI	A,$RND-ONEFUN
NTMRND:
	MVI	B,0
	RLC				;MULTIPLY BY 2
	MOV	C,A
	PUSH	B			;SAVE THE FUNCTION # ON THE STACK
	CALL	CHRGTR
	MOV	A,C			;LOOK AT FUNCTION #
NUMGFN	SET	2*MIDTK-2*ONEFUN+1
	CPI	NUMGFN			;IS IT PAST LASNUM?
	JNC	OKNORM			;NO, MUST BE A NORMAL FUNCTION
;
; MOST FUNCTIONS TAKE A SINGLE ARGUMENT.
; THE RETURN ADDRESS OF THESE FUNCTIONS IS A SMALL ROUTINE
; THAT CHECKS TO MAKE SURE VALTYP IS 0 (NUMERIC) AND POPS OFF
; THE TEXT POINTER. SO NORMAL FUNCTIONS THAT RETURN STRING RESULTS (I.E. CHR$)
; MUST POP OFF THE RETURN ADDRESS OF LABBCK, AND POP OFF THE
; TEXT POINTER AND THEN RETURN TO FRMEVL.
;
; THE SO CALLED "FUNNY" FUNCTIONS CAN TAKE MORE THAN ONE ARGUMENT.
; THE FIRST OF WHICH MUST BE STRING AND THE SECOND OF WHICH
; MUST BE A NUMBER BETWEEN 0 AND 256. THE TEXT POINTER IS
; PASSED TO THESE FUNCTIONS SO ADDITIONAL ARGUMENTS
; CAN BE READ. THE TEXT POINTER IS PASSED IN [D,E].
; THE CLOSE PARENTHESIS MUST BE CHECKED AND RETURN IS DIRECTLY
; TO FRMEVL WITH [H,L] SETUP AS THE TEXT POINTER POINTING BEYOND THE ")".
; THE POINTER TO THE DESCRIPTOR OF THE STRING ARGUMENT
; IS STORED ON THE STACK UNDERNEATH THE VALUE OF THE INTEGER
; ARGUMENT (2 BYTES)
;
; FIRST ARGUMENT ALWAYS STRING -- SECOND INTEGER
	CALL	FRMPRN			;EAT OPEN PAREN AND FIRST ARG
	CALL	SYNCHR
	DB	44			;TWO ARGS SO COMMA MUST DELIMIT
	CALL	CHKSTR			;MAKE SURE THE FIRST ONE WAS STRING
	XCHG				;[D,E]=TXTPTR
	LHLD	FACLO			;GET PTR AT STRING DESCRIPTOR
	XTHL				;GET FUNCTION #
					;SAVE THE STRING PTR
	PUSH	H			;PUT THE FUNCTION # ON
	XCHG				;[H,L]=TXTPTR
	CALL	GETBYT			;[E]=VALUE OF FORMULA
	XCHG				;TEXT POINTER INTO [D,E]
					;[H,L]=INT VALUE OF SECOND ARGUMENT
	XTHL				;SAVE INT VALUE OF SECOND ARG
					;[H,L]=FUNCTION NUMBER
	JMP	FINGO			;DISPATCH TO FUNCTION
OKNORM:
	CALL	PARCHK			;CHECK OUT THE ARGUMENT
					;AND MAKE SURE ITS FOLLOWED BY ")"
	XTHL				;[H,L]=FUNCTION # AND SAVE TEXT POINTER
;
; CHECK IF SPECIAL COERCION MUST BE DONE FOR ONE OF THE TRANSCENDENTAL
; FUNCTIONS (RND, SQR, COS, SIN, TAN, ATN, LOG, AND EXP)
; THESE FUNCTIONS DO NOT LOOK AT VALTYP, BUT RATHER ASSUME THE
; ARGUMENT PASSED IN THE FAC IS SINGLE PRECISION, SO FRCSNG
; MUST BE CALLED BEFORE DISPATCHING TO THEM.
;
	MOV	A,L			;[A]=FUNCTION NUMBER
BOTCON	SET	(SQRTK-ONEFUN)*2
	CPI	BOTCON			;LESS THAN SQUARE ROOT?
	JC	NOTFRF			;DON'T FORCE THE ARGUMENT
TOPCON	SET	(ATNTK-ONEFUN)*2+1
	CPI	TOPCON			;BIGGER THAN ARC-TANGENT?
	PUSH	H			;SAVE THE FUNCTION NUMBER
	CC	FRCSNG			;IF NOT, FORCE FAC TO SINGLE-PRECISION
	POP	H			;RESTORE THE FUNCTION NUMBER
NOTFRF:
	LXI	D,LABBCK		;RETURN ADDRESS
	PUSH	D			;MAKE THEM REALLY COME BACK
	MVI	A,1			;FUNCTION SHOULD ONLY PRINT OVERFLOW ONCE
	STA	FLGOVC
FINGO:	LXI	B,FUNDSP		;FUNCTION DISPATCH TABLE
DISPAT:	DAD	B			;ADD ON THE OFFSET
	MOV	C,M			;FASTER THAN PUSHM
	INX	H
	MOV	H,M
	MOV	L,C
	PCHL				;GO PERFORM THE FUNCTION


; THE FOLOWING ROUTINE IS CALLED FROM FIN IN F4
; TO SCAN LEADING SIGNS FOR NUMBERS. IT WAS MOVED
; TO F3 TO ELIMINATE BYTE EXTERNALS
	PUBLIC	MINPLS
MINPLS:
	DCR	D			;SET SIGN OF EXPONENT FLAG
	CPI	MINUTK			;NEGATIVE EXPONENT?
	RZ	
	CPI	'-'
	RZ	
	INR	D			;NO, RESET FLAG
	CPI	'+'
	RZ	
	CPI	PLUSTK			;IGNORE "+"
	RZ	
	DCX	H			;CHECK IF LAST CHARACTER WAS A DIGIT
	RET				;RETURN WITH NON-ZERO SET
	PAGE
	SUBTTL	MORE FORMULA EVALUATION - LOGICAL, RELATIONAL OPS
DOCMP:	INR	A			;SETUP BITS
	ADC	A			;4=LESS 2=EQUAL 1=GREATER
	POP	B			;WHAT DID HE WANT?
	ANA	B			;ANY BITS MATCH?
	ADI	255			;MAP 0 TO 0
	SBB	A			;AND ALL OTHERS TO 377
	CALL	CONIA			;CONVERT [A] TO AN INTEGER SIGNED
	JMP	RETAPG			;RETURN FROM OPERATOR APPLICATION
					;PLACE SO THE TEXT POINTER
					;WILL GET SET UP TO WHAT IT WAS
					;WHEN LPOPER RETURNED.
NOTER:	MVI	D,90			;"NOT" HAS PRECEDENCE 90, SO
	CALL	LPOPER			;FORMULA EVALUATION IS ENTERED WITH A DUMMY
					;ENTRY OF 90 ON THE STACK
	CALL	FRCINT			;COERCE THE ARGUMENT TO INTEGER
	MOV	A,L			;COMPLEMENT [H,L]
	CMA	
	MOV	L,A
	MOV	A,H
	CMA	
	MOV	H,A
	SHLD	FACLO			;UPDATE THE FAC
	POP	B			;FRMEVL, AFTER SEEING THE PRECEDENCE
					;OF 90 THINKS IT IS APPLYING AN OPERATOR
					;SO IT HAS THE TEXT POINTER IN TEMP2 SO

RETAPG:	JMP	RETAOP			;RETURN TO REFETCH IT
GETYPR:	LDA	VALTYP			;REPLACEMENT FOR "GETYPE" RST
	CPI	8
;
; CONTINUATION OF GETYPE RST
;

CGETYP:	JNC	NCASE			;SPLIT OFF NO CARRY CASE
	SUI	3			;SET A CORRECTLY
	ORA	A			;NOW SET LOGICAL'S OK
	STC				;CARRY MUST BE SET
	RET				;ALL DONE

NCASE:	SUI	3			;SUBTRACT CORRECTLY
	ORA	A			;SET CC'S PROPERLY
	RET				;RETURN

;
; DANDOR APPLIES THE "AND" AND "OR" OPERATORS
; AND SHOULD BE USED TO IMPLEMENT ALL LOGICAL OPERATORS.
; WHENEVER AN OPERATOR IS APPLIED, ITS PRECEDENCE IS IN [B].
; THIS FACT IS USED TO DISTINGUISH BETWEEN "AND" AND "OR".
; THE RIGHT HAND ARGUMENT IS COERCED TO INTEGER, JUST AS
; THE LEFT HAND ONE WAS WHEN IT WAS PUSHED ON THE STACK.
;
DANDOR:	PUSH	B			;SAVE THE PRECEDENCE "OR"=70
	CALL	FRCINT			;COERCE RIGHT HAND ARGUMENT TO INTEGER
	POP	PSW			;GET BACK THE PRECEDENCE TO DISTINGUISH
					;"AND" AND "OR"
	POP	D			;POP OFF THE LEFT HAND ARGUMENT
	CPI	122			;IS THE OPERATOR "MOD"?
	JZ	IMOD			;IF SO, USE MONTE'S SPECIAL ROUTINE
	CPI	123			;IS THE OPERATOR "IDIV"?
	JZ	IDIV			;LET MONTE HANDLE IT
	LXI	B,GIVINT		;PLACE TO RETURN WHEN DONE
	PUSH	B			;SAVE ON STACK
	CPI	70			;SET ZERO FOR "OR"
	JNZ	NOTOR
	MOV	A,E			;SETUP LOW IN [A]
	ORA	L
	MOV	L,A
	MOV	A,H
	ORA	D
	RET				;RETURN THE INTEGER [A,L]
NOTOR:
	CPI	80			;AND?
	JNZ	NOTAND
	MOV	A,E
	ANA	L
	MOV	L,A
	MOV	A,H
	ANA	D
	RET				;RETURN THE INTEGER [A,L]

NOTAND:	CPI	60			;XOR?
	JNZ	NOTXOR			;NO
	MOV	A,E
	XRA	L
	MOV	L,A
	MOV	A,H
	XRA	D
	RET	

NOTXOR:	CPI	50			;EQV?
	JNZ	NOTEQV			;NO
	MOV	A,E			;LOW PART
	XRA	L
	CMA	
	MOV	L,A
	MOV	A,H
	XRA	D
	CMA	
	RET	
;FOR "IMP" USE A IMP B = NOT(A AND NOT(B))
NOTEQV:	MOV	A,L			;MUST BE "IMP"
	CMA	
	ANA	E
	CMA	
	MOV	L,A
	MOV	A,H
	CMA	
	ANA	D
	CMA	
	RET	
	PAGE
;
; THIS ROUTINE SUBTRACTS [D,E] FROM [H,L]
; AND FLOATS THE RESULT LEAVING IT IN FAC.
;
GIVDBL:	MOV	A,L			;[H,L]=[H,L]-[D,E]
	SUB	E
	MOV	L,A
	MOV	A,H
	SBB	D
	MOV	H,A			;SAVE HIGH BYTE IN [H]
	JMP	INEG2			;FLOAT 2 BYTE UNSIGNED INT
LPOS:	LDA	LPTPOS
	JMP	SNGFLI
POS:
	LDA	TTYPOS			;GET TELETYPE POSITION
					;SEE WHERE WE ARE
SNGFLI:

					;IN ADDS VERSION TAB POSITIONS START AT COLUMN 1.
	INR	A
	PUBLIC	SNGFLT
SNGFLT:	MOV	L,A			;MAKE [A] AN UNSIGNED INTEGER
	XRA	A
GIVINT:	MOV	H,A
	JMP	MAKINT
	PAGE
	SUBTTL	USER DEFINED (USR) ASSEMBLY LANGUAGE FUNCTION CODE
USRFN:	CALL	SCNUSR			;SCAN THE USR#
	PUSH	D			;SAVE POINTER
	CALL	PARCHK			;EAT LEFT PAREN AND FORMULA
	XTHL				;SAVE TEXT POINTER & GET INDEX INTO USRTAB
	MOV	C,M			;GET DISPATCH ADRESS
	INX	H			;BUMP POINTER
	MOV	B,M			;PICK UP 2ND BYTE OF ADDRESS
	LXI	H,POPHRT		;GET ADDRESS OF POP H RET
	PUSH	H			;PUSH IT ON
	PUSH	B			;SAVE ADDRESS OF USR ROUTINE
	LDA	VALTYP			;GET ARGUMENT TYPE IN [A]
	PUSH	PSW			;SAVE VALTYP
	CPI	3			;STRING??
	CZ	FREFAC			;FREE IT UP
	POP	PSW			;GET BACK VALTYP
	XCHG				;MOVE POSSIBLE DESC. POINTER TO [D,E]
	LXI	H,FACLO			;POINTER TO FAC IN [H,L]
	RET				;CALL USR ROUTINE
SCNUSR:	CALL	CHRGTR			;GET A CHAR
	LXI	B,0			;ASSUME USR0
	CPI	ONECON+10		;SINGLE BYTE INT EXPECTED
	JNC	NOARGU			;NO, MUST BE DEFAULTING TO USR0
	CPI	ONECON			;IS IT SMALLER THAN ONECON
	JC	NOARGU			;YES, ASSUME TRYING TO DEFAULT TO USR0
USERCN:	CALL	CHRGTR			;SCAN PAST NEXT CHAR
	LDA	CONLO			;GET VALUE OF 1 BYTER
					;YUP
	ORA	A			;MAKE SURE CARRY IS OFF
	RAL				;MULTIPLY BY 2
	MOV	C,A			;SAVE OFFSET IN [C]
NOARGU:	XCHG				;SAVE TEXT POINTER IN [D,E]
	LXI	H,USRTAB		;GET START OF TABLE
	DAD	B			;ADD ON OFFSET
	XCHG				;RESTORE TEXT POINTER, ADDRESS TO [D,E]
	RET				;RETURN FROM SCAN ROUTINE

DEFUSR:	CALL	SCNUSR			;SCAN THE USR NAME
	PUSH	D			;SAVE POINTER TO USRTAB ENTRY
	CALL	SYNCHR
	DB	EQULTK			;MUST HAVE EQUAL SIGN
	CALL	GETIN2			;GET THE ADDRESS
	XTHL				;TEXT POINTER TO STACK, GET ADDRESS
	MOV	M,E			;SAVE USR CALL ADDRESS
	INX	H			;BUMP POINTER
	MOV	M,D			;SAVE HIGH BYTE OF ADDRESS
	POP	H			;RESTORE TEXT POINTER
	RET				;RETURN TO NEWSTT

	PAGE
	SUBTTL	SIMPLE-USER-DEFINED-FUNCTION CODE
;
; IN THE 8K VERSION (SEE LATER COMMENT FOR EXTENDED)
; NOTE ONLY SINGLE ARGUMENTS ARE ALLOWED TO FUNCTIONS
; AND FUNCTIONS MUST BE OF THE SINGLE LINE FORM:
; DEF FNA(X)=X^2+X-2
; NO STRINGS CAN BE INVOLVED WITH THESE FUNCTIONS
;
; IDEA: CREATE A FUNNY SIMPLE VARIABLE ENTRY
; WHOSE FIRST CHARACTER (SECOND WORD IN MEMORY)
; HAS THE 200 BIT SET.
; THE VALUE WILL BE:
;
; 	A TXTPTR TO THE FORMULA
;	THE NAME OF THE PARAMETER VARIABLE
;
; FUNCTION NAMES CAN BE LIKE "FNA4"
;

DEF:
	CPI	USRTK			;DEFINING THE CALL ADDRESS OF USR ROUTINE?
	JZ	DEFUSR			;YES, DO IT
	CALL	GETFNM			;GET A POINTER TO THE FUNCTION NAME
	CALL	ERRDIR			;DEF IS "ILLEGAL DIRECT"
					;MEMORY, RESTORE THE TXTPTR
					;AND GO TO "DATA" SKIPPING THE
					;REST OF THE FORMULA
	XCHG				;[D,E] = THE TEXT POINTER AFTER THE FUNCTION
					;NAME AND [H,L] = POINTER AT PLACE TO STORE
					;VALUE OF THE FUNCTION VARIABLE
	MOV	M,E			;SAVE THE TEXT POINTER AS THE VALUE
	INX	H
	MOV	M,D
	XCHG				;RESTORE THE TEXT POINTER TO [H,L]
	MOV	A,M			;GET NEXT CHAR
	CPI	'('			;DOES THIS FUNCTION HAVE ARGS?
	JNZ	DATA			;NO
	CALL	CHRGTR
SCNLIS:	CALL	PTRGET			;GET POINTER TO DUMMY VAR(CREATE VAR)
	MOV	A,M			;GET TERMINATOR
	CPI	')'			;END OF ARG LIST?
	JZ	DATA			;YES
	CALL	SYNCHR
	DB	44			;"," MUST FOLLOW THEN
	JMP	SCNLIS

FNDOER:	CALL	GETFNM			;GET A POINTER TO
	LDA	VALTYP			;FIND OUT WHAT KIND OF FUNCTION IT IS
	ORA	A			;PUSH THIS [A] ON WITH A PSW WITH CARRY OFF
					;SO THAT WHEN VALUES ARE BEING POPPED OFF
					;AND RESTORED TO PARAMETERS WE WILL KNOW
					;WHEN TO STOP
					;WHEN A VALTYP IS POPPED OFF WITH
					;CARRY OFF
	PUSH	PSW			;SAVE SO THAT THE FINAL RESULT WILL
					;BE COERCED TO THE FUNCTION TYPE
	SHLD	TEMP2			;SAVE THE TEXT POINTER THAT POINTS PAST
					;THE FUNCTION NAME IN THE CALL
	XCHG				;[H,L]=A POINTER TO THE VALUE OF FUNCTION
	MOV	A,M			;[H,L]=VALUE OF THE FUNCTION
	INX	H			;WHICH IS A TEXT POINTER AT THE FORMAL
	MOV	H,M			;PARAMETER LIST IN THE DEFINITION
	MOV	L,A
	ORA	H			;A ZERO TEXT POINTER MEANS THE FUNCTION
					;WAS NEVER DEFINED
	JZ	UFERR			;IF SO, GIVEN AN "UNDEFINED FUNCTION" ERROR
	MOV	A,M			;SEE IF THERE ARE ANY PARAMETERS
	CPI	'('			;PARAMETER LIST STARTS WITH "(""
	JNZ	FINVLS			;SKIP OVER PARAMETER SETUP
	CALL	CHRGTR			;GO PAST THE "("
	SHLD	TEMP3			;SAVE THE TEXT POINTER TO THE START OF THE
	XCHG				;PARAMETER LIST.
	LHLD	TEMP2			;NOW GET THE TEXT-POINTER FROM THE CALL
					;WHICH IS POINTING JUST PAST THE
					;FUNCTION NAME AT THE ARGUMENT LIST
	CALL	SYNCHR
	DB	'('			;MAKE SURE THE ARGUMENT LIST IS THERE
	XRA	A			;INDICATE END OF VALUES TO ASSIGN
	PUSH	PSW
	PUSH	H			;SAVE THE CALLERS TEXT POINTER
	XCHG				;GET THE POINTER TO THE BEGINNING OF THE
					;PARAMETER LIST
ASGMOR:	MVI	A,128			;OUTLAW ARRAYS WHEN SCANNING
	STA	SUBFLG			;PARAMETERS
	CALL	PTRGET			;READ A PARAMETER
	XCHG				;[D,E]=PARAMETER LIST TEXT,[H,L]=VARIABLE POINTER
	XTHL				;SAVE THE VARIABLES POSITION AND
					;GET THE POINTER AT THE ARG LIST
	LDA	VALTYP			;AND ITS TYPE (FOR COERCION)
	PUSH	PSW
	PUSH	D			;SAVE THE TEXT POINTER INTO THE PARAMETER
	CALL	FRMEVL			;EVALUATE THE ARGUMENT
	SHLD	TEMP2			;SAVE THE ARGUMENT LIST POINTER
	POP	H			;AND THE PARAMETER LIST POINTER
	SHLD	TEMP3
	POP	PSW			;GET THE VALUE TYPE
	CALL	DOCNVF			;COERCE THE ARGUMENT
	MVI	C,4			;MAKE SURE THERE IS ROOM FOR THE VALUE
	CALL	GETSTK
	LXI	H,0-8			;SAVE EIGHT PLACES
	DAD	SP
	SPHL	
	CALL	VMOVMF			;PUT VALUE INTO RESERVED PLACE IN STACK
	LDA	VALTYP			;SAVE TYPE FOR ASSIGNMENT
	PUSH	PSW
	LHLD	TEMP2			;REGET THE ARGUMENT LIST POINTER
	MOV	A,M			;SEE WHAT COMES AFTER THE ARGUMENT FORMULA
	CPI	')'			;IS THE ARGUMENT LIST ENDING?
	JZ	POPASG			;MAKE SURE THE ARGUMENT LIST ALSO ENDED
	CALL	SYNCHR
	DB	54O			;SKIP OVER ARGUMENT COMMA
	PUSH	H			;SAVE THE ARGUMENT LIST TEXT POINTER
	LHLD	TEMP3			;GET THE TEXT POINTER INTO THE DEFINTION'S
					;PARAMETER LIST
	CALL	SYNCHR
	DB	54O			;SKIP OVER THE PARAMETER LIST COMMA
	JMP	ASGMOR			;AND BIND THE REST OF THE PARAMETERS
POPAS2:	POP	PSW			;IF ASSIGNMENT IS SUCESSFUL UPDATE PRMLN2
	STA	PRMLN2			;INDICATE NEW VARIABLE IS IN PLACE
POPASG:	POP	PSW			;GET THE VALUE TYPE
	ORA	A
	JZ	FINASG			;ZERO MEANS NO MORE LEFT TO POP AND ASSIGN
	STA	VALTYP
	LXI	H,0			;POINT INTO STACK
	DAD	SP			;TO GET SAVED VALUE
	CALL	VMOVFM			;PUT VALUE INTO FAC
	LXI	H,0+8			;FREE UP STACK AREA
	DAD	SP
	SPHL	
	POP	D			;GET PLACE TO STORE TO
	MVI	L,3			;CALCULATE THE SIZE OF THE LOOKS (NAME)
LPSIZL:	INR	L			;INCREMENT SIZE
	DCX	D			;POINT AT PREVIOUS CHARACTER
	LDAX	D			;SEE IF IT IS THE LENGTH OR ANOTHER CHARACTER
	ORA	A
	JM	LPSIZL			;HIGH BIT INDICATES STILL PART OF NAME
	DCX	D			;BACK UP OVER LOOKS
	DCX	D
	DCX	D
	LDA	VALTYP			;GET SIZE OF VALUE
	ADD	L			;ADD ON SIZE OF NAME
	MOV	B,A			;SAVE TOTAL LENGTH IN [B]
	LDA	PRMLN2			;GET CURRENT SIZE OF BLOCK
	MOV	C,A			;SAVE IN [C]
	ADD	B			;GET POTENTIAL NEW SIZE
	CPI	PRMSIZ			;CAN'T EXCEED ALLOCATED STORAGE
	JNC	FCERR
	PUSH	PSW			;SAVE NEW SIZE
	MOV	A,L			;[A]=SIZE OF NAME
	MVI	B,0			;[B,C]=SIZE OF PARM2
	LXI	H,PARM2			;BASE OF PLACE TO STORE INTO
	DAD	B			;[H,L]=PLACE TO START THE NEW VARIABLE
	MOV	C,A			;[B,C]=LENGTH OF NAME OF VARIABLE
	CALL	BCTRAN			;PUT IN THE NEW NAME
	LXI	B,POPAS2		;PLACE TO RETURN AFTER ASSIGNMENT
	PUSH	B
	PUSH	B			;SAVE EXTRA ENTRY ON STACK
	JMP	LETCN4			;PERFORM ASSIGNMENT ON [H,L] (EXTRA POP D)
FINASG:	LHLD	TEMP2			;GET ARGUMENT LIST POINTER
	CALL	CHRGTR			;SKIP OVER THE CLOSING PARENTHESIS
	PUSH	H			;SAVE THE ARGUMENT TEXT POINTER
	LHLD	TEMP3			;GET THE PARAMETER LIST TEXT POINTER
	CALL	SYNCHR
	DB	')'			;MAKE SURE THE PARAMETER LIST
					;ENDED AT THE SAME TIME
	DB	76Q			;SKIP THE NEXT BYTE WITH "MVI AL,"
FINVLS:	PUSH	D			;HERE WHEN THERE WERE NO ARGUMENTS
					;OR PARAMETERS
					;SAVE THE TEXT POINTER OF THE CALLER
	SHLD	TEMP3			;SAVE THE TEXT POINTER OF THE FUNCTION
	LDA	PRMLEN			;PUSH PARM1 STUFF ONTO THE STACK
	ADI	4			;WITH PRMLEN AND PRMSTK (4 BYTES EXTRA)
	PUSH	PSW			;SAVE THE NUMBER OF BYTES
	RRC				;NUMBER OF TWO BYTE ENTRIES IN [A]
	MOV	C,A
	CALL	GETSTK			;IS THERE ROOM ON THE STACK?
	POP	PSW			;[A]=AMOUNT TO PUT ONTO STACK
	MOV	C,A
	CMA				;COMPLEMENT [A]
	INR	A
	MOV	L,A
	MVI	H,255
	DAD	SP
	SPHL				;SET UP NEW STACK
	PUSH	H			;SAVE THE NEW VALUE FOR PRMSTK
	LXI	D,PRMSTK		;FETCH DATA FROM HERE
	CALL	BCTRAN
	POP	H
	SHLD	PRMSTK			;LINK PARAMETER BLOCK FOR GARBAGE COLLECTION
	LHLD	PRMLN2			;NOW PUT PARM2 INTO PARM1
	SHLD	PRMLEN			;SET UP LENGTH
	MOV	B,H
	MOV	C,L			;[B,C]=TRANSFER COUNT
	LXI	H,PARM1
	LXI	D,PARM2
	CALL	BCTRAN
	MOV	H,A			;CLEAR OUT PARM2
	MOV	L,A
	SHLD	PRMLN2
	LHLD	FUNACT			;INCREMENT FUNCTION COUNT
	INX	H
	SHLD	FUNACT
	MOV	A,H
	ORA	L			;SET UP ACTIVE FLAG NON-ZERO
	STA	NOFUNS
	LHLD	TEMP3			;GET BACK THE FUNCTION DEFINITION TEXT POINTER
;	DCX	H		;DETECT A MULTI-LINE FUNCTION
;	CHRGET			;IF THE DEFINITION ENDS NOW
;	JZ	MULFUN		;IF ENDS, ITS A MULTI-LINE FUNCTION
					;SKIP OVER THE "=" IN THE DEFINITION
	CALL	FRMEQL			;AND EVALUATE THE DEFINITION FORMULA
					;CAN HAVE RECURSION AT THIS POINT
	DCX	H
	CALL	CHRGTR			;SEE IF THE STATEMENT ENDED RIGHT
	JNZ	SNERR			;THIS IS A CHEAT, SINCE THE LINE
					;NUMBER OF THE ERROR WILL BE THE CALLERS
					;LINE # INSTEAD OF THE DEFINITIONS LINE #
	CALL	GETYPR			;SEE IT THE RESULT IS A STRING
	JNZ	NOCPRS			;WHOSE DESCRIPTOR IS ABOUT TO BE WIPED OUT
					;BECAUSE IT IS SITTING IN PARM1 (THIS
					; HAPPENS IT THE FUNCTION IS A PROJECTION
					; FUNCTION ON A STRING ARGUMENT)
	LXI	D,DSCTMP		;DSCTMP IS PAST ALL THE TEMP AREA
	LHLD	FACLO			;GET THE ADDRESS OF THE DESCRIPTOR
	CALL	DCOMPR
	JC	NOCPRS			;RESULT IS A TEMP - NO COPY NESC
	CALL	STRCPY			;MAKE A COPY IN DSCTMP
	CALL	PUTTMP			;PUT RESULT IN A TEMP AND MAKE FACLO POINT AT IT
NOCPRS:	LHLD	PRMSTK			;GET PLACE TO RESTORE PARM1 FROM STACK
	MOV	D,H
	MOV	E,L
	INX	H			;POINT AT LENGTH
	INX	H
	MOV	C,M			;[B,C]=LENGTH
	INX	H
	MOV	B,M
	INX	B			;INCLUDE EXTRA BYTES
	INX	B
	INX	B
	INX	B
	LXI	H,PRMSTK		;PLACE TO STORE INTO
	CALL	BCTRAN
	XCHG				;[D,E]=PLACE TO RESTORE STACK TO
	SPHL	
	LHLD	FUNACT			;DECREASE ACTIVE FUNCTION COUNT
	DCX	H
	SHLD	FUNACT
	MOV	A,H
	ORA	L			;SET UP FUNCTION FLAG
	STA	NOFUNS
	POP	H			;GET BACK THE CALLERS TEXT POINTER
	POP	PSW			;GET BACK THE TYPE OF THE FUNCTION
DOCNVF:	PUSH	H			;SAVE THE TEXT POINTER
	ANI	7			;SETUP DISPATCH TO FORCE
					;FORMULA TYPE TO CONFORM
					;TO THE VARIABLE ITS BEING ASSIGNED TO
	LXI	H,FRCTBL		;TABLE OF FORCE ROUTINES
	MOV	C,A			;[B,C]=TWO BYTE OFFSET
	MVI	B,0
	DAD	B
	CALL	DISPAT			;DISPATCH
	POP	H			;GET BACK THE TEXT POINTER
	RET	
;
; BLOCK TRANSFER ROUTINE WITH SOURCE IN [D,E] DESTINATION IN [H,L]
; AND COUNT IN [B,C]. TRANSFER IS FORWARD.
;
BCTRAL:	LDAX	D
	MOV	M,A
	INX	H
	INX	D
	DCX	B
BCTRAN:	MOV	A,B
	ORA	C
	JNZ	BCTRAL
	RET	
;
; SUBROUTINE TO SEE IF WE ARE IN DIRECT MODE AND
; COMPLAIN IF SO
;
ERRDIR:	PUSH	H			;SAVE THEIR [H,L]
	LHLD	CURLIN			;SEE WHAT THE CURRENT LINE IS
	INX	H			;DIRECT IS 65,535 SO NOW 0
	MOV	A,H
	ORA	L			;IS IT ZERO NOW?
	POP	H
	RNZ				;RETURN IF NOT
	MVI	E,ERRID			;"ILLEGAL DIRECT" ERROR
	JMP	ERROR
;
; SUBROUTINE TO GET A POINTER TO A FUNCTION NAME
;
GETFNM:	CALL	SYNCHR
	DB	FNTK			;MUST START WITH "FN"
	MVI	A,128			;DONT ALLOW AN ARRAY
	STA	SUBFLG			;DON'T RECOGNIZE THE "(" AS
					;THE START OF AN ARRAY REFEREENCE
	ORA	M			;PUT FUNCTION BIT ON
	MOV	C,A			;GET FIRST CHARACTER INTO [C]

	JMP	PTRGT2
	PAGE
	SUBTTL	STRING FUNCTIONS - LEFT HAND SIDE MID$
ISMID$:	CPI	377O-$END		;LHS MID$?
	JNZ	SNERR			;NO, ERROR.
	INX	H			;POINT TO NEXT CHAR
	MOV	A,M			;GET FN DESCRIPTOR
	CPI	MIDTK			;IS IT MID?
	JNZ	SNERR			;NO, ERROR
	INX	H			;BUMP POINTER
	EXTRN	LHSMID			;CODE IS IN BISTRS.MAC
	JMP	LHSMID
	PAGE
	SUBTTL	INP, OUT, WAIT, CONSOLE, WIDTH
;
; THE FOLLOWING FUNCTIONS ALLOW THE 
; USER FULL ACCESS TO THE ALTAIR I/O PORTS
; INP(CHANNEL#) RETURNS AN INTEGER WHICH IS THE STATUS
; OF THE CHANNEL. OUT CHANNEL#,VALUE PUTS OUT THE INTEGER
; VALUE ON CHANNEL #. IT IS A STATEMENT, NOT A FUNCTION.
;
FNINP:	CALL	CONINT			;GET INTEGER CHANNEL #
	STA	INPWRD+1		;GEN INP INSTR
INPWRD:	IN	0			;THE INP INSTR
	JMP	SNGFLT			;SNGFLT RESULT

FNOUT:	CALL	SETIO			;GET READY
					;DO THE "OUT" AND RETURN
	PUBLIC	OUTWRD
OUTWRD:	OUT	0			;DO IT
	RET	
;
; THE WAIT CHANNEL#,MASK,MASK2 WAITS UNTIL THE STATUS
; RETURNED BY CHANNEL# IS NON ZERO WHEN XORED WITH MASK2
; AND THEN ANDED WITH MASK. IF MASK2 IS NOT PRESENT IT IS ASSUMED
; TO BE ZERO.
;
FNWAIT:	CALL	SETIO			;SET UP FOR WAIT
	PUSH	PSW			;SAVE THE MASK
	MVI	E,0			;DEFAULT MASK2 TO ZERO
	DCX	H
	CALL	CHRGTR			;SEE IF THE STATEMENT ENDED
	JZ	NOTTHR			;IF NO THIRD ARGUMENT SKIP THIS
	CALL	SYNCHR
	DB	44			;MAKE SURE THERE IS A ","
	CALL	GETBYT
NOTTHR:	POP	B			;REGET THE "AND" MASK
LOPINP:
STAINP:	IN	0			;THE INPUT INSTR
	XRA	E			;XOR WITH MASK2
	ANA	B			;AND WITH MASK
	JZ	LOPINP			;LOOP UNTIL RESULT IS NON-ZERO
					;NOTE: THIS LOOP CANNOT BE CONTROL-C'ED
					;UNLESS THE WAIT IS BEING DONE ON CHANNEL
					;ZERO. HOWEVER A RESTART AT 0 IS OK.
	RET	
CONSOL:	JMP	SNERR
; THIS IS THE WIDTH (TERMINAL WIDTH) COMMAND COMMAND
; ARG MUST BE .GT. 15 AND .LT. 255

WIDTH:
	CPI	$LPRIN			;WIDTH LPRINT?
	JNZ	NOTWLP			;NO
	CALL	CHRGTR			;FETCH NEXT CHAR
	CALL	GETBYT			;GET WIDTH
	STA	LPTSIZ			;SAVE IT
	CALL	MORCP3			;COMPUTE LAST COMMA COLUMN
	STA	NLPPOS			;SAVE IT
	RET	
NOTWLP:
	CALL	GETBYT			;GET THE CHANNEL #
	STA	LINLEN			;SETUP THE LINE LENGTH
MORCP2:
	CALL	MORCP3
	STA	CLMLST			;SET LAST COMMA POSIT
	RET				;DONE
MORCP3:	SUI	CLMWID
	JNC	MORCP3
	ADI	2*CLMWID
	CMA	
	INR	A
	ADD	E
	RET				;BACK TO NEWSTT
	PUBLIC	GETIN2,GETINT
GETINT:	CALL	CHRGTR
GETIN2:	CALL	FRMEVL			;EVALUATE A FORMULA
INTFR2:	PUSH	H			;SAVE THE TEXT POINTER
	CALL	FRCINT			;CONVERT THE FORMULA TO AN INTEGER IN [H,L]
	XCHG				;PUT THE INTEGER INTO [D,E]
	POP	H			;RETSORE THE TEXT POINTER
	MOV	A,D			;SET THE CONDITION CODES ON THE HIGH ORDER
	ORA	A
	RET	
SETIO:	CALL	GETBYT			;GET INTEGER CHANNEL NUMBER IN [A]
	STA	STAINP+1		;SETUP "WAIT"
	STA	OUTWRD+1		;SETUP "OUT"
	CALL	SYNCHR
	DB	44			;MAKE SURE THERE IS A COMMA
	JMP	GETBYT
					;"MVI B," AROUND THE CHRGET (MVI AH,)
GTBYTC:	CALL	CHRGTR
	PUBLIC	GETBYT,CONINT
GETBYT:	CALL	FRMEVL			;EVALUATE A FORMULA
CONINT:	CALL	INTFR2			;CONVERT THE FAC TO AN INTEGER IN [D,E]
					;AND SET THE CONDITION CODES BASED
					;ON THE HIGH ORDER
	JNZ	FCERR			;WASN'T ERROR
	DCX	H			;ACTUALLY FUNCTIONS CAN GET HERE
					;WITH BAD [H,L] BUT NOT SERIOUS
					;SET CONDITION CODES ON TERMINATOR
	CALL	CHRGTR
	MOV	A,E			;RETURN THE RESULT IN [A] AND [E]
	RET	

	PAGE
	SUBTTL	EXECUTE BASIC PROGRAM ON PROM
					;GO RUN IT

	PAGE
	SUBTTL	EXTENDED LIST, DELETE, LLIST
LLIST:

					;PRTFLG=1 FOR REGULAR LIST
	MVI	A,1			;GET NON ZERO VALUE
	STA	PRTFLG			;SAVE IN I/O FLAG (END OF LPT)
LIST:
	POP	B			;GET RID OF NEWSTT RETURN ADDR
	CALL	SCNLIN			;SCAN LINE RANGE
	PUSH	B			;SAVE POINTER TO 1ST LINE
	CALL	PROCHK			;DONT EVEN LIST LINE #
LIST4:	LXI	H,0+65535		;DONT ALLOW ^C TO CHANGE
	SHLD	CURLIN			;CONTINUE PARAMETERS
	POP	H			;GET POINTER TO LINE
	POP	D			;GET MAX LINE # OFF STACK
	MOV	C,M			;[B,C]=THE LINK POINTING TO THE NEXT LINE
	INX	H
	MOV	B,M
	INX	H
	MOV	A,B			;SEE IF END OF CHAIN
	ORA	C
	JZ	READY			;LAST LINE, STOP.  
	PUSH	H			;DON'T ALLOW ^C
	LHLD	PTRFIL
	MOV	A,H			;ON FILE OUTPUT
	ORA	L
	POP	H
	CZ	ISCNTC
					;CHECK FOR CONTROL-C
	PUSH	B			;SAVE LINK
	MOV	C,M			;PUSH THE LINE #
	INX	H
	MOV	B,M
	INX	H
	PUSH	B
	XTHL				;GET LINE # INTO [H,L]
	XCHG				;GET MAX LINE IN [H,L]
	CALL	DCOMPR			;PAST LAST LINE IN RANGE?
	POP	B			;TEXT POINTER TO [B,C]
	JC	STPRDY			;IF PAST, THEN DONE LISTING.
	XTHL				;SAVE MAX ON BOTTOM OF STACK
	PUSH	H			;SAVE LINK ON TOP
	PUSH	B			;SAVE TEXT POINTER BACK
	XCHG				;GET LINE # IN [H,L]
	SHLD	DOT			;SAVE FOR LATER EDIT OR LIST
					;AND WE WANT [H,L] ON THE STACK
	CALL	LINPRT			;PRINT AS INT WITHOUT LEADING SPACE
	POP	H
	MOV	A,M			;GET BYTE FROM LINE
	CPI	9			;IS IT A TAB?
	JZ	NOSPAL			;THEN DONT PRINT SPACE
	MVI	A,' '
	CALL	OUTDO			;PRINT A SPACE AFTER THE LINE #
NOSPAL:	CALL	BUFLIN			;UNPACK THE LINE INTO BUF
	LXI	H,BUF			;POINT AT THE START OF THE UNPACKED CHARACTERS
	CALL	LISPRT			;PRINT THE LINE
	CALL	CRDO			;PRINT CRLF
	JMP	LIST4			;GO BACK FOR NEXT LINE
LISPRT:	MOV	A,M
	ORA	A			;SET CC
	RZ				;IF =0 THEN END OF LINE
	EXTRN	OUTCH1
	CALL	OUTCH1			;OUTPUT CHAR AND CHECK FOR LF
	INX	H			;INCR POINTER
	JMP	LISPRT			;PRINT NEXT CHAR

BUFLIN:	LXI	B,BUF			;GET START OF TEXT BUFFER
	MVI	D,BUFLEN		;GET ITS LENGTH INTO [D]
	XRA	A			;SET ON SPECIAL CHAR FOR SPACE INSERTION
	STA	TEMPA
	CALL	PROCHK			;ONLY PROCEED IF OK
	JMP	PLOOP2			;START HERE

PLOOP:	INX	B			;INCREMENT DEPOSIT PTR.
	INX	H			;ADVANCE TEXT PTR
	DCR	D			;BUMP DOWN COUNT
	RZ				;IF BUFFER FULL, RETURN
PLOOP2:	MOV	A,M			;GET CHAR FROM BUF
	ORA	A			;SET CC'S
	STAX	B			;SAVE THIS CHAR
	RZ				;IF END OF SOURCE BUFFER, ALL DONE.
	CPI	OCTCON			;IS IT SMALLER THAN SMALLEST EMBEDDED CONSTANT?
	JC	NTEMBL			;YES, DONT TREAT AS ONE
	CPI	DBLCON+1		;IS IT EMBEDED CONSTANT?
	MOV	E,A			;SAVE CHAR IN [E]
	JC	PRTVAR			;PRINT LEADING SPACE IF NESC.
NTEMBL:	ORA	A			;SET CC'S
	JM	PLOOPR			;RESERVED WORD OF SOME KIND
	MOV	E,A			;SAVE CHAR IN [E]
	CPI	'.'			;DOT IS PART OF VAR NAME
	JZ	PRTVAR
	CALL	TSTANM			;IS CHAR ALPHANUMERIC
	JNC	PRTVAR			;ALPHANUMERIC
	XRA	A			;MAKE SPECIAL
	JMP	PLOOPH
PRTVAR:	LDA	TEMPA			;WHAT DID WE DO LAST?
	ORA	A			;SET CONDITION CODES
	JZ	PLOOPG			;SPECIAL, NEVER INSERT SPACE
	INR	A			;IN RESERVED WORD?
	JNZ	PLOOPG			;NO
	MVI	A,' '			;PUT OUT SPACE BEFORE RESWORD
	STAX	B			;STORE IN BUFFER
	INX	B			;INCRMENT POINTER INTO BUFFER
	DCR	D			;SPACE LEFT?
	RZ				;NO, DONE
PLOOPG:	MVI	A,1			;STORE FLAG SAYING IN VAR
PLOOPH:	STA	TEMPA
	MOV	A,E			;GET BACK CHAR WE HAD
	CPI	OCTCON			;IS IT SMALLER THAN SMALLEST EMBEDDED CONSTANT?
	JC	PLOOPZ			;YES, DONT TREAT AS ONE
	CPI	DBLCON+1		;IS IT EMBEDED CONSTANT?
	JC	NUMLIN			;YES, UNPACK IT
PLOOPZ:	STAX	B			;MAKE SURE BYTE STORED AFTER SPACE
	JMP	PLOOP			;STORE IN BUFFER
PLOOPR:

	INR	A			;SET ZERO IF FN TOKEN
	MOV	A,M			;GET CHAR BACK
	JNZ	NTFNTK			;NOT FUNCTION JUST TREAT NORMALLY
	INX	H			;BUMP POINTER
	MOV	A,M			;GET CHAR
	ANI	177O			;TURN OFF HIGH BIT
NTFNTK:	INX	H			;ADVANCE TO POINT AFTER
	CPI	SNGQTK			;SINGLE QUOTE TOKEN?
	JNZ	NTQTTK			;NO, JUMP OUT
	DCX	B			;MOVE DEPOSIT PTR BACK OVER :$REM
	DCX	B
	DCX	B
	DCX	B
	INR	D
	INR	D
	INR	D
	INR	D			;FIX UP CHAR COUNT
NTQTTK:	CPI	$ELSE			;ELSE?
	CZ	DCXBRT			;MOVE DEPOSIT PTR BACK OVER LEADING COLON.
	PUSH	H			;SAVE TEXT PTR.
	PUSH	B			;SAVE DEPOSIT PTR.
	PUSH	D			;SAVE CHAR COUNT.
	LXI	H,RESLST-1		;GET PTR TO START OF RESERVED WORD LIST
	MOV	B,A			;SAVE THIS CHAR IN [B]
	MVI	C,'A'-1			;INIT LEADING CHAR VALUE
RESSR3:	INR	C			;BUMP LEADING CHAR VALUE.
RESSR1:	INX	H			;BUMP POINTER INTO RESLST
RESSRC:	MOV	D,H			;SAVE PTR TO START OF THIS RESWRD
	MOV	E,L
RESSR2:
	MOV	A,M			;GET CHAR FROM RESLST
	ORA	A			;SET CC'S
	JZ	RESSR3			;IF END OF THIS CHARS TABLE, GO BACK & BUMP C
	INX	H			;BUMP SOURCE PTR
	JP	RESSR2			;IF NOT END OF THIS RESWRD, THEN KEEP LOOKING
	MOV	A,M			;GET PTR TO RESERVED WORD VALUE
	CMP	B			;SAME AS THE ONE WE SEARCH FOR?
	JNZ	RESSR1			;NO, KEEP LOOKING.
	XCHG				;SAVE FOUND PTR IN [H,L]
	CPI	$USR			;USR FUNCTION TOKEN?
	JZ	NOISPA			;DONT INSERT SPACE
	CPI	$FN			;IS IT FUNCTION TOKEN?
NOISPA:
	MOV	A,C			;GET LEADING CHAR
	POP	D			;RESTORE LINE CHAR COUNT
	POP	B			;RESTORE DEPOSIT PTR
	MOV	E,A			;SAVE LEADING CHAR
	JNZ	NTFNEX			;NOT "FN" EXPANSION
	LDA	TEMPA			;SET CC'S ON TEMPA
	ORA	A
	MVI	A,0			;CLEAR RESWRD FLAG - MARK AS SPECIAL
	STA	TEMPA			;SET FLAG
	JMP	MORLNZ			;DO EXPANSION
NTFNEX:
	CPI	'Z'+1			;WAS IT A SPECIAL CHAR?
	JNZ	NTSPCH			;NON-SPECIAL CHAR
	XRA	A			;SET NON-SPECIAL
	STA	TEMPA
	JMP	MORPUR			;PRINT IT
NTSPCH:	LDA	TEMPA			;WHAT DID WE DO LAST?
	ORA	A			;SPECIAL?
	MVI	A,255			;FLAG IN RESERVED WORD
	STA	TEMPA			;CLEAR FLAG
MORLNZ:	JZ	MORLN0			;GET CHAR AND PROCEED
	MVI	A,' '			;PUT SPACE IN BUFFER
	STAX	B
	INX	B
	DCR	D			;ANY SPACE LEFT IN BUFFER
	JZ	PPSWRT			;NO, RETURN
MORLN0:	MOV	A,E
	JMP	MORLN1			;CONTINUE
MORPUR:
	MOV	A,M			;GET BYTE FROM RESWRD
	INX	H			;BUMP POINTER
MORLNP:	MOV	E,A			;SAVE CHAR
MORLN1:	ANI	177O			;AND OFF HIGH ORDER BIT FOR DISK & EDIT
	STAX	B			;STORE THIS CHAR
	INX	B			;BUMP PTR
	DCR	D			;BUMP DOWN REMAINING CHAR COUNT
	JZ	PPSWRT			;IF END OF LINE, JUST RETURN
	ORA	E			;SET CC'S
	JP	MORPUR			;END OF RESWRD?
	CPI	'('+128			;SPC( OR TAB( ?
	JNZ	NTSPCT			;NO
	XRA	A			;CLEAR FLAG
	STA	TEMPA			;TO INSERT SPACE AFTERWARDS
NTSPCT:
	POP	H			;RESTORE SOURCE PTR.
	JMP	PLOOP2			;GET NEXT CHAR FROM LINE

TSTANM:	CALL	ISLET2			;LETTER?
	RNC				;YES
	CPI	'0'			;DIGIT?
	RC				;TOO SMALL
	CPI	'9'+1			;LAST DIGIT
	CMC				;MAKE CARRY RIGHT
	RET				;NO CARRY=DIGIT
NUMLIN:	DCX	H			;MOVE POINTER BACK AS CHRGET INX'S
	CALL	CHRGTR			;SCAN THE CONSTANT
	PUSH	D			;SAVE CHAR COUNT
	PUSH	B			;SAVE DEPOSIT PTR
	PUSH	PSW			;SAVE CONSTANT TYPE.
	CALL	CONFAC			;MOVE CONSTANT INTO FAC
	POP	PSW			;RESTORE CONSTANT TYPE
	LXI	B,CONLIN		;PUT RETURN ADDR ON STACK
	PUSH	B			;SAVE IT
	CPI	OCTCON			;OCTAL CONSTANT?
	JZ	FOUTO			;PRINT IT
	CPI	HEXCON			;HEX CONSTANT?
	JZ	FOUTH			;PRINT IN HEX
	LHLD	CONLO			;GET LINE # VALUE IF ONE.
	JMP	FOUT			;PRINT REMAINING POSSIBILITIES.
CONLIN:	POP	B			;RESTORE DEPOSIT PTR.
	POP	D			;RESTORE CHAR COUNT
	LDA	CONSAV			;GET SAVED CONSTANT TOKEN
	MVI	E,'O'			;ASSUME OCTAL CONSTANT
	CPI	OCTCON			;OCTAL CONSTANT?
	JZ	SAVBAS			;YES, PRINT IT
	CPI	HEXCON			;HEX CONSTANT?
	MVI	E,'H'			;ASSUME SO.
	JNZ	NUMSLN			;NOT BASE CONSTANT
SAVBAS:
	MVI	A,'&'			;PRINT LEADING BASE INDICATOR
	STAX	B			;SAVE IT
	INX	B			;BUMP PTR
	DCR	D			;BUMP DOWN CHAR COUNT
	RZ				;RETURN IF END OF BUFFER
	MOV	A,E			;GET BASE CHAR
	STAX	B			;SAVE IT
	INX	B			;BUMP PTR
	DCR	D			;BUMP DOWN BASE COUNT
	RZ				;END OF BUFFER, DONE
					;[E] SET UP
NUMSLN:
	LDA	CONTYP			;GET TYPE OF CONSTANT WE ARE
	CPI	4			;IS IT SINGLE OR DOUBLE PREC?
	MVI	E,0			;NO, NEVER PRINT TRAILING TYPE INDICATOR
	JC	TYPSET
	MVI	E,'!'			;ASSUME SINGLE PREC.
	JZ	TYPSET			;IS CONTYP=4, WAS SINGLE
	MVI	E,'#'			;DOUBLE PREC INDICATOR
TYPSET:
	MOV	A,M			;GET LEADING CHAR
	CPI	' '			;LEADING SPACE
	CZ	INXHRT			;GO BY IT
NUMSL2:	MOV	A,M			;GET CHAR FROM NUMBER BUFFER
	INX	H			;BUMP POINTER
	ORA	A			;SET CC'S
	JZ	NUMDN			;IF ZERO, ALL DONE.
	STAX	B			;SAVE CHAR IN BUF.
	INX	B			;BUMP PTR
	DCR	D			;SEE IF END OF BUFFER
	RZ				;IF END OF BUFFER, RETURN
	LDA	CONTYP			;GET TYPE OF CONSTANT TO BE PRINTED
	CPI	4			;TEST FOR SINGLE OR DOUBLE PRECISION
	JC	NUMSL2			;NO, WAS INTEGER
	DCX	B			;PICK UP SAVED CHAR
	LDAX	B			;EASIER THAN PUSHING ON STACK
	INX	B			;RESTORE TO POINT WHERE IT SHOULD
	JNZ	DBLSCN			;IF DOUBLE, DONT TEST FOR EMBEDED "."
	CPI	'.'			;TEST FOR FRACTION
	JZ	ZERE			;IF SINGLE & EMBEDED ., THEN DONT PRINT !
DBLSCN:	CPI	'D'			;DOUBLE PREC. EXPONENT?
	JZ	ZERE			;YES, MARK NO VALUE TYPE INDICATOR NESC.
	CPI	'E'			;SINGLE PREC. EXPONENT?
	JNZ	NUMSL2			;NO, PROCEED
ZERE:	MVI	E,0			;MARK NO PRINTING OF TYPE INDICATOR
	JMP	NUMSL2			;KEEP MOVING NUMBER CHARS INTO BUF

NUMDN:
	MOV	A,E			;GET FLAG TO INDICATE WHETHER TO INSERT
	ORA	A			;A "D" AFTER DOUBLE PREC. #
	JZ	NOD			;NO, DONT INSERT IT
	STAX	B			;SAVE IN BUFFER
	INX	B			;BUMP POINTER
	DCR	D			;DECRMENT COUNT OF CHARS LEFT IN BUFFER
	RZ				;=0, MUST TRUNCATE LIST OF THIS LINE.
NOD:
	LHLD	CONTXT			;GET BACK TEXT POINTER AFTER CONSTANT
	JMP	PLOOP2			;GET NEXT CHAR
;
; THE FOLLOWING CODE IS FOR THE DELETE RANGE
; COMMAND. BEFORE THE LINES ARE DELETED, 'OK'
; IS TYPED.
;
DELETE:
	CALL	SCNLIN			;SCAN LINE RANGE
	PUSH	B
	CALL	DEPTR			;CHANGE POINTERS BACK TO NUMBERS
	POP	B
	POP	D			;POP MAX LINE OFF STACK
	PUSH	B			;SAVE POINTER TO START OF DELETION
					;FOR USE BY CHEAD AFTER FINI
	PUSH	B			;SAVE POINTER TO START OF 1ST LINE
	CALL	FNDLIN			;FIND THE LAST LINE
	JNC	FCERRG			;MUST HAVE A MATCH ON THE UPPER BOUND
	MOV	D,H			;[D,E] =  POINTER AT THE START OF THE LINE
	MOV	E,L			;BEYOND THE LAST LINE IN THE RANGE
	XTHL				;SAVE THE POINTER TO THE NEXT LINE
	PUSH	H			;SAVE THE POINTER TO THE START OF
					;THE FIRST LINE IN THE RANGE
	CALL	DCOMPR			;MAKE SURE THE START COMES BEFORE THE END
FCERRG:	JNC	FCERR			;IF NOT, "ILLEGAL FUNCTION CALL"
	LXI	H,REDDY			;PRINT "OK" PREMATURELY
	CALL	STROUT
	POP	B			;GET POINTER TO FIRST IN [B,C]
	LXI	H,FINI			;GO BACK TO FINI WHEN DONE
	XTHL				;[H,L]=POINTER TO THE NEXT LINE
	PUBLIC	DEL
; ERASE A LINE FROM MEMORY
; [B,C]=START OF LINE BEING DELETED
; [D,E]=START OF NEXT LINE
DEL:
	XCHG				;[D,E] NOW HAVE THE POINTER TO THE LINE
					;BEYOND THIS ONE
	LHLD	VARTAB			;COMPACTIFYING TO VARTAB
MLOOP:	LDAX	D
	STAX	B			;SHOVING DOWN TO ELIMINATE A LINE
	INX	B
	INX	D
	CALL	DCOMPR
	JNZ	MLOOP			;DONE COMPACTIFYING?
	MOV	H,B
	MOV	L,C
	SHLD	VARTAB
	RET	
	PAGE
	SUBTTL	PEEK AND POKE
;
; NOTE: IN THE 8K PEEK ONLY ACCEPTS POSITIVE NUMBERS UP TO 32767
; POKE WILL ONLY TAKE AN ADDRESS UP TO 32767 , NO
; FUDGING ALLOWED. THE VALUE IS UNSIGNED.
; IN THE EXTENDED VERSION NEGATIVE NUMBERS CAN BE
; USED TO REFER TO LOCATIONS HIGHER THAN 32767.
; THE CORRESPONDENCE IS GIVEN BY SUBTRACTING 65536 FROM LOCATIONS
; HIGHER THAN 32767 OR BY SPECIFYING A POSITIVE NUMBER UP TO 65535.
;
PEEK:	CALL	FRQINT			;GET AN INTEGER IN [H,L]
	EXTRN	PRODIR
	CALL	PRODIR			;DONT ALLOW DIRECT IF PROTECTED FILE
	MOV	A,M			;GET THE VALUE TO RETURN
	JMP	SNGFLT			;AND FLOAT IT
POKE:	CALL	FRMEVL			;READ A FORMULA
	PUSH	H			;SAVE TEXT PTR
	CALL	FRQINT			;FORCE VALUE INTO INT IN [H,L]
	XTHL				;PUT VALUE ON STACK & GET TXT PTR BACK
					;SAVE VALUE ON STACK
	CALL	PRODIR			;DONT ALLOW DIRECT IF PROTECTED FILE
	CALL	SYNCHR
	DB	44			;CHECK FOR A COMMA
	CALL	GETBYT
	POP	D			;GET THE ADDRESS BACK
	STAX	D			;STORE IT AWAY
	RET				;SCANNED EVERYTHING
	PUBLIC	FRQINT
FRQINT:	LXI	B,FRCINT		;RETURN HERE
	PUSH	B			;SAVE ADDR
	CALL	GETYPR			;SET THE CC'S ON VALTYPE
	RM				;RETURN IF ALREADY INTEGER.
	LDA	FAC			;GET EXPONENT
	CPI	220O			;IS MAGNITUDE .GT. 32767
	RNZ				;NO, FORCE INTEGER
	LDA	FAC-1			;GET SIGN OF NUMBER
	ORA	A			;IS IT NEGATIVE, ONLY ALLOWABLE # IS -32768
	RM				;ASSUME THATS WHAT IT IS, ELSE GIVE OVERFLOW
	LXI	B,221Q*256+200Q
	LXI	D,0*256+0		;GET -65536.
	JMP	FADD			;SUBTRACT IT, AND THEN FORCE INTEGER
					;MAKE THE SAME FOR RADIO SHACK VERSION


	PAGE
	SUBTTL	RENUMBER
; THE RESEQ(UENCE) COMMAND TAKE UP TO THREE ARGUMENTS
; RESEQ [NN[,MM[,INC]]]
; WHERE NN IS THE FIRST DESTINATION LINE OF THE
; LINES BEING RESEQUENCED, LINES LESS THAN MM ARE
; NOT RESEQUENCED, AND INC IS THE INCREMENT.
RESEQ:
	LXI	B,0+10			;ASSUME INC=10
	PUSH	B			;SAVE ON STACK
	MOV	D,B			;RESEQ ALL LINES BY SETTING [D,E]=0
	MOV	E,B
	JZ	RESNN			;IF JUST 'RESEQ' RESEQ 10 BY 10
	CPI	54O			;COMMA
	JZ	EATCOM			;DONT USE STARTING # OF ZERO
	PUSH	D			;SAVE [D,E]
	CALL	LINSPC			;GET NEW NN
	MOV	B,D			;GET IN IN [B,C] WHERE IT BELONGS
	MOV	C,E
	POP	D			;GET BACK [D,E]
	JZ	RESNN			;IF EOS, DONE
EATCOM:	CALL	SYNCHR
	DB	54O			;EXPECT COMMA
	CALL	LINSPC			;GET NEW MM
	JZ	RESNN			;IF EOS, DONE
	POP	PSW			;GET RID OF OLD INC
	CALL	SYNCHR
	DB	54O			;EXPECT COMMA
	PUSH	D			;SAVE MM
	CALL	LINGET			;GET NEW INC
	JNZ	SNERR			;SHOULD HAVE TERMINATED.
	MOV	A,D			;SEE IF INC=0 (ILLEGAL)
	ORA	E
	JZ	FCERR			;YES, BLOW HIM UP NOW
	XCHG				;FLIP NEW INC & [H,L]
	XTHL				;NEW INC ONTO STACK
	XCHG				;GET [H,L] BACK, ORIG [D,E] BACK
RESNN:	PUSH	B			;SAVE NN ON STACK
	CALL	FNDLIN			;FIND MM LINE
	POP	D			;GET NN OFF STACK
	PUSH	D			;SAVE NN BACK
	PUSH	B			;SAVE POINTER TO MM LINE
	CALL	FNDLIN			;FIND FIRST LINE TO RESEQ.
	MOV	H,B			;GET PTR TO THIS LINE IN [H,L]
	MOV	L,C
	POP	D			;GET LINE PTD TO BY MM
	CALL	DCOMPR			;COMPARE TO FIRST LINE RESEQED
	XCHG				;GET PTR TO MM LINE IN [H,L]
	JC	FCERR			;CANT ALLOW PROGRAM TO BE RESEQUED
					;ON TOP OF ITSELF
	POP	D			;GET NN BACK
	POP	B			;GET INC IN [B,C]
	POP	PSW			;GET RID OF NEWSTT
	PUSH	H			;SAVE PTR TO FIRST LINE TO RESEQ.
	PUSH	D			;SAVE NN ON STACK
	JMP	NXTRSL
NXTRSC:	DAD	B			;ADD INCREMENT INTO
	JC	FCERR			;UH OH, HIS INC WAS TOO LARGE.
	XCHG				;FLIP LINK FIELD, ACCUM.
	PUSH	H			;SAVE LINK FIELD
	LXI	H,0+65529		;TEST FOR TOO LARGE LINE
	CALL	DCOMPR			;COMPARE TO CURRENT #
	POP	H			;RESTORE LINK FIELD
	JC	FCERR			;UH OH, HIS INC WAS TOO LARGE.
NXTRSL:	PUSH	D			;SAVE CURRENT LINE ACCUM
	MOV	E,M			;GET LINK FIELD INTO [D,E]
	MOV	A,E			;GET LOW PART INTO K[A] FOR ZERO TEST
	INX	H
	MOV	D,M			;GET HIGH PART OF LINK
	ORA	D			;SET CC'S ON LINK FIELD
	XCHG				;SEE IF NEXT LINK ZERO
	POP	D			;GET BACK ACCUM LINE #
	JZ	RESSD1			;ZERO, DONE
	MOV	A,M			;GET FIRST BYTE OF LINK
	INX	H			;INC POINTER
	ORA	M			;SET CC'S
	DCX	H			;MOVE POINTER BACK
	XCHG				;BACK IN [D,E]
	JNZ	NXTRSC			;INC COUNT

RESSD1:	PUSH	B			;SAVE INC
	CALL	SCCLIN			;SCAN PROGRAM CONVERTING LINES TO PTRS.
	POP	B			;GET BACK INC
	POP	D			;GET NN
	POP	H			;GET PTR TO FIRST LINE TO RESEQ

RESNX1:	PUSH	D			;SAVE CURRENT LINE
	MOV	E,M			;GET LINK FIELD
	MOV	A,E			;PREPARE FOR ZERO LINK FIELD TEST
	INX	H
	MOV	D,M
	ORA	D
	JZ	SCCALL			;STOP RESEQING WHEN SEE END OF PGM
	XCHG				;FLIP LINE PTR, LINK FIELD
	XTHL				;PUT LINK ON STACK, GET NEW LINE # OFF
	XCHG				;PUT NEW LINE # IN [D,E], THIS LINE
					;PTR IN [H,L]
	INX	H			;POINT TO LINE # FIELD.
	MOV	M,E			;CHANGE TO NEW LINE #
	INX	H
	MOV	M,D
	XCHG				;GET THIS LINE # IN [H,L]
	DAD	B			;ADD INC
	XCHG				;GET NEW LINE # BACK IN [D,E]
	POP	H			;GET PTR TO NEXT LINE
	JMP	RESNX1			;KEEP RESEQING
SCCALL:	LXI	B,STPRDY		;WHERE TO GO WHEN DONE
	PUSH	B			;SAVE ON STACK
	DB	376Q			;"CPI AL," CALL SCCPTR
; THE SUBROUTINES SCCLIN AND SCCPTR CONVERT ALL
; LINE #'S TO POINTERS AND VICE-VERSA.
; THE ONLY SPECIAL CASE IS "ON ERROR GOTO 0" WHERE THE "0"
; IS LEFT AS A LINE NUMBER TOKEN SO IT WONT BE CHANGED BY RESEQUENCE.
	PUBLIC	SCCPTR
SCCLIN:	DB	366Q			;"ORI AX," OVER NEXT BYTE
SCCPTR:	XRA	A			;SET A=0
	STA	PTRFLG			;SET TO SAY WHETER LINES OR PTRS EXTANT
SCNPGM:	LHLD	TXTTAB			;GET PTR TO START OF PGM
	DCX	H			;NOP NEXT INX.
SCNPLN:	INX	H			;POINT TO BYTE AFTER ZERO AT END OF LINE
	MOV	A,M			;GET LINK FIELD INTO [D,E]
	INX	H			;BUMP PTR
	ORA	M			;SET CC'S
	RZ				;RETURN IF ALL DONE.
	INX	H			;POINT PAST LINE #
	MOV	E,M			;GET LOW BYTE OF LINE #
	INX	H
	MOV	D,M			;GET HIGH BYTE OF LINE #
SCNEXT:	CALL	CHRGTR			;GET NEXT CHAR FROM LINE
SCNEX2:	ORA	A			;END OF LINE
	JZ	SCNPLN			;SCAN NEXT LINE
	MOV	C,A			;SAVE [A]
	LDA	PTRFLG			;CHANGE LINE TOKENS WHICH WAY?
	ORA	A			;SET CC'S
	MOV	A,C			;GET BACK CURRENT CHAR
	JZ	SCNPT2			;CHANGING POINTERS TO #'S
	CPI	$ERROR			;IS IT ERROR TOKEN?
	JNZ	NTERRG			;NO.
	CALL	CHRGTR			;SCAN NEXT CHAR
	CPI	$GOTO			;ERROR GOTO?
	JNZ	SCNEX2			;GET NEXT ONE
	CALL	CHRGTR			;GET NEXT CHAR
	CPI	LINCON			;LINE # CONSTANT?
	JNZ	SCNEX2			;NO, IGNORE.
	PUSH	D			;SAVE [D,E]
	CALL	LINGT3			;GET IT
	MOV	A,D			;IS IT LINE # ZERO?
	ORA	E			;SET CC'S
	JNZ	CHGPTR			;CHANGE IT TO A POINTER
	JMP	SCNEX3			;YES, DONT CHANGE IT
NTERRG:	CPI	LINCON			;LINE # CONSTANT?
	JNZ	SCNEXT			;NOT, KEEP SCANNING
	PUSH	D			;SAVE CURRENT LINE # FOR POSSIBLE ERROR MSG
	CALL	LINGT3			;GET LINE # OF LINE CONSTANT INTO [D,E]
CHGPTR:
	PUSH	H			;SAVE TEXT POINTER JUST AT END OF LINCON 3 BYTES
	CALL	FNDLIN			;TRY TO FIND LINE IN PGM.
	DCX	B			;POINT TO ZERO AT END OF PREVIOUS LINE
	MVI	A,PTRCON		;CHANGE LINE # TO PTR
	JC	MAKPTR			;IF LINE FOUND CHANE # TO PTR
	CALL	CRDONZ			;PRINT CRLF IF REQUIRED
	LXI	H,LINM			;PRINT "UNDEFINED LINE" MESSAGE
	PUSH	D			;SAVE LINE #
	CALL	STROUT			;PRINT IT
	POP	H			;GET LINE # IN [H,L]
	CALL	LINPRT			;PRINT IT
	POP	B			;GET TEXT PTR OFF STACK
	POP	H			;GET CURRENT LINE #
	PUSH	H			;SAVE BACK
	PUSH	B			;SAVE BACK TEXT PTR
	CALL	INPRT			;PRINT IT
SCNPOP:	POP	H			;POP OFF CURRENT TEXT POINTER
SCNEX3:	POP	D			;GET BACK CURRENT LINE #
	DCX	H			;BACKUP POINTER
	JMP	SCNEXT			;KEEP SCANNING

LINM:	DB	'Undefined line '
	DB	0

SCNPT2:	CPI	PTRCON			;POINTER
	JNZ	SCNEXT			;NO, KEEP SCANNING
	PUSH	D			;SAVE CURRENT LINE #
	CALL	LINGT3			;GET #
	PUSH	H			;SAVE TEXT POINTER
	XCHG				;FLIP CURRENT TEXT PTR & PTR
	INX	H			;BUMP POINTER
	INX	H			;POINT TO LINE # FIELD
	INX	H
	MOV	C,M			;PICK UP LINE #
	INX	H			;POINT TO HIGH PART
	MOV	B,M
	MVI	A,LINCON		;CHANGE TO LINE CONSTANT
MAKPTR:	LXI	H,SCNPOP		;PLACE TO RETURN TO AFTER CHANGING CONSTANT
	PUSH	H			;SAVE ON STACK
CONCHG:	LHLD	CONTXT			;GET TXT PTR AFTER CONSTANT IN [H,L]
CONCH2:	PUSH	H			;SAVE PTR TO END OF CONSTANT
	DCX	H
	MOV	M,B
	DCX	H
	MOV	M,C			;CHANGE TO VALUE IN [B,C]
	DCX	H			;POINT TO CONSTANT TOKEN
	MOV	M,A			;CHANGE TO VALUE IN [A]
	POP	H			;RESTORE POINTER TO AFTER CONSTANT
	RET	

	PUBLIC	DEPTR
DEPTR:	LDA	PTRFLG			;DO LINE POINTERS EXIST IN PGM?
	ORA	A			;SET CC'S
	RZ				;NO, JUST RETURN
	JMP	SCCPTR			;CONVERT THEN TO LINE #'S




	SUBTTL	ANSI - THE ROUTINES TO HANDLE ANSI FEATURES
DATAS	SET	DATA
OPTION:	CALL	SYNCHR
	DB	'B'
	CALL	SYNCHR
	DB	'A'
	CALL	SYNCHR
	DB	'S'
	CALL	SYNCHR
	DB	'E'
	LDA	OPTFLG
	ORA	A			;HAVE WE SEEN OPTION BASE BEFORE
	JNZ	DDERR			;IF SO "DOUBLE DIMENSION ERROR"
	PUSH	H			;SAVE THE TEXT POINTER
	LHLD	ARYTAB			;SEE IF WE HAVE ANY ARRAYS YET
	XCHG	
	LHLD	STREND
	CALL	DCOMPR			;IF THESE ARE EQUAL WE HAVE NOT
	JNZ	DDERR
	POP	H
	MOV	A,M			;GET THE BASE NUMBER
	SUI	'0'
	JC	SNERR
	CPI	2			;ONLY 0 AND 1 ARE LEGAL
	JNC	SNERR
	STA	OPTVAL			;SAVE IF FOR DIM AND PTRGET
	INR	A			;MAKE SURE [A] IS NON ZERO
	STA	OPTFLG			;FLAG THAT WE HAVE SEEN "OPTION BASE"
	CALL	CHRGTR			;FETCH THE TERMINATOR
	RET	

; THIS ROUTINE IS CALLED BY THE MATH PACKAGE
; TO PRINT ERROR MESSAGES WTOUT DISTURBING PTRFIL, ETC.
STRPRN:
	MOV	A,M			;GET BYTE FROM MESSAGE
	ORA	A			;END OF MESSAGE
	RZ				;YES, DONE
	CALL	CALTTY			;PRINT CHAR
	INX	H			;INCREMENT POINTER
	JMP	STRPRN			;PRINT NEXT CHAR
CALTTY:	PUSH	PSW			;SAVE [A] ON STACK
	JMP	TTYCHR			;PUT OUT CHAR
					;PRINT CRLF AND RETURN
RANDOM:	JZ	INPRG			;IF NO ARGUMENT ASK FROM TERMINAL
	CALL	FRMEVL			;FETCH THE FORMULA ARGUMENT
	PUSH	H
	CALL	FRCINT			;ALLOW NORMAL INTEGERS
	JMP	STRNDS			;STORE THE NEW RANDOM SEED
	EXTRN	RNDMN2
INPRG:	PUSH	H
INPRAG:
	LXI	H,RANMES		;ASK FOR SOME RANDOM INPUT
	CALL	STROUT
	CALL	QINLIN
	POP	D			;get back text pointer
	JC	STPEND			;go away if control c
	PUSH	D			;resave text pointer
	INX	H			;MOVE PAST BUFMIN TO BUF
	MOV	A,M			;GET FIRST CHAR OF TYPEIN (FIN EXPECTS IT)
	CALL	FIN			;READ A NUMBER
	MOV	A,M			;GET THE TERMINATOR
	ORA	A
	JNZ	INPRAG			;DON'T ALLOW BAD FORMAT
	CALL	FRCINT			;ALLOW NORMAL INTEGERS
STRNDS:	SHLD	RNDX+1
	CALL	RNDMN2
	POP	H			;GET BACK THE TEXT POINTER
	RET	
RANMES:	DB	'Random number seed (-32768- to 32767)'
	DB	0

;
; THIS CODE SCANS AHEAD TO FIND THE "NEXT" THAT MATCHES A "FOR"
; IN ORDER TO 1) HANDLE EMPTY LOOPS AND 2) MAKE SURE LOOPS
; MATCH UP PROPERLY.
;
	PUBLIC	WNDSCN
WNDSCN:	MVI	C,ERRWH			;SCAN FOR MATCHING WEND THIS IS ERROR IF FAIL
	JMP	SCNCNT
NXTSCN:	MVI	C,ERRFN
SCNCNT:
	MVI	B,0			;SET UP THE COUNT OF "FOR"S SEEN
	XCHG				;INITIALIZE NXTLIN FOR NEXT ON SAME LINE
	LHLD	CURLIN
	SHLD	NXTLIN
	XCHG				;RESTORE THE TEXT POINTER TO [H,L]
FORINC:	INR	B			;INCREMENT THE COUNT WHENEVER "FOR" IS SEEN
FNLOP:	DCX	H			;** FIX HERE FOR 5.03 CAN'T CALL DATA
SCANWF:	CALL	CHRGTR			;TO SKIP TO STATEMENT BECAUSE COULD
	JZ	FORTRM			;HAVE STATEMENT AFTER "THEN"
NTQTSC:
	CPI	$ELSE			;ELSE STATMENT
	JZ	FNNWST			;THEN ALLOW NEXT OR WEND AFTER IT
	CPI	$THEN			;SO SCAN USING CHRGET WAITING FOR END
	JNZ	SCANWF			;OF STATEMENT OR $THEN
FORTRM:	ORA	A			;SEE HOW IT ENDED
	JNZ	FNNWST			;JUST NEW STATEMENT -- EXAMINE IT
					;OR COULD BE COLON IN STRING BUT NO HARM
					;IN NON KANABS (HGHBIT) VERSION SINCE NO RESERVED
					;WORDS WILL MATCH THE NEXT CHARACTER
	INX	H
	MOV	A,M			;SCAN THE LINK AT THE START OF THE NEXT LINE
	INX	H
	ORA	M			;TO SEE IF ITS ZERO (END OF PROGRAM)
	MOV	E,C			;SET UP ERROR NUMBER
	JZ	ERROR
	INX	H			;PICK UP THE NEW LINE NUMBER
	MOV	E,M
	INX	H
	MOV	D,M
	XCHG				;[H,L]= NEW LINE NUMBER
	SHLD	NXTLIN			;SAVE AS "NEXT" LINE NUMBER
	XCHG	
FNNWST:	CALL	CHRGTR			;GET THE TYPE OF THE NEXT STATEMENT
	MOV	A,C			;GET THE ERROR NUMBER TO SEE WHAT WE ARE
	CPI	ERRFN			;SCANNING FOR
	MOV	A,M			;GET BACK THE CHARACTER
	JZ	NXTLOK			;FOR/NEXT SEARCHING
	CPI	$WHILE			;ANOTHER WHILE/WEND NEST?
	JZ	FORINC
	CPI	$WEND
	JNZ	FNLOP
	DCR	B
	JNZ	FNLOP
	RET	
NXTLOK:
	CPI	$FOR			;ANOTHER "FOR"?
	JZ	FORINC			;INCREMENT THE FOR COUNT
	CPI	$NEXT			;END WITH NEXT?
	JNZ	FNLOP			;SKIP OVER THIS STATEMENT
DECNXT:	DCR	B			;DECREMENT THE LOOP COUNT
	RZ				;RETURN WITH [H,L] ABOUT TO GET FIRST CHARACTER OF "NEXT" VARIABLE

;
; SCAN  THE VARIABLES LISTED IN A "NEXT" STATEMENT
;
	CALL	CHRGTR			;SEE IF THERE IS A NAME
	JZ	FORTRM			;ONLY ONE SO SCAN MORE STATEMENTS
	XCHG				;SAVE TEXT POINTER IN [D,E]
	LHLD	CURLIN			;SAVE THE CURRENT LINE NUMBER
	PUSH	H
	LHLD	NXTLIN			;MAKE ERROR COME FROM "NEXT"
	SHLD	CURLIN
	XCHG				;[H,L]= TEXT POINTER
	PUSH	B			;SAVE THE "FOR" COUNT
	CALL	PTRGET			;SKIP OVER THE VARIABLE NAME
	POP	B			;GET BACK THE "FOR" COUNT
	DCX	H			;CHECK TERMINATOR
	CALL	CHRGTR
	LXI	D,FORTRM		;PLACE TO GO TO
	JZ	TRMNXT			;END OF "NEXT"
	CALL	SYNCHR
	DB	44			;SHOULD HAVE COMMAS IN BETWEEN
	DCX	H			;RESCAN FIRST CHARACTER
	LXI	D,DECNXT		;PLACE TO GO BACK TO
TRMNXT:	XTHL				;SAVE THE TEXT POINTER ON THE STACK
	SHLD	CURLIN
	POP	H
	PUSH	D			;GO OFF TO ADDRESS IN [B,C]
	RET	
;
; THIS ROUTINE CLEARS FLGOVC TO RESET TO NORMAL OVERFLOW MODE.
; IN NORMAL MODE, OVERR ALWAYS PRINTS OVERFLOW BECAUSE FLGOVC=0
; FUNCTION DISPATCH, FIN (&FINDBL), AND EXPONENTIATION SET UP AN OVERFLOW
; MODE WHERE FLGOVC=1 AND AFTER ONE OVERFLOW FLGOVC=2 AND NO MORE
; OVERFLOW MESSAGES ARE PRINTED. FIN (&FINDBL) ALSO STORE FLGOVC IN OVCSTR
; BEFORE RESETTING FLGOVC SO A CALLER CAN DETECT OVERFLOW OCCURANCE.
;
	PUBLIC	CLROVC,FINOVC
FINOVC:	PUSH	PSW
	LDA	FLGOVC			;STORE OVERFLOW FLAG TO INDICATE
	STA	OVCSTR			;WHETHER AN OVERFLOW OCCURED
	POP	PSW
CLROVC:	PUSH	PSW			;SAVE EVERYTHING
	XRA	A			;NORMAL OVERFLOW MODE
	STA	FLGOVC
	POP	PSW
	RET	


	END	START
