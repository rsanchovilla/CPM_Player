	SUBTTL	Common file for BASIC interpreter
	.SALL	

CONTO	SET	15			;CHARACTER TO SUPRESS OUTPUT (USUALLY CONTROL-O)
DBLTRN	SET	0			;FOR DOUBLE PRECISION TRANSCENDENTALS
	IF2	

	.PRINTX	/EXTENDED/


	.PRINTX	/LPT/

	.PRINTX	/CPM DISK/


	.PRINTX	/Z80/

	.PRINTX	/FAST/

	.PRINTX	/5.0 FEATURES/

	.PRINTX	/ANSI COMPATIBLE/
	ENDIF

CLMWID	SET	14			;MAKE COMMA COLUMNS FOURTEEN CHARACTERS
DATPSC	SET	128			;NUMBER OF DATA BYTES IN DISK SECTOR
LINLN	SET	80			;TERMINAL LINE LENGTH 
LPTLEN	SET	132
BUFLEN	SET	255			;LONG LINES
NAMLEN	SET	40			;MAXIMUM LENGTH NAME -- 3 TO 127

NUMLEV	SET	0*20+19+2*5		;NUMBER OF STACK LEVELS RESERVED
					;BY AN EXPLICIT CALL TO GETSTK

STRSIZ	SET	4

STRSIZ	SET	3
NUMTMP	SET	3			;NUMBER OF STRING TEMPORARIES

NUMTMP	SET	10

MD.RND	SET	3			;THE MODE NUMBER FOR RANDOM FILES
MD.SQI	SET	1			;THE MODE NUMBER FOR SEQUENTIAL INPUT FILES
					;NEVER WRITTEN INTO A FILE
MD.SQO	SET	2			;THE MODE FOR SEQUENTIAL OUTPUT FILES
					;AND PROGRAM FILES
CPMWRM	SET	0			;CP/M WARM BOOT ADDR
CPMENT	SET	CPMWRM+5		;CP/M BDOS CALL ADDR
	CSEG	
TRUROM	SET	0
	PAGE
	TITLE	MATHPK FOR BASIC MCS 8080  GATES/ALLEN/DAVIDOFF
	SUBTTL	FLOATING POINT MATH PACKAGE CONFIGURATION

CURNCY	SET	44O			;USE DOLLAR SIGN AS DEFAULT

	PUBLIC	RND,SIN,FOUT,INPRT,LINPRT
	PUBLIC	ZERO,FLOAT,FLOATR,MOVE,FADD,FADDS,FSUB,FMULT,FDIV,FIN
	EXTRN	INTXT,SNERR,BSERR,OVERR,MINPLS
	PUBLIC	NORMAL,UNPACK
	PUBLIC	PUSHF,ABS,INT,QINT,SGN,FCOMP,SIGNC,POPHRT
	PUBLIC	SQR
	PUBLIC	MOVFM,MOVMF,MOVFR,MOVRF,MOVRM,NEG,INRART,INXHRT
	EXTRN	CNSGET
	PUBLIC	UMULT,SIGNS
	PUBLIC	FPWR,EXP,LOG,COS,TAN,ATN,FONE
	PUBLIC	PUFOUT
	PUBLIC	VMOVMF,VMOVFM,FRCINT,FRCSNG,FRCDBL,VNEG,IADD
	PUBLIC	ISUB,IMULT,ICOMP,INEG,DADD,DSUB,DMULT,DDIV,DCOMP,VINT
	PUBLIC	VMOVE,VALINT,VALSNG,FRCSTR,CHKSTR,MAKINT,ISIGN
	PUBLIC	DCOMPD,DNORML,DINT
	PUBLIC	FDIVT,CONSIH,CONIA,VMOVFA,VMOVAF,GETBCD,VSIGN,VDFACS

	PUBLIC	IMOD,IDIV

	EXTRN	FANSII,OVERRI,STRPRN,FLGOVC
	EXTRN	TTYPOS
	EXTRN	DIVMSG,OVRMSG
	EXTRN	CALTTY
	EXTRN	FAC,FACLO,FBUFFR,MINUTK,PLUSTK,ERROR,FCERR
	EXTRN	CHRGTR,OUTDO,DV0ERR,STROUT
	PUBLIC	SIGN
	PUBLIC	SINCON,ATNCON

	EXTRN	GETYPR
	EXTRN	DCOMPR,SYNCHR
	EXTRN	TMERR
	EXTRN	ERRFLG,DFACLO,ARG,ARGLO,VALTYP,TEMP2,TEMP3



;
;	EXTERNAL LOCATIONS USED BY THE MATH-PACKAGE
;	;THE FLOATING ACCUMULATOR
;IFN	LENGTH&2,<
;	BLOCK	1		;[TEMPORARY LEAST SIGNIFICANT BYTE]
;DFACLO:	BLOCK	4>		;[FOUR LOWEST ORDERS FOR DOUBLE PRECISION]
;FACLO:	BLOCK	3		;[LOW ORDER OF MANTISSA (LO)]
;				;[MIDDLE ORDER OF MANTISSA (MO)]
;				;[HIGH ORDER OF MANTISSA (HO)]
;FAC:	BLOCK	2		;[EXPONENT]
;				;[TEMPORARY COMPLEMENT OF SIGN IN MSB]
;IFN	LENGTH&2,<
;	BLOCK	1		;[TEMPORARY LEAST SIGNIFICANT BYTE]
;ARGLO:	BLOCK	7		;[LOCATION OF SECOND ARGUMENT FOR DOUBLE
;ARG:	BLOCK	1>		; PRECISION]
;FBUFFR:	BLOCK	^D13		;BUFFER FOR FOUT
;IFN	LENGTH&2,<BLOCK	^D<35-13>>
;
;
;THE FLOATING POINT FORMAT IS AS FOLLOWS:
;
;THE SIGN IS THE FIRST BIT OF THE MANTISSA
;THE MANTISSA IS 24 BITS LONG
;THE BINARY POINT IS TO THE LEFT OF THE MSB
;NUMBER = MANTISSA * 2 ^ EXPONENT
;THE MANTISSA IS POSITIVE, WITH A ONE ASSUMED TO BE WHERE THE SIGN BIT IS
;THE SIGN OF THE EXPONENT IS THE FIRST BIT OF THE EXPONENT
;THE EXPONENT IS STORED IN EXCESS 200 I.E. WITH A BIAS OF 200
;SO, THE EXPONENT IS A SIGNED 8-BIT NUMBER WITH 200 ADDED TO IT
;AN EXPONENT OF ZERO MEANS THE NUMBER IS ZERO, THE OTHER BYTES ARE IGNORED
;TO KEEP THE SAME NUMBER IN THE FAC WHILE SHIFTING:
;	TO SHIFT RIGHT,	EXP:=EXP+1
;	TO SHIFT LEFT,	EXP:=EXP-1
;
;SO, IN MEMORY THE NUMBER LOOKS LIKE THIS:
;	[BITS 17-24 OF THE MANTISSA]
;	[BITS 9-16 OF THE MANTISSA]
;	[THE SIGN IN BIT 7, BITS 2-8 OF THE MANTISSA ARE IN BITS 6-0]
;	[THE EXPONENT AS A SIGNED NUMBER + 200]
;(REMEMBER THAT BIT 1 OF THE MANTISSA IS ALWAYS A ONE)
;
;ARITHMETIC ROUTINE CALLING CONVENTIONS:
;
;FOR ONE ARGUMENT FUNCTIONS:
;	THE ARGUMENT IS IN THE FAC, THE RESULT IS LEFT IN THE FAC
;FOR TWO ARGUMENT OPERATIONS:
;	THE FIRST ARGUMENT IS IN B,C,D,E I.E. THE "REGISTERS"
;	THE SECOND ARGUMENT IS IN THE FAC
;	THE RESULT IS LEFT IN THE FAC
;
;THE "S" ENTRY POINTS TO THE TWO ARGUMENT OPERATIONS HAVE (HL) POINTING TO
;THE FIRST ARGUMENT INSTEAD OF THE FIRST ARGUMENT BEING IN THE REGISTERS.
;MOVRM IS CALLED TO GET THE ARGUMENT IN THE REGISTERS.
;THE "T" ENTRY POINTS ASSUME THE FIRST ARGUMENT IS ON THE STACK.
;POPR IS USED TO GET THE ARGUMENT IN THE REGISTERS.
;NOTE: THE "T" ENTRY POINTS SHOULD ALWAYS BE JUMPED TO AND NEVER CALLED
;BECAUSE THE RETURN ADDRESS ON THE STACK WILL BE CONFUSED WITH THE NUMBER.
;
;ON THE STACK, THE TWO LO'S ARE PUSHED ON FIRST AND THEN THE HO AND SIGN.
;THIS IS DONE SO IF A NUMBER IS STORED IN MEMORY, IT CAN BE PUSHED ON THE
;STACK WITH TWO PUSHM'S.  THE LOWER BYTE OF EACH PART IS IN THE LOWER
;MEMORY ADDRESS SO WHEN THE NUMBER IS POPPED INTO THE REGISTERS, THE HIGHER
;ORDER BYTE WILL BE IN THE HIGHER ORDER REGISTER OF THE REGISTER PAIR, I.E.
;THE HIGHER ORDER BYTE WILL BE POPPED INTO B, D OR H.
;%
	PAGE

	SUBTTL	FLOATING POINT ADDITION AND SUBTRACTION
					;ENTRY TO FADD WITH POINTER TO ARG IN (HL)

	PUBLIC	FADDH
FADDH:	LXI	H,FHALF			;ENTRY TO ADD 1/2
FADDS:	CALL	MOVRM			;GET ARGUMENT INTO THE REGISTERS
	JMP	FADD			;DO THE ADDITION


					;SUBTRACTION	FAC:=ARG-FAC
FSUBS:	CALL	MOVRM			;ENTRY IF POINTER TO ARG IS IN (HL)
FSUB:	CALL	NEG			;NEGATE SECOND ARGUMENT
					;FALL INTO FADD


					;ADDITION	FAC:=ARG+FAC
					;ALTERS A,B,C,D,E,H,L
;*****************************************************************
;IF INTFSW=1 THE FORMAT OF FLOATING POINT NUMBERS WILL BE:
;REG B:SIGN AND BITS 1-7 OF EXPONENT,REG C:BIT 8 OF EXPONENT
;AND BITS 2-8 OF MANTISSA,REG D:BITS 9-16 OF MANTISSA,
;REG E:BITS 17-24 OF MANTISSA, AND LIKEWISE FOR THE FAC FORMAT
;FURTHERMORE, THE EXPONENT FOR INTEL WILL BE BIAS 177 OCTAL
;******************************************************************
FADD:	MOV	A,B			;CHECK IF FIRST ARGUMENT IS ZERO
	ORA	A			;GET EXPONENT
	RZ				;IT IS, RESULT IS NUMBER IN FAC
	LDA	FAC			;GET EXPONENT
	ORA	A			;SEE IF THE NUMBER IS ZERO
	JZ	MOVFR			;IT IS, ANSWER IS IN REGISTERS

;WE WANT TO GET THE SMALLER NUMBER IN THE REGISTERS SO WE CAN SHIFT IT RIGHT
;AND ALIGN THE BINARY POINTS OF THE TWO NUMBERS.  THEN WE CAN JUST ADD OR
;SUBTRACT THEM (DEPENDING ON THEIR SIGNS) BYTEWISE.
	SUB	B			;CHECK RELATIVE SIZES
	JNC	FADD1			;IS FAC SMALLER?
	CMA				;YES, NEGATE SHIFT COUNT
	INR	A
	XCHG				;SWITCH FAC AND REGISTERS, SAVE (DE)
	CALL	PUSHF			;PUT FAC ON STACK
	XCHG				;GET (DE) BACK WHERE IT BELONGS
	CALL	MOVFR			;PUT REGISTERS IN THE FAC
	POP	B
	POP	D
					;GET THE OLD FAC IN THE REGISTERS
FADD1:
	CPI	31O			;ARE WE WITHIN 24 BITS?
	RNC	
	PUSH	PSW			;SAVE SHIFT COUNT
	CALL	UNPACK			;UNPACK THE NUMBERS
	MOV	H,A			;SAVE SUBTRACTION FLAG
	POP	PSW			;GET SHIFT COUNT BACK
	CALL	SHIFTR			;SHIFT REGISTERS RIGHT THE RIGHT AMOUNT

;IF THE NUMBERS HAVE THE SAME SIGN, THEN WE ADD THEM.  IF THE SIGNS ARE
;DIFFERENT, THEN WE HAVE TO SUBTRACT THEM.  WE HAVE TO DO THIS BECAUSE THE
;MANTISSAS ARE POSITIVE.  JUDGING BY THE EXPONENTS, THE LARGER NUMBER IS IN
;THE FAC, SO IF WE SUBTRACT, THE SIGN OF THE RESULT SHOULD BE THE SIGN OF THE
;FAC; HOWEVER, IF THE EXPONENTS ARE THE SAME, THE NUMBER IN THE REGISTERS
;COULD BE BIGGER, SO AFTER WE SUBTRACT THEM, WE HAVE TO CHECK IF THE RESULT
;WAS NEGATIVE.  IF IT WAS, WE NEGATE THE NUMBER IN THE REGISTERS AND
;COMPLEMENT THE SIGN OF THE FAC.  (HERE THE FAC IS UNPACKED)
;IF WE HAVE TO ADD THE NUMBERS, THE SIGN OF THE RESULT IS THE SIGN OF THE
;FAC.  SO, IN EITHER CASE, WHEN WE ARE ALL DONE, THE SIGN OF THE RESULT
;WILL BE THE SIGN OF THE FAC.
	MOV	A,H			;GET SUBTRACTION FLAG
	ORA	A
	LXI	H,FACLO			;SET POINTER TO LO'S
	JP	FADD3			;SUBTRACT IF THE SIGNS WERE DIFFERENT
	CALL	FADDA			;ADD THE NUMBERS
	JNC	ROUND			;ROUND RESULT IF THERE WAS NO OVERFLOW
					;THE MOST IT CAN OVERFLOW IS ONE BIT
	INX	H			;THERE WAS OVERFLOW
	INR	M			;INCREMENT EXPONENT
	JZ	OVFIN4
	MVI	L,1			;SHIFT RESULT RIGHT ONE, SHIFT CARRY IN
	CALL	SHRADD
	JMP	ROUND			;ROUND RESULT AND WE ARE DONE
					;HERE TO SUBTRACT C,D,E,B FROM ((HL)+0,1,2),0
FADD3:	XRA	A			;SUBTRACT NUMBERS, NEGATE UNDERFLOW BYTE
	SUB	B
	MOV	B,A			;SAVE IT
	MOV	A,M			;SUBTRACT LOW ORDERS
	SBB	E
	MOV	E,A
	INX	H			;UPDATE POINTER TO NEXT BYTE
	MOV	A,M			;SUBTRACT MIDDLE ORDERS
	SBB	D
	MOV	D,A
	INX	H			;UPDATE POINTER TO HIGH ORDERS
	MOV	A,M			;SUBTRACT HIGH ORDERS
	SBB	C
	MOV	C,A
					;BECAUSE WE WANT A POSITIVE MANTISSA, CHECK IF WE HAVE TO NEGATE THE
					; NUMBER
FADFLT:	CC	NEGR			;ENTRY FROM FLOATR, INT: NEGATE NUMBER IF IT
					; WAS NEGATIVE, FALL INTO NORMALIZE


					;NORMALIZE C,D,E,B
					;ALTERS A,B,C,D,E,H,L
					;HERE WE SHIFT THE MANTISSA LEFT UNTIL THE MSB IS A ONE.
					;EXCEPT IN 4K, THE IDEA IS TO SHIFT LEFT BY 8 AS MANY TIMES AS
					;POSSIBLE.
NORMAL:
	MOV	L,B			;PUT LOWEST 2 BYTES IN (HL)
	MOV	H,E
	XRA	A			;ZERO SHIFT COUNT
NORM1:	MOV	B,A			;SAVE SHIFT COUNT
	MOV	A,C			;DO WE HAVE 1 BYTE OF ZEROS
	ORA	A
	JNZ	NORM3			;NO, SHIFT ONE PLACE AT A TIME
					;THIS LOOP SPEEDS THINGS UP BY SHIFTING 8 PLACES AT ONE TIME
	MOV	C,D			;YES, SHIFT OVER 1 BYTE
	MOV	D,H
	MOV	H,L
	MOV	L,A			;SHIFT IN 8 ZEROS FOR THE LOW ORDER
	MOV	A,B			;UPDATE SHIFT COUNT
	SUI	10O
	CPI	340O			;DID WE SHIFT IN 4 BYTES OF ZEROS?
	JNZ	NORM1			;NO, TRY TO SHIFT OVER 8 MORE
					;YES, NUMBER WAS ZERO.  FALL INTO ZERO


					;ZERO FAC
					;ALTERS A ONLY
					;EXITS WITH A=0
					;BY OUR FLOATING POINT FORMAT, THE NUMBER IS ZERO IF THE EXPONENT IS
					; ZERO
ZERO:	XRA	A			;ZERO A
ZERO0:	STA	FAC			;ZERO THE FAC'S EXPONENT, ENTRY IF A=0
	RET				;ALL DONE


NORM2:
	MOV	A,H			;CHECK FOR CASE OF NORMALIZING A SMALL INT
	ORA	L
	ORA	D
	JNZ	NORM2U			;DO USUAL THING
	MOV	A,C			;GET BYTE TO SHIFT
NORM2F:	DCR	B			;DECRMENT SHIFT COUNT
	RAL				;SHIFT LEFT
	JNC	NORM2F			;NORMALIZE LIKE SOB
	INR	B			;CORRECT SHIFT COUNT
	RAR				;WE DID IT ONE TOO MANY TIMES
	MOV	C,A			;RESULT TO [C]
	JMP	NORM3A			;ALL DONE
NORM2U:	DCR	B			;DECREMENT SHIFT COUNT
	DAD	H			;ROTATE (HL) LEFT ONE, SHIFT IN A ZERO
	MOV	A,D			;ROTATE NEXT HIGHER ORDER LEFT ONE
	RAL	
	MOV	D,A
	MOV	A,C			;ROTATE HIGH ORDER LEFT ONE
	ADC	A			;SET CONDITION CODES
	MOV	C,A
NORM3:	JP	NORM2			;WE HAVE MORE NORMALIZATION TO DO
NORM3A:	MOV	A,B			;ALL NORMALIZED, GET SHIFT COUNT
	MOV	E,H			;PUT LO'S BACK IN E,B
	MOV	B,L
	ORA	A			;CHECK IF WE DID NO SHIFTING
	JZ	ROUND
	LXI	H,FAC			;LOOK AT FAC'S EXPONENT
	ADD	M			;UPDATE EXPONENT
	MOV	M,A
	JNC	ZERO			;CHECK FOR UNDERFLOW
	JZ	ZERO			;NUMBER IS ZERO, ALL DONE
					;FALL INTO ROUND AND WE ARE DONE


					;ROUND RESULT IN C,D,E,B AND PUT NUMBER IN THE FAC
					;ALTERS A,B,C,D,E,H,L
					;WE ROUND C,D,E UP OR DOWN DEPENDING UPON THE MSB OF B
ROUND:	MOV	A,B			;SEE IF WE SHOULD ROUND UP
ROUNDB:	LXI	H,FAC			;ENTRY FROM FDIV, GET POINTER TO EXPONENT

					;INTEL FLOATING SOFTWARE FLAG
	ORA	A
	CM	ROUNDA			;DO IT IF NECESSARY
	MOV	B,M			;PUT EXPONENT IN B
					;HERE WE PACK THE HO AND SIGN
	INX	H			;POINT TO SIGN
	MOV	A,M			;GET SIGN
	ANI	200O			;GET RID OF UNWANTED BITS
	XRA	C			;PACK SIGN AND HO
	MOV	C,A			;SAVE IT IN C
	JMP	MOVFR			;SAVE NUMBER IN FAC




					;SUBROUTNE FOR ROUND:  ADD ONE TO C,D,E
ROUNDA:	INR	E			;ADD ONE TO THE LOW ORDER, ENTRY FROM QINT
	RNZ				;ALL DONE IF IT IS NOT ZERO
	INR	D			;ADD ONE TO NEXT HIGHER ORDER
	RNZ				;ALL DONE IF NO OVERFLOW
	INR	C			;ADD ONE TO THE HIGHEST ORDER
	RNZ				;RETURN IF NO OVEFLOW
	MVI	C,200O			;THE NUMBER OVERFLOWED, SET NEW HIGH ORDER
	INR	M			;UPDATE EXPONENT
	RNZ				;RETURN IF IT DID NOT OVERFLOW
	JMP	OVFIN8			;OVERFLOW AND CONTINUE



					;ADD (HL)+2,1,0 TO C,D,E
					;THIS CODE IS USED BY FADD, FOUT
FADDA:	MOV	A,M			;GET LOWEST ORDER
	ADD	E			;ADD IN OTHER LOWEST ORDER
	MOV	E,A			;SAVE IT
	INX	H			;UPDATE POINTER TO NEXT BYTE
	MOV	A,M			;ADD MIDDLE ORDERS
	ADC	D
	MOV	D,A
	INX	H			;UPDATE POINTER TO HIGH ORDER
	MOV	A,M			;ADD HIGH ORDERS
	ADC	C
	MOV	C,A
	RET				;ALL DONE


					;NEGATE NUMBER IN C,D,E,B
					;THIS CODE IS USED BY FADD, QINT
					;ALTERS A,B,C,D,E,L
NEGR:	LXI	H,FAC+1			;NEGATE FAC
	MOV	A,M			;GET SIGN
	CMA				;COMPLEMENT IT
	MOV	M,A			;SAVE IT AGAIN
	XRA	A			;ZERO A
	MOV	L,A			;SAVE ZERO IN L
	SUB	B			;NEGATE LOWEST ORDER
	MOV	B,A			;SAVE IT
	MOV	A,L			;GET A ZERO
	SBB	E			;NEGATE NEXT HIGHEST ORDER
	MOV	E,A			;SAVE IT
	MOV	A,L			;GET A ZERO
	SBB	D			;NEGATE NEXT HIGHEST ORDER
	MOV	D,A			;SAVE IT
	MOV	A,L			;GET ZERO BACK
	SBB	C			;NEGATE HIGHEST ORDER
	MOV	C,A			;SAVE IT
	RET				;ALL DONE


					;SHIFT C,D,E RIGHT
					;A = SHIFT COUNT
					;ALTERS A,B,C,D,E,L
					;THE IDEA (EXCEPT IN 4K) IS TO SHIFT RIGHT 8 PLACES AS MANY TIMES AS
					; POSSIBLE
SHIFTR:	MVI	B,0			;ZERO OVERFLOW BYTE
SHFTR1:	SUI	10O			;CAN WE SHIFT IT 8 RIGHT?
	JC	SHFTR2			;NO, SHIFT IT ONE PLACE AT A TIME
					;THIS LOOP SPEEDS THINGS UP BY SHIFTING 8 PLACES AT ONE TIME
	MOV	B,E			;SHIFT NUMBER 1 BYTE RIGHT
	MOV	E,D
	MOV	D,C
	MVI	C,0			;PUT 0 IN HO
	JMP	SHFTR1			;TRY TO SHIFT 8 RIGHT AGAIN
SHFTR2:	ADI	11O			;CORRECT SHIFT COUNT
	MOV	L,A			;SAVE SHIFT COUNT
;TEST FOR CASE (VERY COMMON) WHERE SHIFTING SMALL INTEGER RIGHT.
;THIS HAPPENS IN FOR LOOPS, ETC.
	MOV	A,D			;SEE IF THREE LOWS ARE ZERO.
	ORA	E
	ORA	B
	JNZ	SHFTR3			;IF SO, DO USUAL.
	MOV	A,C			;GET HIGH BYTE TO SHIFT
SHFTRF:	DCR	L			;DONE SHIFTING?
	RZ				;YES, DONE
	RAR				;ROTATE ONE RIGHT
	MOV	C,A			;SAVE RESULT
	JNC	SHFTRF			;ZAP BACK AND DO NEXT ONE IF NONE
	JMP	SHFTC			;CONTINUE SHIFTING
SHFTR3:	XRA	A			;CLEAR CARRY
	DCR	L			;ARE WE DONE SHIFTING?
	RZ				;RETURN IF WE ARE
	MOV	A,C			;GET HO
SHRADD:	RAR				;ENTRY FROM FADD, SHIFT IT RIGHT
	MOV	C,A			;SAVE IT
SHFTC:	MOV	A,D			;SHIFT NEXT BYTE RIGHT
	RAR	
	MOV	D,A
	MOV	A,E			;SHIFT LOW ORDER RIGHT
	RAR	
	MOV	E,A
	MOV	A,B			;SHIFT OVERFLOW BYTE RIGHT
	RAR	
	MOV	B,A
	JMP	SHFTR3			;SEE IF WE ARE DONE


	PAGE
	SUBTTL	NATURAL LOG FUNCTION
					;CALCULATION IS BY:
					; LN(F*2^N)=(N+LOG2(F))*LN(2)
					;AN APPROXIMATION POLYNOMIAL IS USED TO CALCULATE LOG2(F)

					;CONSTANTS USED BY LOG
FONE:	DB	000			; 1
	DB	000
	DB	000
	DB	201O
LOGP:	DB	004			;HART 2524 COEFFICIENTS
	DB	232O			;4.8114746
	DB	367O
	DB	031O
	DB	203O
	DB	044O			;6.105852
	DB	143O
	DB	103O
	DB	203O
	DB	165O			;-8.86266
	DB	315O
	DB	215O
	DB	204O
	DB	251O			;-2.054667
	DB	177O
	DB	203O
	DB	202O
LOGQ:	DB	004
	DB	000			;1.0
	DB	000
	DB	000
	DB	201O
	DB	342O			;6.427842
	DB	260O
	DB	115O
	DB	203O
	DB	012O			;4.545171
	DB	162O
	DB	021O
	DB	203O
	DB	364O			;.3535534
	DB	004
	DB	065O
	DB	177O

LOG:	CALL	SIGN			;CHECK FOR A NEGATIVE OR ZERO ARGUMENT
	ORA	A			;SET CC'S PROPERLY
	JPE	FCERR			;FAC .LE. 0, BLOW HIM OUT OF THE WATER
					;FSIGN ONLY RETURNS 0,1 OR 377 IN A
					;THE PARITY WILL BE EVEN IF A HAS 0 OR 377

	CALL	LOG2			;
	LXI	B,200Q*256+061Q
	LXI	D,162Q*256+030Q		;GET LN(2)
	JMP	FMULT			;COMPLETE LOG CALCULATION
LOG2:					;USE HART 2524 CALCULATION
	CALL	MOVRF			;MOVE FAC TO REGISTERS TOO
	MVI	A,200O			;
	STA	FAC			;ZERO THE EXPONENT
	XRA	B			;REMOVE 200 EXCESS FROM X
	PUSH	PSW			;SAVE EXPONENT
	CALL	PUSHF			;SAVE THE FAC (X)
	LXI	H,LOGP			;POINT TO P CONSTANTS
	CALL	POLY			;CALCULATE P(X)
	POP	B			;FETCH X
	POP	H			;PUSHF WOULD ALTER DE
	CALL	PUSHF			;PUSH P(X) ON THE STACK
	XCHG				;GET LOW BYTES OF X TO (DE)
	CALL	MOVFR			;AND MOVE TO FAC
	LXI	H,LOGQ			;POINT TO Q COEFFICIENTS
	CALL	POLY			;COMPUTE Q(X)
	POP	B			;FETCH P(X) TO REGISTERS
	POP	D
	CALL	FDIV			;CALCULATE P(X)/Q(X)
	POP	PSW			;RE-FETCH EXPONENT
	CALL	PUSHF			;SAVE EVALUATION
	CALL	FLOAT			;FLOAT THE EXPONENT
	POP	B
	POP	D
					;GET EVAL. BACK
	JMP	FADD

	PAGE
;	JMP	FMULT		;MULTIPLY BY LN(2)
	SUBTTL	FLOATING MULTIPLICATION AND DIVISION
					;MULTIPLICATION		FAC:=ARG*FAC
					;ALTERS A,B,C,D,E,H,L
FMULT:	CALL	SIGN			;CHECK IF FAC IS ZERO
	RZ				;IF IT IS, RESULT IS ZERO
	MVI	L,0			;ADD THE TWO EXPONENTS, L IS A FLAG
	CALL	MULDIV			;FIX UP THE EXPONENTS
					;SAVE THE NUMBER IN THE REGISTERS SO WE CAN ADD IT FAST
	MOV	A,C			;GET HO
	STA	FMULTA+1		;STORE HO OF REGISTERS
	XCHG				;STORE THE TWO LO'S OF THE REGISTERS
	SHLD	FMULTB+1
	LXI	B,0			;ZERO THE PRODUCT REGISTERS
	MOV	D,B
	MOV	E,B
	LXI	H,NORMAL
	PUSH	H			; ON THE STACK
	LXI	H,FMULT2		;PUT FMULT2 ON THE STACK TWICE, SO AFTER
	PUSH	H			; WE MULTIPLY BY THE LO BYTE, WE WILL
	PUSH	H			; MULTIPLY BY THE MO AND HO
	LXI	H,FACLO			;GET ADDRESS OF LO OF FAC
FMULT2:	MOV	A,M			;GET BYTE TO MULTIPLY BY
	INX	H			;MOVE POINTER TO NEXT BYTE
	ORA	A
	JZ	FMULT3			;ARE WE MULTIPLYING BY ZERO?
	PUSH	H			;SAVE POINTER
	XCHG				;GET LO'S IN (HL)
	MVI	E,10O			;SET UP A COUNT

;THE PRODUCT WILL BE FORMED IN C,D,E,B. THIS WILL BE IN C,H,L,B PART OF THE
;TIME IN ORDER TO USE THE "DAD" INSTRUCTION.  AT FMULT2, WE GET THE NEXT
;BYTE OF THE MANTISSA IN THE FAC TO MULTIPLY BY.  ((HL) POINTS TO IT)
;(THE FMULT2 SUBROUTINE PRESERVES (HL))  IN 8K, IF THE BYTE IS ZERO, WE JUST
;SHIFT THE PRODUCT 8 RIGHT.  THIS BYTE IS THEN SHIFTED RIGHT AND SAVED IN D
;(H IN 4K).  THE CARRY DETERMINES IF WE SHOULD ADD IN THE SECOND FACTOR
;IF WE DO, WE ADD IT TO C,H,L.  B IS ONLY USED TO DETERMINE WHICH WAY WE
;ROUND.  WE THEN SHIFT C,H,L,B (C,D,E,B) IN 4K RIGHT ONE TO GET READY FOR THE
;NEXT TIME THROUGH THE LOOP.  NOTE THAT THE CARRY IS SHIFTED INTO THE MSB OF
;C.  E HAS A COUNT (L IN 4K) TO DETERMINE WHEN WE HAVE LOOKED AT ALL THE BITS
;OF D (H IN 4K).
FMULT4:	RAR				;ROTATE BYTE RIGHT
	MOV	D,A			;SAVE IT
	MOV	A,C			;GET HO
	JNC	FMULT5			;DON'T ADD IN NUMBER IF BIT WAS ZERO
	PUSH	D			;SAVE COUNTERS
FMULTB:	LXI	D,0			;GET LO'S OF NUMBER TO ADD, THIS IS SET ABOVE
	DAD	D			;ADD THEM IN
	POP	D			;GET COUNTERS BACK
FMULTA:	ACI	0			;ADD IN HO, THIS IS SET UP ABOVE
FMULT5:	RAR				;ROTATE RESULT RIGHT ONE
	MOV	C,A
	MOV	A,H			;ROTATE NEXT BYTE
	RAR	
	MOV	H,A
	MOV	A,L			;ROTATE NEXT LOWER ORDER
	RAR	
	MOV	L,A
	MOV	A,B			;ROTATE LO
	RAR	
	MOV	B,A
	ANI	20O			;SEE IF WE ROTATED THRU ST
	JZ	FML5B1			;IF NOT DON'T WORRY
	MOV	A,B			;RE FETCH LO
	ORI	40O			;"OR" IN STICKY
	MOV	B,A			;BACK TO LO
FML5B1:
FMLT5B:
	DCR	E			;ARE WE DONE?
	MOV	A,D			;GET NUMBER WE ARE MULTIPLYING BY
	JNZ	FMULT4			;MULTIPLY AGAIN IF WE ARE NOT DONE
	XCHG				;GET LO'S IN (DE)
POPHRT:	POP	H			;GET POINTER TO NUMBER TO MULTIPLY BY
	RET				;ALL DONE
FMULT3:	MOV	B,E			;MULTIPLY BY ZERO: SHIFT EVERYTHING 8 RIGHT
	MOV	E,D
	MOV	D,C
	MOV	C,A			;SHIFT IN 8 ZEROS ON THE LEFT
	RET				;ALL DONE


					;DIVIDE FAC BY 10
					;ALTERS A,B,C,D,E,H,L
DIV10:	CALL	PUSHF			;SAVE NUMBER
	LXI	H,FTEN			;GET POINTER TO THE CONSTANT '10'
	CALL	MOVFM			;MOVE TEN INTO THE FAC
FDIVT:	POP	B
	POP	D
					;GET NUMBER BACK IN REGISTERS
					;FALL INTO DIVIDE AND WE ARE DONE


					;DIVISION	FAC:=ARG/FAC
					;ALTERS A,B,C,D,E,H,L
FDIV:	CALL	SIGN			;CHECK FOR DIVISION BY ZERO
	JZ	INTDV1			;DON'T ALLOW DIVIDE BY ZERO
	MVI	L,377O			;SUBTRACT THE TWO EXPONENTS, L IS A FLAG
	CALL	MULDIV			;FIX UP THE EXPONENTS AND THINGS
	INR	M
	INR	M
					;HERE WE SAVE THE FAC IN MEMORY SO WE CAN SUBTRACT IT FROM THE NUMBER
					;IN THE REGISTERS QUICKLY.
	DCX	H			;POINT TO HO
	MOV	A,M			;GET HO
	STA	FDIVA+1			;SAVE IT
	DCX	H			;SAVE MIDDLE ORDER
	MOV	A,M
	STA	FDIVB+1			;PUT IT WHERE NOTHING WILL HURT IT
	DCX	H			;SAVE LO
	MOV	A,M
	STA	FDIVC+1

;THE NUMERATOR WILL BE KEPT IN B,H,L.  THE QUOTIENT WILL BE FORMED IN C,D,E.
;TO GET A BIT OF THE QUOTIENT, WE FIRST SAVE B,H,L ON THE STACK, THEN
;SUBTRACT THE DENOMINATOR THAT WE SAVED IN MEMORY.  THE CARRY INDICATES
;WHETHER OR NOT B,H,L WAS BIGGER THAN THE DENOMINATOR.  IF B,H,L WAS BIGGER,
;THE NEXT BIT OF THE QUOTIENT IS A ONE.  TO GET THE OLD B,H,L OFF THE STACK,
;WE POP THEM INTO THE PSW.  IF THE DENOMINATOR WAS BIGGER, THE NEXT BIT OF
;THE QUOTIENT IS ZERO, AND WE GET THE OLD B,H,L BACK BY POPPING IT OFF THE
;STACK.  WE HAVE TO KEEP AN EXTRA BIT OF THE QUOTIENT IN FDIVG+1 IN CASE THE
;DENOMINATOR WAS BIGGER,  THEN B,H,L WILL GET SHIFTED LEFT.  IF THE MSB  OF
;B WAS ONE, IT HAS TO BE STORED SOMEWHERE, SO WE STORE IT IN FDIVG+1.  THEN
;THE NEXT TIME THROUGH THE LOOP B,H,L WILL LOOK BIGGER BECAUSE IT HAS AN
;EXTRA HO BIT IN FDIVG+1. WE ARE DONE DIVIDING WHEN THE MSB OF C IS A ONE.
;THIS OCCURS WHEN WE HAVE CALCULATED 24 BITS OF THE QUOTIENT.  WHEN WE JUMP
;TO ROUND, THE 25TH BIT OF THE QUOTIENT DETERMINES WHETHER WE ROUND OR NOT.
;IT IS IN THE MSB OF A.  IF INITIALLY THE DENOMINATOR IS BIGGER THAN THE
;NUMERATOR, THE FIRST BIT OF THE QUOTIENT WILL BE ZERO.  THIS MEANS WE
;WILL GO THROUGH THE DIVIDE LOOP 26 TIMES, SINCE IT STOPS ON THE 25TH BIT
;AFTER THE FIRST NON-ZERO BIT OF THE QUOTIENT.  SO, THIS QUOTIENT WILL LOOK
;SHIFTED LEFT ONE FROM THE QUOTIENT OF TWO NUMBERS IN WHICH THE NUMERATOR IS
;BIGGER.  THIS CAN ONLY OCCUR ON THE FIRST TIME THROUGH THE LOOP, SO C,D,E
;ARE ALL ZERO.  SO, IF WE FINISH THE LOOP AND C,D,E ARE ALL ZERO, THEN WE
;MUST DECREMENT THE EXPONENT TO CORRECT FOR THIS.
	MOV	B,C			;GET NUMBER IN B,H,L
	XCHG	
	XRA	A			;ZERO C,D,E AND HIGHEST ORDER
	MOV	C,A
	MOV	D,A
	MOV	E,A
	STA	FDIVG+1
FDIV1:	PUSH	H			;SAVE LO'S OF NUMBER
	PUSH	B			;SAVE HO OF NUMBER
	MOV	A,L			;SUBTRACT NUMBER THAT WAS IN FAC
FDIVC:	SUI	0			;SUBTRACT LO
	MOV	L,A			;SAVE IT
	MOV	A,H			;SUBTRACT MIDDLE ORDER
FDIVB:	SBI	0
	MOV	H,A
	MOV	A,B			;SUBTRACT HO
FDIVA:	SBI	0
	MOV	B,A
FDIVG:	MVI	A,0			;GET HIGHEST ORDER
					;WE COULD DO THIS WITH NO CODE IN RAM, BUT
					; IT WOULD BE MUCH SLOWER.
	SBI	0			;SUBTRACT THE CARRY FROM IT
	CMC				;SET CARRY TO CORESPOND TO NEXT QUOTIENT BIT
	JNC	FDIV2			;GET OLD NUMBER BACK IF WE SUBTRACTED TOO MUCH
	STA	FDIVG+1			;UPDATE HIGHEST ORDER
	POP	PSW			;THE SUBTRACTION WAS GOOD
	POP	PSW			;GET PREVIOUS NUMBER OFF STACK
	STC				;NEXT BIT IN QUOTIENT IS A ONE
	DB	322O			;"JNC" AROUND NEXT 2 BYTES
FDIV2:	POP	B			;WE SUBTRACTED TOO MUCH
	POP	H			;GET OLD NUMBER BACK
	MOV	A,C			;ARE WE DONE?
	INR	A			;SET SIGN FLAG WITHOUT AFFECTING CARRY
	DCR	A
	RAR				;PUT CARRY IN MSB
	JP	DIV2A			;NOT READY TO ROUND YET
	RAL				;BIT BACK TO CARRY
	LDA	FDIVG+1			;FETCH EXTRA BIT
	RAR				;BOTH NOW IN A
	ANI	300O			;CLEAR SUPERFLUOUS BITS
	PUSH	PSW			;SAVE FOR LATER
	MOV	A,B			;FETCH HO OF REMAINDER
	ORA	H			;FETCH HO
	ORA	L			;SEE IF OTHER REMAINDER BITS
					;AND IF SO SET ST
	JZ	DIV2AA			;IF NOT IGNORE
	MVI	A,40O			;ST BIT
DIV2AA:	POP	H			;AND THE REST OF REMAINDER
	ORA	H			;"OR" IN REST
	JMP	ROUNDB			;USE REMAINDER
DIV2A:
	RAL				;WE AREN'T, GET OLD CARRY BACK
	MOV	A,E			;ROTATE EVERYTHING LEFT ONE
	RAL				;ROTATE NEXT BIT OF QUOTIENT IN
	MOV	E,A
	MOV	A,D
	RAL	
	MOV	D,A
	MOV	A,C
	RAL	
	MOV	C,A
	DAD	H			;ROTATE A ZERO INTO RIGHT END OF NUMBER
	MOV	A,B			;THE HO BYTE, FINALLY!
FDIV2A:	RAL	
	MOV	B,A
FDIV2B:	LDA	FDIVG+1			;ROTATE THE HIGHEST ORDER
	RAL	
	STA	FDIVG+1
	MOV	A,C			;ADD ONE TO EXPONENT IF THE FIRST SUBTRACTION
	ORA	D			; DID NOT WORK
	ORA	E
	JNZ	FDIV1			;THIS ISN'T THE CASE
	PUSH	H			;SAVE PART OF NUMBER
	LXI	H,FAC			;GET POINTER TO FAC
	DCR	M			;DECREMENT EXPONENT
	POP	H			;GET NUMBER BACK
	JNZ	FDIV1			;DIVIDE MORE IF NO OVERFLOW OCCURED
	JMP	ZERO			;UNDERFLOW!!


					;CHECK SPECIAL CASES AND ADD EXPONENTS FOR FMULT, FDIV
					;ALTERS A,B,H,L
MULDVS:	MVI	A,377O			;ENTRY FROM DDIV, SUBTRACT EXPONENTS
	DB	056O			;"MVI	L" AROUND NEXT BYTE
MULDVA:	XRA	A			;ENTRY FROM DMULT, ADD EXPONENTS
	LXI	H,ARG-1			;GET POINTER TO SIGN AND HO OF ARG
	MOV	C,M			;GET HO AND SIGN FOR UNPACKING
	INX	H			;INCREMENT POINTER TO EXPONENT
	XRA	M			;GET EXPONENT
	MOV	B,A			;SAVE IT IN B FOR BELOW
	MVI	L,0			;SET FLAG TO ADD THE EXPONENTS BELOW
MULDIV:	MOV	A,B			;IS NUMBER IN REGISTERS ZERO?
	ORA	A
	JZ	MULDV2			;IT IS, ZERO FAC AND WE ARE DONE
	MOV	A,L			;GET ADD OR SUBTRACT FLAG
	LXI	H,FAC			;GET POINTER TO EXPONENT
	XRA	M			;GET EXPONENT
	ADD	B			;ADD IN REGISTER EXPONENT
	MOV	B,A			;SAVE IT
	RAR				;CHECK FOR OVERFLOW
	XRA	B			;OVERFLOW IF SIGN IS THE SAME AS CARRY
	MOV	A,B			;GET SUM
	JP	MULDV1			;WE HAVE OVERFLOW!!
	ADI	200O			;PUT EXPONENT IN EXCESS 200
	MOV	M,A			;SAVE IT IN THE FAC
	JZ	POPHRT			;WE HAVE UNDEFLOW!! RETURN.
	CALL	UNPACK			;UNPACK THE ARGUMENTS
	MOV	M,A			;SAVE THE NEW SIGN
DCXHRT:	DCX	H			;POINT TO EXPONENT
	RET				;ALL DONE, LEAVE HO IN A
MLDVEX:	CALL	SIGN			;ENTRY FROM EXP, PICK UNDERFLOW IF NEGATIVE
	CMA				;PICK OVERFLOW IF POSITIVE
	POP	H			;DON'T SCREW UP STACK
MULDV1:	ORA	A			;IS ERROR OVERFLOW OR UNDEFLOW?
MULDV2:	POP	H			;GET OLD RETURN ADDRESS OFF STACK



	JP	ZERO
	JMP	OVFIN2


					;MULTIPLY FAC BY 10
					;ALTERS A,B,C,D,E,H,L
MUL10:	CALL	MOVRF			;GET NUMBER IN REGISTERS
	MOV	A,B			;GET EXPONENT
	ORA	A			;RESULT IS ZERO IF ARG IS ZERO
	RZ				;IT IS
	ADI	2			;MULTIPLY BY 4 BY ADDING 2 TO EXPONENT
	JC	OVFIN3
	MOV	B,A			;RESTORE EXPONENT
	CALL	FADD			;ADD IN ORIGINAL NUMBER TO GET 5 TIMES IT
	LXI	H,FAC			;ADD 1 TO EXPONENT TO MULTIPLY NUMBER BY
	INR	M			; 2 TO GET 10 TIMES ORIGINAL NUMBER
	RNZ				;ALL DONE IF NO OVERFLOW
	JMP	OVFIN3
	PAGE
	SUBTTL	SIGN, SGN, FLOAT, NEG AND ABS
					;PUT SIGN OF FAC IN A
					;ALTERS A ONLY
					;LEAVES FAC ALONE
					;NOTE: TO TAKE ADVANTAGE OF THE RST INSTRUCTIONS TO SAVE BYTES,
					;FSIGN IS DEFINED TO BE AN RST.  "FSIGN" IS EQUIVALENT TO "CALL	SIGN"
					;THE FIRST FEW INSTRUCTIONS OF SIGN (THE ONES BEFORE SIGNC) ARE DONE
					;IN THE 8 BYTES AT THE RST LOCATION.

					;INTEL FLOATING SOFTWARE FLAG

					;FSIGN IS USUALLY AN RST
SIGN:	LDA	FAC			;CHECK IF THE NUMBER IS ZERO
	ORA	A
	RZ				;IT IS, A IS ZERO
SIGNC:	LDA	FAC-1			;GET SIGN OF FAC, IT IS NON-ZERO
	DB	376O			;"CPI" AROUND NEXT BYTE
FCOMPS:	CMA				;ENTRY FROM FCOMP, COMPLEMENT SIGN
ICOMPS:	RAL				;ENTRY FROM ICOMP, PUT SIGN BIT IN CARRY
SIGNS:	SBB	A			;A=0 IF CARRY WAS 0, A=377 IF CARRY WAS 1
	RNZ				;RETURN IF NUMBER WAS NEGATIVE
INRART:	INR	A			;PUT ONE IN A IF NUMBER WAS POSITIVE
	RET				;ALL DONE


					;SGN FUNCTION
					;ALTERS A,B,C,D,E,H,L
					;FALL INTO FLOAT


					;FLOAT THE SIGNED INTEGER IN A
					;ALTERS A,B,C,D,E,H,L

					;USE MICROSOFT FORMAT IF NOT INTEL
FLOAT:	MVI	B,210O			;SET EXPONENT CORRECTLY
	LXI	D,0			;ZERO D,E
					;FALL INTO FLOATR


					;FLOAT THE SIGNED NUMBER IN B,A,D,E
					;ALTERS A,B,C,D,E,H,L
FLOATR:	LXI	H,FAC			;GET POINTER TO FAC
	MOV	C,A			;PUT HO IN C
	MOV	M,B			;PUT EXPONENT IN THE FAC
	MVI	B,0			;ZERO OVERFLOW BYTE
	INX	H			;POINT TO SIGN
	MVI	M,200O			;ASSUME A POSITIVE NUMBER
	RAL				;PUT SIGN IN CARRY
	JMP	FADFLT			;GO AND FLOAT THE NUMBER


					;FALL INTO NEG


;
;	;GET THE VALTYP AND SET CONDITION CODES AS FOLLOWS:
;;CONDITION CODE		TRUE SET	FALSE SET
;;SIGN			INT=2		STR,SNG,DBL
;;ZERO			STR=3		INT,SNG,DBL
;;ODD PARITY		SNG=4		INT,STR,DBL
;;NO CARRY		DBL=10		INT,STR,SNG
;GETYPE:	LDA	VALTYP		;GET THE VALTYP
;	CPI	10		;SET CARRY CORRECTLY
;	DCR	A		;SET THE OTHER CONDITION CODES CORRECTLY
;	DCR	A		; WITHOUT AFFECTING CARRY
;	DCR	A
;	RET	*			;ALL DONE


					;ABSOLUTE VALUE OF FAC
					;ALTERS A,B,C,D,E,H,L
ABS:	CALL	VSIGN			;GET THE SIGN OF THE FAC IN A
	RP				;IF IT IS POSITIVE, WE ARE DONE


					;NEGATE ANY TYPE VALUE IN THE FAC
					;ALTERS A,B,C,D,E,H,L
VNEG:	CALL	GETYPR			;SEE WHAT KIND OF NUMBER WE HAVE
	JM	INEG			;WE HAVE AN INTEGER, NEGATE IT THAT WAY
	JZ	TMERR			;BLOW UP ON STRINGS
					;FALL INTO NEG TO NEGATE A SNG OR DBL


					;NEGATE NUMBER IN THE FAC
					;ALTERS A,H,L
					;NOTE: THE NUMBER MUST BE PACKED

					;IF INTFSW=0 DO NOT USE INTEL FORMAT
NEG:	LXI	H,FAC-1			;GET POINTER TO SIGN
	MOV	A,M			;GET SIGN
	XRI	200O			;COMPLEMENT SIGN BIT
	MOV	M,A			;SAVE IT
	RET				;ALL DONE


					;SGN FUNCTION
					;ALTERS A,H,L
SGN:	CALL	VSIGN			;GET THE SIGN OF THE FAC IN A
					;ENTRY TO CONVERT A SIGNED NUMBER IN A TO AN INTEGER
CONIA:	MOV	L,A			;PUT IT IN THE LO POSITION
	RAL				;EXTEND THE SIGN TO THE HO
	SBB	A
	MOV	H,A
	JMP	MAKINT			;RETURN THE RESULT AND SET VALTYP


					;GET THE SIGN OF THE VALUE IN THE FAC IN A
					;ALTERS A,H,L
VSIGN:	CALL	GETYPR			;SEE WHAT KIND OF A NUMBER WE HAVE
	JZ	TMERR			;BLOW UP ON STRINGS
	JP	SIGN			;SINGLE AND DOUBLE PREC. WORK THE SAME
	LHLD	FACLO			;GET THE INTEGER ARGUMENT

					;ENTRY TO FIND THE SIGN OF (HL)
					;ALTERS A ONLY
ISIGN:	MOV	A,H			;GET ITS SIGN
	ORA	L			;CHECK IF THE NUMBER IS ZERO
	RZ				;IT IS, WE ARE DONE
	MOV	A,H			;IT ISN'T, SIGN IS THE SIGN OF H
	JMP	ICOMPS			;GO SET A CORRECTLY
	PAGE
	SUBTTL	FLOATING POINT MOVEMENT ROUTINES
					;PUT FAC ON STACK
					;ALTERS D,E
PUSHF:	XCHG				;SAVE (HL)
	LHLD	FACLO			;GET LO'S
	XTHL				;SWITCH LO'S AND RET ADDR
	PUSH	H			;PUT RET ADDR BACK ON STACK
	LHLD	FAC-1			;GET HO'S
	XTHL				;SWITCH HO'S AND RET ADDR
	PUSH	H			;PUT RET ADDR BACK ON STACK
	XCHG				;GET OLD (HL) BACK
	RET				;ALL DONE


					;MOVE NUMBER FROM MEMORY [(HL)] TO FAC
					;ALTERS B,C,D,E,H,L
					;AT EXIT NUMBER IS IN B,C,D,E
					;AT EXIT (HL):=(HL)+4
MOVFM:	CALL	MOVRM			;GET NUMBER IN REGISTERS
					;FALL INTO MOVFR AND PUT IT IN FAC


					;MOVE REGISTERS (B,C,D,E) TO FAC
					;ALTERS D,E
MOVFR:	XCHG				;GET LO'S IN (HL)
	SHLD	FACLO			;PUT THEM WHERE THEY BELONG
	MOV	H,B			;GET HO'S IN (HL)
	MOV	L,C
	SHLD	FAC-1			;PUT HO'S WHERE THEY BELONG
	XCHG				;GET OLD (HL) BACK
	RET				;ALL DONE


					;MOVE FAC TO REGISTERS (B,C,D,E)
					;ALTERS B,C,D,E,H,L
MOVRF:	LXI	H,FACLO			;GET POINTER TO FAC
					;FALL INTO MOVRM


					;GET NUMBER IN REGISTERS (B,C,D,E) FROM MEMORY [(HL)]
					;ALTERS B,C,D,E,H,L
					;AT EXIT (HL):=(HL)+4
MOVRM:	MOV	E,M			;GET LO
	INX	H			;POINT TO MO
GETBCD:	MOV	D,M			;GET MO, ENTRY FOR BILL
	INX	H			;POINT TO HO
	MOV	C,M			;GET HO
	INX	H			;POINT TO EXPONENT
	MOV	B,M			;GET EXPONENT
INXHRT:	INX	H			;INC POINTER TO BEGINNING OF NEXT NUMBER
	RET				;ALL DONE


					;MOVE NUMBER FROM FAC TO MEMORY [(HL)]
					;ALTERS A,B,D,E,H,L
MOVMF:	LXI	D,FACLO			;GET POINTER TO FAC
					;FALL INTO MOVE


					;MOVE NUMBER FROM (DE) TO (HL)
					;ALTERS A,B,D,E,H,L
					;EXITS WITH (DE):=(DE)+4, (HL):=(HL)+4
MOVE:	MVI	B,4			;SET COUNTER
	JMP	MOVE1			;CONTINUE WITH THE MOVE


					;MOVE ANY TYPE VALUE (AS INDICATED BY VALTYP) FROM (DE) TO (HL)
					;ALTERS A,B,D,E,H,L
MOVVFM:	XCHG				;ENTRY TO SWITCH (DE) AND (HL)
VMOVE:	LDA	VALTYP			;GET THE LENGTH OF THE NUMBER
	MOV	B,A			;SAVE IT AWAY
	PUBLIC	MOVE1
MOVE1:	LDAX	D			;GET WORD, ENTRY FROM VMOVMF
	MOV	M,A			;PUT IT WHERE IT BELONGS
	INX	D			;INCREMENT POINTERS TO NEXT WORD
	INX	H
	DCR	B
	JNZ	MOVE1
	RET	


					;UNPACK THE FAC AND THE REGISTERS
					;ALTERS A,C,H,L
					;WHEN THE NUMBER IN THE FAC IS UNACKED, THE ASSUMED ONE IN THE
					;MANTISSA IS RESTORED, AND THE COMPLEMENT OF THE SIGN IS PLACED
					;IN FAC+1

					;INTEL FLOATING SOFTWARE FLAG
UNPACK:	LXI	H,FAC-1			;POINT TO HO AND SIGN
	MOV	A,M			;GET HO AND SIGN
	RLC				;DUPLICATE THE SIGN IN CARRY AND THE LSB
	STC				;RESTORE THE HIDDEN ONE
	RAR				;RESTORE THE NUMBER IN A
	MOV	M,A			;SAVE HO
	CMC				;GET THE COMPLEMENT OF THE SIGN
	RAR				;GET IT IN THE SIGN BIT
	INX	H			;POINT TO TEMPORARY SIGN BYTE
	INX	H
	MOV	M,A			;SAVE COMPLEMENT OF SIGN
	MOV	A,C			;GET HO AND SIGN OF THE REGISTERS
	RLC				;DUPLICATE THE SIGN IN CARRY AND THE LSB
	STC				;RESTORE THE HIDDEN ONE
	RAR				;RESTORE THE HO IN A
	MOV	C,A			;SAVE THE HO
	RAR				;GET THE SIGN BACK
	XRA	M			;COMPARE SIGN OF FAC AND SIGN OF REGISTERS
	RET				;ALL DONE


					;MOVE ANY TYPE VALUE FROM MEMORY [(HL)] TO FAC
					;ALTERS A,B,D,E,H,L
VMOVFA:	LXI	H,ARGLO			;ENTRY FROM DADD, MOVE ARG TO FAC
VMOVFM:	LXI	D,MOVVFM		;GET ADDRESS OF LOCATION THAT DOES
	JMP	VMVVFM			; AN "XCHG" AND FALLS INTO MOVE1


					;MOVE ANY TYPE VALUE FROM FAC TO MEMORY [(HL)]
					;ALTERS A,B,D,E,H,L
VMOVAF:	LXI	H,ARGLO			;ENTRY FROM FIN, DMUL10, DDIV10
					;MOVE FAC TO ARG
VMOVMF:	LXI	D,VMOVE			;GET ADDRESS OF MOVE SUBROUTINE
VMVVFM:	PUSH	D			;SHOVE IT ON THE STACK
VDFACS:	LXI	D,FACLO			;GET FIRST ADDRESS FOR INT, STR, SNG
	CALL	GETYPR			;GET THE VALUE TYPE
	RC				;GO MOVE IT IF WE DO NOT HAVE A DBL
	LXI	D,DFACLO		;WE DO, GET LO ADDR OF THE DBL NUMBER
	RET				;GO DO THE MOVE
	PAGE
	SUBTTL	COMPARE TWO NUMBERS
					;COMPARE TWO SINGLE PRECISION NUMBERS
					;A=1 IF ARG .LT. FAC
					;A=0 IF ARG=FAC
					;A=-1 IF ARG .GT. FAC
					;DOREL DEPENDS UPON THE FACT THAT FCOMP RETURNS WITH CARRY ON
					; IFF A HAS 377
					;ALTERS A,H,L
FCOMP:	MOV	A,B			;CHECK IF ARG IS ZERO
	ORA	A
	JZ	SIGN
	LXI	H,FCOMPS		;WE JUMP TO FCOMPS WHEN WE ARE DONE
	PUSH	H			;PUT THE ADDRESS ON THE STACK
	CALL	SIGN			;CHECK IF FAC IS ZERO
	MOV	A,C			;IF IT IS, RESULT IS MINUS THE SIGN OF ARG
	RZ				;IT IS
	LXI	H,FAC-1			;POINT TO SIGN OF FAC
	XRA	M			;SEE IF THE SIGNS ARE THE SAME
	MOV	A,C			;IF THEY ARE DIFFERENT, RESULT IS SIGN OF ARG
	RM				;THEY ARE DIFFERENT
	CALL	FCOMP2			;CHECK THE REST OF THE NUMBER
FCOMPD:	RAR				;NUMBERS ARE DIFFERENT, CHANGE SIGN IF
	XRA	C			; BOTH NUMBERS ARE NEGATIVE
	RET				;GO SET UP A

FCOMP2:	INX	H			;POINT TO EXPONENT
	MOV	A,B			;GET EXPONENT OF ARG
	CMP	M			;COMPARE THE TWO
	RNZ				;NUMBERS ARE DIFFERENT
	DCX	H			;POINT TO HO
	MOV	A,C			;GET HO OF ARG
	CMP	M			;COMPARE WITH HO OF FAC
	RNZ				;THEY ARE DIFFERENT
	DCX	H			;POINT TO MO OF FAC
	MOV	A,D			;GET MO OF ARG
	CMP	M			;COMPARE WITH MO OF FAC
	RNZ				;THE NUMBERS ARE DIFFERENT
	DCX	H			;POINT TO LO OF FAC
	MOV	A,E			;GET LO OF ARG
	SUB	M			;SUBTRACT LO OF FAC
	RNZ				;NUMBERS ARE DIFFERENT
	POP	H			;NUMBERS ARE THE SAME, DON'T SCREW UP STACK
	POP	H
	RET				;ALL DONE


					;COMPARE TWO INTEGERS
					;A=1 IF (DE) .LT. (HL)
					;A=0 IF (DE)=(HL)
					;A=-1 IF (DE) .GT. (HL)
					;ALTERS A ONLY
ICOMP:	MOV	A,D			;ARE THE SIGNS THE SAME?
	XRA	H
	MOV	A,H			;IF NOT, ANSWER IS THE SIGN OF (HL)
	JM	ICOMPS			;THEY ARE DIFFERENT
	CMP	D			;THEY ARE THE SAME, COMPARE THE HO'S
	JNZ	SIGNS			;GO SET UP A
	MOV	A,L			;COMPARE THE LO'S
	SUB	E
	JNZ	SIGNS			;GO SET UP A
	RET				;ALL DONE, THEY ARE THE SAME


					;COMPARE TWO DOUBLE PRECISION NUMBERS
					;A=1 IF ARG .LT. FAC
					;A=0 IF ARG=FAC
					;A=-1 IF ARG .GT. FAC
					;ALTERS A,B,C,D,E,H,L
DCOMPD:	LXI	H,ARGLO			;ENTRY WITH POINTER TO ARG IN (DE)
	CALL	VMOVE			;MOVE THE ARGUMENT INTO ARG
	PUBLIC	XDCOMP
XDCOMP:	LXI	D,ARG			;GET POINTER TO ARG
	LDAX	D			;SEE IF ARG=0
	ORA	A
	JZ	SIGN			;ARG=0, GO SET UP A
	LXI	H,FCOMPS		;PUSH FCOMPS ON STACK SO WE WILL RETURN TO
	PUSH	H			; TO IT AND SET UP A
	CALL	SIGN			;SEE IF FAC=0
	DCX	D			;POINT TO SIGN OF ARGUMENT
	LDAX	D			;GET SIGN OF ARG
	MOV	C,A			;SAVE IT FOR LATER
	RZ				;FAC=0, SIGN OF RESULT IS SIGN OF ARG
	LXI	H,FAC-1			;POINT TO SIGN OF FAC
	XRA	M			;SEE IF THE SIGNS ARE THE SAME
	MOV	A,C			;IF THEY ARE, GET THE SIGN OF THE NUMBERS
	RM				;THE SIGNS ARE DIFFERENT, GO SET A
	INX	D			;POINT BACK TO EXPONENT OF ARG
	INX	H			;POINT TO EXPONENT OF FAC
	MVI	B,10O			;SET UP A COUNT
DCOMP1:	LDAX	D			;GET A BYTE FROM ARG
	SUB	M			;COMPARE IT WITH THE FAC
	JNZ	FCOMPD			;THEY ARE DIFFERENT, GO SET UP A
	DCX	D			;THEY ARE THE SAME, EXAMINE THE NEXT LOWER
	DCX	H			; ORDER BYTES
	DCR	B			;ARE WE DONE?
	JNZ	DCOMP1			;NO, COMPARE THE NEXT BYTES
	POP	B			;THEY ARE THE SAME, GET FCOMPS OFF STACK
	RET				;ALL DONE


					;COMPARE TWO DOUBLE PRECISION NUMBERS
					;A=1 IF ARG .GT. FAC
					;A=0 IF ARG=FAC
					;A=-1 IF ARG .LT. FAC
					;NOTE:	THIS IS THE REVERSE OF ICOMP, FCOMP AND XDCOMP
					;ALTERS A,B,C,D,E,H,L
DCOMP:	CALL	XDCOMP			;COMPARE THE TWO NUMBERS
	JNZ	FCOMPS			;NEGATE THE ANSWER, MAKE SURE THE CARRY COMES
	RET				; OUT CORRECT FOR DOCMP
	PAGE
	SUBTTL	CONVERSION ROUTINES BETWEEN INTEGER, SINGLE AND DOUBLE PRECISION
					;FORCE THE FAC TO BE AN INTEGER
					;ALTERS A,B,C,D,E,H,L
FRCINT:	CALL	GETYPR			;SEE WHAT WE HAVE
	LHLD	FACLO			;GET FACLO+0,1 IN CASE WE HAVE AN INTEGER
	RM				;WE HAVE AN INTEGER, ALL DONE
	JZ	TMERR			;WE HAVE A STRING, THAT IS A "NO-NO"
	JPO	FRCIN2			;GO DO S.P.
FDBINT:	CALL	VMOVAF			;ADD D.P. .5
	LXI	H,DHALF			;
	CALL	VMOVFM
	CALL	DADD			;
FRDBIN:	CALL	CONSD
	JMP	FRCIN3
FRCIN2:	CALL	FADDH
FRCIN3:	LDA	FAC-1			;GET SIGN BYTE
	ORA	A			;SET CONDITION CODES CORRECTLY
	PUSH	PSW
	ANI	177O			;CLEAR SIGN
	STA	FAC-1			;MAKE FAC POSITIVE
	LDA	FAC			;GET EXPONENT
	CPI	220O			;SEE IF TOO LARGE
	JNC	OVERR			;
	CALL	QINT			;CONVERT TO INTEGER
	LDA	FAC
	ORA	A
	JNZ	FRCIAA
	POP	PSW			;
	XCHG	
	JMP	FRCI3A
FRCIAA:
	POP	PSW			;
	XCHG				;MOVE INTEGER TO (HL)
	JP	FRCIN4
FRCI3A:	MOV	A,H
	CMA	
	MOV	H,A			;COMPLEMENT (HL)
	MOV	A,L
	CMA	
	MOV	L,A			;
FRCIN4:	JMP	MAKINT
	LXI	H,OVERR			;PUT OVERR ON THE STACK SO WE WILL GET ERROR
	PUSH	H			; IF NUMBER IS TOO BIG
					;FALL INTO CONIS


					;CONVERT SINGLE PRECISION NUMBER TO INTEGER
					;ALTERS A,B,C,D,E,H,L
	PUBLIC	CONIS
CONIS:	LDA	FAC			;GET THE EXPONENT
	CPI	220O			;SEE IF IT IS TOO BIG
	JNC	CONIS2			;IT IS, BUT IT MIGHT BE -32768
	CALL	QINT			;IT ISN'T, CONVERT IT TO AN INTEGER
	XCHG				;PUT IT IN (HL)
					;ENTRY FROM IADD
CONIS1:	POP	D			;GET ERROR ADDRESS OFF STACK

					;PUT (HL) IN FACLO, SET VALTYP TO INT
					;ALTERS A ONLY
MAKINT:	SHLD	FACLO			;STORE THE NUMBER IN FACLO
VALINT:	MVI	A,2			;SET VALTYP TO "INTEGER"
CONISD:	STA	VALTYP			;ENTRY FROM CONDS
	RET				;ALL DONE

CONIS2:	LXI	B,220Q*256+200Q
	LXI	D,000Q*256+000Q		;CHECK IF NUMBER IS -32768, ENTRY FROM FIN
	CALL	FCOMP
	RNZ				;ERROR:  IT CAN'T BE CONVERTED TO AN INTEGER
	MOV	H,C			;IT IS -32768, PUT IT IN (HL)

	MOV	L,D
	JMP	CONIS1			;STORE IT IN THE FAC AND SET VALTYP


					;FORCE THE FAC TO BE A SINGLE PRECISION NUMBER
					;ALTERS A,B,C,D,E,H,L
FRCSNG:	CALL	GETYPR			;SEE WHAT KIND OF NUMBER WE HAVE
	RPO				;WE ALREADY HAVE A SNG, ALL DONE
	JM	CONSI			;WE HAVE AN INTEGER, CONVERT IT
	JZ	TMERR			;STRINGS!! -- ERROR!!
					;DBL PREC -- FALL INTO CONSD


					;CONVERT DOUBLE PRECISION NUMBER TO A SINGLE PRECISON ONE
					;ALTERS A,B,C,D,E,H,L
	PUBLIC	CONSD
CONSD:	CALL	MOVRF			;GET THE HO'S IN THE REGISTERS
	CALL	VALSNG			;SET VALTYP TO "SINGLE PRECISON"
	MOV	A,B			;CHECK IF THE NUMBER IS ZERO
	ORA	A
	RZ				;IF IT IS, WE ARE DONE
	CALL	UNPACK			;UNPACK THE NUMBER
	LXI	H,FACLO-1		;GET FIRST BYTE BELOW A SNG NUMBER
	MOV	B,M			;PUT IT IN B FOR ROUND
	JMP	ROUND			;ROUND THE DBL NUMBER UP AND WE ARE DONE


					;CONVERT AN INTEGER TO A SINGLE PRECISION NUMBER
					;ALTERS A,B,C,D,E,H,L
	PUBLIC	CONSI
CONSI:	LHLD	FACLO			;GET THE INTEGER
CONSIH:	CALL	VALSNG			;SET VALTYP TO "SINGLE PRECISION"
	MOV	A,H			;SET UP REGISTERS FOR FLOATR
	MOV	D,L
	MVI	E,0
	MVI	B,220O
	JMP	FLOATR			;GO FLOAT THE NUMBER


					;FORCE THE FAC TO BE A DOUBLE PRECISION NUMBER
					;ALTERS A,B,C,D,E,H,L
FRCDBL:	CALL	GETYPR			;SEE WHAT KIND OF NUMBER WE HAVE
	RNC				;WE ALREADY HAVE A DBL, WE ARE DONE
	JZ	TMERR			;GIVE AN ERROR IF WE HAVE A STRING
	CM	CONSI			;CONVERT TO SNG IF WE HAVE AN INT
					;FALL INTO CONDS AND CONVERT TO DBL


					;CONVERT A SINGLE PRECISION NUMBER TO A DOUBLE PRECISION ONE
					;ALTERS A,H,L
	PUBLIC	CONDS
CONDS:	LXI	H,0			;ZERO H,L
	SHLD	DFACLO			;CLEAR THE FOUR LOWER BYTES IN THE DOUBLE
	SHLD	DFACLO+2		; PRECISION NUMBER
VALDBL:	MVI	A,10O			;SET VALTYP TO "DOUBLE PRECISION"
	DB	001			;"LXI	B" OVER THE NEXT 2 BYTES
VALSNG:	MVI	A,4			;SET VALTYP TO "SINGLE PRECISION"
	JMP	CONISD			;GO TO IT


					;FORCE THE FAC TO BE A STRING
					;ALTERS A ONLY
CHKSTR:
FRCSTR:	CALL	GETYPR			;SEE WHAT KIND OF VALUE WE HAVE
	RZ				;WE HAVE A STRING, EVERYTHING IS OK
	JMP	TMERR			;WE DON'T HAVE A STRING, FALL INTO TMERR

	PAGE
	SUBTTL	GREATEST INTEGER FUNCTION
					;QUICK GREATEST INTEGER FUNCTION
					;LEAVES INT(FAC) IN C,D,E (SIGNED)
					;ASSUMES FAC .LT. 2^23 = 8388608
					;ASSUMES THE EXPONENT OF FAC IS IN A
					;ALTERS A,B,C,D,E
QINT:	MOV	B,A			;ZERO B,C,D,E IN CASE THE NUMBER IS ZERO
	MOV	C,A
	MOV	D,A
	MOV	E,A
	ORA	A			;SET CONDITION CODES
	RZ				;IT IS ZERO, WE ARE DONE

;THE HARD CASE IN QINT IS NEGATIVE NON-INTEGERS.  TO HANDLE THIS, IF THE
;NUMBER IS NEGATIVE, WE REGARD THE 3-BYTE MANTISSA AS A 3-BYTE INTEGER AND
;SUBTARCT ONE.  THEN ALL THE FRACTIONAL BITS ARE SHIFTED OUT BY SHIFTING THE
;MANTISSA RIGHT.  THEN, IF THE NUMBER WAS NEGATIVE, WE ADD ONE.  SO, IF WE
;HAD A NEGATIVE INTEGER, ALL THE BITS TO THE RIGHT OF THE BINARY POINT WERE
;ZERO.  SO THE NET EFFECT IS WE HAVE THE ORIGINAL NUMBER IN C,D,E.  IF THE
;NUMBER WAS A NEGATIVE NON-INTEGER, THERE IS AT LEAST ONE NON-ZERO BIT TO THE
;RIGHT OF THE BINARY POINT.  SO THE NET EFFECT IS THAT WE GET THE ABSOLUTE
;VALUE OF INT(FAC) IN C,D,E.  C,D,E IS THEN NEGATED IF THE ORIGINAL NUMBER WAS
;NEGATIVE SO THE RESULT WILL BE SIGNED.
	PUSH	H			;SAVE (HL)
	CALL	MOVRF			;GET NUMBER IN THE REGISTERS
	CALL	UNPACK			;UNPACK THE NUMBER
	XRA	M			;GET SIGN OF NUMBER
	MOV	H,A			;DON'T LOSE IT
	CM	QINTA			;SUBTRACT 1 FROM LO IF NUMBER IS NEGATIVE
	MVI	A,230O			;SEE HOW MANY WE HAVE TO SHIFT TO CHANGE
	SUB	B			; NUMBER TO AN INTEGER
	CALL	SHIFTR			;SHIFT NUMBER TO GET RID OF FRACTIONAL BITS
	MOV	A,H			;GET SIGN
	RAL				;PUT SIGN IN CARRY SO IT WILL NOT BE CHANGED
	CC	ROUNDA			;IF NUMBER WAS NEGATIVE, ADD ONE
	MVI	B,0			;FORGET THE BITS WE SHIFTED OUT
	CC	NEGR			;NEGATE NUMBER IF IT WAS NEGATIVE BECAUSE WE
					; WANT A SIGNED MANTISSA
	POP	H			;GET OLD (HL) BACK
	RET				;ALL DONE

QINTA:	DCX	D			;SUBTRACT ONE FROM C,D,E
	MOV	A,D			;WE HAVE TO SUBTRACT ONE FROM C IF
	ANA	E			; D AND E ARE BOTH ALL ONES
	INR	A			;SEE IF BOTH WERE -1
	RNZ				;THEY WERE NOT, WE ARE DONE
	PUBLIC	DCXBRT
DCXBRT:	DCX	B			;THIS IS FOR BILL.  C WILL NEVER BE ZERO
					; (THE MSB WILL ALWAYS BE ONE) SO "DCX	B"
					; AND "DCR	C" ARE FUNCTIONALLY EQUIVALENT
	RET				;ALL DONE
					; THIS IS THE FIX (X) FUNCTION. IT RETURNS
					; FIX(X)=SGN(X)*INT(ABS(X))
	PUBLIC	FIXER
FIXER:	CALL	GETYPR			;GET VALTYPE OF ARG
	RM				;INT, DONE
	CALL	SIGN			;GET SIGN
	JP	VINT			;IF POSITIVE, JUST CALL REGULAR INT CODE
	CALL	NEG			;NEGATE IT
	CALL	VINT			;GET THE INTEGER OF IT
	JMP	VNEG			;NOW RE-NEGATE IT

					;GREATEST INTEGER FUNCTION
					;ALTERS A,B,C,D,E,H,L
VINT:	CALL	GETYPR			;SEE WHAT TYPE OF A NUMBER WE HAVE
	RM				;IT IS AN INTEGER, ALL DONE
	JNC	DINT			;CONVERT THE DOUBLE PRECISION NUMBER
	JZ	TMERR			;BLOW UP ON STRINGS
	CALL	CONIS			;TRY TO CONVERT THE NUMBER TO AN INTEGER
					;IF WE CAN'T, WE WILL RETURN HERE TO GIVE A
					; SINGLE PRECISION RESULT
INT:	LXI	H,FAC			;GET EXPONENT
	MOV	A,M
	CPI	230O			;SEE IF NUMBER HAS ANY FRACTIONAL BITS

					;THE ONLY GUY WHO NEEDS THIS DOESN'T CARE
	LDA	FACLO			; ABOUT THE SIGN
	RNC				;IT DOES NOT
	MOV	A,M			;GET EXPONENT BACK
	CALL	QINT			;IT DOES, SHIFT THEM OUT
	MVI	M,230O			;CHANGE EXPONENT SO IT WILL BE CORRECT
					;NOTE:QINT UNPACKED THE NUMBER!!!!
					; AFTER NORMALIZATION
	MOV	A,E			;GET LO
	PUSH	PSW			;SAVE IT
	MOV	A,C			;NEGATE NUMBER IF IT IS NEGATIVE
	RAL				;PUT SIGN IN CARRY
	CALL	FADFLT			;REFLOAT NUMBER
	POP	PSW			;GET LO BACK
	RET				;ALL DONE


					;GREATEST INTEGER FUNCTION FOR DOUBLE PRECISION NUMBERS
					;ALTERS A,B,C,D,E,H,L
DINT:	LXI	H,FAC			;GET POINTER TO FAC
	MOV	A,M			;GET EXPONENT
	CPI	220O			;CAN WE CONVERT IT TO AN INTEGER?
DIN00:	JNZ	DINT2			;CHECK FOR -32768
	MOV	C,A			;SAVE EXPONENT IN C
	DCX	H			;GET POINTER TO SIGN AND HO
	MOV	A,M			;GET SIGN AND HO
	XRI	200O			;CHECK IF IT IS 200
	MVI	B,6			;SET UP A COUNT TO CHECK IF THE REST OF
DINT1:	DCX	H			; THE NUMBER IS ZERO, POINT TO NEXT BYTE
	ORA	M			;IF ANY BITS ARE NON-ZERO, A WILL BE NON-ZERO
	DCR	B			;ARE WE DONE?
	JNZ	DINT1			;NO, CHECK THE NEXT LOWER ORDER BYTE
	ORA	A			;IS A NOW ZERO?
	LXI	H,200O*400O+0		;GET -32768 JUST IN CASE
	JNZ	DIN05
	CALL	MAKINT			;A IS ZERO SO WE HAVE -32768
	JMP	FRCDBL			;FORCE BACK TO DOUBLE
DIN05:	MOV	A,C			;GET EXPONENT
	PUBLIC	DINT2
DINT2:	ORA	A			;CHECK FOR ZERO VALUE
	RZ				;***FIX 5.11***^1 -- ALALOW 0 IN DINT
	CPI	270O			;ARE THERE ANY FRACTIONAL BITS?
	RNC				;NO, THE NUMBER IS ALREADY AN INTEGER

	PUBLIC	DINTFO
DINTFO:	PUSH	PSW			;ENTRY FROM FOUT, CARRY IS ZERO IF WE COME
					; HERE FROM FOUT
	CALL	MOVRF			;GET HO'S OF NUMBER IN REGISTERS FOR UNPACKING
	CALL	UNPACK			;UNPACK IT
	XRA	M			;GET ITS SIGN BACK
	DCX	H			;SET THE EXPONENT TO NORMALIZE CORRECTLY
	MVI	M,270O
	PUSH	PSW			;SAVE THE SIGN
	DCX	H
	MOV	M,C			;GET UNPACKED HIGH BYTE
	CM	DINTA			;SUBTRACT 1 FROM LO IF NUMBER IS NEGATIVE
	LDA	FAC-1			;FETCH NEW HIGH MANTISSA BYTE
	MOV	C,A			;AND PUT IN C
	LXI	H,FAC-1			;POINT TO THE HO OF THE FAC
	MVI	A,270O			;GET HOW MANY BITS WE HAVE TO SHIFT OUT
	SUB	B
	CALL	DSHFTR			;SHIFT THEM OUT!!
	POP	PSW			;GET THE SIGN BACK
	CM	DROUNA			;IF NUMBER WAS NEGATIVE, ADD ONE
	XRA	A			;PUT A ZERO IN THE EXTRA LO BYTE SO WHEN
	STA	DFACLO-1		; WE NORMALIZE, WE WILL SHIFT IN ZEROS
	POP	PSW			;IF WE WERE CALLED FROM FOUT, DON'T NORMALIZE,
	RNC				; JUST RETURN
	JMP	DNORML			;RE-FLOAT THE INTEGER

DINTA:	LXI	H,DFACLO		;SUBTRACT ONE FROM FAC, GET POINTER TO LO
DINTA1:	MOV	A,M			;GET A BYTE OF FAC
	DCR	M			;SUBTRACT ONE FROM IT
	ORA	A			;CONTINUE ONLY IF THE BYTE USED TO BE ZERO
	INX	H			;INCREMENT POINTER TO NEXT BYTE
	JZ	DINTA1			;CONTINUE IF NECESSARY
	RET				;ALL DONE
	PAGE
	SUBTTL	INTEGER ARITHMETIC ROUTINES
					;INTEGER MULTIPLY FOR MULTIPLY DIMENSIONED ARRAYS
					; (DE):=(BC)*(DE)
					;OVERFLOW CAUSES A BS ERROR
					;ALTERS A,B,C,D,E
UMULT:	PUSH	H			;SAVE [H,L]
	LXI	H,0			;ZERO PRODUCT REGISTERS
	MOV	A,B			;CHECK IF (BC) IS ZERO
	ORA	C			;IF SO, JUST RETURN, (HL) IS ALREADY ZERO
	JZ	MULRET			;THIS IS DONE FOR SPEED
	MVI	A,20O			;SET UP A COUNT
UMULT1:	DAD	H			;ROTATE (HL) LEFT ONE
	JC	BSERR			;CHECK FOR OVERFLOW, IF SO,
	XCHG				; BAD SUBSCRIPT (BS) ERROR
	DAD	H			;ROTATE (DE) LEFT ONE
	XCHG	
	JNC	UMULT2			;ADD IN (BC) IF HO WAS 1
	DAD	B
	JC	BSERR			;CHECK FOR OVERFLOW
UMULT2:	DCR	A			;SEE IF DONE
	JNZ	UMULT1
MULRET:	XCHG				;RETURN THE RESULT IN [D,E]
	POP	H			;GET BACK THE SAVED [H,L]
	RET	


;
;	INTEGER ARITHMETIC CONVENTIONS
;
;INTEGER VARIABLES ARE 2 BYTE, SIGNED NUMBERS
;	THE LO BYTE COMES FIRST IN MEMORY
;
;CALLING CONVENTIONS:
;FOR ONE ARGUMENT FUNCTIONS:
;	THE ARGUMENT IS IN (HL), THE RESULT IS LEFT IN (HL)
;FOR TWO ARGUMENT OPERATIONS:
;	THE FIRST ARGUMENT IS IN (DE)
;	THE SECOND ARGUMENT IS IN (HL)
;	THE RESULT IS LEFT IN THE FAC AND IF NO OVERFLOW, (HL)
;IF OVERFLOW OCCURS, THE ARGUMENTS ARE CONVERTED TO SINGLE PRECISION
;WHEN INTEGERS ARE STORED IN THE FAC, THEY ARE STORED AT FACLO+0,1
;VALTYP(INTEGER)=2
;%


					;INTEGER SUBTRTACTION	(HL):=(DE)-(HL)
					;ALTERS A,B,C,D,E,H,L
ISUB:	MOV	A,H			;EXTEND THE SIGN OF (HL) TO B
	RAL				;GET SIGN IN CARRY
	SBB	A
	MOV	B,A
	CALL	INEGHL			;NEGATE (HL)
	MOV	A,C			;GET A ZERO
	SBB	B			;NEGATE SIGN
	JMP	IADDS			;GO ADD THE NUMBERS


					;INTEGER ADDITION	(HL):=(DE)+(HL)
					;ALTERS A,B,C,D,E,H,L
IADD:	MOV	A,H			;EXTEND THE SIGN OF (HL) TO B
	RAL				;GET SIGN IN CARRY
	SBB	A
IADDS:	MOV	B,A			;SAVE THE SIGN
	PUSH	H			;SAVE THE SECOND ARGUMENT IN CASE OF OVERFLOW
	MOV	A,D			;EXTEND THE SIGN OF (DE) TO A
	RAL				;GET SIGN IN CARRY
	SBB	A
	DAD	D			;ADD THE TWO LO'S
	ADC	B			;ADD THE EXTRA HO
	RRC				;IF THE LSB OF A IS DIFFERENT FROM THE MSB OF
	XRA	H			; H, THEN OVERFLOW OCCURED
	JP	CONIS1			;NO OVERFLOW, GET OLD (HL) OFF STACK AND WE
					; ARE DONE, SAVE (HL) IN THE FAC ALSO
	PUSH	B			;OVERFLOW -- SAVE EXTENDED SIGN OF (HL)
	XCHG				;GET (DE) IN (HL)
	CALL	CONSIH			;FLOAT IT
	POP	PSW			;GET SIGN OF (HL) IN A
	POP	H			;GET OLD (HL) BACK
	CALL	PUSHF			;PUT FIRST ARGUMENT ON STACK
	XCHG				;PUT SECOND ARGUMENT IN (DE) FOR FLOATR
	CALL	INEGAD			;FLOAT IT
	JMP	FADDT			;ADD THE TWO NUMBERS USING SINGLE PRECISION


					;INTEGER MULTIPLICATION		(HL):=(DE)*(HL)
					;ALTERS A,B,C,D,E,H,L
IMULT:	MOV	A,H			;CHECK (HL) IF IS ZERO, IF SO
	ORA	L			; JUST RETURN.  THIS IS FOR SPEED.
	JZ	MAKINT			;UPDATE FACLO TO BE ZERO AND RETURN
	PUSH	H			;SAVE SECOND ARGUMENT IN CASE OF OVERFLOW
	PUSH	D			;SAVE FIRST ARGUMENT
	CALL	IMULDV			;FIX UP THE SIGNS
	PUSH	B			;SAVE THE SIGN OF THE RESULT
	MOV	B,H			;COPY SECOND ARGUMENT INTO (BC)
	MOV	C,L
	LXI	H,0			;ZERO (HL), THAT IS WHERE THE PRODUCT GOES
	MVI	A,20O			;SET UP A COUNT
IMULT1:	DAD	H			;ROTATE PRODUCT LEFT ONE
	JC	IMULT5			;CHECK FOR OVERLFOW
	XCHG				;ROTATE FIRST ARGUMENT LEFT ONE TO SEE IF
	DAD	H			; WE ADD IN (BC) OR NOT
	XCHG	
	JNC	IMULT2			;DON'T ADD IN ANYTHING
	DAD	B			;ADD IN (BC)
	JC	IMULT5			;CHECK FOR OVERLFOW
IMULT2:	DCR	A			;ARE WE DONE?
	JNZ	IMULT1			;NO, DO IT AGAIN
	POP	B			;WE ARE DONE, GET SIGN OF RESULT
	POP	D			;GET ORIGINAL FIRST ARGUMENT
IMLDIV:	MOV	A,H			;ENTRY FROM IDIV, IS RESULT .GE. 32768?
	ORA	A
	JM	IMULT3			;IT IS, CHECK FOR SPECIAL CASE OF -32768
	POP	D			;RESULT IS OK, GET SECOND ARGUMENT OFF STACK
	MOV	A,B			;GET THE SIGN OF RESULT IN A
	JMP	INEGA			;NEGATE THE RESULT IF NECESSARY
IMULT3:	XRI	200O			;IS RESULT 32768?
	ORA	L			;NOTE: IF WE GET HERE FROM IDIV, THE RESULT
	JZ	IMULT4			; MUST BE 32768, IT CANNOT BE GREATER
	XCHG				;IT IS .GT. 32768, WE HAVE OVERFLOW
	DB	001			;"LXI	B" OVER NEXT 2 BYTES
IMULT5:	POP	B			;GET SIGN OF RESULT OFF STACK
	POP	H			;GET THE ORIGINAL FIRST ARGUMENT
	CALL	CONSIH			;FLOAT IT
	POP	H			;GET THE ORIGINAL SECOND ARGUMENT
	CALL	PUSHF			;SAVE FLOATED FIRST ARUMENT
	CALL	CONSIH			;FLOAT SECOND ARGUMENT
FMULTT:	POP	B
	POP	D
					;GET FIRST ARGUMENT OFF STACK, ENTRY FROM POLYX
	JMP	FMULT			;MULTIPLY THE ARGUMENTS USING SINGLE PRECISION
IMULT4:	MOV	A,B			;IS RESULT +32768 OR -32768?
	ORA	A			;GET ITS SIGN
	POP	B			;DISCARD ORIGINAL SECOND ARGUMENT
	JM	MAKINT			;THE RESULT SHOULD BE NEGATIVE, IT IS OK
	PUSH	D			;IT IS POSITIVE, SAVE REMAINDER FOR MOD
	CALL	CONSIH			;FLOAT -32768
	POP	D			;GET MOD'S REMAINDER BACK
	JMP	NEG			;NEGATE -32768 TO GET 32768, WE ARE DONE


					;INTEGER DIVISION	(HL):=(DE)/(HL)
					;REMAINDER IS IN (DE), QUOTIENT IN (HL)
					;ALTERS A,B,C,D,E,H,L
IDIV:	MOV	A,H			;CHECK FOR DIVISION BY ZERO
	ORA	L
	JZ	DV0ERR			;WE HAVE DIVISION BY ZERO!!
	CALL	IMULDV			;FIX UP THE SIGNS
	PUSH	B			;SAVE THE SIGN OF THE RESULT
	XCHG				;GET DENOMINATOR IN (HL)
	CALL	INEGHL			;NEGATE IT
	MOV	B,H			;SAVE NEGATED DENOMINATOR IN (BC)
	MOV	C,L
	LXI	H,0			;ZERO WHERE WE DO THE SUBTRACTION
	MVI	A,21O			;SET UP A COUNT
	PUSH	PSW			;SAVE IT
	ORA	A			;CLEAR CARRY 
	JMP	IDIV3			;GO DIVIDE
IDIV1:	PUSH	PSW			;SAVE COUNT
	PUSH	H			;SAVE (HL) I.E. CURRENT NUMERATOR
	DAD	B			;SUBTRACT DENOMINATOR
	JNC	IDIV2			;WE SUBTRACTED TOO MUCH, GET OLD (HL) BACK
	POP	PSW			;THE SUBTRACTION WAS GOOD, DISCARD OLD (HL)
	STC				;NEXT BIT IN QUOTIENT IS A ONE
	DB	076O			;"MVI	A" OVER NEXT BYTE
IDIV2:	POP	H			;IGNORE THE SUBTRACTION, WE COULDN'T DO IT
IDIV3:	MOV	A,E			;SHIFT IN THE NEXT QUOTIENT BIT
	RAL	
	MOV	E,A
	MOV	A,D			;SHIFT THE HO
	RAL	
	MOV	D,A
	MOV	A,L			;SHIFT IN THE NEXT BIT OF THE NUMERATOR
	RAL	
	MOV	L,A
	MOV	A,H			;DO THE HO
	RAL	
	MOV	H,A			;SAVE THE HO
	POP	PSW			;GET COUNT BACK
	DCR	A			;ARE WE DONE?
	JNZ	IDIV1			;NO, DIVIDE AGAIN
	XCHG				;GET QUOTIENT IN (HL), REMAINDER IN (DE)
	POP	B			;GET SIGN OF RESULT
	PUSH	D			;SAVE REMAINDER SO STACK WILL BE ALRIGHT
	JMP	IMLDIV			;CHECK FOR SPECIAL CASE OF 32768


					;GET READY TO MULTIPLY OR DIVIDE
					;ALTERS A,B,C,D,E,H,L
IMULDV:	MOV	A,H			;GET SIGN OF RESULT
	XRA	D
	MOV	B,A			;SAVE IT IN B
	CALL	INEGH			;NEGATE SECOND ARGUMENT IF NECESARY
	XCHG				;PUT (DE) IN (HL), FALL IN AND NEGATE FIRST
					; ARGUMENT IF NECESSARY


					;NEGATE H,L
					;ALTERS A,C,H,L
INEGH:	MOV	A,H			;GET SIGN OF (HL)
INEGA:	ORA	A			;SET CONDITION CODES
	JP	MAKINT			;WE DON'T HAVE TO NEGATE, IT IS POSITIVE
					;SAVE THE RESULT IN THE FAC FOR WHEN
					; OPERATORS RETURN THROUGH HERE
INEGHL:	XRA	A			;CLEAR A
	MOV	C,A			;STORE A ZERO (WE USE THIS METHOD FOR ISUB)
	SUB	L			;NEGATE LO
	MOV	L,A			;SAVE IT
	MOV	A,C			;GET A ZERO BACK
	SBB	H			;NEGATE HO
	MOV	H,A			;SAVE IT
	JMP	MAKINT			;ALL DONE, SAVE THE RESULT IN THE FAC
					; FOR WHEN OPERATORS RETURN THROUGH HERE


					;INTEGER NEGATION
					;ALTERS A,B,C,D,E,H,L
INEG:	LHLD	FACLO			;GET THE INTEGER
	CALL	INEGHL			;NEGATE IT
	MOV	A,H			;GET THE HIGH ORDER
	XRI	200O			;CHECK FOR SPECIAL CASE OF 32768
	ORA	L
	RNZ				;IT DID NOT OCCUR, EVERYTHING IS FINE
	PUBLIC	INEG2
INEG2:	XCHG				;WE HAVE IT, FLOAT 32768
	CALL	VALSNG			;CHANGE VALTYP TO "SINGLE PRECISION"
	XRA	A			;GET A ZERO FOR THE HIGH ORDER
INEGAD:	MVI	B,230O			;ENTRY FROM IADD, SET EXPONENT
	JMP	FLOATR			;GO FLOAT THE NUMBER


					;MOD OPERATOR
					;(HL):=(DE)-(DE)/(HL)*(HL),  (DE)=QUOTIENT
					;ALTERS A,B,C,D,E,H,L
IMOD:	PUSH	D			;SAVE (DE) FOR ITS SIGN
	CALL	IDIV			;DIVIDE AND GET THE REMAINDER
	XRA	A			;TURNOFF THE CARRY AND TRANFER
	ADD	D			;THE REMAINDER*2 WHICH IS IN [D,E]
	RAR				;TO [H,L] DIVIDING BY TWO
	MOV	H,A
	MOV	A,E
	RAR	
	MOV	L,A			; ***WHG01*** FIX TO MOD OPERATOR
	CALL	VALINT			;SET VALTYP TO "INTEGER" IN CASE RESULT OF
					; THE DIVISION WAS 32768
	POP	PSW			;GET THE SIGN OF THE REMAINDER BACK
	JMP	INEGA			;NEGATE THE REMAINDER IF NECESSARY
	PAGE

	SUBTTL	DOUBLE PRECISION ARITHMETIC ROUTINES
;
;	DOUBLE PRECISION ARITHMETIC CONVENTIONS
;
;DOUBLE PRECISION NUMBERS ARE 8 BYTE QUANTITIES
;THE LAST 4 BYTES IN MEMORY ARE IN THE SAME FORMAT AS SINGLE PRECISION NUMBERS
;THE FIRST 4 BYTES ARE 32 MORE LOW ORDER BITS OF PRECISION
;THE LOWEST ORDER BYTE COMES FIRST IN MEMORY
;
;CALLING CONVENTIONS:
;FOR ONE ARGUMENT FUNCTIONS:
;	THE ARGUMENT IS IN THE FAC, THE RESULT IS LEFT IN THE FAC
;FOR TWO ARGUMENT OPERATIONS:
;	THE FIRST ARGUMENT IS IN THE FAC
;	THE SECOND ARGUMENT IS IN ARG-7,6,5,4,3,2,1,0  (NOTE: ARGLO=ARG-7)
;	THE RESULT IS LEFT IN THE FAC
;NOTE:	THIS ORDER IS REVERSED FROM INT AND SNG
;VALTYP(DOUBLE PRECISION)=10 OCTAL
;%


					;DOUBLE PRECISION SUBTRACTION	FAC:=FAC-ARG
					;ALTERS ALL REGISTERS
DSUB:	LXI	H,ARG-1			;NEGATE THE SECOND ARGUMENT
	MOV	A,M			;GET THE HO AND SIGN
	XRI	200O			;COMPLEMNT THE SIGN
	MOV	M,A			;PUT IT BACK
					;FALL INTO DADD


					;DOUBLE PRECISION ADDITION	FAC:=FAC+ARG
					;ALTERS ALL REGISTERS
DADD:	LXI	H,ARG			;GET  POINTER TO EXPONENT OF FIRST ARGUMENT
	MOV	A,M			;CHECK IF IT IS ZERO
	ORA	A
	RZ				;IT IS, RESULT IS ALREADY IN FAC
	MOV	B,A			;SAVE EXPONENT FOR UNPACKING
	DCX	H			;POINT TO HO AND SIGN
	MOV	C,M			;GET HO AND SIGN FOR UNPACKING
	LXI	D,FAC			;GET POINTER TO EXPONENT OF SECOND ARGUMENT
	LDAX	D			;GET EXPONENT
	ORA	A			;SEE IF IT IS ZERO
	JZ	VMOVFA			;IT IS, MOVE ARG TO FAC AND WE ARE DONE
	SUB	B			;SUBTRACT EXPONENTS TO GET SHIFT COUNT
	JNC	DADD2			;PUT THE SMALLER NUMBER IN FAC
	CMA				;NEGATE SHIFT COUNT
	INR	A
	PUSH	PSW			;SAVE SHIFT COUNT
	MVI	C,10O			;SWITCH FAC AND ARG, SET UP A COUNT
	INX	H			;POINT TO ARG
	PUSH	H			;SAVE POINTER TO ARG
DADD1:	LDAX	D			;GET A BYTE OF THE FAC
	MOV	B,M			;GET A BYTE OF ARG
	MOV	M,A			;PUT THE FAC BYTE IN ARG
	MOV	A,B			;PUT THE ARG BYTE IN A
	STAX	D			;PUT THE ARG BYTE IN FAC
	DCX	D			;POINT TO THE NEXT LO BYTE OF FAC
	DCX	H			;POINT TO THE NEXT LO BYTE OF ARG
	DCR	C			;ARE WE DONE?
	JNZ	DADD1			;NO, DO THE NEXT LO BYTE
	POP	H			;GET THE HO BACK
	MOV	B,M			;GET THE EXPONENT
	DCX	H			;POINT TO THE HO AND SIGN
	MOV	C,M			;GET HO AND SIGN FOR UNPACKING
	POP	PSW			;GET THE SHIFT COUNT BACK
DADD2:	CPI	71O			;ARE WE WITHIN 56 BITS?
	RNC				;NO, ALL DONE
	PUSH	PSW			;SAVE SHIFT COUNT
	CALL	UNPACK			;UNPACK THE NUMBERS
	LXI	H,ARGLO-1		;POINT TO ARGLO-1
	MOV	B,A			;SAVE SUBTRACTION FLAG
	MVI	A,0			;
	MOV	M,A			;CLEAR TEMPORARY LEAST SIG BYTE
	STA	DFACLO-1		;CLEAR EXTRA BYTE
	POP	PSW			;GET SHIFT COUNT
	LXI	H,ARG-1			;POINT TO THE HO OF ARG
	CALL	DSHFTR			;SHIFT ARG RIGHT THE RIGHT NUMBER OF TIMES
	LDA	ARGLO-1			;TRANSFER OVERFLOW BYTE
	STA	DFACLO-1		;FROM ARG TO FAC
	MOV	A,B
	ORA	A			;GET SUBTRACTION FLAG
	JP	DADD3			;SUBTRACT NUMBERS IF THEIR SIGNS ARE DIFFERENT
	CALL	DADDAA			;SIGNS ARE THE SAME, ADD THE NUMBERS
	JNC	DROUND			;ROUND THE RESULT IF NO CARRY
	XCHG				;GET POINTER TO FAC IN (HL)
	INR	M			;ADD 1 TO EXPONENT
	JZ	OVFIN4
	CALL	DSHFRB			;SHIFT NUMBER RIGHT ONE, SHIFT IN CARRY
	JMP	DROUND			;ROUND THE RESULT
DADD3:
	DB	076O			;"MVI	A", SUBTRACT THE NUMBERS
	SBB	M			;GET THE SUBTRACT INSTRUCTION IN A
	CALL	DADDA			;SUBTRACT THE NUMBERS
	LXI	H,FAC+1			;FIX [H,L] TO POINT TO SIGN FOR DNEGR
	CC	DNEGR			;NEGATE THE RESULT IF IT WAS NEGATIVE
					;FALL INTO DNORML


					;NORMALIZE FAC
					;ALTERS A,B,C,D,H,L
DNORML:	XRA	A			;CLEAR SHIFT COUNT
DNORM1:	MOV	B,A			;SAVE SHIFT COUNT
	LDA	FAC-1			;GET HO
	ORA	A			;SEE IF WE CAN SHIFT 8 LEFT
	JNZ	DNORM5			;WE CAN'T, SEE IF NUMBER IS NORMALIZED
	LXI	H,DFACLO-1		;WE CAN, GET POINTER TO LO
	MVI	C,10O			;SET UP A COUNT
DNORM2:	MOV	D,M			;GET A BYTE OF FAC
	MOV	M,A			;PUT IN BYTE FROM LAST LOCATION, THE FIRST
					; TIME THROUGH A IS ZERO
	MOV	A,D			;PUT THE CURRENT BYTE IN A FOR NEXT TIME
	INX	H			;INCREMENT POINTER TO NEXT HIGHER ORDER
	DCR	C			;ARE WE DONE?
	JNZ	DNORM2			;NO, DO THE NEXT BYTE
	MOV	A,B			;SUBTRACT 8 FROM SHIFT COUNT
	SUI	10O
	CPI	300O			;HAVE WE SHIFTED ALL BYTES TO ZERO?
	JNZ	DNORM1			;NO, TRY TO SHIFT 8 MORE
	JMP	ZERO			;YES, THE NUMBER IS ZERO
DNORM3:	DCR	B			;DECREMENT SHIFT COUNT
	LXI	H,DFACLO-1		;GET POINTER TO LO
	CALL	DSHFLC			;SHIFT THE FAC LEFT
	ORA	A			;SEE IF NUMBER IS NORMALIZED
DNORM5:	JP	DNORM3			;SHIFT FAC LEFT ONE IF IT IS NOT NORMALIZED
	MOV	A,B			;GET THE SHIFT COUNT
	ORA	A			;SEE IF NO SHIFTING WAS DONE
	JZ	DROUND			;NONE WAS, PROCEED TO ROUND THE NUMBER
	LXI	H,FAC			;GET POINTER TO EXPONENT
	ADD	M			;UPDATE IT
	MOV	M,A			;SAVE UPDATED EXPONENT
	JNC	ZERO			;UNDERFLOW, THE RESULT IS ZERO
	RZ				;RESULT IS ALREADY ZERO, WE ARE DONE
					;FALL INTO DROUND AND ROUND THE RESULT


					;ROUND FAC
					;ALTERS A,B,H,L
DROUND:	LDA	DFACLO-1		;GET EXTRA BYTE TO SEE IF WE HAVE TO ROUND
DROUNB:	ORA	A			;ENTRY FROM DDIV
	CM	DROUNA			;ROUND UP IF NECESSARY
	LXI	H,FAC+1			;GET POINTER TO UNPACKED SIGN
	MOV	A,M			;GET SIGN
	ANI	200O			;ISOLATE SIGN BIT
	DCX	H			;POINT TO HO
	DCX	H
	XRA	M			;PACK SIGN AND HO
	MOV	M,A			;PUT PACKED SIGN AND HO IN FAC
	RET				;WE ARE DONE



					;SUBROUTINE FOR ROUND: ADD ONE TO FAC
DROUNA:	LXI	H,DFACLO		;GET POINTER TO LO, ENTRY FROM DINT
	MVI	B,7			;SET UP A COUNT
DRONA1:	INR	M			;INCREMENT A BYTE
	RNZ				;RETURN IF THERE WAS NO CARRY
	INX	H			;INCREMENT POINTER TO NEXT HIGHER ORDER
	DCR	B			;HAVE WE INCREMENTED ALL BYTES
	JNZ	DRONA1			;NO, TRY THE NEXT ONE
	INR	M			;YES, INCREMENT THE EXPONENT
	JZ	OVFIN4
	DCX	H			;THE NUMBER OVERFLOWED ITS EXPONENT
	MVI	M,200O			;PUT 200 IN HO
	RET				;ALL DONE


					;ADD OR SUBTRACT 2 DBL QUANTITIES
					;ALTERS A,C,D,E,H,L
DADDD:	LXI	D,FBUFFR+27		;ENTRY FROM DDIV
	LXI	H,ARGLO			;ADD OR SUBTRACT FBUFFR+^D27 AND ARG
	JMP	DADDS			;DO THE OPERATION

DADDAA:	DB	076O			;"MVI	A", ENTRY FROM DADD, DMULT
	ADC	M			;SETUP ADD INSTRUCTION FOR LOOP
DADDA:	LXI	H,ARGLO			;GET POINTER TO ARG, ENTRY FROM DADD
DADDFO:	LXI	D,DFACLO		;GET POINTER TO FAC, ENTRY FROM FOUT
DADDS:	MVI	C,7			;SET UP A COUNT
DADDS1:
	STA	DADDOP			;STORE THE ADD OR SUBTRACT INSTRUCTION
	XRA	A			;CLEAR CARRY
DADDL:	LDAX	D			;GET A BYTE FROM RESULT NUMBER
DADDOP:	ADC	M			;THIS IS EITHER "ADC	M" OR "SBB	M"
	STAX	D			;SAVE THE CHANGED BYTE
	INX	D			;INCREMENT POINTERS TO NEXT HIGHER ORDER BYTE
	INX	H
	DCR	C			;ARE WE DONE?
	JNZ	DADDL			;NO, DO THE NEXT HIGHER ORDER BYTE
	RET				;ALL DONE




					;NEGATE SIGNED NUMBER IN FAC
					;THIS IS USED BY DADD, DINT
					;ALTERS A,B,C,H,L
DNEGR:	MOV	A,M			;COMPLEMENT SIGN OF FAC
	CMA				;USE THE UNPACKED SIGN BYTE
	MOV	M,A			;SAVE THE NEW SIGN
	LXI	H,DFACLO-1		;GET POINTER TO LO
	MVI	B,10O			;SET UP A COUNT
	XRA	A			;CLEAR CARRY AND GET A ZERO
	MOV	C,A			;SAVE ZERO IN C
DNEGR1:	MOV	A,C			;GET A ZERO
	SBB	M			;NEGATE THE BYTE OF FAC
	MOV	M,A			;UPDATE FAC
	INX	H			;INCREMENT POINTER TO NEXT HIGHER ORDER BYTE
	DCR	B			;ARE WE DONE?
	JNZ	DNEGR1			;NO, NEGATE THE NEXT BYTE
	RET				;ALL DONE


					;SHIFT DBL FAC RIGHT ONE
					;A = SHIFT COUNT
					;ALTERS A,C,D,E,H,L
DSHFTR:	MOV	M,C			;PUT THE UNPACKED HO BACK
	PUSH	H			;SAVE POINTER TO WHAT TO SHIFT
DSHFR1:	SUI	10O			;SEE IF WE CAN SHIFT 8 RIGHT
	JC	DSHFR3			;WE CAN'T, CHECK IF WE ARE DONE
	POP	H			;GET POINTER BACK
DSHFRM:	PUSH	H			;ENTRY FROM DMULT, SAVE POINTER TO HO
	LXI	D,10O*400O+0		;SHIFT A ZERO INTO THE HO, SET UP A COUNT
DSHFR2:	MOV	C,M			;SAVE A BYTE OF FAC
	MOV	M,E			;PUT THE LAST BYTE IN ITS PLACE
	MOV	E,C			;SET UP E FOR NEXT TIME THROUGH THE LOOP
	DCX	H			;POINT TO NEXT LOWER ORDER BYTE
	DCR	D			;ARE WE DONE?
	JNZ	DSHFR2			;NO, DO THE NEXT BYTE
	JMP	DSHFR1			;YES, SEE IF WE CAN SHIFT OVER 8 MORE
DSHFR3:	ADI	11O			;CORRECT SHIFT COUNT
	MOV	D,A			;SAVE SHIFT COUNT IN D
DSHFR4:	XRA	A			;CLEAR CARRY
	POP	H			;GET POINTER TO HO
	DCR	D			;ARE WE DONE?
	RZ				;YES
DSHFRA:	PUSH	H			;NO, SAVE POINTER TO LO, ENTRY FROM DADD, DMULT
	MVI	E,10O			;SET UP A COUNT, ROTATE FAC ONE LEFT
DSHFR5:	MOV	A,M			;GET A BYTE OF THE FAC
	RAR				;ROTATE IT LEFT
	MOV	M,A			;PUT THE UPDATED BYTE BACK
	DCX	H			;DECREMENT POINTER TO NEXT LOWER ORDER BYTE
	DCR	E			;ARE WE DONE?
	JNZ	DSHFR5			;NO, ROTATE THE NEXT LOWER ORDER BYTE
	JMP	DSHFR4			;YES, SEE IF WE ARE DONE SHIFTING

					;ENTRY TO DSHFTR FROM DADD, DMULT
DSHFRB:	LXI	H,FAC-1			;GET POINTER TO HO OF FAC
	MVI	D,1			;SHIFT RIGHT ONCE
	JMP	DSHFRA			;GO DO IT


					;ROTATE FAC LEFT ONE
					;ALTERS A,C,H,L
DSHFLC:	MVI	C,10O			;SET UP A COUNT
DSHFTL:	MOV	A,M			;
	RAL				;ROTATE IT LEFT ONE
	MOV	M,A			;UPDATE BYTE IN FAC
	INX	H			;INCREMENT POINTER TO NEXT HIGHER ORDER BYTE
	DCR	C			;ARE WE DONE?
	JNZ	DSHFTL
	RET				;ALL DONE


					;DOUBLE PRECISION MULTIPLICATION	FAC:=FAC*ARG
					;ALTERS ALL REGISTERS
DMULT:	CALL	SIGN			;CHECK IF WE ARE MULTIPLYING BY ZERO
	RZ				;YES, ALL DONE, THE FAC IS ZERO
	LDA	ARG			;MUST SEE IF ARG IS ZERO
	ORA	A
	JZ	ZERO			;RETURN ZERO

	CALL	MULDVA			;ADD EXPONENTS AND TAKE CARE OF SIGNS
	CALL	DMULDV			;ZERO FAC AND PUT FAC IN FBUFFR
	MOV	M,C			;PUT UNPACKED HO IN ARG
	INX	D			;GET POINTER TO LO OF ARG
	MVI	B,7			;SET UP A COUNT
DMULT2:	LDAX	D			;GET THE BYTE OF ARG TO MULTIPLY BY
	INX	D			;INCREMENT POINTER TO NEXT HIGHER BYTE
	ORA	A			;CHECK IF WE ARE MULTIPLYING BY ZERO
	PUSH	D			;SAVE POINTER TO ARG
	JZ	DMULT5			;WE ARE
	MVI	C,10O			;SET UP A COUNT
DMULT3:	PUSH	B			;SAVE COUNTERS
	RAR				;ROTATE MULTIPLIER RIGHT
	MOV	B,A			;SAVE IT
	CC	DADDAA			;ADD IN OLD FAC IF BIT OF MULTIPIER WAS ONE
	CALL	DSHFRB			;ROTATE PRODUCT RIGHT ONE
	MOV	A,B			;GET MULTIPLIER IN A
	POP	B			;GET COUNTERS BACK
	DCR	C			;ARE WE DONE WITH THIS BYTE OF ARG?
	JNZ	DMULT3			;NO, MULTIPLY BY THE NEXT BIT OF THE MULTIPLIER
DMULT4:	POP	D			;YES, GET POINTER INTO ARG BACK
	DCR	B			;ARE WE DONE?
	JNZ	DMULT2			;NO, MULTIPLY BY NEXT HIGHER ORDER BY OF ARG
					;POINT IS TO RIGHT OF UNDERSTOOD ONE
	JMP	DNORML			;ALL DONE, NORMALIZE AND ROUND RESULT
DMULT5:	LXI	H,FAC-1			;GET POINTER TO HO OF FAC
	CALL	DSHFRM			;SHIFT PRODUCT RIGHT ONE BYTE, WE ARE
	JMP	DMULT4			; MULTIPLYIING BY ZERO

					;CONSTANT FOR DIV10, DDIV10
TENTH:	DB	315O
	DB	314O
	DB	314O
	DB	314O
	DB	314O
	DB	314O
	DB	114O
	DB	175O
DTEN:	DB	000			; 10D0
	DB	000
	DB	000
	DB	000
FTEN:	DB	000			; 10.0
	DB	000
	DB	040O
	DB	204O

					;DOUBLE PRECISION DIVIDE FAC BY 10
					;ALTERS ALL REGISTERS
DDIV10:					;DOUBLE PRECISION DIVIDE FAC BY 10
					;(FAC)=(FAC)*3/4*16/15*1/8
	LDA	FAC			;MUST ASSURE OURSELVES WE CAN DO
	CPI	101O			;65 EXPONENT DECREMENTS W/O 
	JNC	DD04			;REACHING ZERO
	LXI	D,TENTH			;POINT TO .1D0
	LXI	H,ARGLO			;POINT TO ARG
	CALL	VMOVE
	JMP	DMULT
DD04:
	LDA	FAC-1			;NEGATIVE NO?
	ORA	A
	JP	DD05
	ANI	177O			;WANT ONLY POS. NOS.
	STA	FAC-1
	LXI	H,NEG
	PUSH	H			;WILL NEGATE WHEN FINISHED
DD05:
	CALL	$DECF1			;DIVIDE FAC BY 2
	LXI	D,DFACLO
	LXI	H,ARGLO
	CALL	VMOVE
	CALL	$DECF1			;DIVIDE FAC BY 2
	CALL	DADD			;(FAC)=(FAC)+(ARG)
	LXI	D,DFACLO
	LXI	H,ARGLO
	CALL	VMOVE			;(ARG)=(FAC)
	MVI	A,15
DD10:	PUSH	PSW			;SAVE LOOP COUNTER
	CALL	$DECA4			;(ARG)=(ARG)/16
	CALL	$PSARG			;PUSH ARG ON THE STACK
	CALL	DADD			;(FAC)=(FAC)+(ARG)
	LXI	H,ARG-1
	CALL	$PPARG			;POP ARG OFF THE STACK
	POP	PSW			;FETCH LOOP COUNTER
	DCR	A
	JNZ	DD10
	CALL	$DECF1
	CALL	$DECF1
	CALL	$DECF1
	RET	
$DECF1:	LXI	H,FAC
	DCR	M			;(FAC)=(FAC)/2
	RNZ	
	JMP	ZERO			;UNDERFLOW
$DECA4:					;(ARG)=(ARG)/16
	LXI	H,ARG
	MVI	A,4
DC4:	DCR	M
	RZ	
	DCR	A
	JNZ	DC4
	RET	
$PSARG:					;PUSH DOUBLE PRECISION ARG ON THE STACK
	POP	D			;GET OUR RETURN ADDRESS OFF THE STACK
	MVI	A,4
	LXI	H,ARGLO
PSA10:	MOV	C,M			;FETCH BYTE
	INX	H
	MOV	B,M
	INX	H
	PUSH	B
	DCR	A			;THROUGH?
	JNZ	PSA10
	PUSH	D
	RET	
$PPARG:					;POP ARG OFF THE STACK
	POP	D			;GET OUR RETURN ADDRESS OFF THE STACK
	MVI	A,4
	LXI	H,ARG
PPA10:	POP	B
	MOV	M,B
	DCX	H
	MOV	M,C
	DCX	H
	DCR	A
	JNZ	PPA10
	PUSH	D
	RET	
					;DOUBLE PRECISION DIVISION	FAC:=FAC/ARG
					;ALTERS ALL REGISTERS
DDIV:	LDA	ARG			;CHECK FOR DIVISION BY ZERO
	ORA	A			;GET THE EXPONENT OF ARG
	JZ	INTDV0
	LDA	FAC			;IF FAC=0 THEN ANS IS ZERO
	ORA	A
	JZ	ZERO
	CALL	MULDVS			;SUBTRACT EXPONENTS AND CHECK SIGNS
	INR	M			;MULDIV DIFFERENT FOR TRUANS=0
	INR	M			;MUST CORRECT FOR INCORRECT EXP CALC
	JZ	OVFIN4
	CALL	DMULDV			;ZERO FAC AND PUT FAC IN FBUFFR
	LXI	H,FBUFFR+34		;GET POINTER TO THE EXTRA HO BYTE WE WILL USE
	MOV	M,C			;ZERO IT
	MOV	B,C			;ZERO FLAG TO SEE WHEN WE START DIVIDING
DDIV1:
	DB	076O			;"MVI	A", SUBTRACT ARG FROM FBUFFR
	SBB	M			;GET SUBTRACT INSTRUCTION
	CALL	DADDD			;DO THE SUBTRACTION
	LDAX	D			;SUBTRACT FROM EXTRA HO BYTE
	SBB	C			;HERE C=0
	CMC				;CARRY=1 IF SUBTRACTION WAS GOOD
	JC	DDIV2			;WAS IT OK?
	DB	076O			;"MVI	A"  NO, ADD FBUFFR BACK IN
	ADC	M			;GET ADD INSTRUCTION
	CALL	DADDD			;DO THE ADDITION
	XRA	A			;CLEAR CARRY
	DB	332O			;"JC" OVER NEXT TWO BYTES
DDIV2:	STAX	D			;STORE THE NEW HIGHEST ORDER BYTE
	INR	B			;INCREMENT FLAG TO SHOW WE COULD DIVIDE
	LDA	FAC-1			;CHECK IF WE ARE DONE DIVIDING
	INR	A			;SET SIGN FLAG WITHOUT AFFECTING CARRY
	DCR	A
	RAR				;PUT CARRY IN MSB FOR DROUND
	JM	DROUNB			;WE ARE DONE, WE HAVE 57 BITS OF ACCURACY
	RAL				;GET OLD CARRY BACK WHERE IT BELONGS
	LXI	H,DFACLO		;GET POINTER TO LO OF FAC
	MVI	C,7			;SET UP A COUNT, SHIFT FAC LEFT ONE
	CALL	DSHFTL			;SHIFT IN THE NEXT BIT IN THE QUOTIENT
	LXI	H,FBUFFR+27		;GET POINTER TO LO IN FBUFFR
	CALL	DSHFLC			;SHIFT DIVIDEND ONE LEFT
	MOV	A,B			;IS THIS THE FIRST TIME AND WAS THE
	ORA	A			; SUBTRACTION NOT GOOD? (B WILL GET
	JNZ	DDIV1			; CHANGED ON THE FIRST OR SECOND SUBTRACTION)
	LXI	H,FAC			;YES, SUBTRACT ONE FROM EXPONENT TO CORRECT
	DCR	M			; SCALING
	JNZ	DDIV1			;CONTINUE DIVIDING IF NO UNDERFLOW
	JMP	ZERO			;UNDERFLOW


					;TRANSFER FAC TO FBUFFR FOR DMULT AND DDIV
					;ALTERS A,B,C,D,E,H,L
DMULDV:
	MOV	A,C			;PUT UNPACKED HO BACK IN ARG
	STA	ARG-1
	DCX	H			;POINT TO HO OF FAC
	LXI	D,FBUFFR+33		;POINT TO END OF FBUFFR
	LXI	B,7*400O+0		;SET UP A COUNT
					;TO FBUFFR
DMLDV1:	MOV	A,M			;GET A BYTE FROM FAC
	STAX	D			;PUT IT IN FBUFFR
	MOV	M,C			;PUT A ZERO IN FAC
	DCX	D			;POINT TO NEXT BYTE IN FBUFFR
	DCX	H			;POINT TO NEXT LOWER ORDER BYTE IN FAC
	DCR	B			;ARE WE DONE?
	JNZ	DMLDV1			;NO, TRANSFER THE NEXT BYTE
	RET				;ALL DONE



					;DOUBLE PRECISION MULTIPLY THE FAC BY 10
					;ALTERS ALL REGISTERS
DMUL10:	CALL	VMOVAF			;SAVE THE FAC IN ARG
					;VMOVAF EXITS WITH (DE)=FAC+1
	XCHG				;GET THE POINTER INTO THE FAC IN (HL)
	DCX	H			;POINT TO THE EXPONENT
	MOV	A,M			;GET THE EXPONENT
	ORA	A			;IS THE NUMBER ZERO?
	RZ				;YES, ALL DONE
	ADI	2			;MULTIPLY FAC BY 4 BY ADDING 2 TO THE EXPONENT
	JC	OVFIN4
	MOV	M,A			;SAVE THE NEW EXPONENT
	PUSH	H			;SAVE POINTER TO FAC
	CALL	DADD			;ADD IN THE ORIGINAL FAC TO GET 5 TIMES  FAC
	POP	H			;GET THE POINTER TO FAC BACK
	INR	M			;ADD ONE TO EXPONENT TO GET 10 TIMES FAC
	RNZ				;ALL DONE IF OVERFLOW DID NOT OCCUR
	JMP	OVFIN4
					;MULTIPLY FAC BY 10
	PAGE
	SUBTTL	FLOATING POINT INPUT ROUTINE
					;ALTERS ALL REGISTERS
					;THE NUMBER IS LEFT IN FAC
					;AT ENTRY, (HL) POINTS TO THE FIRST CHARACTER IN A TEXT BUFFER.
					;THE FIRST CHARACTER IS ALSO IN A.  WE PACK THE DIGITS INTO THE FAC
					;AS AN INTEGER AND KEEP TRACK OF WHERE THE DECIMAL POINT IS.
					;C IS 377 IF WE HAVE NOT SEEN A DECIMAL POINT, 0 IF WE HAVE.
					;B IS THE NUMBER OF DIGITS AFTER THE DECIMAL POINT.
					;AT THE END, B AND THE EXPONENT (IN E) ARE USED TO DETERMINE HOW MANY
					;TIMES WE MULTIPLY OR DIVIDE BY TEN TO GET THE CORRECT NUMBER.
	PUBLIC	FINDBL
FINDBL:	CALL	ZERO			;ZERO THE FAC
	CALL	VALDBL			;FORCE TO DOUBLE PRECISION
	DB	366O			;"ORI" OVER "XRA A" SO FRCINT IS NOT CALLED
FIN:
	XRA	A			;FORCE CALL TO FRCINT
	EXTRN	FINOVC
	LXI	B,FINOVC		;WHEN DONE STORE OVERFLOW FLAG
	PUSH	B			;INTO STROVC AND GO TO NORMAL OVERFLOW MODE
	PUSH	PSW			;SET UP ONCE ONLY OVERFLOW MODE
	MVI	A,1
	STA	FLGOVC
	POP	PSW
FINCHR:	XCHG				;SAVE THE TEXT POINTER IN (DE)
	LXI	B,377O+0		;CLEAR FLAGS:  B=DECIMAL PLACE COUNT
					;C="." FLAG
	MOV	H,B			;ZERO (HL)
	MOV	L,B
	CZ	MAKINT			;ZERO FAC, SET VALTYP TO "INTEGER"
	XCHG				;GET THE TEXT POINTER BACK IN (HL) AND 
					; ZEROS IN (DE)
	MOV	A,M			;RESTORE CHAR FROM MEMORY
	CPI	'&'
	EXTRN	OCTCNS
	JZ	OCTCNS
					;RESTORE [A]
					;IF WE ARE CALLED BY VAL OR INPUT OR READ, THE SIGNS MAY NOT BE CRUNCHED
	CPI	'-'			;SEE IF NUMBER IS NEGATIVE
	PUSH	PSW			;SAVE SIGN
	JZ	FIN1			;IGNORE MINUS SIGN
	CPI	'+'			;IGNORE A LEADING SIGN
	JZ	FIN1
	DCX	H			;SET CHARACTER POINTER BACK ONE
FIN1:
					;HERE TO CHECK FOR A DIGIT, A DECIMAL POINT, "E" OR "D"
FINC:	CALL	CHRGTR			;GET THE NEXT CHARACTER OF THE NUMBER
	JC	FINDIG			;WE HAVE A DIGIT
	CPI	'.'			;CHECK FOR A DECIMAL POINT
	JZ	FINDP			;WE HAVE ONE, I GUESS
	CPI	145O			;LOWER CASE "E"
	JZ	FINC1
	CPI	'E'			;CHECK FOR A SINGLE PRECISION EXPONENT
FINC1:
	JNZ	NOTE			;NO
	PUSH	H			;SAVE TEXT PTR
	CALL	CHRGTR			;GET NEXT CHAR
	CPI	'L'+40O			;SEE IF LOWER CASE "L"
	JZ	WUZELS			;IF SO POSSIBLE ELSE
	CPI	'L'			;IS THIS REALLY AN "ELSE"?
	JZ	WUZELS			;WAS ELSE
	CPI	'Q'+40O			;SEE IF LOWER CASE "Q"
	JZ	WUZELS			;IF SO POSSIBLE "EQV"
	CPI	'Q'			;POSSIBLE "EQV"
WUZELS:	POP	H			;RESTORE [H,L]
	JZ	WUZ			;IT WAS JUMP!
	LDA	VALTYP			;IF DOUBLE DON'T DOWNGRADE TO SINGLE
	CPI	10O			;SET CONDITION CODES
	JZ	FINEX1
	MVI	A,0			;MAKE A=0 SO NUMBER IS A SINGLE
	JMP	FINEX1
WUZ:
	MOV	A,M			;RESTORE ORIGINAL CHAR
NOTE:
	CPI	'%'			;TRAILING % (RSTS-11 COMPATIBILITY)
	JZ	FININT			;MUST BE INTEGER.
	CPI	'#'			;FORCE DOUBLE PRECISION?
	JZ	FINDBF			;YES, FORCE IT & FINISH UP.
	CPI	'!'			;FORCE SINGLE PREC.
	JZ	FINSNF
	CPI	144O			;LOWER CASE "D"
	JZ	FINEX1
	CPI	'D'			;CHECK FOR A DOUBLE PRECISION EXPONENT
	JNZ	FINE			;WE DON'T HAVE ONE, THE NUMBER IS FINISHED
FINEX1:	ORA	A			;DOUBLE PRECISION NUMBER -- TURN OFF ZERO FLAG
FINEX:	CALL	FINFRC			;FORCE THE FAC TO BE SNG OR DBL
	CALL	CHRGTR			;GET THE FIRST CHARACTER OF THE EXPONENT
	CALL	MINPLS			;EAT SIGN OF EXPONENT
					;HERE TO GET THE NEXT DIGIT OF THE EXPONENT
FINEC:	CALL	CHRGTR			;GET THE NEXT CHARATER
	JC	FINEDG			;PACK THE NEXT DIGIT INTO THE EXPONENT
	INR	D			;IT WAS NOT A DIGIT, PUT THE CORRECT SIGN ON
	JNZ	FINE			; THE EXPONENT, IT IS POSITIVE
	XRA	A			;THE EXPONENT IS NEGATIVE
	SUB	E			;NEGATE IT
	MOV	E,A			;SAVE IT AGAIN
					;HERE TO FINISH UP THE NUMBER
FINE:	PUSH	H			;SAVE THE TEXT POINTER
	MOV	A,E			;FIND OUT HOW MANY TIMES WE HAVE TO MULTIPLY
	SUB	B			; OR DIVIDE BY TEN
	MOV	E,A			;SAVE NEW EXPONENT IN E
					;HERE TO MULTIPLY OR DIVIDE BY TEN THE CORRECT NUMBER OF TIMES
					;IF THE NUMBER IS AN INT, A IS 0 HERE.
FINE2:	CP	FINMUL			;MULTIPLY IF WE HAVE TO
	CM	FINDIV			;DIVIDE IF WE HAVE TO
	JNZ	FINE2			;MULTIPLY OR DIVIDE AGAIN IF WE ARE NOT DONE
					;HERE TO PUT THE CORRECT SIGN ON THE NUMBER
	POP	H			;GET THE TEXT POINTER
	POP	PSW			;GET THE SIGN
	PUSH	H			;SAVE THE TEXT POINTER AGAIN
	CZ	VNEG			;NEGATE IF NECESSARY
FINE2C:	POP	H			;GET THE TEXT POINTER IN (HL)
	CALL	GETYPR			;WE WANT -32768 TO BE AN INT, BUT UNTIL NOW
					; IT WOULD BE A SNG
	RPE				;IT IS NOT SNG, SO IT IS NOT -32768
	PUSH	H			;WE HAVE A SNG, SAVE TEXT POINTER
	LXI	H,POPHRT		;GET ADDRESS THAT POP'S H OFF STACK BECAUSE
	PUSH	H			; CONIS2 DOES FUNNY THINGS WITH THE STACK
	CALL	CONIS2			;CHECK IF WE HAVE -32768
	RET				;WE DON'T, POPHRT IS STILL ON THE STACK SO
					; WE CAN JUST RETURN

					;HERE TO CHECK IF WE HAVE SEEN 2 DECIMAL POINTS AND SET THE DECIMAL
					; POINT FLAG
FINDP:	CALL	GETYPR			;SET CARRY IF WE DON'T HAVE A DOUBLE
	INR	C			;SET THE FLAG
	JNZ	FINE			;WE HAD 2 DECIMAL POINTS, NOW WE ARE DONE
	CC	FINFRC			;THIS IS THE FIRST ONE, CONVERT FAC TO SNG
					; IF WE DON'T ALREADY HAVE A DOUBLE
	JMP	FINC			;CONTINUE LOOKING FOR DIGITS

FININT:	CALL	CHRGTR
	POP	PSW			;GET SIGN OFF THE STACK
	PUSH	H			;SAVE TEXT POINTER
	LXI	H,POPHRT		;ADDRESS POP (HL) AND RETURN
	PUSH	H			;
	LXI	H,FRCINT		;ADDRESS TO FORCE INTEGER
	PUSH	H			;WILL WANT TO FORCE ONCE D.P. DONE
	PUSH	PSW			;PUT SIGN BACK ON THE STACK
	JMP	FINE			;ALL DONE
FINDBF:	ORA	A			;SET NON-ZERO TO FORCE DOUBLE PREC
FINSNF:	CALL	FINFRC			;FORCE THE TYPE
	CALL	CHRGTR			;READ AFTER TERMINATOR
	JMP	FINE			;ALL DONE

					;FORCE THE FAC TO BE SNG OR DBL
					;IF THE ZERO FLAG IS ON, THEN FORCE THE FAC TO BE SNG
					;IF THE ZERO FLAG IS OFF, FORCE THE FAC TO BE DBL
FINFRC:	PUSH	H			;SAVE TEXT POINTER
	PUSH	D			;SAVE EXPONENT INFORMATION
	PUSH	B			;SAVE DECIMAL POINT INFORMATION
	PUSH	PSW			;SAVE WHAT WE WANT THE FAC TO BE
	CZ	FRCSNG			;CONVERT TO SNG IF WE HAVE TO
	POP	PSW			;GET TYPE FLAG BACK
	CNZ	FRCDBL			;CONVERT TO DBL IF WE HAVE TO
	POP	B			;GET DECIMAL POINT INFORMATION BACK
	POP	D			;GET EXPONENT INFORMATION BACK
	POP	H			;GET TEXT POINTER BACK
	RET				;ALL DONE

					;THIS SUBROUTINE MULIPLIES BY TEN ONCE.
					;IT IS A SUBROUTINE BECAUSE IT SAVES BYTES WHEN WE CHECK IF A IS ZERO
					;ALTERS ALL REGISTERS
FINMUL:	RZ				;RETURN IF EXPONENT IS ZERO, ENTRY FROM FOUT
FINMLT:	PUSH	PSW			;SAVE EXPONENT, ENTRY FROM FOUT
	CALL	GETYPR			;SEE WHAT KIND OF NUMBER WE HAVE
	PUSH	PSW			;SAVE THE TYPE
	CPO	MUL10			;WE HAVE A SNG, MULTIPLY BY 10.0
	POP	PSW			;GET THE TYPE BACK
	CPE	DMUL10			;WE HAVE A DBL, MULTIPLY BY 10D0
	POP	PSW			;GET EXPONENT
DCRART:	DCR	A			;DECREASE IT
	RET				;ALL DONE

					;THIS SUBROUTINE DIVIDES BY TEN ONCE.
					;IT IS USED BY FIN, FOUT
					;ALTERS A,B,C
FINDIV:	PUSH	D			;SAVE D,E
	PUSH	H			;SAVE H,L
	PUSH	PSW			;WE HAVE TO DIVIDE -- SAVE COUNT
	CALL	GETYPR			;SEE WHAT KIND OF NUMBER WE HAVE
	PUSH	PSW			;SAVE THE TYPE
	CPO	DIV10			;WE HAVE A SNG NUMBER
	POP	PSW			;GET THE TYPE BACK
	CPE	DDIV10			;WE HAVE A DBL NUMBER
	POP	PSW			;GET COUNT BACK
	POP	H			;GET H,L BACK
	POP	D			;GET D,E BACK
	INR	A			;UPDATE IT
	RET	

					;HERE TO PACK THE NEXT DIGIT OF THE NUMBER INTO THE FAC
					;WE MULTIPLY THE FAC BY TEN AND ADD IN THE NEXT DIGIT
FINDIG:
	PUSH	D			;SAVE EXPONENT INFORMATION
	MOV	A,B			;INCREMENT DECIMAL PLACE COUNT IF WE ARE
	ADC	C			; PAST THE DECIMAL POINT
	MOV	B,A
	PUSH	B			;SAVE DECIMAL POINT INFORMATION
	PUSH	H			;SAVE TEXT POINTER
	MOV	A,M			;GET THE DIGIT
	SUI	'0'			;CONVERT IT TO ASCII
	PUSH	PSW			;SAVE THE DIGIT
	CALL	GETYPR			;SEE WHAT KIND OF A NUMBER WE HAVE
	JP	FINDGV			;WE DO NOT HAVE AN INTEGER
					;HERE TO PACK THE NEXT DIGIT OF AN INTEGER
	LHLD	FACLO			;WE HAVE AN INTEGER, GET IT IN (HL)
	LXI	D,3277+0		;SEE IF WE WILL OVERFLOW
	CALL	DCOMPR			;COMPAR RETURNS WITH CARRY ON IF
	JNC	FINDG2			; (HL) .LT. (DE), SO THE NUMBER IS TOO BIG
	MOV	D,H			;COPY (HL) INTO (DE)
	MOV	E,L
	DAD	H			;MULTIPLY (HL) BY 2
	DAD	H			;MULTIPLY (HL) BY 2, (HL) NOW IS 4*(DE)
	DAD	D			;ADD IN OLD (HL) TO GET 5*(DE)
	DAD	H			;MULTIPLY BY 2 TO GET TEN TIMES THE OLD (HL)
	POP	PSW			;GET THE DIGIT
	MOV	C,A			;SAVE IT SO WE CAN USE DAD, B IS ALREADY ZERO
	DAD	B			;ADD IN THE NEXT DIGIT
	MOV	A,H			;CHECK FOR OVERFLOW
	ORA	A			;OVERFLOW OCCURED IF THE MSB IS ON
	JM	FINDG1			;WE HAVE OVERFLOW!!
	SHLD	FACLO			;EVERYTHING IS FINE, STORE THE NEW NUMBER
FINDGE:	POP	H			;ALL DONE, GET TEXT POINTER BACK
	POP	B			;GET DECIMAL POINT INFORMATION BACK
	POP	D			;GET EXPONENT INFORMATION BACK
	JMP	FINC			;GET THE NEXT CHARACTER
					;HERE TO HANDLE 32768, 32769
FINDG1:	MOV	A,C			;GET THE DIGIT
	PUSH	PSW			;PUT IT BACK ON THE STACK
					;HERE TO CONVERT THE INTEGER DIGITS TO SINGLE PRECISION DIGITS
FINDG2:	CALL	CONSI			;CONVERT THE INTEGER TO SINGLE PRECISION
	STC				;DO NOT TAKE THE FOLLOWING JUMP
					;HERE TO DECIDE IF WE HAVE A SINGLE OR DOUBLE PRECISION NUMBER
FINDGV:	JNC	FINDGD			;FALL THROUGH IF VALTYP WAS 4 I.E. SNG PREC
	LXI	B,224Q*256+164Q
	LXI	D,044Q*256+000Q		;GET 1000000, DO WE HAVE 7 DIGITS ALREADY?
	CALL	FCOMP			;IF SO, FAC .GE. 1000000
	JP	FINDG3			;WE DO, CONVERT TO DOUBLE PRECISION
	CALL	MUL10			;MULTIPLY THE OLD NUMBER BY TEN
	POP	PSW			;GET THE NEXT DIGIT
	CALL	FINLOG			;PACK IT INTO THE FAC
	JMP	FINDGE			;GET FLAGS OFF STACK AND WE ARE DONE
					;HERE TO CONVERT A 7 DIGIT SINGLE PRECISION NUMBER TO DOUBLE PRECISION
FINDG3:	CALL	CONDS			;CONVERT SINGLE TO DOUBLE PRECISION
					;HERE TO PACK IN THE NEXT DIGIT OF A DOUBLE PRECISION NUMBER
FINDGD:	CALL	DMUL10			;MULTIPLY THE FAC BY 10
	CALL	VMOVAF			;SAVE THE FAC IN ARG
	POP	PSW			;GET THE NEXT DIGIT
	CALL	FLOAT			;CONVERT THE DIGIT TO SINGLE PRECISION
	CALL	CONDS			;NOW, CONVERT THE DIGIT TO DOUBLE PRECISION
	CALL	DADD			;ADD IN THE DIGIT
	JMP	FINDGE			;GET THE FLAGS OFF THE STACK AND WE ARE DONE

					;SUBROUTINE FOR FIN, LOG
FINLOG:	CALL	PUSHF			;SAVE FAC ON STACK
	CALL	FLOAT			;CONVERT A TO A FLOATING POINT NUMBER
FADDT:	POP	B
	POP	D
					;GET PREVIOUS NUMBER OFF STACK
	JMP	FADD			;ADD IT IN

					;HERE WE PACK IN THE NEXT DIGIT OF THE EXPONENT
					;WE MUTIPLY THE OLD EXPONENT BY TEN AND ADD IN THE NEXT DIGIT
					;NOTE: EXPONENT OVERFLOW IS NOT CHECKED FOR
FINEDG:	MOV	A,E			;EXPONENT DIGIT -- MULTIPLY EXPONENT BY 10
	CPI	12O			;CHECK THAT THE EXPONENT DOES NOT OVERFLOW
					;IF IT DID, E COULD GET GARBAGE IN IT.
	JNC	FINEDO			;WE ALREADY HAVE TWO DIGITS
	RLC				;FIRST BY 4
	RLC	
	ADD	E			;ADD 1 TO MAKE 5
	RLC				;NOW DOUBLE TO GET 10
	ADD	M			;ADD IT IN
	SUI	'0'			;SUBTRACT OFF ASCII CODE, THE RESULT IS
					; POSITIVE ON LENGTH=2 BECAUSE OF THE
					; ABOVE CHECK
	MOV	E,A			;STORE EXPONENT
	DB	372O			;"JM" OVER THE NEXT 2 BYTES
FINEDO:	MVI	E,127			;AN EXPONENT LIKE THIS WILL SAFELY CAUSE
					; OVERFLOW OR UNDERFLOW
	JMP	FINEC			;CONTINUE
OVFIN1:	ORA	A			;CLEAR CARRY
	JMP	OVFINT			;GO PRINT OVERFLOW
OVFIN9:	POP	PSW			;GET STACK RIGHT
OVFIN2:	PUSH	H			;
	LXI	H,FAC-1			;POINT (HL) TO SIGN BYTE
	CALL	GETYPR
	JPO	OVF2A			;SP PROCEED AS NORMAL
	LDA	ARG-1
	JMP	OVF2B
OVF2A:
	MOV	A,C
OVF2B:
	XRA	M			;SIGN IN HIGH BIT OF (A)
	RAL				;SIGN IN CARRY
	POP	H			;
	JMP	OVFINT
OVF2C:	LDA	FAC+1			;THIS ENTRY IS USED BY CONSD
	JMP	OVFI4B			;WHEN D.P. EXP TOO LARGE FOR S.P.
OVFIN5:	POP	PSW			;NEED TO DO 3 POP'S THEN OVERFLOW
OVFIN6:	POP	PSW
OVFIN7:	POP	PSW
OVFIN3:	LDA	FAC-1
	RAL	
	JMP	OVFINT
OVFIN8:	POP	PSW			;DO A POP THEN FALL INTO OVFIN4
OVFIN4:	LDA	FAC+1			;GET SIGN BYTE
	CMA				;SIGN WAS STORED COMPLEMENTED
OVFI4B:	RAL				;SIGN TO CARRY
	JMP	OVFINT
INTDV1:	MOV	A,C
	JMP	INTDV2			;
INTDV0:	PUSH	H			;GET ARG SIGN BYTE
	PUSH	D			;
	LXI	H,DFACLO
	LXI	D,INFM			;ALL ONE'S
	CALL	MOVE
	LDA	INFM			;377
	STA	DFACLO+2		;(PREVIOUSLY 177)
	CALL	GETYPR
	JPO	INDV0A			;NOT D.P. LOAD ARG SIGN
	LDA	FAC-1
	JMP	INDV0B
INDV0A:
	LDA	ARG-1
INDV0B:	POP	D
	POP	H
INTDV2:	RAL				;TO CARRY
	LXI	H,DIVMSG		;GET MESSAGE ADDRESS
	SHLD	OVERRI			;STORE SO OVFINT WILL PICK UP
OVFINT:					;ANSI OVERFLOW ROUTINE
	PUSH	H
	PUSH	B
	PUSH	D
	PUSH	PSW			;SAVE MACHINE STATUS
	PUSH	PSW			;AGAIN
	EXTRN	ONELIN			;
	LHLD	ONELIN			;TRAPPING ERRORS?
	MOV	A,H
	ORA	L
	JNZ	OVFPRT			;JUMP PRINT IF TRAPPING
					;OTHERWISE +INFINITY
	LDA	FLGOVC			;PRINT INDICATOR FLAG
	ORA	A			;PRINT IF 0,1;SET TO 2 IF 1
	JZ	OV1A			;GO PRINT
	CPI	1
	JNZ	OV1B
	MVI	A,2
	STA	FLGOVC
OV1A:
	LHLD	OVERRI			;ADDRESS OF OVERFLOW MESSAGE
	CALL	STRPRN			;PRINT
	STA	TTYPOS			;SET TTY POSITION TO CHAR 0
					;SET TTY POSITION TO CHAR 0
	MVI	A,15O
	CALL	CALTTY
	MVI	A,12O
	CALL	CALTTY			;CARRIAGE RETURN,LINE FEED
OV1B:
OVFPRT:	POP	PSW			;GET PLUS,MINUS INDICATION BACK
	LXI	H,FACLO			;MUST NOW PUT RIGHT INFINITY
					;INTO THE FAC
	LXI	D,INFP
	JNC	OVFINA
	LXI	D,INFM			;MINUS INFINITY
OVFINA:	CALL	MOVE			;MOVE INTO FAC
	CALL	GETYPR
	JPO	OVFINB			;SP ALL OK
	LXI	H,DFACLO
	LXI	D,INFM			;ALL ONES
	CALL	MOVE
OVFINB:
	LHLD	ONELIN			;TRAPPING ERRORS?
	MOV	A,H
	ORA	L
	JZ	NOODTP			;JUMP IF NOT TRAPPING
	LHLD	OVERRI
	LXI	D,OVRMSG
	CALL	DCOMPR
	LXI	H,OVRMSG
	SHLD	OVERRI
	JZ	OVERR
	JMP	DV0ERR
NOODTP:
	POP	PSW			;
	LXI	H,OVRMSG		;PUT "OVRMSG" ADDRESS IN OVERRI
	SHLD	OVERRI			;IN CASE THIS WAS A DIV BY 0
	POP	D
	POP	B
	POP	H			;ALL RESTORED 
	RET				;CONTINUE PROCESSING
INFP:	DB	377O
	DB	377O
	DB	177O
	DB	377O
INFM:	DB	377O
	DB	377O
	DB	377O
	DB	377O



	PAGE
	SUBTTL	FLOATING POINT OUTPUT ROUTINE
					;ENTRY TO LINPRT
INPRT:	PUSH	H			;SAVE LINE NUMBER
	LXI	H,INTXT			;PRINT MESSAGE
	CALL	STROUT
	POP	H			;FALL INTO LINPRT


					;PRINT THE 2 BYTE NUMBER IN H,L
					;ALTERS ALL REGISTERS
LINPRT:
	LXI	B,STROUI
	PUSH	B
	PUBLIC	LINOUT
LINOUT:	CALL	MAKINT			;PUT THE LINE NUMBER IN THE FAC AS AN INTEGER
	XRA	A			;SET FORMAT TO FREE FORMAT
	CALL	FOUINI			;SET UP THE SIGN
	ORA	M			;TURN OFF THE ZERO FLAG
	JMP	FOUT2			;CONVERT THE NUMBER INTO DIGITS
	EXTRN	STROUI

					;FLOATING OUTPUT OF FAC
					;ALTERS ALL REGISTERS
					;THE ORIGINAL CONTENTS OF THE FAC IS LOST
;
;	OUTPUT THE VALUE IN THE FAC ACCORDING TO THE FORMAT SPECIFICATIONS
;	IN A,B,C
;	ALL REGISTERS ARE ALTERED
;	THE ORIGINAL CONTENTS OF THE FAC IS LOST
;
;	THE FORMAT IS SPECIFIED IN A, B AND C AS FOLLOWS:
;	THE BITS OF A MEAN THE FOLLOWING:
;BIT 7	0 MEANS FREE FORMAT OUTPUT, I.E. THE OTHER BITS OF A MUST BE ZERO,
;	TRAILING ZEROS ARE SUPPRESSED, A NUMBER IS PRINTED IN FIXED OR FLOATING
;	POINT NOTATION ACCORDING TO ITS MAGNITUDE, THE NUMBER IS LEFT
;	JUSTIFIED IN ITS FIELD, B AND C ARE IGNORED.
;	1 MEANS FIXED FORMAT OUTPUT, I.E. THE OTHER BITS OF A ARE CHECKED FOR
;	FORMATTING INFORMATION, THE NUMBER IS RIGHT JUSTIFIED IN ITS FIELD,
;	TRAILING ZEROS ARE NOT SUPPRESSED.  THIS IS USED FOR PRINT USING.
;BIT 6	1 MEANS GROUP THE DIGITS IN THE INTEGER PART OF THE NUMBER INTO GROUPS
;	OF THREE AND SEPARATE THE GROUPS BY COMMAS
;	0 MEANS DON'T PRINT THE NUMBER WITH COMMAS
;BIT 5	1 MEANS FILL THE LEADING SPACES IN THE FIELD WITH ASTERISKS ("*")
;BIT 4	1 MEANS OUTPUT THE NUMBER WITH A FLOATING DOLLAR SIGN ("$")
;BIT 3	1 MEANS PRINT THE SIGN OF A POSITIVE NUMBER AS A PLUS SIGN ("+")
;	INSTEAD OF A SPACE
;BIT 2	1 MEANS PRINT THE SIGN OF THE NUMBER AFTER THE NUMBER
;BIT 1	UNUSED
;BIT 0	1 MEANS PRINT THE NUMBER IN FLOATING POINT NOTATION I.E. "E NOTATION"
;	IF THIS BIT IS ON, THE COMMA SPECIFICATION (BIT 6) IS IGNORED.
;	0 MEANS PRINT THE NUMBER IN FIXED POINT NOTATION.  NUMBERS .GE. 1E16
;	CANNOT BE PRINTED IN FIXED POINT NOTATION.
;
;	B AND C TELL HOW BIG THE FIELD IS:
;B   =	THE NUMBER OF PLACES IN THE FIELD TO THE LEFT OF THE DECIMAL POINT
;	(B DOES NOT INCLUDE THE DECIMAL POINT)
;C   =	THE NUMBER OF PLACES IN THE FIELD TO THE RIGHT OF THE DECIMAL POINT
;	(C INCLUDES THE DECIMAL POINT)
;	B AND C DO NOT INCLUDE THE 4 POSITIONS FOR THE EXPONENT IF BIT 0 IS ON
;	FOUT ASSUMES B+C .LE. 24 (DECIMAL)
;	IF THE NUMBER IS TOO BIG TO FIT IN THE FIELD, A PERCENT SIGN ("%") IS
;	PRINTED AND THE FIELD IS EXTENDED TO HOLD THE NUMBER.
;&


					;ENTRY TO PRINT THE FAC IN FREE FORMAT
FOUT:	XRA	A			;SET FORMAT FLAGS TO FREE FORMATED OUTPUT
					;ENTRY TO PRINT THE FAC USING THE FORMAT SPECIFICATIONS IN A, B AND C
PUFOUT:	CALL	FOUINI			;SAVE THE FORMAT SPECIFICATION IN A AND PUT
					;A SPACE FOR POSITIVE NUMBERS IN THE BUFFER
	ANI	10O			;CHECK IF POSITIVE NUMBERS GET A PLUS SIGN
	JZ	FOUT1			;THEY DON'T
	MVI	M,'+'			;THEY DO, PUT IN A PLUS SIGN
FOUT1:	XCHG				;SAVE BUFFER POINTER
	CALL	VSIGN			;GET THE SIGN OF THE FAC
	XCHG				;PUT THE BUFFER POINTER BACK IN (HL)
	JP	FOUT2			;IF WE HAVE A NEGATIVE NUMBER, NEGATE IT
	MVI	M,'-'			; AND PUT A MINUS SIGN IN THE BUFFER
	PUSH	B			;SAVE THE FIELD LENGTH SPECIFICATION
	PUSH	H			;SAVE THE BUFFER POINTER
	CALL	VNEG			;NEGATE THE NUMBER
	POP	H			;GET THE BUFFER POINTER BACK
	POP	B			;GET THE FIELD LENGTH SPECIFICATIONS BACK
	ORA	H			;TURN OFF THE ZERO FLAG, THIS DEPENDS ON THE
					; FACT THAT FBUFFR IS NEVER ON PAGE 0.
FOUT2:	INX	H			;POINT TO WHERE THE NEXT CHARACTER GOES
	MVI	M,'0'			;PUT A ZERO IN THE BUFFER IN CASE THE NUMBER
					; IS ZERO (IN FREE FORMAT) OR TO RESERVE SPACE
					; FOR A FLOATING DOLLAR SIGN (FIXED FORMAT)
	LDA	TEMP3			;GET THE FORMAT SPECIFICATION
	MOV	D,A			;SAVE IT FOR LATER
	RAL				;PUT THE FREE FORMAT OR NOT BIT IN THE CARRY
	LDA	VALTYP			;GET THE VALTYP, VNEG COULD HAVE CHANGED THIS
					; SINCE -32768 IS INT AND 32768 IS SNG.
	JC	FOUTFX			;THE MAN WANTS FIXED FORMATED OUTPUT
					;HERE TO PRINT NUMBERS IN FREE FORMAT
	JZ	FOUTZR			;IF THE NUMBER IS ZERO, FINISH IT UP
	CPI	4			;DECIDE WHAT KIND OF A VALUE WE HAVE
	JNC	FOUFRV			;WE HAVE A SNG OR DBL
					;HERE TO PRINT AN INTEGER IN FREE FORMAT
	LXI	B,0			;SET THE DECIMAL POINT COUNT AND COMMA COUNT
					; TO ZERO
	CALL	FOUTCI			;CONVERT THE INTEGER TO DECIMAL
					;FALL INTO FOUTZS AND ZERO SUPPRESS THE THING


					;ZERO SUPPRESS THE DIGITS IN FBUFFR
					;ASTERISK FILL AND ZERO SUPPRESS IF NECESSARY
					;SET UP B AND CONDITION CODES IF WE HAVE A TRAILING SIGN
FOUTZS:	LXI	H,FBUFFR+1		;GET POINTER TO THE SIGN
	MOV	B,M			;SAVE THE SIGN IN B
	MVI	C,' '			;DEFAULT FILL CHARACTER TO A SPACE
	LDA	TEMP3			;GET FORMAT SPECS TO SEE IF WE HAVE TO
	MOV	E,A			; ASTERISK FILL.  SAVE IT
	ANI	40O
	JZ	FOTZS1			;WE DON'T
	MOV	A,B			;WE DO, SEE IF THE SIGN WAS A SPACE
	CMP	C			;ZERO FLAG IS SET IF IT WAS
	MVI	C,'*'			;SET FILL CHARACTER TO AN ASTERISK
	JNZ	FOTZS1			;SET THE SIGN TO AN ASTERISK IF IT WAS A SPACE
	MOV	A,E			;GET FORMAT SPECS AGAIN
	ANI	4			;SEE IF SIGN IS TRAILING
	JNZ	FOTZS1			;IF SO DON'T ASTERISK FILL
	MOV	B,C			;B HAS THE SIGN, C THE FILL CHARACTER
FOTZS1:	MOV	M,C			;FILL IN THE ZERO OR THE SIGN
	CALL	CHRGTR			;GET THE NEXT CHARACTER IN THE BUFFER
					;SINCE THERE ARE NO SPACES, "CHRGET" IS
					; EQUIVALENT TO "INX	H"/"MOV	A,M"
	JZ	FOTZS4			;IF WE SEE A REAL ZERO, IT IS THE END OF
					; THE NUMBER, AND WE MUST BACK UP AND PUT
					; IN A ZERO.  CHRGET SETS THE ZERO FLAG ON
					; REAL ZEROS OR COLONS, BUT WE WON'T SEE
					; ANY COLONS IN THIS BUFFER.
	CPI	'E'			;BACK UP AND PUT IN A ZERO IF WE SEE
	JZ	FOTZS4			;AN "E" OR A "D" SO WE CAN PRINT 0 IN
	CPI	'D'			;FLOATING POINT NOTATION WITH THE C FORMAT ZERO
	JZ	FOTZS4
	CPI	'0'			;DO WE HAVE A ZERO?
	JZ	FOTZS1			;YES, SUPPRESS IT
	CPI	54O			;54=","  DO WE HAVE A COMMA?
	JZ	FOTZS1			;YES, SUPPRESS IT
	CPI	'.'			;ARE WE AT THE DECIMAL POINT?
	JNZ	FOTZS2			;NO, I GUESS NOT
FOTZS4:	DCX	H			;YES, BACK UP AND PUT A ZERO BEFORE IT
	MVI	M,'0'
FOTZS2:	MOV	A,E			;GET THE FORMAT SPECS TO CHECK FOR A FLOATING
	ANI	20O			; DOLLAR SIGN
	JZ	FOTZS3			;WE DON'T HAVE ONE
	DCX	H			;WE HAVE ONE, BACK UP AND PUT IN THE DOLLAR
	MVI	M,CURNCY		; SIGN
FOTZS3:	MOV	A,E			;DO WE HAVE A TRAILING SIGN?
	ANI	4
	RNZ				;YES, RETURN; NOTE THE NON-ZERO FLAG IS SET
	DCX	H			;NO, BACK UP ONE AND PUT THE SIGN BACK IN
	MOV	M,B			;PUT IN THE SIGN
	RET				;ALL DONE


					;HERE TO INITIALLY SET UP THE FORMAT SPECS AND PUT IN A SPACE FOR THE
					;SIGN OF A POSITIVE NUMBER
FOUINI:	STA	TEMP3			;SAVE THE FORMAT SPECIFICATION
	LXI	H,FBUFFR+1		;GET A POINTER INTO FBUFFR
					;WE START AT FBUFFR+1 IN CASE THE NUMBER WILL
					; OVERFLOW ITS FIELD, THEN THERE IS ROOM IN
					; FBUFFR FOR THE PERCENT SIGN.
	MVI	M,' '			;PUT IN A SPACE
	RET				;ALL DONE


					;HERE TO PRINT A SNG OR DBL IN FREE FORMAT
FOUFRV:
					;THE FOLLOWING CODE DOWN TO FOUFRF: IS ADDED TO ADDRESS THE
					;ANSI STANDARD OF PRINTING NUMBERS IN FIXED FORMAT RATHER THAN
					;SCIENTIFIC NOTATION IF THEY CAN BE AS ACCURATELY RPRESENTED
					;IN FIXED FORMAT

	CALL	PUSHF			;SAVE IN CASE NEEDED FOR 2ED PASS
	XCHG				;SAVE BUFFER POINTER IN (HL)
	LHLD	DFACLO
	PUSH	H			;SAVE FOR D.P.
	LHLD	DFACLO+2		;
	PUSH	H			;
	XCHG				;BUFFER POINTER BACK TO (HL)
	PUSH	PSW			;SAVE IN CASE NEEDED FOR SECOND PASS
	XRA	A			;(A)=0
	STA	FANSII			;INITIALIZE FANSII FLAG
	POP	PSW			;GET PSW RIGHT
	PUSH	PSW			;SAVE PSW
	CALL	FOUFRF			;FORMAT NUMBER
	MVI	B,'E'			;WILL SEARCH FOR SCIENTIFIC NOTN.
	MVI	C,0			;DIGIT COUNTER
FU1:					;GET ORIGINAL FBUFFER POINTER
	PUSH	H			;SAVE IN CASE WE NEED TO LOOK FOR "D"
	MOV	A,M			;FETCH UP FIRST CHARACTER
FU2:	CMP	B			;SCIENTIFIC NOTATION?
	JZ	FU4			;IF SO, JUMP
	CPI	72O			;IF CARRY NOT SET NOT A DIGIT
	JNC	FU2A
	CPI	60O			;IF CARRY SET NOT A DIGIT
	JC	FU2A
	INR	C			;INCREMENTED DIGITS TO PRINT
FU2A:	INX	H			;POINT TO NEXT BUFFER CHARACTER
	MOV	A,M			;FETCH NEXT CHARACTER
	ORA	A			;0(BINARY) AT THE END OF CHARACTERS
	JNZ	FU2			;CONTINUE SEARCH IF NOT AT END
	MVI	A,'D'			;NOW TO CHECK TO SEE IF SEARCHED FOR D
	CMP	B
	MOV	B,A			;IN CASE NOT YET SEARCHED FOR
	POP	H			;NOW TO CHECK FOR "D"
	MVI	C,0			;ZERO DIGIT COUNT
	JNZ	FU1			;GO SEARCH FOR "D" IF NOT DONE SO
FU3:	POP	PSW			;POP	ORIGINAL PSW
	POP	B
	POP	D
					;GET DFACLO-DFACLO+3
	XCHG				;(DE)=BUF PTR,(HL)=DFACLO
	SHLD	DFACLO			;
	MOV	H,B
	MOV	L,C
	SHLD	DFACLO+2
	XCHG	
	POP	B
	POP	D
					;GET ORIG FAC OFF STACK
	RET				;COMPLETE
FU4:					;PRINT IS IN SCIENTIFIC NOTATION , IS THIS BEST?
	PUSH	B			;SAVE TYPE,DIGIT COUNT
	MVI	B,0			;EXPONENT VALUE (IN BINARY)
	INX	H			;POINT TO NEXT CHARACTER OF EXP.
	MOV	A,M			;FETCH NEXT CHARACTER OF EXPONENT
FU5:	CPI	'+'			;IS EXPONENT POSITIVE?
	JZ	FU8			;IF SO NO BETTER PRINTOUT
	CPI	'-'			;MUST BE NEGATIVE!
	JZ	FU5A			;MUST PROCESS THE DIGITS
	SUI	'0'			;SUBTRACT OUT ASCII BIAS
	MOV	C,A			;DIGIT TO C
	MOV	A,B			;FETCH OLD DIGIT
	ADD	A			;*2
	ADD	A			;*4
	ADD	B			;*5
	ADD	A			;*10
	ADD	C			;ADD IN NEW DIGIT
	MOV	B,A			;BACK OUT TO EXPONENT ACCUMULATOR
	CPI	20O			;16 D.P. DIGITS FOR MICROSOFT FORMAT
	JNC	FU8			;IF SO STOP TRYING
FU5A:	INX	H			;POINT TO NEXT CHARACTER 
	MOV	A,M			;FETCH UP
	ORA	A			;BINARY ZERO AT END
	JNZ	FU5			;CONTINUE IF NOT AT END
	MOV	H,B			;SAVE EXPONENT
	POP	B			;FETCH TYPE, DIGIT COUNT
	MOV	A,B			;DETERMINE TYPE
	CPI	'E'			;SINGLE PRECISION?
	JNZ	FU7			;NO -GO PROCESS AS DOUBLE PRECISION
	MOV	A,C			;DIGIT COUNT
	ADD	H			;ADD EXPONENT VALUE
	CPI	11O
	POP	H			;POP	OLD BUFFER POINTER
	JNC	FU3			;CAN'T DO BETTER
FU6:	MVI	A,200O			;
	STA	FANSII			;
	JMP	FU9			;DO FIXED POINT PRINTOUT
FU7:	MOV	A,H			;SAVE EXPONENT
	ADD	C			;TOTAL DIGITS NECESSARY
	CPI	22O			;MUST PRODUCE CARRY TO USE FIXED POINT
	POP	H			;GET STACK RIGHT
	JNC	FU3
	JMP	FU6			;GO  RINT IN FIXED POINT
FU8:	POP	B			;
	POP	H			;GET ORIGINAL BUFFER PTR BACK
	JMP	FU3			;
FU9:	POP	PSW			;GET ORIGINAL PSW OFF STACK
	POP	B
	POP	D
					;GET DFACLO-DFACLO+3
	XCHG				;(DE)=BUFFER PTR,(HL)=DFACLO
	SHLD	DFACLO			;
	MOV	H,B
	MOV	L,C
	SHLD	DFACLO+2
	XCHG	
	POP	B
	POP	D
					;GET ORIGINAL FAC BACK
	CALL	MOVFR			;MOVE TO FAC
	INX	H			;BECAUSE WHEN WE ORIGINALLY ENTERED
					;FOUFRV THE (HL) POINTED TO A CHAR.
					;PAST THE SIGN AND THE PASS THROUGH
					;THIS CODE LEAVES (HL) POINTING TO
					;THE SIGN. (HL) MUST POINT PAST SIGN!
FOUFRF:					;
	CPI	5			;SET CC'S FOR Z80
	PUSH	H			;SAVE THE BUFFER POINTER
	SBI	0			;MAP 4 TO 6 AND 10 TO 20
	RAL				;THIS CALCULATES HOW MANY DIGITS WE WILL
	MOV	D,A			; PRINT
	INR	D
	CALL	FOUTNV			;NORMALIZE THE FAC SO ALL SIGNIFICANT DIGITS
					; ARE IN THE INTEGER PART
	LXI	B,3*400O+0		;B = DECIMAL POINT COUNT
					;C = COMMA COUNT
					;SET COMMA COUNT TO ZERO AND DECIMAL POINT
					; COUNT FOR E NOTATION

	PUSH	PSW			;SAVE FOR NORMAL CASE
	LDA	FANSII			;SEE IF FORCED FIXED OUTPUT
	ORA	A			;SET CONDITION CODES CORRECTLY
	JP	FOFV5A			;DO NORMAL THING
	POP	PSW			;
	ADD	D
	JMP	FOUFV6			;FIXED OUTPUT
FOFV5A:	POP	PSW			;NORMAL ROUTE
	ADD	D			;SEE IF NUMBER SHOULD BE PRINTED IN E NOTATION
	JM	FOFRS1			;IT SHOULD, IT IS .LT. .01
	INR	D			;CHECK IF IT IS TOO BIG
	CMP	D
	JNC	FOFRS1			;IT IS TOO BIG, IT IS .GT. 10^D-1
FOUFV6:	INR	A			;IT IS OK FOR FIXED POINT NOTATION
	MOV	B,A			;SET DECIMAL POINT COUNT
	MVI	A,2			;SET FIXED POINT FLAG, THE EXPONENT IS ZERO
					; IF WE ARE USING FIXED POINT NOTATION
FOFRS1:	SUI	2			;E NOTATION: ADD D-2 TO ORIGINAL EXPONENT
					;RESTORE EXP IF NOT D.P.
	POP	H			;GET THE BUFFER POINTER BACK
	PUSH	PSW			;SAVE THE EXPONENT FOR LATER
	CALL	FOUTAN			;.01 .LE. NUMBER .LT. .1?
	MVI	M,'0'			;YES, PUT ".0" IN BUFFER
	CZ	INXHRT
	CALL	FOUTCV			;CONVERT THE NUMBER TO DECIMAL DIGITS
					;HERE TO SUPPRESS THE TRAILING ZEROS
FOFRS2:	DCX	H			;MOVE BACK TO THE LAST CHARACTER
	MOV	A,M			;GET IT AND SEE IF IT WAS ZERO
	CPI	'0'
	JZ	FOFRS2			;IT WAS, CONTINUE SUPPRESSING
	CPI	'.'			;HAVE WE SUPPRESSED ALL THE FRACTIONAL DIGITS?
	CNZ	INXHRT			;YES, IGNORE THE DECIMAL POINT ALSO
	POP	PSW			;GET THE EXPONENT BACK
	JZ	FOUTDN			;WE ARE DONE IF WE ARE IN FIXED POINT NOTATION
					;FALL IN AND PUT THE EXPONENT IN THE BUFFER


					;HERE TO PUT THE EXPONENT AND "E" OR "D" IN THE BUFFER
					;THE EXPONENT IS IN A, THE CONDITION CODES ARE ASSUMED TO BE SET
					;CORRECTLY.
FOFLDN:	PUSH	PSW			;SAVE THE EXPONENT
	CALL	GETYPR			;SET CARRY FOR SINGLE PRECISION
	MVI	A,42O			;[A]="D"/2
	ADC	A			;MULTIPLY BY 2 AND ADD CARRY
	MOV	M,A			;SAVE IT IN THE BUFFER
	INX	H			;INCREMENT THE BUFFER POINTER
					;PUT IN THE SIGN OF THE EXPONENT
	POP	PSW			;GET THE EXPONENT BACK
	MVI	M,'+'			;A PLUS IF POSITIVE
	JP	FOUCE1
	MVI	M,'-'			;A MINUS IF NEGATIVE
	CMA				;NEGATE EXPONENT
	INR	A
					;CALCULATE THE TWO DIGIT EXPONENT
FOUCE1:	MVI	B,'0'-1			;INITIALIZE TEN'S DIGIT COUNT
FOUCE2:	INR	B			;INCREMENT DIGIT
	SUI	12O			;SUBTRACT TEN
	JNC	FOUCE2			;DO IT AGAIN IF RESULT WAS POSITIVE
	ADI	'0'+12O			;ADD BACK IN TEN AND CONVERT TO ASCII
					;PUT THE EXPONENT IN THE BUFFER
	INX	H
	MOV	M,B			;PUT TEN'S DIGIT OF EXPONENT IN BUFFER
	INX	H			;WHEN WE JUMP TO HERE, A IS ZERO
	MOV	M,A			;PUT ONE'S DIGIT IN BUFFER
FOUTZR:	INX	H			;INCREMENT POINTER, HERE TO FINISH UP
					; PRINTING A FREE FORMAT ZERO
FOUTDN:	MVI	M,0			;PUT A ZERO AT THE END OF THE NUMBER
	XCHG				;SAVE THE POINTER TO THE END OF THE NUMBER
					; IN (DE) FOR FFXFLV
	LXI	H,FBUFFR+1		;GET A POINTER TO THE BEGINNING
	RET				;ALL DONE




					;HERE TO PRINT A NUMBER IN FIXED FORMAT
FOUTFX:	INX	H			;MOVE PAST THE ZERO FOR THE DOLLAR SIGN
	PUSH	B			;SAVE THE FIELD LENGTH SPECIFICATIONS
	CPI	4			;CHECK WHAT KIND OF VALUE WE HAVE
	MOV	A,D			;GET THE FORMAT SPECS
	JNC	FOUFXV			;WE HAVE A SNG OR A DBL
					;HERE TO PRINT AN INTEGER IN FIXED FORMAT
	RAR				;CHECK IF WE HAVE TO PRINT IT IN FLOATING
	JC	FFXIFL			; POINT NOTATION
					;HERE TO PRINT AN INTEGER IN FIXED FORMAT-FIXED POINT NOTATION
	LXI	B,6*400O+3+0		;SET DECIMAL POINT COUNT TO 6 AND
					; COMMA COUNT TO 3
	CALL	FOUICC			;CHECK IF WE DON'T HAVE TO USE THE COMMAS
	POP	D			;GET THE FIELD LENGTHS
	MOV	A,D			;SEE IF WE HAVE TO PRINT EXTRA SPACES BECAUSE
	SUI	5			; THE FIELD IS TOO BIG
	CP	FOTZER			;WE DO, PUT IN ZEROS, THEY WILL LATER BE
					; CONVERTED TO SPACES OR ASTERISKS BY FOUTZS
	CALL	FOUTCI			;CONVERT THE NUMBER TO DECIMAL DIGITS
FOUTTD:	MOV	A,E			;DO WE NEED A DECIMAL POINT?
	ORA	A
	CZ	DCXHRT			;WE DON'T, BACKSPACE OVER IT.
	DCR	A			;GET HOW MANY TRAILING ZEROS TO PRINT
	CP	FOTZER			;PRINT THEM
					;IF WE DO HAVE DECIMAL PLACES, FILL THEM UP
					; WITH ZEROS
					;FALL IN AND FINISH UP THE NUMBER


					;HERE TO FINISH UP A FIXED FORMAT NUMBER
FOUTTS:	PUSH	H			;SAVE BUFFER POINTER
	CALL	FOUTZS			;ZERO SUPPRESS THE NUMBER
	POP	H			;GET THE BUFFER POINTER BACK
	JZ	FFXIX1			;CHECK IF WE HAVE A TRAILING SIGN
	MOV	M,B			;WE DO, PUT THE SIGN IN THE BUFFER
	INX	H			;INCREMENT THE BUFFER POINTER
FFXIX1:	MVI	M,0			;PUT A ZERO AT THE END OF THE NUMBER


					;HERE TO CHECK IF A FIXED FORMAT-FIXED POINT NUMBER OVERFLOWED ITS
					;FIELD LENGTH
					;D = THE B IN THE FORMAT SPECIFICATION
					;THIS ASSUMES THE LOCATION OF THE DECIMAL POINT IS IN TEMP2
	LXI	H,FBUFFR		;GET A POINTER TO THE BEGINNING
FOUBE1:	INX	H			;INCREMENT POINTER TO THE NEXT CHARACTER
FOUBE5:	LDA	TEMP2			;GET THE LOCATION OF THE DECIMAL POINT
					;SINCE FBUFFR IS ONLY 35 (DECIMAL) LONG, WE
					; ONLY HAVE TO LOOK AT THE LOW ORDER TO SEE
					; IF THE FIELD IS BIG ENOUGH
	SUB	L			;FIGURE OUT HOW MUCH SPACE WE ARE TAKING
	SUB	D			;IS THIS THE RIGHT AMOUNT OF SPACE TO TAKE?
	RZ				;YES, WE ARE DONE, RETURN FROM FOUT
	MOV	A,M			;NO, WE MUST HAVE TOO MUCH SINCE WE STARTED
					; CHECKING FROM THE BEGINNING OF THE BUFFER
					; AND THE FIELD MUST BE SMALL ENOUGH TO FIT IN
					; THE BUFFER.  GET THE NEXT CHARACTER IN
					; THE BUFFER.
	CPI	' '			;IF IT IS A SPACE OR AN ASTERISK, WE CAN
	JZ	FOUBE1			; IGNORE IT AND MAKE THE FIELD SHORTER WITH
	CPI	'*'			; NO ILL EFFECTS
	JZ	FOUBE1
	DCX	H			;MOVE THE POINTER BACK ONE TO READ THE
					; CHARACTER WITH CHRGET
	PUSH	H			;SAVE THE POINTER

					;HERE WE SEE IF WE CAN IGNORE THE LEADING ZERO BEFORE A DECIMAL POINT.
					;THIS OCCURS IF WE SEE THE FOLLOWING: (IN ORDER)
					;	+,-	A SIGN (EITHER "-" OR "+")	[OPTIONAL]
					;	$	A DOLLAR SIGN			[OPTIONAL]
					;	0	A ZERO				[MANDATORY]
					;	.	A DECIMAL POINT			[MANDATORY]
					;	0-9	ANOTHER DIGIT			[MANDATORY]
					;IF YOU SEE A LEADING ZERO, IT MUST BE THE ONE BEFORE A DECIMAL POINT
					;OR ELSE FOUTZS WOULD HAVE SUPPRESSED IT, SO WE CAN JUST "INX	H"
					;OVER THE CHARACTER FOLLOWING THE ZERO, AND NOT CHECK FOR THE
					;DECIMAL POINT EXPLICITLY.
FOUBE2:	PUSH	PSW			;PUT THE LAST CHARACTER ON THE STACK.  THE
					; ZERO FLAG IS SET.  THE FIRST TIME THE ZERO
					; ZERO FLAG IS NOT SET.
	LXI	B,FOUBE2		;GET ADDRESS WE GO TO IF WE SEE A CHARACTER
	PUSH	B			; WE ARE LOOKING FOR
	CALL	CHRGTR			;GET THE NEXT CHARACTER
	CPI	'-'			;SAVE IT AND GET THE NEXT CHARACTER IF IT IS
	RZ				; A MINUS SIGN, A PLUS SIGN OR A DOLLAR SIGN
	CPI	'+'
	RZ	
	CPI	CURNCY
	RZ	
	POP	B			;IT ISN'T, GET THE ADDRESS OFF THE STACK
	CPI	'0'			;IS IT A ZERO?
	JNZ	FOUBE4			;NO, WE CAN NOT GET RID OF ANOTHER CHARACTER
	INX	H			;SKIP OVER THE DECIMAL POINT
	CALL	CHRGTR			;GET THE NEXT CHARACTER
	JNC	FOUBE4			;IT IS NOT A DIGIT, WE CAN'T SHORTEN THE FIELD
	DCX	H			;WE CAN!!!  POINT TO THE DECIMAL POINT
	DB	001			;"LXI	B" OVER THE NEXT 2 BYTES
FOUBE3:	DCX	H			;POINT BACK ONE CHARACTER
	MOV	M,A			;PUT THE CHARACTER BACK

					;IF WE CAN GET RID OF THE ZERO, WE PUT THE CHARACTERS ON THE STACK
					;BACK INTO THE BUFFER ONE POSITION IN FRONT OF WHERE THEY ORIGINALLY
					;WERE.  NOTE THAT THE MAXIMUM NUMBER OF STACK LEVELS THIS USES IS
					;THREE -- ONE FOR THE LAST ENTRY FLAG, ONE FOR A POSSIBLE SIGN,
					;AND ONE FOR A POSSIBLE DOLLAR SIGN.  WE DON'T HAVE TO WORRY ABOUT
					;THE FIRST CHARACTER BEING IN THE BUFFER TWICE BECAUSE THE POINTER
					;WHEN FOUT EXITS WILL BE POINTING TO THE SECOND OCCURANCE.
	POP	PSW			;GET THE CHARACTER OFF THE STACK
	JZ	FOUBE3			;PUT IT BACK IN THE BUFFER IF IT IS NOT THE
					; LAST ONE
	POP	B			;GET THE BUFFER POINTER OFF THE STACK
	JMP	FOUBE5			;SEE IF THE FIELD IS NOW SMALL ENOUGH
					;HERE IF THE NUMBER IS TOO BIG FOR THE FIELD
FOUBE4:	POP	PSW			;GET THE CHARACTERS OFF THE STACK
	JZ	FOUBE4			;LEAVE THE NUMBER IN THE BUFFER ALONE
	POP	H			;GET THE POINTER TO THE BEGINNING OF THE
					; NUMBER MINUS 1
	MVI	M,'%'			;PUT IN A PERCENT SIGN TO INDICATE THE NUMBER
					; WAS TOO LARGE FOR THE FIELD
	RET				;ALL DONE -- RETURN FROM FOUT


					;HERE TO PRINT A SNG OR DBL IN FIXED FORMAT
FOUFXV:	PUSH	H			;SAVE THE BUFFER POINTER
	RAR				;GET FIXED OR FLOATING NOTATION FLAG IN CARRY
	JC	FFXFLV			;PRINT THE NUMBER IN E-NOTATION
	JZ	FFXSFX			;WE HAVE A SNG
					;HERE TO PRINT A DBL IN FIXED FORMAT--FIXED POINT NOTATION
	LXI	D,FFXDXM		;GET POINTER TO 1D16
	CALL	DCOMPD			;WE CAN'T PRINT A NUMBER .GE. 10^16 IN FIXED
					; POINT NOTATION
	MVI	D,20O			;SET D = NUMBER OF DIGITS TO PRINT FOR A DBL
	JM	FFXSDC			;IF THE FAC WAS SMALL ENOUGH, GO PRINT IT
					;HERE TO PRINT IN FREE FORMAT WITH A PERCENT SIGN A NUMBER .GE. 10^16
FFXSDO:	POP	H			;GET THE BUFFER POINTER OFF THE STACK
	POP	B			;GET THE FIELD SPECIFICATION OFF THE STACK
	CALL	FOUT			;PRINT THE NUMBER IN FREE FORMAT
	DCX	H			;POINT TO IN FRONT OF THE NUMBER
	MVI	M,'%'			;PUT IN THE PERCENT SIGN
	RET				;ALL DONE--RETURN FROM FOUT

					;HERE TO PRINT A SNG IN FIXED FORMAT--FIXED POINT NOTATION
FFXSFX:	LXI	B,266Q*256+016Q
	LXI	D,033Q*256+312Q		;GET 1E16, CHECK IF THE NUMBER IS TOO BIG
	CALL	FCOMP
	JP	FFXSDO			;IT IS, PRINT IT IN FREE FORMAT WITH A % SIGN
	MVI	D,6			;D = NUMBER OF DIGITS TO PRINT IN A SNG

					;HERE TO ACTUALLY PRINT A SNG OR DBL IN FIXED FORMAT
FFXSDC:	CALL	SIGN			;SEE IF WE HAVE ZERO
	CNZ	FOUTNV			;IF NOT, NORMALIZE THE NUMBER SO ALL DIGITS TO
					; BE PRINTED ARE IN THE INTEGER PART
	POP	H			;GET THE BUFFER POINTER
	POP	B			;GET THE FIELD LENGTH SPECS
	JM	FFXXVS			;DO DIFFERENT STUFF IF EXPONENT IS NEGATIVE
					;HERE TO PRINT A NUMBER WITH NO FRACTIONAL DIGITS
FFXSD2:	PUSH	B			;SAVE THE FIELD LENGTH SPECS AGAIN
	MOV	E,A			;SAVE THE EXPONENT IN E
	MOV	A,B			;WE HAVE TO PRINT LEADING ZEROS IF THE FIELD
	SUB	D			; HAS MORE CHARACTERS THAN THERE ARE DIGITS
	SUB	E			; IN THE NUMBER.
					;IF WE ARE USING COMMAS, A MAY BE TOO BIG.
					;THIS DOESN'T MATTER BECAUSE FOUTTS WILL FIND
					; THE CORRECT BEGINNING.  THERE IS ROOM IN
					; FBUFFR BECAUSE THE MAXIMUM VALUE B CAN BE IS
					; 24 (DECIMAL) SO D+C .LE. 16 (DECIMAL)  SINCE
					; FAC .LT. 10^16.
					;SO WE NEED 8 MORE BYTES FOR ZEROS.  4 COME
					; SINCE WE WILL NOT NEED TO PRINT AN EXPONENT.
					; FBUFFR ALSO CONTAINS AN EXTRA 4 BYTES FOR
					; THIS CASE.
					;(IT WOULD TAKE MORE THAN 4 BYTES TO CHECK FOR
					; THIS.)
	CP	FOTZER			;FOUTZS WILL LATER SUPPRESS THEM
	CALL	FOUTCD			;SETUP DECIMAL POINT AND COMMA COUNT
	CALL	FOUTCV			;CONVERT THE NUMBER TO DECIMAL DIGITS
	ORA	E			;PUT IN DIGITS AFTER THE NUMBER IF IT
					; IS BIG ENOUGH, HERE A=0
	CNZ	FOTZEC			;THERE CAN BE COMMAS IN THESE ZEROS
	ORA	E			;MAKE SURE WE GET A DECIMAL POINT FOR FOUTTS
	CNZ	FOUTED
	POP	D			;GET THE FIELD LENGTH SPECS
	JMP	FOUTTD			;GO CHECK THE SIZE, ZERO SUPPRESS, ETC. AND
					; FINISH THE NUMBER

					;HERE TO PRINT A SNG OR DBL THAT HAS FRACTIONAL DIGITS
FFXXVS:	MOV	E,A			;SAVE THE EXPONENT
	MOV	A,C			;DIVIDE BY TEN THE RIGHT NUMBER OF TIMES SO
	ORA	A			; THE RESULT WILL BE ROUNDED CORRECTLY AND
	CNZ	DCRART			; HAVE THE CORRECT NUMBER OF SIGNIFICANT
	ADD	E			; DIGITS
FFXXS2:	JM	FFXXV8			;FOR LATER CALCULATIONS, WE WANT A ZERO IF THE
	XRA	A			; RESULT WAS NOT NEGATIVE
FFXXV8:	PUSH	B			;SAVE THE FIELD SPECS
	PUSH	PSW			;SAVE THIS NUMBER FOR LATER
FFXXV2:	CM	FINDIV			;THIS IS THE DIVIDE LOOP
	JM	FFXXV2
	POP	B			;GET THE NUMBER WE SAVED BACK IN B
	MOV	A,E			;WE HAVE TWO CASES DEPENDING ON WHETHER THE
	SUB	B			; THE NUMBER HAS INTEGER DIGITS OR NOT
	POP	B			;GET THE FILED SPECS BACK
	MOV	E,A			;SAVE HOW MANY DECIMAL PLACES BEFORE THE
	ADD	D			; THE NUMBER ENDS
FFXXS4:	MOV	A,B			;GET THE "B" FIELD SPEC
	JM	FFXXV3
					;HERE TO PRINT NUMBERS WITH INTEGER DIGITS
	SUB	D			;PRINT SOME LEADING ZEROS IF THE FIELD IS
	SUB	E			; BIGGER THAN THE NUMBER OF DIGITS WE WILL
FFXXS6:	CP	FOTZER			; PRINT
	PUSH	B			;SAVE FIELD SPEC
	CALL	FOUTCD			;SET UP DECIMAL POINT AND COMMA COUNT
	JMP	FFXXV6			;CONVERT THE DIGITS AND DO THE TRIMMING UP

					;HERE TO PRINT A NUMBER WITHOUT INTEGER DIGITS
FFXXV3:	CALL	FOTZER			;PUT ALL ZEROS BEFORE THE DECIMAL POINT
	MOV	A,C			;SAVE C
	CALL	FOUTDP			;PUT IN A DECIMAL POINT
	MOV	C,A			;RESTORE C
	XRA	A			;DECIDE HOW MANY ZEROS TO PRINT BETWEEN THE
	SUB	D			; DECIMAL POINT AND THE FIRST DIGIT WE WILL
	SUB	E			; PRINT.
	CALL	FOTZER			;PRINT THE ZEROS
	PUSH	B			;SAVE EXPONENT AND THE "C" IN THE FIELD SPEC
	MOV	B,A			;ZERO THE DECIMAL PLACE COUNT
	MOV	C,A			;ZERO THE COMMA COUNT
FFXXV6:	CALL	FOUTCV			;CONVERT THE NUMBER TO DECIMAL DIGITS
	POP	B			;GET THE FIELD SPECS BACK
	ORA	C			;CHECK IF WE HAVE TO PRINT ANY ZEROS AFTER
					; THE LAST DIGIT
	JNZ	FFXXV7			;CHECK IF THERE WERE ANY DECIMAL PLACES AT ALL
					;E CAN NEVER BE 200, (IT IS NEGATIVE) SO IF
					; A=0 HERE, THERE IS NO WAY WE WILL CALL FOTZER 
	LHLD	TEMP2			;THE END OF THE NUMBER IS WHERE THE DP IS
FFXXV7:	ADD	E			;PRINT SOME MORE TRAILING ZEROS
	DCR	A
	CP	FOTZER
	MOV	D,B			;GET THE "B" FIELD SPEC IN D FOR FOUTTS
	JMP	FOUTTS			;FINISH UP THE NUMBER


					;HERE TO PRINT AN INTEGER IN FIXED FORMAT--FLOATING POINT NOTATION
FFXIFL:	PUSH	H			;SAVE THE BUFFER POINTER
	PUSH	D			;SAVE THE FORMAT SPECS
	CALL	CONSI			;CONVERT THE INTEGER TO A SNG
	POP	D			;GET THE FORMAT SPECS BACK
	XRA	A			;SET FLAGS TO PRINT THE NUMBER AS A SNG
					;FALL INTO FFXFLV


					;HERE TO PRINT A SNG OR DBL IN FIXED FORMAT-FLOTATING POINT NOTATION
FFXFLV:	JZ	FFXSFL			;IF WE HAVE A SNG, SET THE RIGHT FLAGS
	MVI	E,20O			;WE HAVE A DBL, GET HOW MANY DIGITS WE HAVE
	DB	001			;"LXI	B" OVER THE NEXT TWO BYTES
FFXSFL:	MVI	E,6			;WE HAVE A SNG, GET HOW MANY DIGITS WE PRINT
	CALL	SIGN			;SEE IF WE HAVE ZERO
FFXS03:	STC				;SET CARRY TO DETERMINE IF WE ARE PRINTING
					;ZERO. NOTE: THIS DEPENDS ON THE FACT THAT
					;FOUTNV EXITS WITH CARRY OFF
	CNZ	FOUTNV			;IF NOT, NORMALIZE THE NUMBER SO ALL DIGITS TO
					; BE PRINTED ARE IN THE INTEGER PART
	POP	H			;GET THE BUFFER POINTER BACK
	POP	B			;GET THE FIELD LENGTH SPECS
	PUSH	PSW			;SAVE THE EXPONENT
	MOV	A,C			;CALCULATE HOW MANY SIGNIFICANT DIGITS WE MUST
	ORA	A			; PRINT
	PUSH	PSW			;SAVE THE "C" FIELD SPEC FOR LATER
	CNZ	DCRART
	ADD	B
	MOV	C,A
	MOV	A,D			;GET THE "A" FIELD SPEC
	ANI	4			;SEE IF THE SIGN IS A TRAILING SIGN
	CPI	1			;SET CARRY IF A IS ZERO
	SBB	A			;SET D=0 IF WE HAVE A TRAILING SIGN,
	MOV	D,A			; D=377 IF WE DO NOT
	ADD	C
	MOV	C,A			;SET C=NUMBER OF SIGNIFICANT DIGITS TO PRINT
	SUB	E			;IF WE HAVE LESS THAN E, THEN WE MUST GET RID
	PUSH	PSW			;SAVE COMPARISON # OF SIG DIGITS AND THE
					;# OF DIGITS WE WILL PRINT
	PUSH	B			;SAVE THE "B" FIELD SPEC AND # OF SIG DIGITS
FFXLV1:	CM	FINDIV			; OF SOME BY DIVIDING BY TEN AND ROUNDING
	JM	FFXLV1
	POP	B			;GET "B" FIELD SPEC AND # OF SIG DIGITS BACK
	POP	PSW			;GET # OF TRAILING ZEROS TO PRINT
	PUSH	B			;SAVE THE "B" FIELD SPEC AND # OF SIG DIGITS
	PUSH	PSW			;SAVE # OF TRAILING ZEROS TO PRINT
	JM	FFXLV3			;TAKE INTO ACCOUNT DIGITS THAT WERE
	XRA	A			;DIVIDED OFF AT FFXLV1
FFXLV3:	CMA	
	INR	A
	ADD	B			;SET THE DECIMAL PLACE COUNT
	INR	A
	ADD	D			;TAKE INTO ACCOUNT IF THE SIGN IS TRAILING
	MOV	B,A			; OR NOT
	MVI	C,0			;SET COMMA COUNT TO ZERO, THE COMMA SPEC IS
					; IGNORED.
	CALL	FOUTCV			;CONVERT THE NUMBER TO DECIMAL DIGITS
	POP	PSW			;GET NUMBER TRAILING ZEROS TO PRINT
					;IF THE FIELD LENGTH IS LONGER THAN THE # OF DIGITS
					;WE CAN PRINT
	CP	FOTZNC			;THE DECIMAL POINT COULD COME OUT IN HERE
	CALL	FOUTED			;IN CASE D.P. IS LAST ON LIST
	POP	B			;GET # OF SIG DIGITS AND "B" FIELD SPAC BACK
	POP	PSW			;GET THE "C" FIELD SPEC BACK
	JNZ	FFXLV4			;IF NON-ZERO PROCEED
	CALL	DCXHRT			;SEE IF D.P. THERE
	MOV	A,M			;FETCH TO MAKE SURE D.P.
	CPI	'.'			;IF NOT MUST BE ZERO
	CNZ	INXHRT			;IF NOT MUST LEAVE AS IS
	SHLD	TEMP2			;NEED D.P. LOCATION IN TEMP2
FFXLV4:					; SO IGNORE IT.
	POP	PSW			;GET THE EXPONENT BACK
	JC	FFXLV2			;EXPONENT=0 IF THE NUMBER IS ZERO
	ADD	E			;SCALE IT CORRECTLY
	SUB	B
	SUB	D
FFXLV2:	PUSH	B			;SAVE THE "B" FIELD SPEC
	CALL	FOFLDN			;PUT THE EXPONENT IN THE BUFFER
	XCHG				;GET THE POINTER TO THE END IN (HL)
					; IN CASE WE HAVE A TRAILING SIGN
	POP	D			;GET THE "B" FIELD SPEC IN D, PUT ON A
	JMP	FOUTTS			; POSSIBLE TRAILING SIGN AND WE ARE DONE


					;NORMALIZE THE NUMBER IN THE FAC SO ALL THE DIGITS ARE IN THE INTEGER
					;PART.  RETURN THE BASE 10 EXPONENT IN A
					;D,E ARE LEFT UNALTERED
FOUTNV:	PUSH	D			;SAVE (DE)
	XRA	A			;ZERO THE EXPONENT
	PUSH	PSW			;SAVE IT
	CALL	GETYPR			;GET TYPE OF NUMBER TO BE PRINTED
	JPO	FOUNDB			;NOT DOUBLE, DO NORMAL THING
FORBIG:	LDA	FAC			;GET EXPONENT
	CPI	221O			;IS IT .LT.1D5?
	JNC	FOUNDB			;NO, DONT MULTPLY
	LXI	D,TENTEN		;MULTIPLY BY 1D10
	LXI	H,ARGLO			;MOVE INTO ARG
	CALL	VMOVE			;PUT IN ARG
	CALL	DMULT			;MULTIPLY BY IT
	POP	PSW			;GET ORIG EXPONENT OFF STACK
	SUI	10			;GET PROPER OFFSET FOR EXPONENT
	PUSH	PSW			;SAVE EXPONENT BACK
	JMP	FORBIG			;FORCE IT BIGGER IF POSSIBLE
FOUNDB:	CALL	FOUNVC			;IS THE FAC TOO BIG OR TOO SMALL?
FOUNV1:	CALL	GETYPR			;SEE WHAT KIND OF VALUE WE HAVE SO WE
					; CAN SEE IF THE FAC IS BIG ENOUGH
	JPE	FOUNV4			;WE HAVE A DBL
	LXI	B,221Q*256+103Q
	LXI	D,117Q*256+371Q		;GET 99999.95 TO SEE IF THE FAC IS BIG
	CALL	FCOMP			; ENOUGH YET
	JMP	FOUNV5			;GO DO THE CHECK
FOUNV4:	LXI	D,FOUTDL		;GET POINTER TO 999,999,999,999,999.5
	CALL	DCOMPD			;SEE IF THE NUMBER IS STILL TOO SMALL
FOUNV5:	JP	FOUNV3			;IT ISN'T ANY MORE, WE ARE DONE
	POP	PSW			;IT IS, MULTIPLY BY TEN
	CALL	FINMLT
	PUSH	PSW			;SAVE THE EXPONENT AGAIN
	JMP	FOUNV1			;NOW SEE IF IT IS BIG ENOUGH
FOUNV2:	POP	PSW			;THE FAC IS TOO BIG, GET THE EXPONENT
	CALL	FINDIV			;DIVIDE IT BY TEN
	PUSH	PSW			;SAVE THE EXPONENT AGAIN
	CALL	FOUNVC			;SEE IF THE FAC IS SMALL ENOUGH
FOUNV3:	POP	PSW			;WE ARE DONE, GET THE EXPONENT BACK
	ORA	A			;CLEAR CARRY
	POP	D			;GET (DE) BACK
	RET				;ALL DONE

					;HERE TO SEE IF THE FAC IS SMALL ENOUGH YET
FOUNVC:	CALL	GETYPR			;SEE WHAT TYPE NUMBER WE HAVE
	JPE	FONVC1			;WE HAVE A DBL
	LXI	B,224Q*256+164Q
	LXI	D,043Q*256+370Q		;GET 999999.5 TO SEE IF THE FAC IS TOO BIG
	CALL	FCOMP
	JMP	FONVC2			;GO DO THE CHECK
FONVC1:	LXI	D,FOUTDU		;GET POINTER TO 9,999,999,999,999,999.5
	CALL	DCOMPD			;SEE IF THE NUMBER IS TOO BIG
FONVC2:	POP	H			;GET THE RETURN ADDRESS OFF THE STACK
	JP	FOUNV2			;THE NUMBER IS TOO BIG, DIVIDE IT BY TEN
	PCHL				;IT ISN'T TOO BIG, JUST RETURN


					;HERE TO PUT SOME ZEROS IN THE BUFFER
					;THE COUNT IS IN A, IT CAN BE ZERO, BUT THE ZERO FLAG MUST BE SET
					;ONLY (HL) AND A ARE ALTERED
					;WE EXIT WITH A=0
FOTZER:	ORA	A			;THIS IS BECAUSE FFXXV3 CALL US WITH THE
					; CONDITION CODES NOT SET UP
FOTZR1:	RZ				;RETURN IF WE ARE DONE
	DCR	A			;WE ARE NOT DONE, SO DECREMENT THE COUNT
	MVI	M,'0'			;PUT A ZERO IN THE BUFFER
	INX	H			;UPDATE THE BUFFER POINTER
	JMP	FOTZR1			;GO SEE IF WE ARE NOW DONE


					;HERE TO PUT ZEROS IN THE BUFFER WITH COMMAS OR A DECIMAL POINT IN THE
					;MIDDLE.  THE COUNT IS IN A, IT CAN BE ZERO, BUT THE ZERO FLAG MUST BE
					;SET.  B THE DECIMAL POINT COUNT AND C THE COMMA COUNT ARE UPDATED
					;A,B,C,H,L ARE ALTERED
FOTZNC:	JNZ	FOTZEC			;ENTRY AFTER A "CALL FOUTCV"
FOTZRC:	RZ				;RETURN IF WE ARE DONE
	CALL	FOUTED			;SEE IF WE HAVE TO PUT A COMMA OR A DECIMAL
					; POINT BEFORE THIS ZERO
FOTZEC:	MVI	M,'0'			;PUT A ZERO IN THE BUFFER
	INX	H			;UPDATE THE BUFFER POINTER
	DCR	A			;DECREMENT THE ZERO COUNT
	JMP	FOTZRC			;GO BACK AND SEE IF WE ARE DONE


					;HERE TO PUT A POSSIBLE COMMA COUNT IN C, AND ZERO C IF WE ARE NOT
					;USING THE COMMA SPECIFICATION
FOUTCD:	MOV	A,E			;SETUP DECIMAL POINT COUNT
	ADD	D
	INR	A
	MOV	B,A
	INR	A			;SETUP COMMA COUNT
FOTCD1:	SUI	3			;REDUCE [A] MOD 3
	JNC	FOTCD1
	ADI	5			;ADD 3 BACK IN AND ADD 2 MORE FOR
					;SCALING
FOUTCC:	MOV	C,A			;SAVE A POSSIBLE COMMA COUNT
FOUICC:	LDA	TEMP3			;GET THE FORMAT SPECS
	ANI	100O			;LOOK AT THE COMMA BIT
	RNZ				;WE ARE USING COMMAS, JUST RETURN
	MOV	C,A			;WE AREN'T, ZERO THE COMMA COUNT
	RET				;ALL DONE


					;HERE TO PUT DECIMAL POINTS AND COMMAS IN THEIR CORRECT PLACES
					;THIS SUBROUTINE SHOULD BE CALLED BEFORE THE NEXT DIGIT IS PUT IN THE
					;BUFFER.  B=THE DECIMAL POINT COUNT, C=THE COMMA COUNT
					;THE COUNTS TELL HOW MANY MORE DIGITS HAVE TO GO IN BEFORE THE COMMA
					;OR DECIMAL POINT GO IN.  THE COMMA OR DECIMAL POINT THEN GOES BEFORE 
					;THE LAST DIGIT IN THE COUNT.  FOR EXAMPLE, IF THE DECIMAL POINT SHOULD
					;COME AFTER THE FIRST DIGIT, THE DECIMAL POINT COUNT SHOULD BE 2.
FOUTAN:					;SAVE FOR LATER
	DCR	B			;
	JP	FOUTE1			;PROCESS AS NORMAL
	SHLD	TEMP2			;SAVE LOCATION OF DECIMAL POINT
	MVI	M,'.'			;PUT IN D.P.
FOUTD1:	INX	H			;POINT TO NEXT BUFFER POSTION
	MVI	M,'0'
	INR	B			;
	JNZ	FOUTD1
	INX	H			;POINT TO NEXT AVAILABLE BUFFER LOCATION
	MOV	C,B
	RET	
FOUTED:	DCR	B			;TIME FOR D.P.?
FOUTE1:					;
	JNZ	FOUED1			;NO, CHECK FOR THE COMMA
					;ENTRY TO PUT A DECIMAL POINT IN THE BUFFER
FOUTDP:	MVI	M,'.'			;YES, PUT THE DECIMAL POINT IN
	SHLD	TEMP2			;SAVE THE LOCATION OF THE DECIMAL POINT
	INX	H			;INCREMENT THE BUFFER POINTER
	MOV	C,B			;PUT ZERO IN C SO WE WON"T PRINT ANY COMMAS
	RET				; AFTER THE DECIMAL POINT.  ALL DONE
					;HERE TO SEE IF IT IS TIME TO PRINT A COMMA
FOUED1:	DCR	C			;IS IT TIME?
	RNZ				;NOPE, WE CAN RETURN
	MVI	M,54O			;","=54, YES, PUT A COMMA IN THE BUFFER
	INX	H			;INCREMENT THE BUFFER POINTER
	MVI	C,3			;RESET THE COMMA COUNT SO WE WILL PRINT A
	RET				; COMMA AFTER THREE MORE DIGITS.  ALL DONE


					;HERE TO CONVERT A SNG OR DBL NUMBER THAT HAS BEEN NORMALIZED TO
					;DECIMAL DIGITS.  THE DECIMAL POINT COUNT AND COMMA COUNT ARE IN B AND
					;C RESPECTIVELY.  (HL) POINTS TO WHERE THE FIRST DIGIT WILL GO.
					;THIS EXITS WITH A=0.  (DE) IS LEFT UNALTERED.
FOUTCV:	PUSH	D			;SAVE (DE)
	CALL	GETYPR			;SEE WHAT KIND OF A NUMBER WE HAVE
	JPO	FOUTCS			;WE HAVE A SNG
					;HERE TO CONVERT A DOUBLE PRECISION NUMBER TO DECIMAL DIGITS
	PUSH	B			;SAVE THE DECIMAL POINT AND COMMA COUNTS
	PUSH	H			;SAVE THE BUFFER POINTER
	CALL	VMOVAF			;MOVE THE FAC INTO ARG
	LXI	H,DHALF			;GET POINTER TO .5D0
	CALL	VMOVFM			;MOVE THE CONSTANT INTO THE FAC
	CALL	DADD			;ADD .5 TO THE ORIGINAL NUMBER TO ROUND IT
	XRA	A			;CLEAR THE CARRY
	CALL	DINTFO			;TAKE THE INTEGER PART OF THE NUMBER
					;THE NUMBER IS NOT NORMALIZED AFTERWARDS
	POP	H			;GET THE BUFFER POINTER BACK
	POP	B			;GET THE COMMA AND DECIMAL POINT COUNTS BACK
	LXI	D,FODTBL		;GET A POINTER TO THE DBL POWER OF TEN TABLE
	MVI	A,12O			;CONVERT TEN DIGITS, THE OTHERS WILL BE
					; CONVERTED AS SNG'S AND INT'S
					;BECAUSE WE BRACKETED THE NUMBER A
					;POWER OF TEN LESS IN MAGNITUDE AND
					;SINGLE PRECISION CONVERSION CAN HANDLE
					;A MAGNITUDE OF TEN LARGER
					;HERE TO CONVERT THE NEXT DIGIT
FOUCD1:	CALL	FOUTED			;SEE IF WE HAVE TO PUT IN A DP OR COMMA
	PUSH	B			;SAVE DP AND COMMA INFORMATION
	PUSH	PSW			;SAVE DIGIT COUNT
	PUSH	H			;SAVE BUFFER POINTER
	PUSH	D			;SAVE POWER OF TEN POINTER
					;HERE TO DIVIDE FOR THE NEXT DIGIT
	MVI	B,'0'-1			;SET UP THE COUNT FOR THE DIGIT
FOUCD2:	INR	B			;INCREMENT THE DIGIT COUNT
	POP	H			;GET THE POINTER TO THE POWER OF TEN
	PUSH	H			;SAVE IT AGAIN
	DB	076O			;"MVI	A", GET THE INSTRUCTION TO SUBTRACT
	SBB	M			; THE POWER OF TEN
	CALL	DADDFO			;GO SUBTRACT THEM
	JNC	FOUCD2			;IF THE NUMBER WAS NOT LESS THAN THE POWER OF
					; TEN, SUBTRACT AGAIN
	POP	H			;WE ARE DONE SUBTRACTING, BUT WE DID IT ONCE
					; TOO OFTEN, SO ADD BACK IN THE POWER OF TEN
					;GET THE POINTER TO THE POWER OF TEN
	DB	076O			;"MVI	A", GET THE INSTRUCTION TO ADD THE
	ADC	M			; POWER OF TEN AND THE NUMBER
	CALL	DADDFO			;ADD THE TWO NUMBERS
	XCHG				;PUT THE POWER OF TEN POINTER IN (DE).  IT IS
					; UPDATED FOR THE NEXT POWER OF TEN
	POP	H			;GET THE BUFFER POINTER BACK
	MOV	M,B			;PUT THE DIGIT INTO THE BUFFER
	INX	H			;INCREMENT THE BUFFER POINTER
	POP	PSW			;GET THE DIGIT COUNT BACK
	POP	B			;GET THE DECIMAL POINT AND COMMA COUNTS
	DCR	A			;HAVE WE PRINTED THE LAST DIGIT?
	JNZ	FOUCD1			;NO, GO DO THE NEXT ONE
	PUSH	B			;YES, CONVERT REMAINING DIGITS USING SINGLE
	PUSH	H			; PRECISION, THIS IS FASTER, MOVE THE NUMBER
	LXI	H,DFACLO		; THAT IS LEFT INTO THE SNG FAC
	CALL	MOVFM
	JMP	FOUCDC			;GO TO IT!!

					;HERE TO CONVERT A SINGLE PRECISION NUMBER TO DECIMAL DIGITS
FOUTCS:	PUSH	B			;SAVE THE DECIMAL POINT AND COMMA COUNTS
	PUSH	H			;SAVE THE BUFFER POINTER
	CALL	FADDH			;ROUND NUMBER TO NEAREST INTEGER
	MVI	A,1			;MAKE A NON-ZERO, SINCE NUMBER IS POSITIVE
					; AND NON-ZERO, ROUND WILL EXIT WITH THE HO
					; IN A, SO THE MSB WILL ALWAYS BE ZERO AND
					; ADDING ONE WILL NEVER CAUSE A TO BE ZERO
	CALL	QINT			;GET INTEGER PART IN C,D,E
	CALL	MOVFR			;SAVE NUMBER IN FAC
FOUCDC:	POP	H			;GET THE BUFFER POINTER BACK
	POP	B			;GET THE DECIMAL POINT AND COMMA COUNTS BACK
	XRA	A			;CLEAR CARRY, THE CARRY IS OUR FLAG TO
					; CALCULATE TWO DIGITS
	LXI	D,FOSTBL		;GET POINTER TO POWER OF TEN TABLE
					;HERE TO CALCULATE THE NEXT DIGIT OF THE NUMBER
FOUCS1:	CMC				;COMPLEMENT FLAG THAT TELLS WHEN WE ARE DONE
	CALL	FOUTED			;SEE IF A COMMA OR DP GOES BEFORE THIS DIGIT
	PUSH	B			;SAVE COMMA AND DECIMAL POINT INFORMATION
	PUSH	PSW			;SAVE CARRY I.E. DIGIT COUNT
	PUSH	H			;SAVE CHARACTER POINTER
	PUSH	D			;SAVE POWER OF TEN POINTER
	CALL	MOVRF			;GET NUMBER IN C,D,E
	POP	H			;GET POWER OF TEN POINTER
	MVI	B,'0'-1			;B = NEXT DIGIT TO BE PRINTED
FOUCS2:	INR	B			;ADD ONE TO DIGIT
	MOV	A,E			;SUBTRACT LO
	SUB	M
	MOV	E,A
	INX	H			;POINT TO NEXT BYTE OF POWER OF TEN
	MOV	A,D			;SUBTRACT MO
	SBB	M
	MOV	D,A
	INX	H
	MOV	A,C			;SUBTRACT HO
	SBB	M
	MOV	C,A
	DCX	H			;POINT TO BEGINNING OF POWER OF TEN
	DCX	H
	JNC	FOUCS2			;SUBTRACT AGAIN IF RESULT WAS POSITIVE
	CALL	FADDA			;IT WASN'T, ADD POWER OF TEN BACK IN
	INX	H			;INCREMENT POINTER TO NEXT POWER OF TEN
	CALL	MOVFR			;SAVE C,D,E IN FAC
	XCHG				;GET POWER OF TEN POINTER IN (DE)
	POP	H			;GET BUFFER POINTER
	MOV	M,B			;PUT CHARACTER IN BUFFER
	INX	H			;INCREMENT BUFFER POINTER
	POP	PSW			;GET DIGIT COUNT (THE CARRY) BACK
	POP	B			;GET COMMA AND DP INFORMATION BACK
	JC	FOUCS1			;CALCULATE NEXT DIGIT IF WE HAVE NOT DONE 2
	INX	D			;WE HAVE, INCREMENT POINTER TO CORRECT PLACE
	INX	D			; IN THE INTEGER POWER OF TEN TABLE
	MVI	A,4			;GET THE DIGIT COUNT
	JMP	FOUCI1			;COMPUTE THE REST OF THE DIGITS LIKE INTEGERS
					;NOTE THAT THE CARRY IS OFF

					;HERE TO CONVERT AN INTEGER INTO DECIMAL DIGITS
					;THIS EXITS WITH A=0.  (DE) IS LEFT UNALTERED.
FOUTCI:	PUSH	D			;SAVE (DE)
	LXI	D,FOITBL		;GET POINTER TO THE INTEGER POWER OF TEN TABLE
	MVI	A,5			;SET UP A DIGIT COUNT, WE HAVE TO CALCULATE 5
					; DIGITS BECAUSE THE MAX POS INTEGER IS 32768
					;HERE TO CALCULATE EACH DIGIT
FOUCI1:	CALL	FOUTED			;SEE IF A COMMA OR DP GOES BEFORE THE DIGIT
	PUSH	B			;SAVE COMMA AND DECIMAL POINT INFORMATION
	PUSH	PSW			;SAVE DIGIT COUNT
	PUSH	H			;SAVE BUFFER POINTER
	XCHG				;GET THE POWER OF TEN POINTER IN (HL)
	MOV	C,M			;PUT THE POWER OF TEN ON THE STACK
	INX	H
	MOV	B,M
	PUSH	B
	INX	H			;INCREMENT THE PWR OF TEN PTR TO NEXT POWER
	XTHL				;GET THE POWER OF TEN IN (HL) AND PUT THE
					; POINTER ON THE STACK
	XCHG				;PUT THE POWER OF TEN IN (DE)
	LHLD	FACLO			;GET THE INTEGER IN (HL)
	MVI	B,'0'-1			;SET UP THE DIGIT COUNT, B=DIGIT TO BE PRINTED
FOUCI2:	INR	B			;INCREMENT THE DIGIT COUNT
	MOV	A,L			;SUBTRACT (DE) FROM (HL)
	SUB	E			;SUBTRACT THE LOW ORDERS
	MOV	L,A			;SAVE THE NEW RESULT
	MOV	A,H			;SUBTRACT THE HIGH ORDERS
	SBB	D
	MOV	H,A			;SAVE THE NEW HIGH ORDER
	JNC	FOUCI2			;IF (HL) WAS .GE. (DE) THEN SUBTRACT AGAIN
	DAD	D			;WE ARE DONE, BUT WE SUBTRACTED (DE) ONCE TOO
					; OFTEN, SO ADD IT BACK IN
	SHLD	FACLO			;SAVE IN THE FAC WHAT IS LEFT
	POP	D			;GET THE POWER OF TEN POINTER BACK
	POP	H			;GET THE BUFFER POINTER BACK
	MOV	M,B			;PUT THE NEW DIGIT IN THE BUFFER
	INX	H			;INCREMENT THE BUFFER POINTER TO NEXT DIGIT
	POP	PSW			;GET THE DIGIT COUNT BACK
	POP	B			;GET THE COMMA AND DP INFORMATION BACK
	DCR	A			;WAS THAT THE LAST DIGIT?
	JNZ	FOUCI1			;NO, GO DO THE NEXT ONE
	CALL	FOUTED			;YES, SEE IF A DP GOES AFTER THE LAST DIGIT
	MOV	M,A			;PUT A ZERO AT THE END OF THE NUMBER, BUT
					; DON'T INCREMENT (HL) SINCE AN EXPONENT OR A
					; TRAILING SIGN MAY BE COMMING
	POP	D			;GET (DE) BACK
	RET				;ALL DONE, RETURN WITH A=0


					;CONSTANTS USED BY FOUT
TENTEN:	DB	0			;10000000000
	DB	0
	DB	0
	DB	0
	DB	371O
	DB	2
	DB	25O
	DB	242O
FOUTDL:	DB	341O			; 999,999,999,999,999.5
	DB	377O
	DB	237O
	DB	061O
	DB	251O
	DB	137O
	DB	143O
	DB	262O
FOUTDU:	DB	376O			; 9,999,999,999,999,999.5
	DB	377O
	DB	003
	DB	277O
	DB	311O
	DB	033O
	DB	016O
	DB	266O
DHALF:	DB	000			; .5D0
	DB	000
	DB	000
	DB	000
FHALF:	DB	000			; .5E0
	DB	000
	DB	000
	DB	200O
FFXDXM:	DB	000			; 1D16
	DB	000
	DB	004
	DB	277O
	DB	311O
	DB	033O
	DB	016O
	DB	266O
					;DOUBLE PRECISION POWER OF TEN TABLE
FODTBL:	DB	000			; 1D15
	DB	200O
	DB	306O
	DB	244O
	DB	176O
	DB	215O
	DB	003
	DB	000			; 1D14
	DB	100O
	DB	172O
	DB	020O
	DB	363O
	DB	132O
	DB	000
	DB	000			; 1D13
	DB	240O
	DB	162O
	DB	116O
	DB	030O
	DB	011O
	DB	000
	DB	000			; 1D12
	DB	020O
	DB	245O
	DB	324O
	DB	350O
	DB	000
	DB	000
	DB	000			; 1D11
	DB	350O
	DB	166O
	DB	110O
	DB	027O
	DB	000
	DB	000
	DB	000			; 1D10
	DB	344O
	DB	013O
	DB	124O
	DB	002
	DB	000
	DB	000
	DB	000			; 1D9
	DB	312O
	DB	232O
	DB	073O
	DB	000
	DB	000
	DB	000
	DB	000			; 1D8
	DB	341O
	DB	365O
	DB	005
	DB	000
	DB	000
	DB	000
	DB	200O			; 1D7
	DB	226O
	DB	230O
	DB	000
	DB	000
	DB	000
	DB	000
	DB	100O			; 1D6
	DB	102O
	DB	017O
	DB	000
	DB	000
	DB	000
	DB	000
					;SINGLE PRECISION POWER OF TEN TABLE
FOSTBL:	DB	240O			; 1E5
	DB	206O
	DB	001
	DB	020O			; 1E4
	DB	047O
	DB	000
					;INTEGER POWER OF TEN TABLE
FOITBL:	DB	020O			; 10000
	DB	047O
	DB	350O			; 1000
	DB	003
	DB	144O			; 100
	DB	000
	DB	012O			; 10
	DB	000
	DB	001			; 1
	DB	000
;
; OUTPUT ROUTINES FOR OCTAL AND HEX NUMBERS
;
	PUBLIC	FOUTO,FOUTH
FOUTO:	XRA	A			;MAKE A=0, SET ZERO
	MOV	B,A			;SAVE IN [B]
	DB	302O			;"JNZ" AROUND NEXT TWO BYTES
FOUTH:	MVI	B,1			;SET HEX FLAG
	PUSH	B			;SAVE HEX/OCTAL FLAG
	EXTRN	FRQINT
	CALL	FRQINT			;GET DOUBLE BYTE INT IN [H,L]
	POP	B			;GET BACK HEX/OCTAL FLAG
	LXI	D,FBUFFR		;POINTER TO OUTPUT BUFFER IN [D,E]
	PUSH	D			;SAVE SO WE CAN RETURN IT LATER
	XRA	A			;GET SET TO HAVE FIRST DIGIT FOR OCTAL
	STAX	D			;CLEAR DIGIT SEEN FLAG
	DCR	B			;SEE IF OCTAL
	INR	B			;IF SO, ZERO SET
	MVI	C,6			;SIX DIGITS FOR OCTAL
	JZ	OCTONE			;DO FIRST OCTAL DIGIT
	MVI	C,4			;FOUR DIGIT FOR HEX

OUTHLP:	DAD	H			;SHIFT LEFT ONE BIT
	ADC	A			;ADD IN THE SHIFTED BIT
OUTOLP:	DAD	H			;SHIFT LEFT ONE BIT
	ADC	A
	DAD	H
	ADC	A
OCTONE:	DAD	H			;ENTER HERE FOR FIRST OCTAL DIGIT
	ADC	A
	ORA	A			;SEE IF WE GOT A ZERO DIGIT
	JNZ	MAKDIG			;NO, MAKE A DIGIT
	MOV	A,C			;GET DIGIT COUNTER
	DCR	A			;WAS IT GOING TO GO TO ZERO (LAST DIG?)
	JZ	MAKDIG			;IF SO, FORCE ONE ZERO DIGIT
	LDAX	D			;HAVE WE PRINTED A NON-ZERO DIGIT?
	ORA	A			;SET CC'S
	JZ	NOLEAD			;NO, DONT PRINT THIS LEADING ZERO
	XRA	A			;GET ZERO
MAKDIG:	ADI	'0'			;MAKE NUMERIC DIGIT
	CPI	'9'+1			;IS IT A BIG HEX DIGIT? (A-F)
	JC	NOTHAL			;NO, DONT ADD OFFSET
	ADI	'A'-'9'-1		;ADD OFFSET
NOTHAL:	STAX	D			;SAVE DIGIT IN FBUFFR
	INX	D			;BUMP POINTER
	STAX	D			;SAVE HERE TO FLAG PRINTED SIG. DIG.
NOLEAD:	XRA	A			;MAKE A ZERO
	DCR	C			;ALL DONE PRINTING?
	JZ	FINOHO			;YES, RETURN
	DCR	B			;SEE IF HEX OR OCTAL
	INR	B			;TEST
	JZ	OUTOLP			;WAS OCTAL
	JMP	OUTHLP			;WAS HEX

FINOHO:	STAX	D			;STORE FINAL ZERO
	POP	H			;GET POINTER TO FBUFFR
	RET				;ALL DONE.
	PAGE
	SUBTTL	EXPONENTIATION AND THE SQUARE ROOT FUNCTION
					;ALL DONE

					;SUBROUTINE FOR FPWR, ATN
PSHNEG:	LXI	H,NEG			;GET THE ADDRESS OF NEG
	XTHL				;SWITCH RET ADDR AND ADDR OF NEG
	PCHL				;RETURN, THE ADDRESS OF NEG IS ON THE STACK

					;SQUARE ROOT FUNCTION
					;WE USE SQR(X)=X^.5
SQR:	CALL	PUSHF			;SAVE ARG X
	LXI	H,FHALF			;GET 1/2
	CALL	MOVFM			;SQR(X)=X^.5

	JMP	FPWRT			;SKIP OVER THE NEXT 3 BYTES
					;ENTRY FROM THE OPERATOR DISPATCH ROUTINES
	PUBLIC	FPWRQ
FPWRQ:	CALL	FRCSNG			;MAKE SURE THE FAC IS A SNG
FPWRT:	POP	B
	POP	D
					;GET ARG IN REGISTERS, ENTRY TO FPWR IF
					; ARGUMENT IS ON STACK.  FALL INTO FPWR


					;EXPONENTIATION    ---    X^Y
					;N.B.  0^0=1
					;FIRST WE CHECK IF Y=0, IF SO, THE RESULT IS 1.
					;NEXT, WE CHECK IF X=0, IF SO, THE RESULT IS 0.
					;THEN WE CHECK IF X IS POSITIVE, IF NOT, WE CHECK THAT Y IS A
					;NEGATIVE INTEGER, AND WHETHER IT IS EVEN OR ODD.  IF Y IS A NEGATIVE
					;INTEGER, WE NEGATE X.  IF NOT, LOG WILL GIVE AN FC ERROR WHEN WE CALL
					;IT.  IF X IS NEGATIVE AND Y IS ODD, WE PUSH THE ADDRESS OF NEG ON THE
					;STACK SO WE WILL RETURN TO IT AND GET A NEGATIVE RESULT.  TO COMPUTE
					;THE RESULT WE USE X^Y=EXP(Y*LOG(X))
FPWR:
	EXTRN	CLROVC
	LXI	H,CLROVC		;RETURN TO ROUTINE TO SET NORMAL
	PUSH	H			;OVERFLOW MODE
	MVI	A,1
	STA	FLGOVC			;SET UP ONCE ONLY OVERFLOW MODE
	CALL	SIGN			;SEE IF Y IS ZERO
	MOV	A,B			;SEE IF X IS ZERO
	JZ	EXP			;IT IS, RESULT IS ONE
	JP	POSEXP			;POSITIVE EXPONENT
	ORA	A			;IS IT ZERO TO MINUS POWER?
	JZ	INTDV2			;GIVE DIV BY ZERO AND CONTINUE
POSEXP:	ORA	A
	JZ	ZERO0			;IT IS, RESULT IS ZERO
	PUSH	D
	PUSH	B
					;SAVE X ON STACK
	MOV	A,C			;CHECK THE SIGN OF X
	ORI	177O			;TURN THE ZERO FLAG OFF
	CALL	MOVRF			;GET Y IN THE REGISTERS
					;END INTFSW CONTITTONAL
	JP	FPWR1			;NO PROBLEMS IF X IS POSITIVE
	PUSH	D
	PUSH	B
					;SAVE Y
	CALL	INT			;SEE IF Y IS AN INTEGER
	POP	B
	POP	D
					;GET Y BACK
	PUSH	PSW			;SAVE LO OF INT FOR EVEN AND ODD INFORMATION
	CALL	FCOMP			;SEE IF WE HAVE AN INTEGER
	POP	H			;GET EVEN-ODD INFORMATION
	MOV	A,H			;PUT EVEN-ODD FLAG IN CARRY
	RAR	
FPWR1:	POP	H			;GET X BACK IN FAC
	SHLD	FAC-1			;STORE HO'S
	POP	H			;GET LO'S OFF STACK
	SHLD	FACLO			;STORE THEM IN FAC
	CC	PSHNEG			;NEGATE NUMBER AT END IF Y WAS ODD
	CZ	NEG			;NEGATE THE NEGATIVE NUMBER
	PUSH	D
	PUSH	B
					;SAVE Y AGAIN
	CALL	LOG			;COMPUTE  EXP(Y*LOG(X))
	POP	B
	POP	D
					;IF X WAS NEGATIVE AND Y NOT AN INTEGER THEN
	CALL	FMULT			; LOG WILL BLOW HIM OUT OF THE WATER
;	JMP	EXP
	PAGE
	SUBTTL	EXPONENTIAL FUNCTON
					;THE FUNCTION EXP(X) CALCULATES e^X WHERE e=2.718282
					;	THE TECHNIQUE USED IS TO EMPLOY A COUPLE
					;	OF FUNDAMENTAL IDENTITIES THAT ALLOWS US TO
					;	USE THE BASE 2 THROUGH THE DIFFICULT PORTIONS OF
					;	THE CALCULATION:
					;
					;		(1)e^X=2^y  WHERE y=X*LOG2(e) [LOG2(e) IS
					;						LOG BASE 2
					;						OF e ]
					;
					;		(2) 2^y=2^[ INT(y)+(y-INT(y)]
					;		(3) IF Ny=INT(y) THEN
					;		    2^(Ny+y-Ny)=[2^Ny]*[2^(y-Ny)]
					;
					;	NOW, SINCE 2^Ny IS EASY TO COMPUTE (AN EXPONENT
					;	CALCULATION WITH MANTISSA BITS OF ZERO) THE DIFFICULT
					;	PORTION IS TO COMPUTE 2^(Y-Ny) WHERE 0.LE.(Y-Ny).LT.1
					;	THIS IS ACCOMPLISHED WITH A POLYNOMIAL APPROXIMATION
					;	TO 2^Z WHERE 0.LE.Z.LT.1  . ONCE THIS IS COMPUTED WE
					;	HAVE TO EFFECT THE MULTIPLY BY 2^Ny .
EXP:	LXI	B,201Q*256+070Q
	LXI	D,252Q*256+073Q		;GET LOG2(e)
	CALL	FMULT			;y=FAC*LOG2(e)
	LDA	FAC			;MUST SEE IF TOO LARGE
	CPI	210O			;ABS .GT. 128?
	JNC	EXP100			;IF SO OVERFLOW
	CPI	150O			;IF TOO SMALL ANSWER IS 1
	JC	EXP200
	CALL	PUSHF			;SAVE y
	CALL	INT			;DETERMINE INTEGER POWER OF 2
	ADI	201O			;INTEGER WAS RETURNED IN A
					;BIAS IS 201 BECAUSE BINARY
					;POINT IS TO LEFT OF UNDERSTOOD 1
	POP	B
	POP	D			;RECALL y
	JZ	EXP110			;OVERFLOW
	PUSH	PSW			;SAVE EXPONENT
	CALL	FSUB			;FAC=y-INT(y)
	LXI	H,EXPBCN		;WILL USE HART 1302 POLY. EVAL NOW
	CALL	POLY			;COMPUTE 2^[y-INT(y)]
	POP	B			;INTEGER POWER OF 2 EXPONENT
	LXI	D,0+0
	MOV	C,D			;NOW HAVE FLOATING REPRESENTATION 
					;OF INT(y) IN (BCDE)
	JMP	FMULT			;MULTIPLY BY 2^[y-INT(y)] AND RETURN
EXP100:	CALL	PUSHF			;
EXP110:
	LDA	FAC-1			;IF NEG. THEN JUMP TO ZERO
	ORA	A
	JP	EXP115			;OVERFLOW IF PLUS
	POP	PSW			;NEED STACK RIGHT
	POP	PSW
	JMP	ZERO			;GO ZERO THE FAC
EXP115:	JMP	OVFIN6			;OVERFLOW
EXP200:	LXI	B,201Q*256+000Q
	LXI	D,000Q*256+000Q		;1.
	CALL	MOVFR
	RET	
;*************************************************************
;	Hart 1302 polynomial coefficients
;*************************************************************
EXPBCN:	DB	7			;DEGREE + 1
	DB	174O			;.00020745577403-
	DB	210O
	DB	131O
	DB	164O
	DB	340O			;.00127100574569-
	DB	227O
	DB	046O
	DB	167O
	DB	304O			;.00965065093202+
	DB	035O
	DB	036O
	DB	172O
	DB	136O			;.05549656508324+
	DB	120O
	DB	143O
	DB	174O
	DB	032O			;.24022713817633-
	DB	376O
	DB	165O
	DB	176O
	DB	030O			;.69314717213716+
	DB	162O
	DB	061O
	DB	200O
	DB	000			;1.0
	DB	0000
	DB	0000
	DB	201O
					;END INTFSW CONDITIONAL

	PAGE
	SUBTTL	POLYNOMIAL EVALUATOR AND THE RANDOM NUMBER GENERATOR
					;EVALUATE P(X^2)*X
					;POINTER TO DEGREE+1 IS IN (HL)
					;THE CONSTANTS FOLLOW THE DEGREE
					;CONSTANTS SHOULD BE STORED IN REVERSE ORDER, FAC HAS X
					;WE COMPUTE:
					; C0*X+C1*X^3+C2*X^5+C3*X^7+...+C(N)*X^(2*N+1)
POLYX:	CALL	PUSHF			;SAVE X
	LXI	D,FMULTT		;PUT ADDRESS OF FMULTT ON STACK SO WHEN WE
	PUSH	D			; RETURN WE WILL MULTIPLY BY X
POLYX2:	PUSH	H			;SAVE CONSTANT POINTER
	CALL	MOVRF			;SQUARE X
	CALL	FMULT
	POP	H			;GET CONSTANT POINTER
					;FALL INTO POLY


					;POLYNOMIAL EVALUATOR
					;POINTER TO DEGREE+1 IS IN (HL), IT IS UPDATED
					;THE CONSTANTS FOLLOW THE DEGREE
					;CONSTANTS SHOULD BE STORED IN REVERSE ORDER, FAC HAS X
					;WE COMPUTE:
					; C0+C1*X+C2*X^2+C3*X^3+...+C(N-1)*X^(N-1)+C(N)*X^N
POLY:	CALL	PUSHF			;SAVE X
	MOV	A,M			;GET DEGREE
	INX	H			;INCREMENT POINTER TO FIRST CONSTANT
	CALL	MOVFM			;MOVE FIRST CONSTANT TO FAC
	DB	006			;"MVI	B" OVER NEXT BYTE
POLY1:	POP	PSW			;GET DEGREE
	POP	B
	POP	D
					;GET X
	DCR	A			;ARE WE DONE?
	RZ				;YES, RETURN
	PUSH	D
	PUSH	B
					;NO, SAVE X
	PUSH	PSW			;SAVE DEGREE
	PUSH	H			;SAVE CONSTANT POINTER
	CALL	FMULT			;EVALUATE THE POLY, MULTIPLY BY X
	POP	H			;GET LOCATION OF CONSTANTS
	CALL	MOVRM			;GET CONSTANT
	PUSH	H			;STORE LOCATION OF CONSTANTS SO FADD AND FMULT
	CALL	FADD			; WILL NOT SCREW THEM UP, ADD IN CONSTANT
	POP	H			;MOVE CONSTANT POINTER TO NEXT CONSTANT
	JMP	POLY1			;SEE IF DONE


					;PSUEDO-RANDOM NUMBER GENERATOR
					;IF ARG=0, THE LAST RANDOM NUMBER GENERATED IS RETURNED
					;IF ARG .LT. 0, A NEW SEQUENCE OF RANDOM NUMBERS IS STARTED
					; USING THE ARGUMENT
					;TO FORM THE NEXT RANDOM NUMBER IN THE SEQUENCE, WE MULTIPLY THE
					;PREVIOUS RANDOM NUMBER BY A RANDOM CONSTANT, AND ADD IN ANOTHER
					;RANDOM CONSTANT.  THEN THE HO AND LO BYTES ARE SWITCHED, THE
					;EXPONENT IS PUT WHERE IT WILL BE SHIFTED IN BY NORMAL, AND THE
					;EXPONENT IN THE FAC SET TO 200 SO THE RESULT WILL BE LESS THAN 1.
					;THIS IS THEN NORMALIZED AND SAVED FOR THE NEXT TIME.
					;THE HO AND LO BYTES WERE SWITCHED SO WE HAVE A RANDOM CHANCE OF
					;GETTING A NUMBER LESS THAN OR GREATER THAN .5
	PUBLIC	RNDCOP
RNDCOP:	DB	122O			;A COPY OF RNDX TO COPY AT RUN TIME
	DB	307O
	DB	117O
	DB	200O
	PUBLIC	RNDMON
RNDMON:	CALL	CHRGTR
	PUBLIC	RNDMN2
RNDMN2:	PUSH	H			;SAVE TEXT POINTER FOR MONADIC RND
	LXI	H,FONE			;PRETEND ARG IS 1.0
	CALL	MOVFM
	CALL	RND			;PICK UP A RANDOM VALUE
	POP	H			;GET BACK THE TEXT POINTER
	JMP	VALSNG
RND:	CALL	SIGN			;GET SIGN OF ARG
	LXI	H,RNDCNT+1
	JM	RNDSTR			;START NEW SEQUENCE IF NEGATIVE
	LXI	H,RNDX			;GET LAST NUMBER GENERATED
	CALL	MOVFM
	LXI	H,RNDCNT+1
	RZ				;RETURN LAST NUMBER GENERATED IF ZERO
	ADD	M			;GET COUNTER INTO CONSTANTS
					;AND ADD ONE
	ANI	7
	MVI	B,0
	MOV	M,A
	INX	H
	ADD	A
	ADD	A
	MOV	C,A
	DAD	B
	CALL	MOVRM
	CALL	FMULT
	LDA	RNDCNT
	INR	A
	ANI	3
	MVI	B,0
	CPI	1
	ADC	B
	STA	RNDCNT
	LXI	H,RNDTB2-4
	ADD	A
	ADD	A
	MOV	C,A
	DAD	B
	CALL	FADDS
RND1:	CALL	MOVRF			;SWITCH HO AND LO BYTES,
	MOV	A,E			;GET LO
	MOV	E,C			;PUT HO IN LO BYTE
	XRI	117O
	MOV	C,A			;PUT LO IN HO BYTE
	MVI	M,200O			;MAKE RESULT POSITIVE
	DCX	H			;GET POINTER TO EXPONENT
	MOV	B,M			;PUT EXPONENT IN OVERFLOW POSITION
	MVI	M,200O			;SET EXP SO RESULT WILL BE BETWEEN 0 AND 1
	LXI	H,RNDCNT-1
	INR	M			;INCREMENT THE PERTUBATION COUNT
	MOV	A,M			;SEE IF ITS TIME
	SUI	253O
	JNZ	NTPTRB
	MOV	M,A			;ZERO THE COUNTER
	INR	C
	DCR	D
	INR	E
NTPTRB:	CALL	NORMAL			;NORMALIZE THE RESULT
	LXI	H,RNDX			;SAVE RANDOM NUMBER GENERATED FOR NEXT
	JMP	MOVMF			; TIME
RNDSTR:	MOV	M,A			;ZERO THE COUNTERS
	DCX	H
	MOV	M,A
	DCX	H
	MOV	M,A
	JMP	RND1

					;STORAGE FOR RND
	DB	0
	PUBLIC	RNDCNT
RNDCNT:	DB	0
	DB	0
RNDTAB:	DB	65O
	DB	112O
	DB	312O
	DB	231O
	DB	71O
	DB	34O
	DB	166O
	DB	230O
	DB	42O
	DB	225O
	DB	263O
	DB	230O
	DB	12O
	DB	335O
	DB	107O
	DB	230O
	DB	123O
	DB	321O
	DB	231O
	DB	231O
	DB	012O
	DB	032O
	DB	237O
	DB	230O
	DB	145O
	DB	274O
	DB	315O
	DB	230O
	DB	326O
	DB	167O
	DB	076O
	DB	230O
	PUBLIC	RNDX
RNDX:	DB	122O			;LAST RANDOM NUMBER GENERATED, BETWEEN 0 AND 1
	DB	307O
	DB	117O
	DB	200O
RNDTB2:	DB	150O
	DB	261O
	DB	106O
	DB	150O
	DB	231O
	DB	351O
	DB	222O
	DB	151O
	DB	020O
	DB	321O
	DB	165O
	DB	150O
	PAGE
	SUBTTL	SINE, COSINE AND TANGENT FUNCTIONS
					;COSINE FUNCTION
					;IDEA:  USE COS(X)=SIN(X+PI/2)
BOBTST	SET	0
COS:	LXI	H,PI2			;ADD PI/2 TO FAC
	CALL	FADDS
					;END INTFSW
					;FALL INTO SIN


					;SINE FUNCTION
					;IDEA: USE IDENTITIES TO GET FAC IN QUADRANTS I OR IV
					;THE FAC IS DIVIDED BY 2*PI AND THE INTEGER PART IS IGNORED BECAUSE
					;SIN(X+2*PI)=SIN(X).  THEN THE ARGUMENT CAN BE COMPARED WITH PI/2 BY
					;COMPARING THE RESULT OF THE DIVISION WITH PI/2/(2*PI)=1/4.
					;IDENTITIES ARE THEN USED TO GET THE RESULT IN QUADRANTS I OR IV.
					;AN APPROXIMATION POLYNOMIAL IS THEN USED TO COMPUTE SIN(X).
SIN:
	LDA	FAC			;WILL SEE IF .LT.2^-10
					;AND IF SO SIN(X)=X
	CPI	167O			;
	RC	
					;SIN BY HART #3341
	LXI	B,176Q*256+042Q
	LXI	D,371Q*256+203Q		;WILL CALCULATE X=FAC/(2*PI)
	CALL	FMULT
	CALL	PUSHF			;SAVE X
	CALL	INT			;FAC=INT(X)
	POP	B
	POP	D
					;FETCH X TO REGISTERS
	CALL	FSUB			;FAC=X-INT(X)
	LXI	B,177Q*256+000Q
	LXI	D,000Q*256+000Q		;GET 1/4
	CALL	FCOMP			;FAC=FAC-1/4
	JM	SIN2A
	LXI	B,177Q*256+200Q
	LXI	D,000Q*256+000Q		;-1/4
	CALL	FADD			;
	LXI	B,200Q*256+200Q
	LXI	D,000Q*256+000Q		;-1/2
	CALL	FADD			;X=X-1/2
	CALL	SIGN
	CP	NEG			;MAKE SURE IF QUADRANTS II,IV
					;WE WORK WITH 1/4-X
SIN2:	LXI	B,177Q*256+000Q
	LXI	D,000Q*256+000Q		;1/4
	CALL	FADD			;
	CALL	NEG			;
SIN2A:	LDA	FAC-1			;MUST REDUCE TO [0,1/4]
	ORA	A			;SIGN IN PSW
	PUSH	PSW			;SAVE FOR POSSIBLE NEG. AFTER CALC
	JP	SIN3
	XRI	200O			;
	STA	FAC-1			;NOW IN [0,1/4]
SIN3:	LXI	H,SINCON		;POINT TO HART COEFFICIENTS
	CALL	POLYX			;DO POLY EVAL
	POP	PSW			;NOW TO DO SIGN
	RP				;OK IF POS
	LDA	FAC-1			;FETCH SIGN BYTE
	XRI	200O			;MAKE NEG
	STA	FAC-1			;REPLACE SIGN
	RET	
					;END OF INTFSW COND

					;CONSTANTS FOR SIN, COS
P1B2PI:	DB	000			;1/(2*PI)
	DB	000
	DB	000
	DB	000
	DB	203O
	DB	371O
	DB	042O
	DB	176O
PI2:	DB	333O			; PI/2
	DB	017O
	DB	111O
	DB	201O
FR4:	DB	000			; 1/4
	DB	000
	DB	000
	DB	177O
SINCON:					;HART ALGORITHM 3341 CONSTANTS
;NOTE THAT HART CONSTANTS HAVE BEEN SCALED BY A POWER OF 2
;THIS IS DUE TO RANGE REDUCTION AS A % OF 2*PI RATHER THAN PI/2
;WOULD NEED TO MULTIPLY ARGUMENT BY 4 BUT INSTEAD WE FACTOR THIS
;THRU THE CONSTANTS.
	DB	5			;DEGREE
	DB	373O			; .1514851E-3
	DB	327O
	DB	036O
	DB	206O
	DB	145O			; -.4673767E-2
	DB	046O
	DB	231O
	DB	207O
	DB	130O			; .7968968E-1
	DB	064O
	DB	043O
	DB	207O
	DB	341O			; -.6459637
	DB	135O
	DB	245O
	DB	206O
	DB	333O			; 1.570796
	DB	017O
	DB	111O
	DB	203O

					;TANGENT FUNCTION
					;TAN(X)=SIN(X)/COS(X)
TAN:	CALL	PUSHF			;SAVE ARG
	CALL	SIN			;   TAN(X)=SIN(X)/COS(X)
	POP	B			;GET X OFF STACK
	POP	H			;PUSHF SMASHES (DE)
	CALL	PUSHF
	XCHG				;GET LO'S WHERE THEY BELONG
	CALL	MOVFR
	CALL	COS
	JMP	FDIVT

	PAGE
	SUBTTL	ARCTANGENT FUNCTION
					;IDEA: USE IDENTITIES TO GET ARG BETWEEN 0 AND 1 AND THEN USE AN
					;APPROXIMATION POLYNOMIAL TO COMPUTE ARCTAN(X)
ATN:	CALL	SIGN			;SEE IF ARG IS NEGATIVE
	CM	PSHNEG			;IF ARG IS NEGATIVE, USE:
	CM	NEG			;   ARCTAN(X)=-ARCTAN(-X)
	LDA	FAC			;SEE IF FAC .GT. 1
	CPI	201O
	JC	ATN2
	LXI	B,201O*400O+0		;GET THE CONSTANT 1
	MOV	D,C
	MOV	E,C			;COMPUTE RECIPROCAL TO USE THE IDENTITY:
	CALL	FDIV			;  ARCTAN(X)=PI/2-ARCTAN(1/X)
	LXI	H,FSUBS			;PUT FSUBS ON THE STACK SO WE WILL RETURN
	PUSH	H			; TO IT AND SUBTRACT THE REULT FROM PI/2
ATN2:	LXI	H,ATNCON		;EVALUATE APPROXIMATION POLYNOMIAL
	CALL	POLYX
	LXI	H,PI2			;GET POINTER TO PI/2 IN CASE WE HAVE TO
	RET				; SUBTRACT THE RESULT FROM PI/2

					;CONSTANTS FOR ATN
ATNCON:	DB	11O			;DEGREE
	DB	112O			; .002866226
	DB	327O
	DB	073O
	DB	170O
	DB	002			; -.01616574
	DB	156O
	DB	204O
	DB	173O
	DB	376O			; .04290961
	DB	301O
	DB	057O
	DB	174O
	DB	164O			; -.07528964
	DB	061O
	DB	232O
	DB	175O
	DB	204O			; .1065626
	DB	075O
	DB	132O
	DB	175O
	DB	310O			; -.142089
	DB	177O
	DB	221O
	DB	176O
	DB	344O			; .1999355
	DB	273O
	DB	114O
	DB	176O
	DB	154O			; -.3333315
	DB	252O
	DB	252O
	DB	177O
	DB	000			; 1.0
	DB	000
	DB	000
	DB	201O

	END	
                                                    