{ S P R I T E S . G I C             V 1.2            29-DEZ-1987 }
{----------------------------------------------------------------}

{ Dieser Include-File enthÑlt alle Sprite-Routinen.              }




type
  Sprite8  = string[8];    { kleine Sprite-Definition }
  Sprite16 = string[16];   { fÅr Color-String         }
  Sprite32 = string[32];   { gro·e  Sprite-Definition }




{ Definieren eines Spritemusters -- SPRITE$(n) = pattern  }

procedure DefSprite (n: byte; pattern: Sprite32);

  var
    size:   byte;
    length: byte absolute pattern;

  begin
    inline ($DD/$21/$8A/$00/   { LD   IX, GSPSIZ }
            $CD/_CALROM/       { CALL _CALROM    }
            $32/size);         { LD   (size), A  }
    if length < size
    then fillchar(pattern[succ(length)], size-length, #0);
    writeVRAM (PATBAS + size * n, pattern[1], size);
  end;




{ Setzen eines Sprites auf den Bildschirm --  PUT SPRITE plane, (x,y)  }

procedure PutSprite (plane, x, y: integer);

  var
    SpriteColor:  array[1..16] of byte;
    SpriteRecord: record
                    sy, sx, sp, col: byte;
                  end;
    base, i:      integer;
    size:         byte;

  begin
    inline ($DD/$21/$8A/$00/   { LD   IX, GSPSIZ }
            $CD/_CALROM/       { CALL _CALROM    }
            $32/size);         { LD   (size), A  }

    base := ATRBAS + (plane shl 2);

    readVRAM (base+2, SpriteRecord.sp, 2);

    if (x < -32) or (y < -32) or (x > 255) or (y > 216)
    then vpoke (base, 212)
    else begin
      if x < 0
      then begin
        SpriteRecord.sx  := x + 32;
        SpriteRecord.col := SpriteRecord.col or $80;
        end
      else begin
        SpriteRecord.sx  := x;
        SpriteRecord.col := SpriteRecord.col and $7F;
        end;

      SpriteRecord.sy := y;

      if SCRMOD < 4
      then writeVRAM (base, SpriteRecord, 4)
      else begin
         writeVRAM (base, SpriteRecord, 2);
         base := ATRBAS-512 + (plane shl 4);
         if (vpeek(base) xor SpriteRecord.col) > 127
         then begin
           readVRAM (base, SpriteColor, 16);
           if x < 0
           then for i := 1 to size do
             SpriteColor[i] := SpriteColor[i] or $80
           else for i := 1 to size do
             SpriteColor[i] := SpriteColor[i] and $7F;
           writeVRAM (base, SpriteColor, 16);
           end;
         end;
      end;
  end;



{ Setzen des Sprite-Patterns  --  PUT SPRITE n,,,pattern }

procedure SpritePattern (n, pattern: byte);

  begin
    if (GetVDP(1) and 3) > 1
    then vpoke (ATRBAS + (n shl 2) + 2, pattern shl 2)
    else vpoke (ATRBAS + (n shl 2) + 2, pattern);
  end;



{ Setzen der Sprite-Farbe   --   COLOR SPRITE(n) = color }

procedure SpriteColor (n, color: byte);

  var
    base:      integer;

  begin
    if SCRMOD < 4
    then begin
      base := ATRBAS + (n shl 2) + 3;
      vpoke (base, (vpeek(base) and $80) + color);
      end
    else begin
      base := ATRBAS-512 + (n shl 4);
      fillVRAM (base, 16, (vpeek(base) and $80) + color);
      end;
  end;



{ Definieren eines Sprite-Farbmusters  --  COLOR SPRITE$(n) = colors }

procedure SpriteColors (n: byte; colors: Sprite16);

  var
    length: byte absolute colors;

  begin
    if length < 16
    then fillchar(colors[succ(length)], 16-length, FORCLR);
    writeVRAM (ATRBAS-512 + (n shl 4), colors[1], 16);
  end;




{ SetSpriteSize: Spritegrî·e festlegen (zweiter Parameter im SCREEN-Befehl) }
{                Im Gegensatz zu BASIC ist ein Umschalten der Spritegrî·e   }
{                mîglich, ohne die Sprites zu lîschen. Aber: Beim öbergang  }
{                von 8*8 auf 16*16 verschiebt sich die Pattern-Tabelle!     }

procedure SetSpriteSize (n: byte);

  var i: integer;

  begin
    i := GetVDP(1);
    SetVDP (1, (i and $FC) + (n and 3));
    if (i and 2) <> (n and 2)
    then for i := 0 to 31 do
      SpritePattern (i, i);
  end;




