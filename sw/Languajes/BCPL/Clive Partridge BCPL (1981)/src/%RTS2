	NAME RTS2
 
* External globals in BCPL.
 
	GLOBAL XRET
	GLOBAL NEXT
 
* Internal globals.
 
	GLOBAL CLOSE
	GLOBAL FIELD
	GLOBAL ZERO
	GLOBAL NEXTCH

* Some locations.
 
	GLOBAL INCON
	GLOBAL OUTCON
	GLOBAL IOAREA
	GLOBAL IOTAB
 
* Offsets from IY.
 
DYNP	EQU 0
STACKP	EQU 4
 
* Y-CODES

DPUSH	EQU 38H

* CPM location.
 
BDOS	EQU 5
 
* Disc parameters.
 
NOBUFF	EQU 8
BUFFSIZ	EQU 128+38+6	;n.b. 6 extra bytes for random files
 
* Offsets in discio blocks.

CREC	EQU 32
COUNT	EQU 36		;position of byte count
INOUT	EQU 37
SOUGHT  EQU 38
BIN 	EQU 39
RSEC    EQU 40
RBYT	EQU 41
RW	EQU 42
FLAG	EQU 43
DMA	EQU 38+6	;offset of buffer
 
BASE:	DEFW GLOBS-$
 
* Console buffer.
 
CBUFF:	DEFB 80H
	DEFB 0
	DEFS 80
UNFLG:	DEFB 0
UNCHR:	DEFS 1

UNRDCH:	DEFW 2
	DEFB 0
	LD A,0FFH
	LD (UNFLG),A
	JP XRET

* additional routines G Crosse 1984
* setflag()  key()  bdos(C,DE) bdosHL(C,DE)  upcase(str)

FLAGS:  DEFB	0,0,0,0,0,0,0,0,0,0   ; 10 flags  0..9

* setflag(f,n) f=0..9   n = 1 (query only) n=0 set false, n=-1 set true

SETFLAG:
	DEFW	4
	DEFB	DPUSH,2,DPUSH,3
	DEFB	0
	POP	DE
	LD	A,L         
	LD	HL,FLAGS
	ADD	HL,DE
	CP      1		; just a query?
	JR	Z,FLGRET
	LD	(HL),A		; change value
FLGRET: 
	LD      L,(HL)        	; return contents
	LD	H,0
	JP	XRET

; key() return a kbd char, with no wait

KEY:    DEFW 2
	DEFB 0
	PUSH HL
	LD   DE, 0FFH
	LD   C,6
	CALL BDOS
	LD   L,A
	LD   H,0
	JP   XRET

; bdos  - return value of A

CPM1:	DEFW 4
	DEFB 38H,2,38H,3
	DEFB 0
	POP  DE
	LD   C,E
	EX   DE,HL
	CALL BDOS
	LD   L,A
	LD   H,0
	JP   XRET	

; bdosHL - return value of HL

CPM2:	DEFW 4
	DEFB 38H,2,38H,3
	DEFB 0
        POP  DE
	LD   C,E
	EX   DE,HL
	CALL BDOS
	JP   XRET

; upcase(string)  - make the string uppercase, and return BCPL addr of it.

UCASE:  DEFW 3
	DEFB 38H,2
	DEFB 0
	PUSH HL
	ADD  HL,HL
	LD   A,(HL)
	AND  A,
	JR   Z,UCRET
	LD   B,A
	INC  HL
UC1:	LD   A,(HL)
	CALL UPCSE
	LD   (HL),A
	INC  HL
	DJNZ UC1
UCRET:	POP  HL
	JP   XRET

; patch rdch() to cope with binary files  g.r.c.
; patch rdch() to keep a copy of count in byte field, in case EOF
; patch rdch() to update sect field if a new sector read in.

RDCH:	DEFW 2
	DEFB 0
	PUSH HL
	LD A,(UNFLG)
	INC A
	JP Z LRD9
	LD HL,(INCON)
	INC H
	DEC H
	JR NZ LRD3
	DEC L
	JR NZ LRD1
	LD HL,CBUFF
	LD A,(HL)
	OR A
	JP P CINP1
	PUSH HL
	LD (HL),80
	EX DE,HL
	LD C,10
	CALL BDOS
	LD E,0AH
	LD C,2
	CALL BDOS	;Output LF
	POP HL
	XOR A
	LD (HL),A
CINP1:	INC HL
	CP (HL)
	DEC HL
	JR Z CINP2
	INC (HL)
	INC A
	INC A
	LD E,A
	LD D,0
	ADD HL,DE
	LD A,(HL)
	JR LRD2
 
CINP2:	OR A
	LD (HL),80H
	LD A,0DH
	JR LRD2
 
LRD1:	LD C,3
	CALL BDOS
	JR LRD2
 
LRD3:	PUSH HL
	POP IX
	CALL CHKEOF
DINP2:
;patch - save count twice, to recover after eof. improve!
	LD A,(IX+RBYT)
	INC A
	AND 7FH
	LD (IX+RBYT),A

	LD A,(IX+COUNT)
	INC A
	AND 7FH
	LD (IX+COUNT),A

	JR NZ DINP1	;if byte count incremented to 0, read in new sector.

	PUSH AF
	PUSH HL
	LD BC,DMA
	ADD HL,BC
	EX DE,HL
	LD C,26			;set dma
	CALL BDOS
	POP DE
	LD C,20			;read sequential (increments cr)
      	CALL BDOS
	OR A
	JP NZ ERR1		;if run out of data
	INC (IX+RSEC)		;bump pointer for seek
       	POP AF			; else get back last char posn
;patch
	LD (IX+RW),0		; and flag a read ahead.
;endpatch

DINP1:	ADD A,DMA
	LD C,A
	LD B,0
	PUSH IX
	POP HL
	PUSH HL
	ADD HL,BC
	LD A,(HL)		;get char
	POP HL
;patch
	BIT 0,(IX+BIN)		;binary file?
	JR NZ,LRD2		;if so, ^Z is not eof & LF is just 10
;endpatch

	CP 1AH 			; for ascii files check eof 
	JR Z ERR2
	CP 10			; linefeed, ignore & get next char   
	JR Z DINP2
LRD2:	LD L,A
	LD H,0
	LD (UNCHR),A
	JP XRET
 
LRD9:	LD (UNFLG),A
	LD A,(UNCHR)
	JR LRD2

 
CHKEOF:	LD B,(IX+COUNT) ; counter is 255 if eof at last read.
	INC B
	RET NZ
ERR1:	POP HL
ERR2:	LD HL,-1
	LD (IX+COUNT),L
	JP XRET

; wrch() also patched for binary files. If a file has been opened for      
; random access then the DOUT routine is replaced by WRAND. To use the
; binary file option with old wrch() set mem%(f+f.bin) to 1 - don't use
; fopen() which is only for random files.

WRCH:	DEFW 3
	DEFB 38H,2	;YDPSHDYN 2
	DEFB 0
	LD A,L
	LD HL,(OUTCON)
	INC H
	DEC H
	JR NZ LWR4
	DEC L
	JR NZ LWR1
	LD C,2
OUTL1:	LD E,A
	PUSH AF
	PUSH BC
	CALL BDOS
	POP BC
	POP AF
	CP 13		;if CR then also do a LF.
	LD A,10
	JR Z OUTL1
	JR LWR2
 
LWR1:	DEC L
	LD C,5
	JR NZ OUTL1
	LD E,A
	LD C,4
	CALL BDOS
	JR LWR2
 
* disk writes patched - select new routine for random file.

LWR4:	PUSH HL			;fcb addr
	POP IX
	CALL CHKEOF
	BIT 0,(IX+SOUGHT) 	;if random file
	JR Z,LWR5		;old routine if not
	BIT 0,(IX+INOUT)	;check not 'read only' file
	JP Z,XRET		;mustn't write to read-only file
	CALL WRAND		;new wrch() routine
	JP XRET

* old write

LWR5    CALL DOUT
LWR2:	JP XRET
 
DOUT:	PUSH AF
	LD D,A
	LD A,(IX+COUNT)
	PUSH AF
	ADD A,DMA
	LD C,A
	LD B,0
	PUSH HL
	ADD HL,BC
	LD (HL),D
	POP HL
	POP AF
	INC A
	AND 7FH
	LD (IX+COUNT),A
	JR NZ DOUT1	;loop if bytecount not 0
			; else write out buffer
	PUSH HL		;save fcb
	LD BC,DMA
	ADD HL,BC	;set buffer start
	EX DE,HL	;de = buffer
	LD C,26		;set dma
	CALL BDOS
	POP DE		;de = fcb
      	LD C,21		;write sequential
	CALL BDOS
	OR A
	JP NZ ERR1	;if run out of disc

DOUT1:	POP AF		;get back last char 
	PUSH IX		;and fcb
	POP HL
;patch
       	BIT 0,(IX+BIN)	;if binary don't convert eoln
	RET NZ     
;endpatch

	CP 13		;If CR put in LF
	LD A,10
	JR Z DOUT
	RET

*  WRAND - replacement for wrch() when writing to random files.
*  This treats the buffer-counter just like rdch()
*  IX+COUNT must be set to 127 on open by FOPEN()

WRAND:	PUSH AF		;save char
	LD A,(IX+RBYT)	;bump both counters
	INC A
	AND 7FH
	LD (IX+RBYT),A
	LD A,(IX+COUNT)
	INC A  
	AND 7FH
	LD  (IX+COUNT),A
	JR NZ, WRAND1	
	BIT 1,(IX+INOUT);update mode?
	JR Z, WRAND1	;no - nothing to change
 	INC (IX+32)	;count is zero - bump cp/m cr field to next

* insert character in buffer.

WRAND1: 
	ADD A,DMA
	LD  C,A
	LD  B,0
	POP AF		; retrieve char
	PUSH IX		; get fcb
	POP  HL
	ADD HL,BC
	LD  (HL),A	; store char
	PUSH AF		; save char
	LD  A,(IX+COUNT); get back count
	CP  127
	JR  NZ, WRAND2	; not at last byte

*  If that was last byte of record then write out the buffer, check
*  whether in update mode and read in next if so.

 	LD  A,(IX+RSEC) ; set current record to current buffer
 	LD  (IX+32),A
	CALL WROUT	; and write it out
	INC (IX+RSEC)   ; new buffer
	BIT 1,(IX+INOUT); 'update' file?
	JR  NZ, UPDTE	; yes - read in next
	JR  WRAND2	; no - carry on

UPDTE:	CALL NEXTREC 
 	LD  (IX+RW),1	; flag the write
	DEC (IX+32)	; keep old cr field until next byte

WRAND2:	POP AF		; get back char
	BIT 0,(IX+BIN)	; all done if a binary file
	RET NZ
	CP  13		; ascii file - check carriage return
	LD  A,10	; add linefeed
	JR  Z,WRAND
	RET

* write out current buffer

WROUT:	PUSH IX
	POP  HL
 	PUSH HL		;save fcb
	LD BC,DMA
	ADD HL,BC
	EX DE,HL
	LD C,26		;set dma
	CALL BDOS
	POP DE		;fcb
 	LD C,21		;write sequential
	CALL BDOS
	OR A
	RET Z    	;no error - continue

	POP HL		;clear return addr
	POP AF		;clear char from stack
	JP  ERR1        ;which clears orig return addr
	
* routine to read in next record during a write. grc - used in seek()

NEXTREC:PUSH IX
	POP HL
	PUSH HL		;save fcb
	LD BC,DMA	; read in next record
	ADD HL,BC	;point to buffer
	EX DE,HL        ;de=buff
	LD C,26		;set dma
	CALL BDOS
	POP DE		;get fcb back
	PUSH DE		;save it
	LD C,20		;read sequential
	CALL BDOS
	POP HL		;fcb again
	OR  A
	RET Z		;read ok - finish

        LD  DE,DMA	;else
	ADD HL,DE       ;point to buffer
	LD  B,128	;and erase it.
	LD  A,1AH	;with ^Z
NEXTR2: LD  (HL),A
	INC HL
	DJNZ NEXTR2
	RET
* end of new write routine.


FINDIN:	DEFW 3
	DEFB 38H,2	;YDPSHDYN 2
	DEFB 0
	CALL FIND
	LD A,H
	OR A
	JP Z XRET
	CALL ZERO
	LD (IX+INOUT),0
	LD C,15
	LD A,127
DOPN1:	LD (IX+COUNT),A	;Set byte count field
	PUSH IX
	POP DE
	CALL BDOS
	INC A
	LD HL,0
	JP Z XRET
	PUSH IX
	POP HL
	JP XRET
 
FINDOUT:DEFW 3
	DEFB 38H,2	;YDPSHDYN 2
	DEFB 0
	PUSH HL
	CALL FIND
	LD A,H
	OR A
	JP Z XRET
	PUSH IX
	POP DE
	LD C,19
	CALL BDOS
	CALL ZERO
	LD (IX+INOUT),1
	LD C,22
	XOR A
	JR DOPN1
 
ZERO:	XOR A
	LD (IX+32),A	;Clear cr field
	LD (IX+14),A	;Clear s2 field
	LD (IX+12),A	;Clear ex field

; extra fields in fcb for random and binary files 
; rbyt (41) is set in fopen() for new wrch()

	LD (IX+33),A    ;Clear all random fields
	LD (IX+34),A
	LD (IX+35),A
	LD (IX+38),A    ;No seek yet
	LD (IX+39),A    ;Assume ascii file
	LD (IX+40),A    ;Clear rsect   (for seek)
	LD (IX+41),127  ;set rbyt (for seek)
	LD (IX+42),A	;zero read/write flag
	LD (IX+43),A    ;zero spare flag
	RET
 
ENDWRIT:DEFW 2
	DEFB 0
	PUSH HL
	LD HL,(OUTCON)
	JR CLOS
 
ENDREAD:DEFW 2
	DEFB 0
	PUSH HL
	LD HL,(INCON)
CLOS:	CALL CLOSE
	JP XRET

; patch close for binary files - no ^Z
 
CLOSE:	LD A,H
	OR A
	RET Z		;not a disk-file
	PUSH HL
	POP IX
	DEC (IX+INOUT)  ;0 is read, 1 is write
;patch
        JR Z,WREOF	;but update is 2,if set.
	DEC (IX+INOUT)
;endpatch
	JR NZ LCLOS3
WREOF:	LD A,(IX+COUNT)
	OR A
	JR Z LCLOS9
;patch
	LD A,(IX+BIN)
        OR A
        JR Z,NOTBIN
	XOR A
	LD (IX+COUNT),127
	CALL DOUT
	JR LCLOS9
;endpatch
NOTBIN: LD A,1AH
 	CALL DOUT
	LD (IX+COUNT),127
    	LD A,1AH
	CALL DOUT	;Ensures record is output
LCLOS9:	PUSH IX
	POP DE
	LD C,16
	CALL BDOS
LCLOS3:	PUSH IX
	POP DE
	LD HL,IOTAB
	LD B,NOBUFF
LCLOS1:	LD A,(HL)
	SUB E
	INC HL
	JR NZ LCLOS2
	LD A,(HL)
	SUB D
	JR NZ LCLOS2
	DEC HL
	LD (HL),A
	INC HL
	LD (HL),A
LCLOS2:	INC HL
	DJNZ LCLOS1
	RET
	
FIND:	ADD HL,HL
	LD C,(HL)
	INC HL
	EX DE,HL
	LD HL,MNETAB
SCAN1:	CALL NEXTCH
	JR C LF3	;Error if empty string
	CP ' '
	JR Z SCAN1	;ignore leading spaces
	INC C
	DEC DE		; in input string
SCAN2:	PUSH DE		; save pointer
	PUSH BC
SCAN3:	CALL NEXTCH
	JR C SCAN4
	SUB (HL)
	AND 7FH
	JR NZ SCAN4
	BIT 7,(HL)
	INC HL
	JR Z SCAN3
	LD L,(HL)
	LD H,0
	POP DE
	POP DE
	RET
 
SCAN4:	POP BC
	POP DE
SCAN5:	BIT 7,(HL)
	INC HL
	JR Z SCAN5
	INC HL
	XOR A
	CP (HL)
	JR NZ SCAN2
	PUSH DE
	LD HL,IOTAB
	LD DE,IOAREA
	LD B,NOBUFF
LF1:	LD A,(HL)
	INC HL
	OR (HL)
	JR Z LF2
	INC HL
	PUSH HL
	LD HL,BUFFSIZ
	ADD HL,DE
	EX DE,HL
	POP HL
	DJNZ LF1
	POP DE
LF3:	LD HL,0
	RET
 
MNETAB:	DEFB 'C','O','N',':'+80H,1
	DEFB 'R','D','R',':'+80H,2
	DEFB 'P','U','N',':'+80H,2
	DEFB 'L','S','T',':'+80H,3
	DEFB 0
 
LF2:	LD (HL),D
	DEC HL
	LD (HL),E
	POP HL
	PUSH DE
	POP IX		;DE=IX=address of area
	EX DE,HL
	CALL NEXTCH
	SUB 'A'-1	;A=1 etc.
	LD (HL),A	;assume as drive name
	INC HL
	CALL NEXTCH
	JR C DOPL2	;one char filename
	CP ':'
	JR Z DOPL3
	INC C
	DEC DE
DOPL2:	DEC DE		;wrong assumption
	INC C		;move back
	LD (IX+0),0	;zero drive field
DOPL3:	CALL NEXTCH
	JR C LF3
	LD (HL),A
	INC HL
	LD A,7
	CALL FIELD
	CP ' '
	JR NZ DOPL7
	INC C
	DEC DE		;Move back to space
DOPL7:	LD A,3
	CALL FIELD
	CP '.'
	JR Z LF3
	PUSH IX
	POP HL
	RET
 
NEXTCH:	LD A,C
	OR A
	SCF
	RET Z		;error if none left
	LD A,(DE)
	INC DE
	DEC C
UPCSE:	CP 'a'
	CCF
	RET NC
	CP 'z'+1
	RET NC
	SUB 'a'-'A'
	RET
 
FIELD:
 
* FIELD reads upto A successive characters into
* the area pointed to by HL from the string BCDE
* until a full stop or space. Excess characters
* are ignored and unfilled space is filled with
* spaces. On exit the terminating character is 
* in A, unless end of string which is signified
* by carry set on exit.
* In all cases HL is moved past the area in question.
 
	PUSH HL
	LD L,A
FIEL2:	CALL NEXTCH
	JR C FIEL1
	CP '.'
	JR Z FIEL1
	CP ' '
	JR Z FIEL1
	EX (SP),HL
	LD (HL),A
	INC HL
	EX (SP),HL
	DEC L
	JR NZ FIEL2
	POP HL
FIEL3:	CALL NEXTCH
	RET C
	CP '.'
	RET Z
	CP ' '
	RET Z
	JR FIEL3
 
FIEL1:	EX (SP),HL
	LD (HL),' '
	INC HL
	EX (SP),HL
	DEC L
	JR NZ FIEL1
	POP HL
	RET
 
INP:	DEFW 2
	DEFB 0
	PUSH HL
	LD HL,(INCON)
	JP XRET
 
OUT:	DEFW 2
	DEFB 0
	PUSH HL
	LD HL,(OUTCON)
	JP XRET
 
SELECI:	DEFW 3
	DEFB 38H,2	;YDPSHDYN 2
	DEFB 0
	LD (INCON),HL
	JP XRET
 
SELECO:	DEFW 3
	DEFB 38H,2	;YDPSHDYN 2
	DEFB 0
	LD (OUTCON),HL
	JP XRET
 
* LEVEL delivers the address of the base of the
* current stack frame.
 
LEVEL:	DEFW 2
 
* YDPSHDYN 0,YRET
 
	DEFB 38H,0,4BH
 
* LONGJUMP(P,L) jumps to the label L at the level
* stack frame P. 
 
LONGJU:	DEFW 4
 
* YPSHDYN,0,YDPSHDYN,2,YDPSHDYN,3
 
	DEFB 34H,0,38H,2,38H,3
	DEFB 0
	LD B,L
	LD C,H
	POP IX
	POP HL
LLONG1:	LD E,(IY+STACKP)
	LD D,(IY+STACKP+1)
	EX DE,HL
	DEC HL
	LD A,(HL)
	DEC HL
	LD L,(HL)
	LD H,A
	LD SP,HL
	EX DE,HL
	ADD HL,HL
	LD (IY+STACKP),L
	LD (IY+STACKP+1),H
	LD D,(HL)
	INC HL
	LD E,(HL)
	PUSH IX
	POP HL
	SBC HL,DE
	EX DE,HL
	JR NZ LLONG1
	LD (IY+DYNP),L
	LD (IY+DYNP+1),H
	JP NEXT
 
* APTOVEC(F,N) is defined as: 
* 
* LET aptovec(F,N)=VALOF
*  $( LET v=VEC n
*     RESULTIS f(v,n)
*  $)
* 
* This is implemented here by incrementing the
* stack pointer to create the required vector.
 
APTOVEC:DEFW 4
	DEFB 38H,3	;YDPSHDYN 3
	DEFB 0
 
* HL=size of vector required-1.
 
	ADD HL,HL
	EX DE,HL
	LD H,(IY+STACKP+1)
	LD L,(IY+STACKP)
	DEC HL
	LD B,(HL)
	DEC HL
	LD C,(HL)
	ADD HL,DE
	LD (IY+STACKP),L
	LD (IY+STACKP+1),H
	DEC HL
	LD (HL),B
	DEC HL
	LD (HL),C
	LD BC,CONT
	JP NEXT
 
* The ycodes that follow are :
* YDPSHDYN3,2 to put in the function
* YFALSE to make way for the return address
* YPSHDYN3,2 is the address of the vector
* YDPSHDYN3,3 to supply the size of the vector.
* YFCALL2 to call the routine.
* YRET to return to caller of APTOVEC.
 
CONT:	DEFB 38H,2,27H,34H,2,38H,3,3EH,4BH
 
* Align on two-byte boundary.
 
	IF ($.AND.1)=1
	DEFB 0
	ENDIF
 
* The GLOBAL list for the module.
	DEFW  99,CPM2-BASE
	DEFW 100,CPM1-BASE
	DEFW 105,KEY-BASE
	DEFW 13,RDCH-BASE
	DEFW 14,WRCH-BASE
	DEFW 15,UNRDCH-BASE
	DEFW 11,SELECI-BASE
	DEFW 12,SELECO-BASE
	DEFW 16,INP-BASE
	DEFW 17,OUT-BASE
	DEFW 31,LEVEL-BASE
	DEFW 32,LONGJUMP-BASE
	DEFW 40,APTOVEC-BASE
	DEFW 41,FINDOU-BASE
	DEFW 42,FINDIN-BASE
	DEFW 148,UCASE-BASE
	DEFW 46,ENDREA-BASE
	DEFW 47,ENDWRI-BASE
	DEFW 117,SETFLAG-BASE
	DEFW 19
GLOBS:	DEFW 148
 
* This must be the last module as it has the
* end of modules marker at the end.
 
	DEFW 0
 
	END
